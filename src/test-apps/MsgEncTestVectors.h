/*
 *
 *    Copyright (c) 2018 Nest Labs, Inc.
 *    All rights reserved.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

/**
 *    @file
 *      Weave Message Encryption Test Vectors
 */

/*
 *    !!! WARNING !!! AUTO-GENERATED FILE !!! DO NOT EDIT !!!
 *
 *    This file has been generated by the gen-msg-enc-test-vectors.py script.
 */

struct MessageEncodingTestVector
{
    WeaveMessageInfo MsgInfo;
    const WeaveEncryptionKey * EncKey;
    const uint8_t * MsgPayload;
    uint16_t MsgPayloadLen;
    const uint8_t * ExpectedEncodedMsg;
    uint16_t ExpectedEncodedMsgLen;
};


static const uint8_t sMessageEncodingTest0000_Payload[] =
{
    0x8c, 0x05, 0x6e, 0x5f, 0x6b, 0x82, 0xdd, 0x51, 0x1e, 0x53, 0x86, 0xfd, 0xda, 0xe2, 0x8b, 0x8a,
};

static const uint8_t sMessageEncodingTest0000_ExpectedEncoding[] =
{
    0x00, 0x27, 0xc4, 0xae, 0x45, 0xfa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8c, 0x05, 0x6e, 0x5f, 0x6b, 0x82, 0xdd, 0x51, 0x1e, 0x53,
    0x86, 0xfd, 0xda, 0xe2, 0x8b, 0x8a,
};

static const MessageEncodingTestVector sMessageEncodingTest0000 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xFA45AEC4,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0000_Payload,
    sizeof(sMessageEncodingTest0000_Payload),
    sMessageEncodingTest0000_ExpectedEncoding,
    sizeof(sMessageEncodingTest0000_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0001_EncryptionKey =
{
    {
        0xb7, 0xe8, 0xd1, 0x88, 0xed, 0x39, 0x8f, 0x7d, 0x20, 0xa7, 0x66, 0xfb, 0x59, 0x25, 0xf7, 0x53,
    },
    {
        0x86, 0x42, 0xc3, 0x64, 0xea, 0xf3, 0x86, 0x22, 0xfb, 0xab, 0x3e, 0xe4, 0xdd, 0xfd, 0xdc, 0x37,
        0x8d, 0x04, 0xd9, 0x31,
    }
};
static const uint8_t sMessageEncodingTest0001_Payload[] =
{
    0x1f, 0x15, 0x2c, 0x95, 0x79, 0x51, 0xd8, 0x6b, 0xe7, 0x39, 0xab, 0xa3, 0x4a, 0x92, 0x05, 0x0f,
};

static const uint8_t sMessageEncodingTest0001_ExpectedEncoding[] =
{
    0x10, 0x27, 0xd2, 0x8f, 0xf5, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x85, 0x2b, 0x0d, 0x8d, 0x88, 0x41, 0x6a, 0x4c, 0x01, 0x9a,
    0xa9, 0x30, 0xc3, 0xbb, 0x05, 0xca, 0x07, 0x6b, 0x40, 0xe7, 0x48, 0xc2, 0x9b, 0x4e, 0x37, 0x77,
    0x13, 0x7a, 0xe3, 0xf9, 0x49, 0x5b, 0x3d, 0x6d, 0x17, 0xf6, 0xa2, 0xb9,
};

static const MessageEncodingTestVector sMessageEncodingTest0001 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x83F58FD2,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2B85,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0001_EncryptionKey,
    sMessageEncodingTest0001_Payload,
    sizeof(sMessageEncodingTest0001_Payload),
    sMessageEncodingTest0001_ExpectedEncoding,
    sizeof(sMessageEncodingTest0001_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0002_EncryptionKey =
{
    {
        0x52, 0xa6, 0xbc, 0xd5, 0x0d, 0x48, 0x4d, 0x04, 0xa7, 0xa4, 0x0e, 0x98, 0x7e, 0x25, 0xe9, 0x0f,
    }
};
static const uint8_t sMessageEncodingTest0002_Payload[] =
{
    0x7c, 0x49, 0xd2, 0x08, 0x8c, 0xce, 0x02, 0x22, 0xa3, 0xed, 0xc5, 0x67, 0x6d, 0x98, 0x8e, 0x84,
};

static const uint8_t sMessageEncodingTest0002_ExpectedEncoding[] =
{
    0x20, 0x27, 0x99, 0x51, 0x26, 0xa4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb0, 0x27, 0x0d, 0x3c, 0x35, 0x66, 0x15, 0xc0, 0xb3, 0x1c,
    0x3c, 0x87, 0xb5, 0x25, 0xb0, 0x54, 0x35, 0x54, 0x13, 0xd9, 0x86, 0x91, 0x73, 0xa7, 0x32, 0xc2,
};

static const MessageEncodingTestVector sMessageEncodingTest0002 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xA4265199,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x27B0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0002_EncryptionKey,
    sMessageEncodingTest0002_Payload,
    sizeof(sMessageEncodingTest0002_Payload),
    sMessageEncodingTest0002_ExpectedEncoding,
    sizeof(sMessageEncodingTest0002_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0003_EncryptionKey =
{
    {
        0xf8, 0xf4, 0xab, 0x5d, 0x6c, 0xcb, 0xa5, 0xdd, 0x31, 0x8a, 0xd0, 0x20, 0x7f, 0x24, 0x94, 0x83,
    }
};
static const uint8_t sMessageEncodingTest0003_Payload[] =
{
    0x65, 0xe3, 0xdc, 0x60, 0x5b, 0x04, 0xc0, 0x68, 0xb6, 0x07, 0x83, 0x3b, 0xe0, 0xb0, 0x45, 0xbb,
};

static const uint8_t sMessageEncodingTest0003_ExpectedEncoding[] =
{
    0x30, 0x27, 0x80, 0xe9, 0x8c, 0x67, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6b, 0x25, 0xec, 0x64, 0x15, 0x63, 0xdf, 0xb0, 0x12, 0xcc,
    0xc0, 0x82, 0x64, 0xb0, 0x23, 0x04, 0xcf, 0x4d, 0xe9, 0x79, 0xed, 0xa0, 0x01, 0x2a, 0xe0, 0x7d,
    0x39, 0x67, 0x3b, 0x8c, 0x20, 0x4a, 0x48, 0x60,
};

static const MessageEncodingTestVector sMessageEncodingTest0003 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x678CE980,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x256B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0003_EncryptionKey,
    sMessageEncodingTest0003_Payload,
    sizeof(sMessageEncodingTest0003_Payload),
    sMessageEncodingTest0003_ExpectedEncoding,
    sizeof(sMessageEncodingTest0003_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0004_Payload[] =
{
    0x26, 0x6a, 0x1c, 0xfc, 0x34, 0x3a, 0x99, 0x68, 0x9c, 0xc3, 0x02, 0xf5, 0x5c, 0x6a, 0x1a, 0xa3,
};

static const uint8_t sMessageEncodingTest0004_ExpectedEncoding[] =
{
    0x00, 0x1b, 0x95, 0xe5, 0x60, 0xdd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x26, 0x6a, 0x1c, 0xfc, 0x34, 0x3a, 0x99, 0x68, 0x9c, 0xc3,
    0x02, 0xf5, 0x5c, 0x6a, 0x1a, 0xa3,
};

static const MessageEncodingTestVector sMessageEncodingTest0004 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xDD60E595,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0004_Payload,
    sizeof(sMessageEncodingTest0004_Payload),
    sMessageEncodingTest0004_ExpectedEncoding,
    sizeof(sMessageEncodingTest0004_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0005_EncryptionKey =
{
    {
        0x92, 0x60, 0xe7, 0xfb, 0xac, 0xc7, 0x9d, 0x74, 0x44, 0xfc, 0x43, 0x04, 0x9b, 0xcf, 0x2d, 0xdb,
    },
    {
        0x1a, 0xe8, 0x4a, 0xa2, 0x80, 0xc9, 0xe3, 0xe8, 0xcc, 0x1d, 0x9b, 0x63, 0x6b, 0xe1, 0x5e, 0xae,
        0x5a, 0xfc, 0xc8, 0x23,
    }
};
static const uint8_t sMessageEncodingTest0005_Payload[] =
{
    0x1b, 0xc8, 0xbc, 0x72, 0x20, 0xa8, 0x4d, 0x2d, 0x26, 0xa7, 0xaa, 0x88, 0xd3, 0x44, 0xec, 0xbf,
};

static const uint8_t sMessageEncodingTest0005_ExpectedEncoding[] =
{
    0x10, 0x1b, 0xda, 0xf4, 0x11, 0x1a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0c, 0x2e, 0xb8, 0x40, 0x93, 0x46, 0xe1, 0x53, 0xd1, 0x28,
    0xf9, 0xf1, 0x5a, 0xc6, 0x3e, 0x91, 0xc2, 0xc6, 0x28, 0x6a, 0x20, 0xd8, 0xa1, 0xd4, 0xf6, 0xa6,
    0xf0, 0x47, 0x99, 0xeb, 0x2e, 0xcb, 0xbf, 0x9c, 0xb3, 0xba, 0x24, 0xf5,
};

static const MessageEncodingTestVector sMessageEncodingTest0005 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x1A11F4DA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2E0C,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0005_EncryptionKey,
    sMessageEncodingTest0005_Payload,
    sizeof(sMessageEncodingTest0005_Payload),
    sMessageEncodingTest0005_ExpectedEncoding,
    sizeof(sMessageEncodingTest0005_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0006_EncryptionKey =
{
    {
        0xf3, 0xa3, 0xce, 0x26, 0xf5, 0xd1, 0x84, 0x49, 0xf1, 0x37, 0xcf, 0xad, 0xf4, 0xd0, 0xdc, 0x35,
    }
};
static const uint8_t sMessageEncodingTest0006_Payload[] =
{
    0x81, 0x81, 0xd5, 0x9f, 0x2f, 0xc1, 0xf3, 0x5d, 0xb3, 0x5f, 0xf3, 0xe6, 0x90, 0x6c, 0x42, 0x79,
};

static const uint8_t sMessageEncodingTest0006_ExpectedEncoding[] =
{
    0x20, 0x1b, 0x32, 0xbe, 0xbe, 0x79, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xeb, 0x28, 0x5f, 0xff, 0x7d, 0xc0, 0xf2, 0x1c, 0xf6, 0x47,
    0x1a, 0x2a, 0x58, 0x6b, 0x54, 0x80, 0xe4, 0x3f, 0x46, 0xc6, 0xce, 0xf3, 0xb3, 0x5e, 0xf2, 0xc8,
};

static const MessageEncodingTestVector sMessageEncodingTest0006 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x79BEBE32,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x28EB,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0006_EncryptionKey,
    sMessageEncodingTest0006_Payload,
    sizeof(sMessageEncodingTest0006_Payload),
    sMessageEncodingTest0006_ExpectedEncoding,
    sizeof(sMessageEncodingTest0006_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0007_EncryptionKey =
{
    {
        0xff, 0xe4, 0x69, 0xa5, 0x73, 0xa6, 0x4d, 0xd9, 0xc0, 0x14, 0x5f, 0x39, 0x17, 0x3c, 0x51, 0x65,
    }
};
static const uint8_t sMessageEncodingTest0007_Payload[] =
{
    0x3a, 0x04, 0xe3, 0xf1, 0xfd, 0x2e, 0x70, 0x06, 0xe8, 0x56, 0xf0, 0xd1, 0x42, 0x7e, 0xf4, 0x33,
};

static const uint8_t sMessageEncodingTest0007_ExpectedEncoding[] =
{
    0x30, 0x1b, 0xec, 0x88, 0xaa, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xaa, 0x2d, 0x62, 0x71, 0xf2, 0x4f, 0x8a, 0x4a, 0xa3, 0x39,
    0x43, 0xec, 0x6e, 0xe0, 0x94, 0xa7, 0x2b, 0xd0, 0xd5, 0x86, 0x1f, 0xc7, 0xbb, 0xc0, 0x6d, 0xa7,
    0x8d, 0x85, 0x32, 0x1e, 0x42, 0xff, 0x34, 0x6e,
};

static const MessageEncodingTestVector sMessageEncodingTest0007 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x40AA88EC,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2DAA,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0007_EncryptionKey,
    sMessageEncodingTest0007_Payload,
    sizeof(sMessageEncodingTest0007_Payload),
    sMessageEncodingTest0007_ExpectedEncoding,
    sizeof(sMessageEncodingTest0007_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0008_Payload[] =
{
    0x11, 0xb5, 0x34, 0x8a, 0x48, 0x2f, 0xfb, 0xa6, 0x78, 0x1d, 0x95, 0x78, 0x60, 0xc0, 0x5c, 0x73,
};

static const uint8_t sMessageEncodingTest0008_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x6c, 0xe8, 0x0f, 0xe5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x11, 0xb5, 0x34, 0x8a, 0x48, 0x2f, 0xfb, 0xa6, 0x78, 0x1d,
    0x95, 0x78, 0x60, 0xc0, 0x5c, 0x73,
};

static const MessageEncodingTestVector sMessageEncodingTest0008 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xE50FE86C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0008_Payload,
    sizeof(sMessageEncodingTest0008_Payload),
    sMessageEncodingTest0008_ExpectedEncoding,
    sizeof(sMessageEncodingTest0008_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0009_EncryptionKey =
{
    {
        0x9f, 0x71, 0x70, 0x67, 0xd9, 0x38, 0x51, 0x6f, 0x33, 0x89, 0x0d, 0x23, 0xe2, 0x1a, 0x1c, 0xc0,
    },
    {
        0x6d, 0x7f, 0x52, 0x4e, 0xcd, 0x43, 0xf2, 0x0c, 0x61, 0xc1, 0x63, 0xa1, 0x69, 0xd8, 0x2b, 0xe5,
        0x48, 0xd0, 0x6c, 0xf8,
    }
};
static const uint8_t sMessageEncodingTest0009_Payload[] =
{
    0x1c, 0xf3, 0x2b, 0x8e, 0xc3, 0x2c, 0x67, 0x35, 0xbf, 0x68, 0x8c, 0x9a, 0x51, 0x8e, 0xd4, 0x63,
};

static const uint8_t sMessageEncodingTest0009_ExpectedEncoding[] =
{
    0x10, 0x2b, 0x4c, 0x5f, 0xd4, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdd, 0x25, 0x8a, 0xcb, 0x39, 0x63, 0x28, 0x5f, 0x55, 0x3c,
    0x16, 0xc7, 0xf7, 0xdf, 0x19, 0x77, 0x36, 0x45, 0xfb, 0x91, 0x3e, 0x2c, 0x35, 0xe3, 0x42, 0x28,
    0x9c, 0x8b, 0x12, 0x2f, 0xf5, 0x17, 0xc0, 0x41, 0xf7, 0x6a, 0x81, 0xcd,
};

static const MessageEncodingTestVector sMessageEncodingTest0009 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x4CD45F4C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x25DD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0009_EncryptionKey,
    sMessageEncodingTest0009_Payload,
    sizeof(sMessageEncodingTest0009_Payload),
    sMessageEncodingTest0009_ExpectedEncoding,
    sizeof(sMessageEncodingTest0009_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0010_EncryptionKey =
{
    {
        0xe0, 0x7c, 0x63, 0xf8, 0x3b, 0x4b, 0xbb, 0xd5, 0x06, 0x7c, 0x82, 0xff, 0x5f, 0xa8, 0x1c, 0x44,
    }
};
static const uint8_t sMessageEncodingTest0010_Payload[] =
{
    0x13, 0x2f, 0x02, 0xe2, 0xf8, 0x72, 0x59, 0x38, 0x91, 0x16, 0xa2, 0x31, 0x86, 0x85, 0x5e, 0x42,
};

static const uint8_t sMessageEncodingTest0010_ExpectedEncoding[] =
{
    0x20, 0x2b, 0x78, 0xbf, 0xbf, 0xb2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x96, 0x21, 0x4d, 0x9d, 0xa5, 0x29, 0x0f, 0x7e, 0xcd, 0xfd,
    0xe1, 0x55, 0x11, 0xcd, 0x6f, 0x65, 0xaf, 0xdf, 0x9d, 0x6d, 0xdc, 0x02, 0x94, 0x17, 0xb9, 0x36,
};

static const MessageEncodingTestVector sMessageEncodingTest0010 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xB2BFBF78,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2196,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0010_EncryptionKey,
    sMessageEncodingTest0010_Payload,
    sizeof(sMessageEncodingTest0010_Payload),
    sMessageEncodingTest0010_ExpectedEncoding,
    sizeof(sMessageEncodingTest0010_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0011_EncryptionKey =
{
    {
        0xc5, 0x89, 0xf2, 0x8c, 0x4f, 0x1c, 0x5d, 0xef, 0x94, 0x83, 0xb4, 0x5e, 0xb3, 0xc8, 0x83, 0x4e,
    }
};
static const uint8_t sMessageEncodingTest0011_Payload[] =
{
    0x66, 0x37, 0xdf, 0x69, 0xfd, 0x81, 0xd6, 0xb8, 0x97, 0x06, 0x26, 0x95, 0x30, 0x32, 0x33, 0x44,
};

static const uint8_t sMessageEncodingTest0011_ExpectedEncoding[] =
{
    0x30, 0x2b, 0xba, 0x32, 0x48, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4d, 0x23, 0x81, 0xdb, 0xc7, 0xa2, 0x09, 0x33, 0x10, 0x66,
    0xd3, 0x72, 0x1a, 0x0c, 0x78, 0x1c, 0xa8, 0x41, 0x61, 0x9c, 0x2e, 0x2f, 0x38, 0x6b, 0x0d, 0xc7,
    0x46, 0x80, 0x11, 0xa6, 0x8f, 0x84, 0xa6, 0x1f,
};

static const MessageEncodingTestVector sMessageEncodingTest0011 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xA04832BA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x234D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0011_EncryptionKey,
    sMessageEncodingTest0011_Payload,
    sizeof(sMessageEncodingTest0011_Payload),
    sMessageEncodingTest0011_ExpectedEncoding,
    sizeof(sMessageEncodingTest0011_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0012_Payload[] =
{
    0x4d, 0xfa, 0x08, 0x68, 0x6f, 0x19, 0x0b, 0xfd, 0x0a, 0x76, 0x6c, 0xfa, 0x86, 0x59, 0x3e, 0x1e,
};

static const uint8_t sMessageEncodingTest0012_ExpectedEncoding[] =
{
    0x00, 0x13, 0x1d, 0x99, 0x7d, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4d, 0xfa, 0x08, 0x68, 0x6f, 0x19, 0x0b, 0xfd, 0x0a, 0x76,
    0x6c, 0xfa, 0x86, 0x59, 0x3e, 0x1e,
};

static const MessageEncodingTestVector sMessageEncodingTest0012 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x077D991D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0012_Payload,
    sizeof(sMessageEncodingTest0012_Payload),
    sMessageEncodingTest0012_ExpectedEncoding,
    sizeof(sMessageEncodingTest0012_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0013_EncryptionKey =
{
    {
        0x58, 0x75, 0xf4, 0x28, 0xa5, 0x22, 0x68, 0x01, 0x64, 0xc7, 0xa8, 0x0e, 0xca, 0x2c, 0xfc, 0x3a,
    },
    {
        0x6f, 0x87, 0x54, 0x4e, 0x67, 0xe1, 0x26, 0xcd, 0x01, 0x20, 0xc0, 0x03, 0xe8, 0x55, 0xf0, 0xd4,
        0x9b, 0xb8, 0x26, 0x84,
    }
};
static const uint8_t sMessageEncodingTest0013_Payload[] =
{
    0xca, 0xcd, 0xc5, 0x67, 0xf8, 0x70, 0x03, 0x96, 0x2e, 0x6a, 0xb8, 0x68, 0x71, 0x05, 0x90, 0x98,
};

static const uint8_t sMessageEncodingTest0013_ExpectedEncoding[] =
{
    0x10, 0x13, 0x20, 0xa3, 0xb5, 0x26, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9e, 0x27, 0xf7, 0x58, 0xb8, 0x98, 0xed, 0xf6, 0x71, 0x64,
    0x4f, 0xe9, 0xe6, 0xae, 0xb1, 0x2f, 0x81, 0xb4, 0x0e, 0xe6, 0x4a, 0x98, 0x9b, 0xd4, 0xec, 0x45,
    0x8b, 0xfb, 0x66, 0x0b, 0x24, 0x2c, 0x8a, 0x9a, 0x51, 0x40, 0x88, 0x33,
};

static const MessageEncodingTestVector sMessageEncodingTest0013 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x26B5A320,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x279E,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0013_EncryptionKey,
    sMessageEncodingTest0013_Payload,
    sizeof(sMessageEncodingTest0013_Payload),
    sMessageEncodingTest0013_ExpectedEncoding,
    sizeof(sMessageEncodingTest0013_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0014_EncryptionKey =
{
    {
        0x6c, 0x1f, 0xa8, 0xb1, 0x8f, 0x16, 0x7c, 0x8b, 0x27, 0xaf, 0x9e, 0x31, 0x45, 0xfd, 0x6a, 0x38,
    }
};
static const uint8_t sMessageEncodingTest0014_Payload[] =
{
    0x2e, 0x14, 0xb3, 0x01, 0xd7, 0xb2, 0xf6, 0x70, 0x9c, 0x92, 0xca, 0xc8, 0x35, 0x77, 0xc6, 0xf6,
};

static const uint8_t sMessageEncodingTest0014_ExpectedEncoding[] =
{
    0x20, 0x13, 0xad, 0x32, 0x25, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc1, 0x22, 0x4d, 0x2f, 0xaf, 0x9f, 0xba, 0xb0, 0x56, 0xad,
    0x23, 0xea, 0x64, 0xfb, 0x1b, 0xae, 0xfb, 0xbb, 0xdc, 0x2a, 0x8b, 0x72, 0x49, 0xf2, 0xa9, 0x04,
};

static const MessageEncodingTestVector sMessageEncodingTest0014 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x342532AD,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x22C1,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0014_EncryptionKey,
    sMessageEncodingTest0014_Payload,
    sizeof(sMessageEncodingTest0014_Payload),
    sMessageEncodingTest0014_ExpectedEncoding,
    sizeof(sMessageEncodingTest0014_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0015_EncryptionKey =
{
    {
        0x6a, 0xf7, 0xb1, 0x44, 0xdc, 0xfa, 0x19, 0xf7, 0xc2, 0x7c, 0x71, 0xf4, 0x3a, 0xe0, 0xbd, 0x18,
    }
};
static const uint8_t sMessageEncodingTest0015_Payload[] =
{
    0xac, 0xd9, 0x3b, 0x01, 0x99, 0x25, 0x8e, 0xfa, 0xb2, 0x4e, 0xc9, 0x83, 0xdf, 0x82, 0x57, 0x8b,
};

static const uint8_t sMessageEncodingTest0015_ExpectedEncoding[] =
{
    0x30, 0x13, 0x89, 0xb7, 0xe0, 0xe7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0x25, 0xdb, 0x82, 0xac, 0x4c, 0x5c, 0xec, 0x4b, 0x4e,
    0xc0, 0x9d, 0xe2, 0x70, 0x73, 0x23, 0xab, 0xd9, 0x84, 0x4a, 0xde, 0x8e, 0x57, 0x88, 0x66, 0xb4,
    0x53, 0xb5, 0x72, 0x7d, 0x01, 0xd1, 0xb0, 0x47,
};

static const MessageEncodingTestVector sMessageEncodingTest0015 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xE7E0B789,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x25FF,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0015_EncryptionKey,
    sMessageEncodingTest0015_Payload,
    sizeof(sMessageEncodingTest0015_Payload),
    sMessageEncodingTest0015_ExpectedEncoding,
    sizeof(sMessageEncodingTest0015_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0016_Payload[] =
{
    0x6f, 0x6a, 0x2b, 0x2e, 0x4a, 0x82, 0x70, 0x12, 0x05, 0xe9, 0xd6, 0xd3, 0x6f, 0xab, 0x05, 0xb2,
};

static const uint8_t sMessageEncodingTest0016_ExpectedEncoding[] =
{
    0x00, 0x23, 0xbd, 0x32, 0xc7, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6f, 0x6a, 0x2b, 0x2e, 0x4a, 0x82, 0x70, 0x12, 0x05, 0xe9,
    0xd6, 0xd3, 0x6f, 0xab, 0x05, 0xb2,
};

static const MessageEncodingTestVector sMessageEncodingTest0016 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x92C732BD,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0016_Payload,
    sizeof(sMessageEncodingTest0016_Payload),
    sMessageEncodingTest0016_ExpectedEncoding,
    sizeof(sMessageEncodingTest0016_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0017_EncryptionKey =
{
    {
        0x89, 0x9f, 0x07, 0x59, 0xcc, 0xd6, 0x8e, 0xae, 0xeb, 0xf6, 0xbd, 0x93, 0xae, 0x3f, 0x2b, 0x4e,
    },
    {
        0x3c, 0x60, 0xc3, 0x91, 0x49, 0xdf, 0x17, 0x52, 0xd6, 0x3d, 0x01, 0xda, 0x53, 0x4b, 0x2c, 0x77,
        0x6a, 0x0b, 0xef, 0x4e,
    }
};
static const uint8_t sMessageEncodingTest0017_Payload[] =
{
    0x89, 0xd1, 0x56, 0x3c, 0xa3, 0x5c, 0xde, 0x7b, 0xe8, 0xb4, 0xc7, 0x80, 0xb0, 0xcd, 0x80, 0x21,
};

static const uint8_t sMessageEncodingTest0017_ExpectedEncoding[] =
{
    0x10, 0x23, 0x20, 0xe2, 0xa3, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x39, 0x2b, 0x72, 0x9c, 0x99, 0x41, 0xd8, 0xca, 0x27, 0x29,
    0x6f, 0xa9, 0x32, 0x6a, 0x31, 0xcd, 0xf0, 0x86, 0xe7, 0x7a, 0x53, 0x59, 0x61, 0x00, 0x93, 0xf4,
    0x59, 0xdc, 0x61, 0x88, 0xdc, 0x5f, 0xcd, 0x04, 0x79, 0xa7, 0xec, 0x3f,
};

static const MessageEncodingTestVector sMessageEncodingTest0017 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x07A3E220,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2B39,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0017_EncryptionKey,
    sMessageEncodingTest0017_Payload,
    sizeof(sMessageEncodingTest0017_Payload),
    sMessageEncodingTest0017_ExpectedEncoding,
    sizeof(sMessageEncodingTest0017_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0018_EncryptionKey =
{
    {
        0xf3, 0xaf, 0x4f, 0xdc, 0x97, 0x62, 0xfa, 0x4c, 0x99, 0x01, 0xa8, 0x77, 0xa6, 0x65, 0xaa, 0x32,
    }
};
static const uint8_t sMessageEncodingTest0018_Payload[] =
{
    0xf1, 0x2d, 0xb8, 0x16, 0xfa, 0x48, 0x15, 0x4c, 0x57, 0x27, 0xe8, 0x07, 0x8e, 0xdf, 0xd6, 0xf1,
};

static const uint8_t sMessageEncodingTest0018_ExpectedEncoding[] =
{
    0x20, 0x23, 0xf6, 0xda, 0x65, 0xb5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x16, 0x2f, 0xb8, 0x28, 0x50, 0xff, 0xcd, 0x11, 0x5a, 0x71,
    0xa4, 0x56, 0xbe, 0x1e, 0xa5, 0x12, 0x08, 0x1a, 0xf3, 0x64, 0xba, 0xcc, 0x6c, 0xae, 0x55, 0xa0,
};

static const MessageEncodingTestVector sMessageEncodingTest0018 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xB565DAF6,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2F16,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0018_EncryptionKey,
    sMessageEncodingTest0018_Payload,
    sizeof(sMessageEncodingTest0018_Payload),
    sMessageEncodingTest0018_ExpectedEncoding,
    sizeof(sMessageEncodingTest0018_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0019_EncryptionKey =
{
    {
        0x9d, 0x5b, 0x14, 0x8e, 0xbd, 0xf6, 0xee, 0x0e, 0xf2, 0x72, 0x11, 0x1d, 0xc6, 0x43, 0xb8, 0x97,
    }
};
static const uint8_t sMessageEncodingTest0019_Payload[] =
{
    0x07, 0x1e, 0xe4, 0x2d, 0x20, 0x2e, 0x58, 0x53, 0x4e, 0x89, 0xdc, 0xcd, 0x93, 0xf0, 0x80, 0x5c,
};

static const uint8_t sMessageEncodingTest0019_ExpectedEncoding[] =
{
    0x30, 0x23, 0x55, 0x0a, 0x5f, 0x28, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9b, 0x2f, 0x3c, 0xbf, 0x9d, 0xc0, 0x90, 0xc7, 0xbc, 0x18,
    0x19, 0xf4, 0x22, 0xfa, 0xa4, 0xec, 0x51, 0xd9, 0x4b, 0x03, 0x66, 0x50, 0x92, 0x69, 0xa4, 0x67,
    0x79, 0xcb, 0xd9, 0x62, 0xdd, 0x09, 0xd2, 0xc3,
};

static const MessageEncodingTestVector sMessageEncodingTest0019 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x285F0A55,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2F9B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0019_EncryptionKey,
    sMessageEncodingTest0019_Payload,
    sizeof(sMessageEncodingTest0019_Payload),
    sMessageEncodingTest0019_ExpectedEncoding,
    sizeof(sMessageEncodingTest0019_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0020_Payload[] =
{
    0xa6, 0x08, 0x53, 0x8e, 0x80, 0x29, 0x52, 0x6a, 0xaf, 0xeb, 0x0b, 0x59, 0x7f, 0x4d, 0x12, 0xb1,
};

static const uint8_t sMessageEncodingTest0020_ExpectedEncoding[] =
{
    0x00, 0x25, 0xcf, 0xad, 0x9a, 0x46, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa6, 0x08,
    0x53, 0x8e, 0x80, 0x29, 0x52, 0x6a, 0xaf, 0xeb, 0x0b, 0x59, 0x7f, 0x4d, 0x12, 0xb1,
};

static const MessageEncodingTestVector sMessageEncodingTest0020 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x469AADCF,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0020_Payload,
    sizeof(sMessageEncodingTest0020_Payload),
    sMessageEncodingTest0020_ExpectedEncoding,
    sizeof(sMessageEncodingTest0020_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0021_EncryptionKey =
{
    {
        0x03, 0x72, 0xd8, 0xda, 0xca, 0x88, 0x09, 0x8e, 0xba, 0x50, 0xaa, 0x06, 0x9c, 0x03, 0x8a, 0x4a,
    },
    {
        0x62, 0xf5, 0x11, 0x05, 0x8f, 0x86, 0x6d, 0xa0, 0xe3, 0xaf, 0x04, 0xa3, 0x54, 0xdc, 0xad, 0x9b,
        0x52, 0x8f, 0xde, 0x8c,
    }
};
static const uint8_t sMessageEncodingTest0021_Payload[] =
{
    0x69, 0xbf, 0x9c, 0x65, 0xec, 0xee, 0x29, 0x8c, 0x05, 0x7e, 0xd0, 0x37, 0xe6, 0xa7, 0x25, 0xad,
};

static const uint8_t sMessageEncodingTest0021_ExpectedEncoding[] =
{
    0x10, 0x25, 0xb7, 0xdf, 0xe3, 0xd0, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x86, 0x20,
    0x8e, 0xa4, 0xc2, 0x93, 0x02, 0x31, 0x0c, 0x13, 0x1c, 0x6d, 0x62, 0x27, 0xc8, 0x09, 0x1e, 0x49,
    0xb8, 0xc1, 0xd7, 0x64, 0xd7, 0x43, 0x43, 0x74, 0xf5, 0x15, 0xc2, 0x65, 0xe0, 0x18, 0xb7, 0x77,
    0x7c, 0x93, 0x4e, 0xcd,
};

static const MessageEncodingTestVector sMessageEncodingTest0021 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xD0E3DFB7,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2086,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0021_EncryptionKey,
    sMessageEncodingTest0021_Payload,
    sizeof(sMessageEncodingTest0021_Payload),
    sMessageEncodingTest0021_ExpectedEncoding,
    sizeof(sMessageEncodingTest0021_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0022_EncryptionKey =
{
    {
        0xab, 0x14, 0x72, 0x88, 0x3a, 0xde, 0xef, 0xf8, 0x17, 0xbf, 0x4c, 0x34, 0xf0, 0xeb, 0x63, 0xe3,
    }
};
static const uint8_t sMessageEncodingTest0022_Payload[] =
{
    0x27, 0x6e, 0x75, 0x06, 0xc7, 0x79, 0x12, 0x33, 0x73, 0xc7, 0x4f, 0x08, 0x27, 0x2b, 0xa5, 0x86,
};

static const uint8_t sMessageEncodingTest0022_ExpectedEncoding[] =
{
    0x20, 0x25, 0x72, 0x69, 0x9e, 0x30, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x15, 0x22,
    0xda, 0x07, 0x0d, 0x60, 0xf7, 0x23, 0x91, 0xf6, 0x06, 0xe5, 0x0a, 0x7b, 0xa6, 0x33, 0x93, 0xf0,
    0x13, 0x62, 0xdc, 0xfd, 0xe8, 0x85, 0x0d, 0xb8,
};

static const MessageEncodingTestVector sMessageEncodingTest0022 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x309E6972,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2215,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0022_EncryptionKey,
    sMessageEncodingTest0022_Payload,
    sizeof(sMessageEncodingTest0022_Payload),
    sMessageEncodingTest0022_ExpectedEncoding,
    sizeof(sMessageEncodingTest0022_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0023_EncryptionKey =
{
    {
        0xf8, 0xf6, 0xee, 0x6f, 0xe2, 0x57, 0x1e, 0x3b, 0x64, 0x99, 0x1d, 0xa6, 0x50, 0x99, 0x09, 0xf6,
    }
};
static const uint8_t sMessageEncodingTest0023_Payload[] =
{
    0x80, 0x56, 0xd3, 0x4a, 0xe3, 0xb5, 0xf3, 0x5f, 0x4d, 0xc4, 0xf3, 0x27, 0x8c, 0x2c, 0xd8, 0x73,
};

static const uint8_t sMessageEncodingTest0023_ExpectedEncoding[] =
{
    0x30, 0x25, 0xe4, 0xf9, 0x05, 0xeb, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x26, 0x21,
    0xfb, 0xbb, 0x25, 0x78, 0xf1, 0xaa, 0xa5, 0x56, 0xcb, 0x7b, 0xe7, 0xaf, 0x32, 0x27, 0x46, 0x48,
    0x55, 0x9c, 0xaa, 0xe4, 0xe0, 0x2d, 0xab, 0xd5, 0x33, 0x27, 0x34, 0x79, 0xf8, 0xbe, 0xc0, 0x58,
};

static const MessageEncodingTestVector sMessageEncodingTest0023 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xEB05F9E4,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2126,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0023_EncryptionKey,
    sMessageEncodingTest0023_Payload,
    sizeof(sMessageEncodingTest0023_Payload),
    sMessageEncodingTest0023_ExpectedEncoding,
    sizeof(sMessageEncodingTest0023_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0024_Payload[] =
{
    0x41, 0xc7, 0x65, 0xc1, 0x64, 0x07, 0xe2, 0xdc, 0xb5, 0xdb, 0x42, 0x8c, 0x99, 0x9a, 0xd2, 0xe0,
};

static const uint8_t sMessageEncodingTest0024_ExpectedEncoding[] =
{
    0x00, 0x19, 0x49, 0xe2, 0x05, 0xd8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x41, 0xc7,
    0x65, 0xc1, 0x64, 0x07, 0xe2, 0xdc, 0xb5, 0xdb, 0x42, 0x8c, 0x99, 0x9a, 0xd2, 0xe0,
};

static const MessageEncodingTestVector sMessageEncodingTest0024 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xD805E249,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0024_Payload,
    sizeof(sMessageEncodingTest0024_Payload),
    sMessageEncodingTest0024_ExpectedEncoding,
    sizeof(sMessageEncodingTest0024_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0025_EncryptionKey =
{
    {
        0x1e, 0xb8, 0x72, 0x47, 0xce, 0x92, 0x2f, 0x6d, 0xf9, 0x9e, 0x29, 0x29, 0xd9, 0x70, 0xd4, 0xc5,
    },
    {
        0x9a, 0xc0, 0x89, 0x7c, 0x8d, 0xde, 0xa8, 0x82, 0xdc, 0xd5, 0x25, 0xd7, 0xf4, 0x9d, 0xec, 0xe1,
        0xf2, 0xf9, 0xd9, 0x67,
    }
};
static const uint8_t sMessageEncodingTest0025_Payload[] =
{
    0x8f, 0xb2, 0x0e, 0x13, 0xd4, 0x3c, 0x2e, 0x74, 0x73, 0xbd, 0x16, 0x4e, 0x39, 0x0f, 0xa7, 0xfc,
};

static const uint8_t sMessageEncodingTest0025_ExpectedEncoding[] =
{
    0x10, 0x19, 0xea, 0x11, 0x25, 0x04, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x35, 0x2b,
    0x50, 0xcf, 0x26, 0x9c, 0x84, 0xe6, 0x22, 0x42, 0x75, 0x1b, 0x16, 0x92, 0xf2, 0xad, 0x75, 0x91,
    0x95, 0x9c, 0x59, 0xa1, 0x2b, 0xbd, 0xa5, 0x23, 0xdc, 0xf9, 0xd3, 0x7b, 0x39, 0x66, 0x92, 0x36,
    0x39, 0xcd, 0x60, 0xe6,
};

static const MessageEncodingTestVector sMessageEncodingTest0025 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x042511EA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2B35,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0025_EncryptionKey,
    sMessageEncodingTest0025_Payload,
    sizeof(sMessageEncodingTest0025_Payload),
    sMessageEncodingTest0025_ExpectedEncoding,
    sizeof(sMessageEncodingTest0025_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0026_EncryptionKey =
{
    {
        0x8b, 0x27, 0x9e, 0x09, 0x56, 0x7b, 0xe4, 0x21, 0x2d, 0x3a, 0x06, 0x8f, 0xda, 0xe5, 0xf3, 0x3f,
    }
};
static const uint8_t sMessageEncodingTest0026_Payload[] =
{
    0xc0, 0x16, 0x5c, 0xf0, 0xa1, 0x43, 0x7a, 0x60, 0x5a, 0xf7, 0x3c, 0x84, 0x9b, 0xbb, 0xfa, 0xd7,
};

static const uint8_t sMessageEncodingTest0026_ExpectedEncoding[] =
{
    0x20, 0x19, 0x34, 0x98, 0x1c, 0x4d, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x41, 0x27,
    0xdb, 0x32, 0xad, 0x1e, 0xe2, 0xe4, 0xb5, 0xa1, 0xde, 0xdb, 0xf6, 0x68, 0xfe, 0xc4, 0x57, 0xe1,
    0x50, 0x7a, 0x04, 0xf8, 0x94, 0x45, 0x3b, 0xb2,
};

static const MessageEncodingTestVector sMessageEncodingTest0026 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x4D1C9834,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2741,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0026_EncryptionKey,
    sMessageEncodingTest0026_Payload,
    sizeof(sMessageEncodingTest0026_Payload),
    sMessageEncodingTest0026_ExpectedEncoding,
    sizeof(sMessageEncodingTest0026_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0027_EncryptionKey =
{
    {
        0x05, 0x6b, 0x09, 0xc3, 0x4b, 0xd4, 0xff, 0xd3, 0x07, 0xd8, 0x78, 0x9b, 0xce, 0x64, 0xbc, 0xb0,
    }
};
static const uint8_t sMessageEncodingTest0027_Payload[] =
{
    0x0a, 0x52, 0x54, 0xfc, 0x08, 0xb5, 0xca, 0x15, 0xd8, 0x06, 0xe8, 0x3f, 0xa5, 0x94, 0xba, 0x64,
};

static const uint8_t sMessageEncodingTest0027_ExpectedEncoding[] =
{
    0x30, 0x19, 0x9e, 0xd8, 0xb6, 0x30, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc2, 0x26,
    0x5b, 0xf1, 0xfe, 0x08, 0x17, 0x6e, 0xfd, 0x3c, 0x37, 0x9e, 0x41, 0x40, 0xb1, 0xd6, 0x05, 0x1c,
    0xe7, 0x98, 0xdf, 0xfd, 0x13, 0x16, 0x14, 0x5a, 0xef, 0x0d, 0x18, 0xa1, 0x94, 0xf4, 0xb8, 0x12,
};

static const MessageEncodingTestVector sMessageEncodingTest0027 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x30B6D89E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x26C2,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0027_EncryptionKey,
    sMessageEncodingTest0027_Payload,
    sizeof(sMessageEncodingTest0027_Payload),
    sMessageEncodingTest0027_ExpectedEncoding,
    sizeof(sMessageEncodingTest0027_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0028_Payload[] =
{
    0x2b, 0x04, 0x25, 0xda, 0x19, 0xfe, 0x0b, 0x15, 0xc4, 0x30, 0x29, 0x11, 0x59, 0x5d, 0x10, 0xf2,
};

static const uint8_t sMessageEncodingTest0028_ExpectedEncoding[] =
{
    0x00, 0x29, 0x3d, 0xbf, 0x94, 0x44, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2b, 0x04,
    0x25, 0xda, 0x19, 0xfe, 0x0b, 0x15, 0xc4, 0x30, 0x29, 0x11, 0x59, 0x5d, 0x10, 0xf2,
};

static const MessageEncodingTestVector sMessageEncodingTest0028 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x4494BF3D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0028_Payload,
    sizeof(sMessageEncodingTest0028_Payload),
    sMessageEncodingTest0028_ExpectedEncoding,
    sizeof(sMessageEncodingTest0028_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0029_EncryptionKey =
{
    {
        0xc8, 0x4d, 0x6c, 0xd3, 0x18, 0xb1, 0xe2, 0x4e, 0x9a, 0x79, 0x49, 0x98, 0x96, 0x65, 0xe0, 0x4f,
    },
    {
        0xa1, 0x7b, 0x65, 0x6b, 0xa4, 0x7f, 0x04, 0x29, 0xd0, 0x5b, 0x81, 0xb7, 0x75, 0xad, 0xe5, 0x3a,
        0x60, 0xd8, 0x95, 0x7e,
    }
};
static const uint8_t sMessageEncodingTest0029_Payload[] =
{
    0x06, 0x75, 0x4d, 0xd8, 0x31, 0x27, 0x17, 0x60, 0x63, 0x7c, 0x91, 0xcc, 0x15, 0x11, 0x3e, 0x10,
};

static const uint8_t sMessageEncodingTest0029_ExpectedEncoding[] =
{
    0x10, 0x29, 0x17, 0xad, 0x3d, 0xaf, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x05, 0x2d,
    0xf8, 0x76, 0xa1, 0x2a, 0x87, 0xf3, 0xc0, 0xf3, 0x4c, 0xcd, 0x5b, 0x6b, 0x38, 0xa5, 0xd1, 0x81,
    0xa8, 0xd1, 0x81, 0xc6, 0x19, 0xeb, 0x9f, 0x46, 0x53, 0x54, 0x00, 0x8e, 0xb6, 0x7e, 0xd3, 0xf7,
    0xdb, 0x42, 0xd5, 0x37,
};

static const MessageEncodingTestVector sMessageEncodingTest0029 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xAF3DAD17,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2D05,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0029_EncryptionKey,
    sMessageEncodingTest0029_Payload,
    sizeof(sMessageEncodingTest0029_Payload),
    sMessageEncodingTest0029_ExpectedEncoding,
    sizeof(sMessageEncodingTest0029_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0030_EncryptionKey =
{
    {
        0x07, 0x7e, 0x4c, 0x22, 0x85, 0x9a, 0xd3, 0xb9, 0x69, 0x74, 0x9b, 0x18, 0x24, 0x9f, 0xb2, 0x46,
    }
};
static const uint8_t sMessageEncodingTest0030_Payload[] =
{
    0x3d, 0x61, 0x00, 0x01, 0x16, 0xaf, 0x17, 0x8c, 0xa0, 0xf9, 0xc5, 0x91, 0x3b, 0xcd, 0x1a, 0xf2,
};

static const uint8_t sMessageEncodingTest0030_ExpectedEncoding[] =
{
    0x20, 0x29, 0xd8, 0x1a, 0x27, 0xd2, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x68, 0x28,
    0xa8, 0xf4, 0xa3, 0xf3, 0xa7, 0x85, 0xd4, 0x56, 0x46, 0x38, 0x12, 0x4a, 0xcc, 0x02, 0x48, 0x67,
    0x4d, 0x01, 0x17, 0x4f, 0xab, 0xbe, 0x0a, 0xa2,
};

static const MessageEncodingTestVector sMessageEncodingTest0030 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xD2271AD8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2868,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0030_EncryptionKey,
    sMessageEncodingTest0030_Payload,
    sizeof(sMessageEncodingTest0030_Payload),
    sMessageEncodingTest0030_ExpectedEncoding,
    sizeof(sMessageEncodingTest0030_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0031_EncryptionKey =
{
    {
        0x5c, 0xb1, 0xb6, 0xe2, 0xb6, 0xf4, 0x80, 0x1c, 0x66, 0xfc, 0x62, 0x06, 0xe2, 0x8e, 0x09, 0xe6,
    }
};
static const uint8_t sMessageEncodingTest0031_Payload[] =
{
    0x53, 0x25, 0x58, 0x3b, 0x11, 0x2e, 0xd7, 0x12, 0xc3, 0x5d, 0x66, 0x27, 0xbd, 0x6e, 0x50, 0x34,
};

static const uint8_t sMessageEncodingTest0031_ExpectedEncoding[] =
{
    0x30, 0x29, 0x56, 0x25, 0xcb, 0x62, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0e, 0x2a,
    0x2e, 0xd9, 0x5e, 0xbc, 0xf5, 0x74, 0x75, 0xa2, 0x3b, 0xef, 0x13, 0x42, 0x8d, 0xee, 0xe4, 0x3b,
    0x75, 0x54, 0x09, 0xbe, 0x71, 0x2f, 0x99, 0x65, 0x38, 0x10, 0x6b, 0x03, 0xcd, 0x09, 0xb3, 0x88,
};

static const MessageEncodingTestVector sMessageEncodingTest0031 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x62CB2556,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A0E,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0031_EncryptionKey,
    sMessageEncodingTest0031_Payload,
    sizeof(sMessageEncodingTest0031_Payload),
    sMessageEncodingTest0031_ExpectedEncoding,
    sizeof(sMessageEncodingTest0031_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0032_Payload[] =
{
    0x1e, 0xaa, 0x44, 0x25, 0xf0, 0xcd, 0x0f, 0x98, 0x3e, 0xa0, 0x8d, 0xc9, 0x8f, 0x64, 0xa3, 0x17,
};

static const uint8_t sMessageEncodingTest0032_ExpectedEncoding[] =
{
    0x00, 0x11, 0x59, 0x4a, 0x74, 0x98, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x1e, 0xaa,
    0x44, 0x25, 0xf0, 0xcd, 0x0f, 0x98, 0x3e, 0xa0, 0x8d, 0xc9, 0x8f, 0x64, 0xa3, 0x17,
};

static const MessageEncodingTestVector sMessageEncodingTest0032 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x98744A59,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0032_Payload,
    sizeof(sMessageEncodingTest0032_Payload),
    sMessageEncodingTest0032_ExpectedEncoding,
    sizeof(sMessageEncodingTest0032_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0033_EncryptionKey =
{
    {
        0x88, 0x11, 0x65, 0xa0, 0xb4, 0xde, 0xe7, 0xf8, 0xe9, 0xc8, 0x12, 0x1d, 0x40, 0x0c, 0x7e, 0x12,
    },
    {
        0x4a, 0xf1, 0xd6, 0x42, 0x47, 0xd5, 0xd1, 0x3a, 0xaa, 0x78, 0x1c, 0xaa, 0xa0, 0x72, 0xf5, 0xac,
        0x24, 0x28, 0x92, 0xc2,
    }
};
static const uint8_t sMessageEncodingTest0033_Payload[] =
{
    0xa6, 0x7f, 0x33, 0xe1, 0xe1, 0x90, 0x28, 0xd8, 0xf8, 0x4e, 0xe1, 0xf6, 0xeb, 0xb7, 0x74, 0x2d,
};

static const uint8_t sMessageEncodingTest0033_ExpectedEncoding[] =
{
    0x10, 0x11, 0xce, 0x52, 0xfc, 0x27, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8b, 0x2a,
    0x78, 0x4a, 0x79, 0xa4, 0x47, 0x62, 0x28, 0x36, 0x22, 0x32, 0x4a, 0x2a, 0x13, 0xe1, 0x9b, 0x2a,
    0xdc, 0x98, 0xc4, 0x28, 0x30, 0xff, 0x04, 0x94, 0x48, 0xc0, 0x34, 0x8c, 0xad, 0x8a, 0xb2, 0x67,
    0x42, 0x8f, 0xb3, 0x42,
};

static const MessageEncodingTestVector sMessageEncodingTest0033 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x27FC52CE,
        kWeaveHeaderFlag_DestNodeId,
        0x2A8B,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0033_EncryptionKey,
    sMessageEncodingTest0033_Payload,
    sizeof(sMessageEncodingTest0033_Payload),
    sMessageEncodingTest0033_ExpectedEncoding,
    sizeof(sMessageEncodingTest0033_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0034_EncryptionKey =
{
    {
        0x98, 0x08, 0x7d, 0x71, 0xe8, 0x26, 0x6d, 0x45, 0x27, 0xfc, 0x07, 0x20, 0x24, 0x92, 0x3a, 0x8c,
    }
};
static const uint8_t sMessageEncodingTest0034_Payload[] =
{
    0xe5, 0xd2, 0x49, 0xfe, 0x5b, 0x86, 0xbc, 0xb8, 0xc6, 0x4c, 0x97, 0xf1, 0xf7, 0xc0, 0x99, 0xed,
};

static const uint8_t sMessageEncodingTest0034_ExpectedEncoding[] =
{
    0x20, 0x11, 0x07, 0x5d, 0x19, 0xc6, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe6, 0x2f,
    0xbd, 0x1b, 0xa4, 0xc6, 0xf5, 0x7f, 0x85, 0x11, 0x54, 0x39, 0x12, 0xce, 0xe7, 0x1a, 0x16, 0x8c,
    0x3b, 0x3e, 0x81, 0xd3, 0xd9, 0x63, 0xe2, 0x64,
};

static const MessageEncodingTestVector sMessageEncodingTest0034 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xC6195D07,
        kWeaveHeaderFlag_DestNodeId,
        0x2FE6,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0034_EncryptionKey,
    sMessageEncodingTest0034_Payload,
    sizeof(sMessageEncodingTest0034_Payload),
    sMessageEncodingTest0034_ExpectedEncoding,
    sizeof(sMessageEncodingTest0034_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0035_EncryptionKey =
{
    {
        0x26, 0x8f, 0x43, 0x0b, 0x8c, 0xeb, 0xfc, 0xad, 0xc6, 0xd0, 0xac, 0x01, 0x8b, 0xd8, 0x36, 0x91,
    }
};
static const uint8_t sMessageEncodingTest0035_Payload[] =
{
    0xd4, 0xa6, 0x51, 0x1e, 0x46, 0xee, 0x98, 0x79, 0x0c, 0x86, 0x0a, 0x1b, 0x49, 0xe4, 0x3c, 0xb1,
};

static const uint8_t sMessageEncodingTest0035_ExpectedEncoding[] =
{
    0x30, 0x11, 0x41, 0xba, 0xcf, 0xdd, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7e, 0x28,
    0x91, 0x94, 0xcc, 0x82, 0xfc, 0x3e, 0x2b, 0x1e, 0x31, 0x01, 0x41, 0x78, 0xc1, 0x35, 0x54, 0x7e,
    0xae, 0x51, 0x9c, 0xee, 0xf4, 0x46, 0xba, 0x56, 0xb1, 0xcf, 0x8d, 0x38, 0x1f, 0x23, 0xc7, 0xab,
};

static const MessageEncodingTestVector sMessageEncodingTest0035 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xDDCFBA41,
        kWeaveHeaderFlag_DestNodeId,
        0x287E,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0035_EncryptionKey,
    sMessageEncodingTest0035_Payload,
    sizeof(sMessageEncodingTest0035_Payload),
    sMessageEncodingTest0035_ExpectedEncoding,
    sizeof(sMessageEncodingTest0035_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0036_Payload[] =
{
    0x8c, 0xa7, 0x79, 0xa4, 0x69, 0xba, 0xd2, 0xc6, 0xc9, 0x91, 0x6a, 0xdc, 0x0f, 0x95, 0x2d, 0xa6,
};

static const uint8_t sMessageEncodingTest0036_ExpectedEncoding[] =
{
    0x00, 0x21, 0xa7, 0x85, 0xb5, 0xde, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8c, 0xa7,
    0x79, 0xa4, 0x69, 0xba, 0xd2, 0xc6, 0xc9, 0x91, 0x6a, 0xdc, 0x0f, 0x95, 0x2d, 0xa6,
};

static const MessageEncodingTestVector sMessageEncodingTest0036 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xDEB585A7,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0036_Payload,
    sizeof(sMessageEncodingTest0036_Payload),
    sMessageEncodingTest0036_ExpectedEncoding,
    sizeof(sMessageEncodingTest0036_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0037_EncryptionKey =
{
    {
        0xa5, 0x0e, 0x6b, 0xc9, 0x58, 0x3a, 0x2b, 0xfd, 0x07, 0x85, 0x06, 0x49, 0x75, 0x03, 0x29, 0xfe,
    },
    {
        0xb9, 0x38, 0x24, 0xa7, 0x89, 0x64, 0xac, 0xd8, 0x11, 0x44, 0x7b, 0x52, 0x92, 0x6a, 0xc3, 0xa3,
        0xf0, 0xe2, 0x6a, 0x25,
    }
};
static const uint8_t sMessageEncodingTest0037_Payload[] =
{
    0x92, 0x86, 0x61, 0x86, 0x74, 0x5a, 0xe7, 0x37, 0x03, 0x33, 0xe3, 0x47, 0xf6, 0xe5, 0x9c, 0xdb,
};

static const uint8_t sMessageEncodingTest0037_ExpectedEncoding[] =
{
    0x10, 0x21, 0x1d, 0x68, 0x74, 0x1e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x84, 0x29,
    0x93, 0xc9, 0x88, 0xe1, 0xe5, 0xc8, 0x31, 0xd1, 0xee, 0x01, 0x02, 0x9b, 0x56, 0x55, 0x0f, 0x94,
    0xce, 0x22, 0x88, 0xb9, 0x01, 0x8c, 0x7e, 0x3e, 0xe2, 0xf4, 0xd0, 0xbb, 0x2d, 0x9a, 0x40, 0x34,
    0xdc, 0x8f, 0xf7, 0x2e,
};

static const MessageEncodingTestVector sMessageEncodingTest0037 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x1E74681D,
        kWeaveHeaderFlag_DestNodeId,
        0x2984,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0037_EncryptionKey,
    sMessageEncodingTest0037_Payload,
    sizeof(sMessageEncodingTest0037_Payload),
    sMessageEncodingTest0037_ExpectedEncoding,
    sizeof(sMessageEncodingTest0037_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0038_EncryptionKey =
{
    {
        0xa0, 0x04, 0x42, 0xfd, 0x0a, 0x5c, 0x3b, 0xec, 0x71, 0x1a, 0x31, 0xb9, 0xe9, 0x5f, 0x06, 0x59,
    }
};
static const uint8_t sMessageEncodingTest0038_Payload[] =
{
    0x69, 0x25, 0xfe, 0xb4, 0x65, 0xe5, 0xff, 0x99, 0x23, 0x9a, 0x3e, 0x19, 0xbe, 0x24, 0xa3, 0xfe,
};

static const uint8_t sMessageEncodingTest0038_ExpectedEncoding[] =
{
    0x20, 0x21, 0x88, 0x6f, 0x07, 0x68, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x37, 0x23,
    0x48, 0x99, 0xb1, 0xdf, 0x38, 0xb8, 0x4a, 0xb4, 0xd2, 0x80, 0x7e, 0x53, 0xb8, 0x6e, 0xc9, 0x87,
    0x6d, 0x78, 0x89, 0xd1, 0x2e, 0x4e, 0xcb, 0xcf,
};

static const MessageEncodingTestVector sMessageEncodingTest0038 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x68076F88,
        kWeaveHeaderFlag_DestNodeId,
        0x2337,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0038_EncryptionKey,
    sMessageEncodingTest0038_Payload,
    sizeof(sMessageEncodingTest0038_Payload),
    sMessageEncodingTest0038_ExpectedEncoding,
    sizeof(sMessageEncodingTest0038_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0039_EncryptionKey =
{
    {
        0xe8, 0x5e, 0xfa, 0x98, 0x84, 0xfc, 0x65, 0x66, 0x96, 0x4e, 0xd5, 0x4e, 0xdb, 0xf4, 0xc0, 0x8a,
    }
};
static const uint8_t sMessageEncodingTest0039_Payload[] =
{
    0x0a, 0x4d, 0xa2, 0x84, 0xb9, 0xb2, 0x71, 0xd5, 0x38, 0xbb, 0x4a, 0x4a, 0xcd, 0x2f, 0xef, 0x84,
};

static const uint8_t sMessageEncodingTest0039_ExpectedEncoding[] =
{
    0x30, 0x21, 0xce, 0x88, 0xfa, 0xf0, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe9, 0x21,
    0x1f, 0x2d, 0x0c, 0x0a, 0x8b, 0xff, 0x74, 0xc6, 0xe9, 0x56, 0x60, 0xf5, 0x52, 0x7c, 0xef, 0x82,
    0x65, 0xa6, 0xe7, 0xf5, 0x09, 0xc0, 0xb0, 0xf9, 0xfa, 0x19, 0x75, 0x96, 0xda, 0x39, 0x39, 0x78,
};

static const MessageEncodingTestVector sMessageEncodingTest0039 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xF0FA88CE,
        kWeaveHeaderFlag_DestNodeId,
        0x21E9,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0039_EncryptionKey,
    sMessageEncodingTest0039_Payload,
    sizeof(sMessageEncodingTest0039_Payload),
    sMessageEncodingTest0039_ExpectedEncoding,
    sizeof(sMessageEncodingTest0039_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0040_Payload[] =
{
    0xae, 0xb7, 0x4f, 0x41, 0xc8, 0xe4, 0x30, 0xd0, 0x64, 0x3f, 0x7f, 0x3d, 0x0e, 0xf5, 0x5d, 0xcc,
};

static const uint8_t sMessageEncodingTest0040_ExpectedEncoding[] =
{
    0x00, 0x26, 0xea, 0x6b, 0xac, 0x1d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xae, 0xb7,
    0x4f, 0x41, 0xc8, 0xe4, 0x30, 0xd0, 0x64, 0x3f, 0x7f, 0x3d, 0x0e, 0xf5, 0x5d, 0xcc,
};

static const MessageEncodingTestVector sMessageEncodingTest0040 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x1DAC6BEA,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0040_Payload,
    sizeof(sMessageEncodingTest0040_Payload),
    sMessageEncodingTest0040_ExpectedEncoding,
    sizeof(sMessageEncodingTest0040_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0041_EncryptionKey =
{
    {
        0xd2, 0x30, 0x58, 0xb7, 0xea, 0x6f, 0xaf, 0xe8, 0x4c, 0xde, 0x44, 0x40, 0x48, 0x47, 0xe3, 0x3c,
    },
    {
        0x77, 0xf6, 0x87, 0x13, 0x02, 0x6f, 0x45, 0x48, 0x78, 0xf9, 0x1a, 0x72, 0x48, 0x43, 0x90, 0x5b,
        0xcf, 0xcd, 0xcd, 0x6e,
    }
};
static const uint8_t sMessageEncodingTest0041_Payload[] =
{
    0xf1, 0x5a, 0xd6, 0xe6, 0xc9, 0xa0, 0x2e, 0xcf, 0x20, 0xc3, 0x91, 0xef, 0xc3, 0x11, 0x1e, 0x5a,
};

static const uint8_t sMessageEncodingTest0041_ExpectedEncoding[] =
{
    0x10, 0x26, 0x4a, 0x76, 0x54, 0x2c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x05, 0x29,
    0xd5, 0xba, 0xd6, 0x6e, 0xfd, 0x66, 0x89, 0xde, 0xc3, 0xce, 0x58, 0xb5, 0x32, 0x5d, 0xdd, 0x33,
    0x04, 0xb2, 0x0a, 0x4b, 0xb4, 0x38, 0xa6, 0x11, 0xa4, 0x05, 0x86, 0xdc, 0x90, 0x6b, 0x1d, 0xe9,
    0x42, 0x53, 0x12, 0x4d,
};

static const MessageEncodingTestVector sMessageEncodingTest0041 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x2C54764A,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2905,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0041_EncryptionKey,
    sMessageEncodingTest0041_Payload,
    sizeof(sMessageEncodingTest0041_Payload),
    sMessageEncodingTest0041_ExpectedEncoding,
    sizeof(sMessageEncodingTest0041_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0042_EncryptionKey =
{
    {
        0xad, 0x27, 0xe5, 0x51, 0x88, 0xdb, 0x85, 0xd4, 0x93, 0x74, 0xd1, 0x19, 0xd8, 0x31, 0xea, 0x2f,
    }
};
static const uint8_t sMessageEncodingTest0042_Payload[] =
{
    0x5c, 0xfc, 0x9b, 0x88, 0xf2, 0xae, 0x05, 0xbe, 0x40, 0x9f, 0x08, 0x57, 0xd6, 0xfd, 0x15, 0x50,
};

static const uint8_t sMessageEncodingTest0042_ExpectedEncoding[] =
{
    0x20, 0x26, 0xb5, 0x4b, 0x01, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x96, 0x20,
    0x0c, 0xb5, 0xa7, 0xde, 0x03, 0x79, 0x0d, 0x29, 0x8c, 0x49, 0xb4, 0x11, 0x6a, 0x65, 0xc2, 0x38,
    0xe7, 0xaf, 0x2d, 0x98, 0x8c, 0x69, 0x83, 0xc1,
};

static const MessageEncodingTestVector sMessageEncodingTest0042 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x6D014BB5,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2096,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0042_EncryptionKey,
    sMessageEncodingTest0042_Payload,
    sizeof(sMessageEncodingTest0042_Payload),
    sMessageEncodingTest0042_ExpectedEncoding,
    sizeof(sMessageEncodingTest0042_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0043_EncryptionKey =
{
    {
        0xc1, 0xd8, 0xe7, 0xca, 0x0a, 0x0d, 0x8a, 0xab, 0x60, 0x29, 0xa8, 0x2d, 0x13, 0xa2, 0xa7, 0x19,
    }
};
static const uint8_t sMessageEncodingTest0043_Payload[] =
{
    0x48, 0xcb, 0xb4, 0x00, 0xf5, 0x96, 0x74, 0x92, 0x12, 0x7b, 0xa6, 0x26, 0x5c, 0x5b, 0x64, 0xb0,
};

static const uint8_t sMessageEncodingTest0043_ExpectedEncoding[] =
{
    0x30, 0x26, 0x87, 0x9d, 0x5f, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x19, 0x2f,
    0xba, 0x26, 0xca, 0x61, 0x38, 0x15, 0x10, 0x5d, 0xd2, 0xed, 0x3b, 0x30, 0x9b, 0x4b, 0x42, 0xfc,
    0x5a, 0x9f, 0x78, 0x4b, 0x2a, 0x7a, 0x9a, 0x2a, 0xc7, 0x9c, 0x06, 0x25, 0x1b, 0x88, 0x91, 0x24,
};

static const MessageEncodingTestVector sMessageEncodingTest0043 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x335F9D87,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2F19,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0043_EncryptionKey,
    sMessageEncodingTest0043_Payload,
    sizeof(sMessageEncodingTest0043_Payload),
    sMessageEncodingTest0043_ExpectedEncoding,
    sizeof(sMessageEncodingTest0043_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0044_Payload[] =
{
    0x71, 0x95, 0xfe, 0xaf, 0x6f, 0x0a, 0x6b, 0x86, 0x73, 0x5b, 0x33, 0xc9, 0x1c, 0x59, 0xbe, 0x6a,
};

static const uint8_t sMessageEncodingTest0044_ExpectedEncoding[] =
{
    0x00, 0x1a, 0xa8, 0xe2, 0xd8, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x71, 0x95,
    0xfe, 0xaf, 0x6f, 0x0a, 0x6b, 0x86, 0x73, 0x5b, 0x33, 0xc9, 0x1c, 0x59, 0xbe, 0x6a,
};

static const MessageEncodingTestVector sMessageEncodingTest0044 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x90D8E2A8,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0044_Payload,
    sizeof(sMessageEncodingTest0044_Payload),
    sMessageEncodingTest0044_ExpectedEncoding,
    sizeof(sMessageEncodingTest0044_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0045_EncryptionKey =
{
    {
        0xa9, 0x60, 0x56, 0xdd, 0x3b, 0xbd, 0x56, 0x8c, 0xab, 0x65, 0xd0, 0xd9, 0x56, 0x10, 0x68, 0x40,
    },
    {
        0x5c, 0xa7, 0xc7, 0x4e, 0x75, 0x62, 0x74, 0xf6, 0x71, 0x1e, 0xe1, 0x06, 0xa4, 0x59, 0x01, 0xe8,
        0x65, 0x5e, 0x28, 0xa3,
    }
};
static const uint8_t sMessageEncodingTest0045_Payload[] =
{
    0x7d, 0xf3, 0x63, 0x51, 0x63, 0x2a, 0xa6, 0xd1, 0x67, 0x26, 0x4d, 0x24, 0x02, 0xbd, 0x3f, 0x2a,
};

static const uint8_t sMessageEncodingTest0045_ExpectedEncoding[] =
{
    0x10, 0x1a, 0xd9, 0xf6, 0x42, 0x58, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xea, 0x25,
    0x11, 0x1f, 0xb7, 0x59, 0x1a, 0xfb, 0x9f, 0x1c, 0xed, 0x79, 0xc0, 0x91, 0x12, 0xa3, 0xa5, 0x11,
    0xb4, 0x4c, 0xbb, 0xf9, 0x1d, 0x71, 0xcb, 0x61, 0x5f, 0xbe, 0x35, 0x0f, 0xba, 0xad, 0x1b, 0xa4,
    0xa4, 0x7f, 0x2c, 0x46,
};

static const MessageEncodingTestVector sMessageEncodingTest0045 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x5842F6D9,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x25EA,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0045_EncryptionKey,
    sMessageEncodingTest0045_Payload,
    sizeof(sMessageEncodingTest0045_Payload),
    sMessageEncodingTest0045_ExpectedEncoding,
    sizeof(sMessageEncodingTest0045_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0046_EncryptionKey =
{
    {
        0x7e, 0x2b, 0x8a, 0xd7, 0x39, 0x1b, 0x4e, 0x00, 0x86, 0x0a, 0x5d, 0x4c, 0xf6, 0x58, 0x04, 0x50,
    }
};
static const uint8_t sMessageEncodingTest0046_Payload[] =
{
    0xea, 0x84, 0x0d, 0x3a, 0x4b, 0x72, 0xd7, 0x0c, 0x21, 0x65, 0x48, 0xdf, 0xca, 0x37, 0x88, 0x79,
};

static const uint8_t sMessageEncodingTest0046_ExpectedEncoding[] =
{
    0x20, 0x1a, 0x08, 0xd5, 0xc3, 0x8a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xaf, 0x2e,
    0xab, 0xcc, 0x3d, 0xf7, 0x6a, 0x82, 0xd2, 0xe2, 0xe9, 0x29, 0x45, 0x55, 0x25, 0x82, 0x07, 0xde,
    0xcf, 0x23, 0xff, 0x26, 0x41, 0x9e, 0xed, 0x73,
};

static const MessageEncodingTestVector sMessageEncodingTest0046 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x8AC3D508,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2EAF,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0046_EncryptionKey,
    sMessageEncodingTest0046_Payload,
    sizeof(sMessageEncodingTest0046_Payload),
    sMessageEncodingTest0046_ExpectedEncoding,
    sizeof(sMessageEncodingTest0046_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0047_EncryptionKey =
{
    {
        0x09, 0x10, 0xb6, 0xe0, 0xa1, 0xa8, 0x09, 0x43, 0xc5, 0x46, 0xbd, 0x54, 0x04, 0x61, 0xc8, 0x78,
    }
};
static const uint8_t sMessageEncodingTest0047_Payload[] =
{
    0x39, 0xff, 0xab, 0x18, 0xd2, 0x47, 0xa6, 0xe2, 0x6f, 0x02, 0x97, 0xd0, 0xe1, 0x9e, 0x6d, 0xfc,
};

static const uint8_t sMessageEncodingTest0047_ExpectedEncoding[] =
{
    0x30, 0x1a, 0x8d, 0x3c, 0x8d, 0x13, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf7, 0x27,
    0x4c, 0x11, 0xd7, 0x12, 0xdb, 0xbc, 0x43, 0xbd, 0x2c, 0x5b, 0x36, 0x86, 0x9c, 0xf3, 0x52, 0x0f,
    0x88, 0x1e, 0x90, 0x86, 0xa2, 0xcb, 0xaa, 0x01, 0x4e, 0xa6, 0x7a, 0x3d, 0xca, 0x75, 0xdf, 0x2e,
};

static const MessageEncodingTestVector sMessageEncodingTest0047 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x138D3C8D,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x27F7,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0047_EncryptionKey,
    sMessageEncodingTest0047_Payload,
    sizeof(sMessageEncodingTest0047_Payload),
    sMessageEncodingTest0047_ExpectedEncoding,
    sizeof(sMessageEncodingTest0047_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0048_Payload[] =
{
    0x1c, 0xb0, 0x13, 0x12, 0xe1, 0x22, 0xb2, 0x6e, 0xb0, 0x79, 0x60, 0x9b, 0xe7, 0xa5, 0x9e, 0x8c,
};

static const uint8_t sMessageEncodingTest0048_ExpectedEncoding[] =
{
    0x00, 0x2a, 0xd2, 0xfd, 0xa6, 0xea, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x1c, 0xb0,
    0x13, 0x12, 0xe1, 0x22, 0xb2, 0x6e, 0xb0, 0x79, 0x60, 0x9b, 0xe7, 0xa5, 0x9e, 0x8c,
};

static const MessageEncodingTestVector sMessageEncodingTest0048 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xEAA6FDD2,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0048_Payload,
    sizeof(sMessageEncodingTest0048_Payload),
    sMessageEncodingTest0048_ExpectedEncoding,
    sizeof(sMessageEncodingTest0048_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0049_EncryptionKey =
{
    {
        0xaf, 0xc0, 0x47, 0x5a, 0x28, 0x25, 0x87, 0x1f, 0x14, 0xa8, 0x99, 0xd1, 0x5f, 0x23, 0xb3, 0x1c,
    },
    {
        0x52, 0xd6, 0xa5, 0x68, 0x69, 0x3d, 0xd7, 0x10, 0xa5, 0x1c, 0x8a, 0xe2, 0x84, 0xba, 0xc2, 0x22,
        0x71, 0xf2, 0x49, 0xe2,
    }
};
static const uint8_t sMessageEncodingTest0049_Payload[] =
{
    0x87, 0x6c, 0x7c, 0x82, 0x7a, 0xc5, 0xd7, 0x80, 0xe1, 0x9c, 0x58, 0x71, 0x44, 0x4d, 0xe2, 0x61,
};

static const uint8_t sMessageEncodingTest0049_ExpectedEncoding[] =
{
    0x10, 0x2a, 0x2d, 0x9a, 0xea, 0xfe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5a, 0x29,
    0x79, 0x2d, 0x79, 0x1a, 0xb9, 0xe6, 0x58, 0x3a, 0x10, 0x08, 0xbf, 0x1d, 0x25, 0x7c, 0x7e, 0x41,
    0x45, 0xea, 0x86, 0x80, 0x06, 0x99, 0x5a, 0xe7, 0xe0, 0x4f, 0x67, 0xb8, 0x1f, 0xb9, 0x2e, 0x03,
    0xa7, 0xf7, 0x54, 0x20,
};

static const MessageEncodingTestVector sMessageEncodingTest0049 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xFEEA9A2D,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x295A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0049_EncryptionKey,
    sMessageEncodingTest0049_Payload,
    sizeof(sMessageEncodingTest0049_Payload),
    sMessageEncodingTest0049_ExpectedEncoding,
    sizeof(sMessageEncodingTest0049_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0050_EncryptionKey =
{
    {
        0x12, 0x07, 0x66, 0x3c, 0x70, 0x88, 0xeb, 0x99, 0x61, 0x55, 0x16, 0x74, 0xde, 0x1e, 0x9a, 0x0d,
    }
};
static const uint8_t sMessageEncodingTest0050_Payload[] =
{
    0x8a, 0xc1, 0x12, 0xae, 0x95, 0xe0, 0x39, 0x84, 0x33, 0x32, 0xc0, 0x0f, 0x1d, 0x67, 0x8a, 0xe3,
};

static const uint8_t sMessageEncodingTest0050_ExpectedEncoding[] =
{
    0x20, 0x2a, 0xed, 0xad, 0x81, 0x9b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb6, 0x2a,
    0xb5, 0xf2, 0x1a, 0xb1, 0xee, 0xa9, 0x04, 0x73, 0x8a, 0xb8, 0x5c, 0x5a, 0x89, 0x4f, 0x65, 0x4e,
    0x7d, 0x92, 0xce, 0xc1, 0x58, 0x1c, 0x4b, 0xd4,
};

static const MessageEncodingTestVector sMessageEncodingTest0050 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x9B81ADED,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2AB6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0050_EncryptionKey,
    sMessageEncodingTest0050_Payload,
    sizeof(sMessageEncodingTest0050_Payload),
    sMessageEncodingTest0050_ExpectedEncoding,
    sizeof(sMessageEncodingTest0050_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0051_EncryptionKey =
{
    {
        0x74, 0xba, 0x0c, 0xe9, 0x87, 0x20, 0x1b, 0x8a, 0x83, 0x9e, 0x4a, 0xe6, 0xcf, 0xd3, 0xa3, 0x1e,
    }
};
static const uint8_t sMessageEncodingTest0051_Payload[] =
{
    0x1f, 0x79, 0xbf, 0x46, 0x2d, 0xbf, 0xb7, 0x58, 0x44, 0x6e, 0x74, 0xac, 0x2e, 0x79, 0xbf, 0x8e,
};

static const uint8_t sMessageEncodingTest0051_ExpectedEncoding[] =
{
    0x30, 0x2a, 0x4c, 0x90, 0x92, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xbe, 0x23,
    0xc2, 0xc4, 0xf5, 0x8f, 0x89, 0x94, 0x59, 0xfb, 0xd2, 0xe3, 0x5b, 0xd2, 0x4e, 0x8d, 0xaa, 0x7c,
    0x3b, 0xc2, 0x14, 0xb4, 0xec, 0x93, 0xc3, 0x38, 0xc6, 0x33, 0xcb, 0x59, 0x26, 0xb0, 0x9b, 0xb6,
};

static const MessageEncodingTestVector sMessageEncodingTest0051 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x8292904C,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x23BE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0051_EncryptionKey,
    sMessageEncodingTest0051_Payload,
    sizeof(sMessageEncodingTest0051_Payload),
    sMessageEncodingTest0051_ExpectedEncoding,
    sizeof(sMessageEncodingTest0051_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0052_Payload[] =
{
    0x13, 0x72, 0xbf, 0xe4, 0xdd, 0x3c, 0x27, 0x08, 0xf7, 0x83, 0xa7, 0xf0, 0x7d, 0x00, 0xd9, 0xb9,
};

static const uint8_t sMessageEncodingTest0052_ExpectedEncoding[] =
{
    0x00, 0x12, 0xe2, 0x6d, 0xd4, 0x88, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x13, 0x72,
    0xbf, 0xe4, 0xdd, 0x3c, 0x27, 0x08, 0xf7, 0x83, 0xa7, 0xf0, 0x7d, 0x00, 0xd9, 0xb9,
};

static const MessageEncodingTestVector sMessageEncodingTest0052 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x88D46DE2,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0052_Payload,
    sizeof(sMessageEncodingTest0052_Payload),
    sMessageEncodingTest0052_ExpectedEncoding,
    sizeof(sMessageEncodingTest0052_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0053_EncryptionKey =
{
    {
        0x18, 0xf8, 0x83, 0x8f, 0xfe, 0x75, 0x23, 0xb8, 0xd7, 0x90, 0x4c, 0x57, 0x99, 0xc5, 0x66, 0xf2,
    },
    {
        0x80, 0xff, 0x4b, 0x71, 0xb7, 0x96, 0x8e, 0x5f, 0x0c, 0xb9, 0x0d, 0xe9, 0xe4, 0x56, 0xb8, 0xa9,
        0x3a, 0x76, 0x76, 0xe8,
    }
};
static const uint8_t sMessageEncodingTest0053_Payload[] =
{
    0xa2, 0xca, 0x81, 0x38, 0x7c, 0x33, 0xa9, 0x98, 0xe9, 0xcd, 0x52, 0xc0, 0x22, 0x9f, 0x04, 0x71,
};

static const uint8_t sMessageEncodingTest0053_ExpectedEncoding[] =
{
    0x10, 0x12, 0xbf, 0x35, 0x4e, 0xd3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc2, 0x20,
    0x27, 0x38, 0x9d, 0xf1, 0x1e, 0xa7, 0x10, 0xff, 0x8d, 0xc0, 0x4d, 0xfc, 0x8c, 0xfd, 0x64, 0x29,
    0xa6, 0xf8, 0x5a, 0x2f, 0xc2, 0xe7, 0x80, 0xd8, 0xff, 0x29, 0x81, 0xc5, 0x4d, 0x19, 0x06, 0xbe,
    0xff, 0x3a, 0xa2, 0xa7,
};

static const MessageEncodingTestVector sMessageEncodingTest0053 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xD34E35BF,
        kWeaveHeaderFlag_SourceNodeId,
        0x20C2,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0053_EncryptionKey,
    sMessageEncodingTest0053_Payload,
    sizeof(sMessageEncodingTest0053_Payload),
    sMessageEncodingTest0053_ExpectedEncoding,
    sizeof(sMessageEncodingTest0053_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0054_EncryptionKey =
{
    {
        0x49, 0x4c, 0x32, 0xfe, 0xea, 0x6f, 0x71, 0x4a, 0x09, 0xee, 0x93, 0x5b, 0xe5, 0xea, 0xb1, 0x5c,
    }
};
static const uint8_t sMessageEncodingTest0054_Payload[] =
{
    0xaa, 0x6b, 0x7a, 0x3f, 0x2e, 0xba, 0x20, 0x9e, 0x77, 0x14, 0xf7, 0xe5, 0x05, 0xc2, 0x6d, 0x78,
};

static const uint8_t sMessageEncodingTest0054_ExpectedEncoding[] =
{
    0x20, 0x12, 0x90, 0xd6, 0x89, 0x3e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2b, 0x2a,
    0x0b, 0x0c, 0x19, 0x23, 0x95, 0xdd, 0x16, 0xa7, 0xdf, 0x47, 0x43, 0x08, 0xbf, 0x91, 0x96, 0x73,
    0x83, 0xc1, 0x6c, 0x16, 0x61, 0x8a, 0x5b, 0x1c,
};

static const MessageEncodingTestVector sMessageEncodingTest0054 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x3E89D690,
        kWeaveHeaderFlag_SourceNodeId,
        0x2A2B,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0054_EncryptionKey,
    sMessageEncodingTest0054_Payload,
    sizeof(sMessageEncodingTest0054_Payload),
    sMessageEncodingTest0054_ExpectedEncoding,
    sizeof(sMessageEncodingTest0054_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0055_EncryptionKey =
{
    {
        0x55, 0x84, 0x5b, 0xd5, 0xef, 0x8a, 0xfc, 0x7d, 0x18, 0x4b, 0x9a, 0xb7, 0xbf, 0xfb, 0xf7, 0x41,
    }
};
static const uint8_t sMessageEncodingTest0055_Payload[] =
{
    0xfa, 0x6d, 0x55, 0x05, 0x37, 0x59, 0xb0, 0x9c, 0xca, 0xad, 0x45, 0xa8, 0x97, 0xa3, 0x56, 0xe5,
};

static const uint8_t sMessageEncodingTest0055_ExpectedEncoding[] =
{
    0x30, 0x12, 0xd9, 0xad, 0xf2, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0c, 0x27,
    0xf8, 0x15, 0xd9, 0x51, 0x55, 0x65, 0xc1, 0x31, 0x37, 0xc2, 0xf0, 0x44, 0x3a, 0xb3, 0x64, 0x35,
    0x31, 0x9f, 0x9d, 0x25, 0x71, 0x78, 0x1f, 0x01, 0x98, 0x43, 0xa5, 0x45, 0x40, 0x31, 0xec, 0xb6,
};

static const MessageEncodingTestVector sMessageEncodingTest0055 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xBFF2ADD9,
        kWeaveHeaderFlag_SourceNodeId,
        0x270C,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0055_EncryptionKey,
    sMessageEncodingTest0055_Payload,
    sizeof(sMessageEncodingTest0055_Payload),
    sMessageEncodingTest0055_ExpectedEncoding,
    sizeof(sMessageEncodingTest0055_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0056_Payload[] =
{
    0xa0, 0x17, 0xba, 0xad, 0x7f, 0x27, 0x23, 0xb3, 0xce, 0x00, 0xe0, 0xbb, 0xea, 0x6e, 0xfc, 0x3d,
};

static const uint8_t sMessageEncodingTest0056_ExpectedEncoding[] =
{
    0x00, 0x22, 0xa2, 0x21, 0xbd, 0x39, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa0, 0x17,
    0xba, 0xad, 0x7f, 0x27, 0x23, 0xb3, 0xce, 0x00, 0xe0, 0xbb, 0xea, 0x6e, 0xfc, 0x3d,
};

static const MessageEncodingTestVector sMessageEncodingTest0056 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x39BD21A2,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0056_Payload,
    sizeof(sMessageEncodingTest0056_Payload),
    sMessageEncodingTest0056_ExpectedEncoding,
    sizeof(sMessageEncodingTest0056_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0057_EncryptionKey =
{
    {
        0x36, 0x21, 0x9b, 0x2f, 0x0f, 0xfe, 0x96, 0x4c, 0xe1, 0xd5, 0x21, 0xb8, 0x3e, 0x50, 0xaa, 0x89,
    },
    {
        0xf4, 0x27, 0xf6, 0x4e, 0x7b, 0xf1, 0x7f, 0x51, 0x7e, 0xf2, 0x54, 0x73, 0xda, 0xcf, 0xe0, 0x97,
        0x1a, 0xe3, 0xa1, 0xfa,
    }
};
static const uint8_t sMessageEncodingTest0057_Payload[] =
{
    0xa5, 0xd9, 0x14, 0xeb, 0xee, 0x19, 0xca, 0x78, 0x97, 0x57, 0x37, 0x32, 0xec, 0xac, 0xae, 0x41,
};

static const uint8_t sMessageEncodingTest0057_ExpectedEncoding[] =
{
    0x10, 0x22, 0x27, 0x7d, 0xb0, 0x6d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf7, 0x27,
    0xd9, 0x61, 0x54, 0xe6, 0x2e, 0x7d, 0x93, 0x7e, 0x67, 0x7b, 0x3a, 0x00, 0x62, 0x78, 0x48, 0x74,
    0x5f, 0x72, 0x8e, 0xfc, 0x2e, 0x0e, 0x0b, 0x72, 0x72, 0x38, 0xb3, 0xe3, 0x60, 0x55, 0xf7, 0x5d,
    0x13, 0x29, 0x62, 0x4a,
};

static const MessageEncodingTestVector sMessageEncodingTest0057 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x6DB07D27,
        kWeaveHeaderFlag_SourceNodeId,
        0x27F7,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0057_EncryptionKey,
    sMessageEncodingTest0057_Payload,
    sizeof(sMessageEncodingTest0057_Payload),
    sMessageEncodingTest0057_ExpectedEncoding,
    sizeof(sMessageEncodingTest0057_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0058_EncryptionKey =
{
    {
        0x54, 0x7e, 0xff, 0x02, 0x06, 0xbc, 0x8f, 0x8c, 0x9e, 0x87, 0xdf, 0x0a, 0xec, 0x30, 0x78, 0x99,
    }
};
static const uint8_t sMessageEncodingTest0058_Payload[] =
{
    0x90, 0x4b, 0xe2, 0x0d, 0x22, 0x64, 0x36, 0x4a, 0x73, 0x5c, 0x16, 0x8f, 0x16, 0xce, 0x8e, 0xfa,
};

static const uint8_t sMessageEncodingTest0058_ExpectedEncoding[] =
{
    0x20, 0x22, 0xdd, 0x13, 0xeb, 0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa1, 0x25,
    0xce, 0x24, 0xf9, 0xb6, 0x67, 0xcc, 0x20, 0xb4, 0xbe, 0x22, 0x27, 0x4e, 0x25, 0xf0, 0x69, 0x7c,
    0xc2, 0xbe, 0x52, 0xb9, 0x4d, 0x1d, 0x73, 0x73,
};

static const MessageEncodingTestVector sMessageEncodingTest0058 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xC8EB13DD,
        kWeaveHeaderFlag_SourceNodeId,
        0x25A1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0058_EncryptionKey,
    sMessageEncodingTest0058_Payload,
    sizeof(sMessageEncodingTest0058_Payload),
    sMessageEncodingTest0058_ExpectedEncoding,
    sizeof(sMessageEncodingTest0058_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0059_EncryptionKey =
{
    {
        0x1a, 0x74, 0x65, 0x9e, 0x10, 0x77, 0x66, 0x06, 0xb1, 0xfd, 0x90, 0x7e, 0xfd, 0x10, 0xaa, 0x2d,
    }
};
static const uint8_t sMessageEncodingTest0059_Payload[] =
{
    0xfb, 0xdf, 0x79, 0x22, 0x6c, 0xad, 0x92, 0x3a, 0x2b, 0xa3, 0x5a, 0xf9, 0x71, 0x70, 0x65, 0x15,
};

static const uint8_t sMessageEncodingTest0059_ExpectedEncoding[] =
{
    0x30, 0x22, 0xd9, 0x49, 0xff, 0xdf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf6, 0x20,
    0x77, 0x0a, 0x4a, 0xfe, 0xbd, 0x13, 0x6e, 0x26, 0x01, 0x6b, 0x0f, 0xa2, 0x1d, 0xa6, 0xc9, 0x78,
    0xca, 0x16, 0x75, 0xda, 0xc6, 0x51, 0x43, 0x57, 0x81, 0x6c, 0xf3, 0xb0, 0x87, 0x0d, 0x23, 0x1b,
};

static const MessageEncodingTestVector sMessageEncodingTest0059 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xDFFF49D9,
        kWeaveHeaderFlag_SourceNodeId,
        0x20F6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0059_EncryptionKey,
    sMessageEncodingTest0059_Payload,
    sizeof(sMessageEncodingTest0059_Payload),
    sMessageEncodingTest0059_ExpectedEncoding,
    sizeof(sMessageEncodingTest0059_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0060_Payload[] =
{
    0x4a, 0xaf, 0x37, 0x00, 0x41, 0x19, 0xbd, 0x52, 0x6b, 0x99, 0xe1, 0xed, 0x4f, 0xa5, 0x05, 0x26,
};

static const uint8_t sMessageEncodingTest0060_ExpectedEncoding[] =
{
    0x00, 0x24, 0xa7, 0xcf, 0x7a, 0xba, 0x4a, 0xaf, 0x37, 0x00, 0x41, 0x19, 0xbd, 0x52, 0x6b, 0x99,
    0xe1, 0xed, 0x4f, 0xa5, 0x05, 0x26,
};

static const MessageEncodingTestVector sMessageEncodingTest0060 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xBA7ACFA7,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0060_Payload,
    sizeof(sMessageEncodingTest0060_Payload),
    sMessageEncodingTest0060_ExpectedEncoding,
    sizeof(sMessageEncodingTest0060_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0061_EncryptionKey =
{
    {
        0x77, 0x15, 0xe5, 0xcd, 0x2f, 0xd9, 0xb4, 0xbd, 0xfc, 0xc2, 0xdb, 0xa4, 0x6e, 0xe8, 0x45, 0x1c,
    },
    {
        0xde, 0xde, 0x1d, 0xd1, 0x1a, 0xd4, 0x6c, 0x83, 0x61, 0x9e, 0xc8, 0x49, 0xf7, 0xfa, 0x93, 0x46,
        0x09, 0x5e, 0xb9, 0x04,
    }
};
static const uint8_t sMessageEncodingTest0061_Payload[] =
{
    0xbd, 0xde, 0x63, 0x3a, 0x37, 0x08, 0x4b, 0xb4, 0xa8, 0xad, 0xa4, 0x24, 0xe4, 0x9f, 0x19, 0xbb,
};

static const uint8_t sMessageEncodingTest0061_ExpectedEncoding[] =
{
    0x10, 0x24, 0x7f, 0xb2, 0xe5, 0x83, 0xa6, 0x2c, 0x31, 0x17, 0xf2, 0xf1, 0xfc, 0xce, 0x53, 0xa3,
    0x4e, 0x33, 0x09, 0x00, 0xd2, 0xea, 0x8b, 0x53, 0xc8, 0xac, 0xd9, 0xb6, 0xa6, 0x50, 0xb1, 0xe0,
    0xac, 0xc7, 0x5b, 0xea, 0xdc, 0x4c, 0xa4, 0xe7, 0x2e, 0xa7, 0xaf, 0x33,
};

static const MessageEncodingTestVector sMessageEncodingTest0061 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x83E5B27F,
        kWeaveHeaderFlag_TunneledData,
        0x2CA6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0061_EncryptionKey,
    sMessageEncodingTest0061_Payload,
    sizeof(sMessageEncodingTest0061_Payload),
    sMessageEncodingTest0061_ExpectedEncoding,
    sizeof(sMessageEncodingTest0061_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0062_EncryptionKey =
{
    {
        0xdf, 0xba, 0x2a, 0xb3, 0xae, 0x3d, 0x08, 0x73, 0x80, 0xc6, 0xb0, 0xfc, 0x70, 0x67, 0x80, 0xce,
    }
};
static const uint8_t sMessageEncodingTest0062_Payload[] =
{
    0xa1, 0xb9, 0x19, 0xfe, 0x17, 0x98, 0x5f, 0x4e, 0xf1, 0xe3, 0x80, 0x69, 0x9f, 0x03, 0x81, 0x46,
};

static const uint8_t sMessageEncodingTest0062_ExpectedEncoding[] =
{
    0x20, 0x24, 0xa1, 0x6d, 0x0b, 0xc7, 0x70, 0x27, 0x48, 0xaf, 0x67, 0x8c, 0x60, 0x49, 0x76, 0xfc,
    0xc6, 0x8f, 0x8d, 0x13, 0x67, 0x0f, 0xb1, 0xa2, 0x36, 0xf5, 0x42, 0x2a, 0x09, 0xfe, 0xbf, 0x2e,
};

static const MessageEncodingTestVector sMessageEncodingTest0062 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xC70B6DA1,
        kWeaveHeaderFlag_TunneledData,
        0x2770,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0062_EncryptionKey,
    sMessageEncodingTest0062_Payload,
    sizeof(sMessageEncodingTest0062_Payload),
    sMessageEncodingTest0062_ExpectedEncoding,
    sizeof(sMessageEncodingTest0062_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0063_EncryptionKey =
{
    {
        0x47, 0xbf, 0x36, 0xcf, 0x12, 0xd8, 0xfc, 0x08, 0xd4, 0x19, 0x3f, 0x35, 0x09, 0x27, 0x09, 0xbc,
    }
};
static const uint8_t sMessageEncodingTest0063_Payload[] =
{
    0x86, 0x25, 0x20, 0xb5, 0xc3, 0x34, 0xd1, 0x6e, 0x12, 0xf6, 0x07, 0x27, 0x43, 0x0a, 0x96, 0xfe,
};

static const uint8_t sMessageEncodingTest0063_ExpectedEncoding[] =
{
    0x30, 0x24, 0x65, 0xb4, 0xdf, 0xab, 0x3f, 0x24, 0x96, 0xdc, 0x67, 0xfc, 0xf1, 0xfa, 0x6e, 0xf7,
    0x8b, 0x74, 0x75, 0x8a, 0x8d, 0x7d, 0x89, 0x60, 0xc9, 0x52, 0x1c, 0x0f, 0x4d, 0xb4, 0x45, 0x6c,
    0x0f, 0x2e, 0xfe, 0xb5, 0x46, 0x6a, 0xb7, 0xf1,
};

static const MessageEncodingTestVector sMessageEncodingTest0063 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xABDFB465,
        kWeaveHeaderFlag_TunneledData,
        0x243F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0063_EncryptionKey,
    sMessageEncodingTest0063_Payload,
    sizeof(sMessageEncodingTest0063_Payload),
    sMessageEncodingTest0063_ExpectedEncoding,
    sizeof(sMessageEncodingTest0063_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0064_Payload[] =
{
    0xaf, 0x1d, 0x5d, 0x8c, 0xae, 0x07, 0x3b, 0x9a, 0xe3, 0xe9, 0x1f, 0xb2, 0x48, 0x3c, 0xfd, 0x92,
};

static const uint8_t sMessageEncodingTest0064_ExpectedEncoding[] =
{
    0x00, 0x18, 0x22, 0xee, 0xf6, 0x29, 0xaf, 0x1d, 0x5d, 0x8c, 0xae, 0x07, 0x3b, 0x9a, 0xe3, 0xe9,
    0x1f, 0xb2, 0x48, 0x3c, 0xfd, 0x92,
};

static const MessageEncodingTestVector sMessageEncodingTest0064 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x29F6EE22,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0064_Payload,
    sizeof(sMessageEncodingTest0064_Payload),
    sMessageEncodingTest0064_ExpectedEncoding,
    sizeof(sMessageEncodingTest0064_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0065_EncryptionKey =
{
    {
        0x90, 0xf2, 0x14, 0x99, 0xc8, 0xd1, 0x3e, 0x28, 0xca, 0x77, 0x34, 0xa0, 0xd0, 0x10, 0x4f, 0xca,
    },
    {
        0x9a, 0xe3, 0x1e, 0x8e, 0xfc, 0x1b, 0x73, 0x24, 0x05, 0xbf, 0xc0, 0xd5, 0xaf, 0xbd, 0x5c, 0x68,
        0xb1, 0xcd, 0x30, 0xb9,
    }
};
static const uint8_t sMessageEncodingTest0065_Payload[] =
{
    0xc2, 0x5f, 0x09, 0xeb, 0xc6, 0x4e, 0x92, 0xea, 0x0b, 0xe9, 0x6e, 0xa6, 0x86, 0x2a, 0x0a, 0x26,
};

static const uint8_t sMessageEncodingTest0065_ExpectedEncoding[] =
{
    0x10, 0x18, 0x9a, 0x40, 0xba, 0x78, 0x99, 0x20, 0xec, 0x6f, 0x0e, 0x43, 0xed, 0x4c, 0x11, 0x39,
    0xf1, 0xf1, 0x98, 0xf8, 0x7b, 0x13, 0x75, 0xc1, 0x59, 0x26, 0xa6, 0x6c, 0xf0, 0x7e, 0x43, 0x04,
    0x48, 0x05, 0x16, 0x84, 0x48, 0xda, 0x44, 0x63, 0x84, 0xdf, 0x81, 0xc9,
};

static const MessageEncodingTestVector sMessageEncodingTest0065 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x78BA409A,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2099,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0065_EncryptionKey,
    sMessageEncodingTest0065_Payload,
    sizeof(sMessageEncodingTest0065_Payload),
    sMessageEncodingTest0065_ExpectedEncoding,
    sizeof(sMessageEncodingTest0065_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0066_EncryptionKey =
{
    {
        0xb2, 0x17, 0x10, 0x81, 0x41, 0x31, 0x0a, 0xa0, 0xbb, 0x91, 0x54, 0xe6, 0xdc, 0x5c, 0x77, 0x40,
    }
};
static const uint8_t sMessageEncodingTest0066_Payload[] =
{
    0xf9, 0x2b, 0x7c, 0x4f, 0xda, 0x3c, 0xaa, 0x5e, 0x8f, 0x12, 0x36, 0xf4, 0x7a, 0xa7, 0x2d, 0xad,
};

static const uint8_t sMessageEncodingTest0066_ExpectedEncoding[] =
{
    0x20, 0x18, 0x1d, 0xca, 0x7a, 0xb6, 0xbd, 0x2b, 0x58, 0xb1, 0x87, 0xef, 0xb5, 0x58, 0x94, 0x35,
    0xc9, 0xde, 0xca, 0xd6, 0x33, 0xa3, 0x5f, 0xea, 0x2c, 0xca, 0xdc, 0xc8, 0x79, 0xa5, 0x1b, 0x04,
};

static const MessageEncodingTestVector sMessageEncodingTest0066 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xB67ACA1D,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2BBD,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0066_EncryptionKey,
    sMessageEncodingTest0066_Payload,
    sizeof(sMessageEncodingTest0066_Payload),
    sMessageEncodingTest0066_ExpectedEncoding,
    sizeof(sMessageEncodingTest0066_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0067_EncryptionKey =
{
    {
        0xe0, 0x68, 0x14, 0xf6, 0x83, 0x1f, 0xed, 0x07, 0x82, 0x4f, 0x0e, 0xd8, 0x73, 0x21, 0x37, 0xcc,
    }
};
static const uint8_t sMessageEncodingTest0067_Payload[] =
{
    0xd4, 0xa3, 0xb8, 0x69, 0xa0, 0x9b, 0x69, 0x0c, 0x40, 0x4f, 0xb2, 0xad, 0x39, 0x2b, 0xa6, 0x88,
};

static const uint8_t sMessageEncodingTest0067_ExpectedEncoding[] =
{
    0x30, 0x18, 0xea, 0xe0, 0x53, 0xd6, 0x6f, 0x21, 0xeb, 0xad, 0x55, 0xa0, 0x2a, 0xae, 0x8b, 0x70,
    0x54, 0xd4, 0x24, 0x4b, 0x39, 0x37, 0x07, 0x7b, 0x69, 0x0c, 0xf2, 0xed, 0xc9, 0x34, 0xfa, 0x8c,
    0xe6, 0xca, 0x75, 0x5e, 0x8a, 0x42, 0x9d, 0xe7,
};

static const MessageEncodingTestVector sMessageEncodingTest0067 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xD653E0EA,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x216F,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0067_EncryptionKey,
    sMessageEncodingTest0067_Payload,
    sizeof(sMessageEncodingTest0067_Payload),
    sMessageEncodingTest0067_ExpectedEncoding,
    sizeof(sMessageEncodingTest0067_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0068_Payload[] =
{
    0x4b, 0xf2, 0xdb, 0xc0, 0x61, 0x21, 0xa7, 0xe8, 0xd7, 0x20, 0xa1, 0xe1, 0xbb, 0x32, 0x9d, 0x2f,
};

static const uint8_t sMessageEncodingTest0068_ExpectedEncoding[] =
{
    0x00, 0x28, 0x59, 0xcc, 0xb8, 0x51, 0x4b, 0xf2, 0xdb, 0xc0, 0x61, 0x21, 0xa7, 0xe8, 0xd7, 0x20,
    0xa1, 0xe1, 0xbb, 0x32, 0x9d, 0x2f,
};

static const MessageEncodingTestVector sMessageEncodingTest0068 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x51B8CC59,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0068_Payload,
    sizeof(sMessageEncodingTest0068_Payload),
    sMessageEncodingTest0068_ExpectedEncoding,
    sizeof(sMessageEncodingTest0068_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0069_EncryptionKey =
{
    {
        0x96, 0xc4, 0x68, 0xfa, 0x9f, 0x81, 0x19, 0x19, 0x0b, 0x9d, 0xb3, 0xd7, 0xc7, 0x09, 0xe6, 0xd0,
    },
    {
        0x7a, 0x5c, 0x2c, 0x08, 0xe9, 0x53, 0xc9, 0xf9, 0x9e, 0x16, 0x01, 0x07, 0x15, 0xda, 0xc3, 0x9a,
        0xfe, 0xa0, 0x4d, 0x1e,
    }
};
static const uint8_t sMessageEncodingTest0069_Payload[] =
{
    0x31, 0x03, 0xe3, 0x62, 0x7f, 0x4f, 0x06, 0x20, 0x09, 0x54, 0x80, 0xec, 0x09, 0xcf, 0x8a, 0x4c,
};

static const uint8_t sMessageEncodingTest0069_ExpectedEncoding[] =
{
    0x10, 0x28, 0xcc, 0xb7, 0x50, 0xcb, 0x11, 0x28, 0x16, 0x74, 0xf4, 0x62, 0x58, 0x18, 0xa3, 0x40,
    0x99, 0x79, 0xb6, 0xdf, 0xef, 0xa2, 0x6c, 0xa4, 0x37, 0x8b, 0x84, 0x0d, 0x15, 0xf4, 0x8e, 0x5d,
    0xcc, 0x23, 0x97, 0xcd, 0x4e, 0x52, 0x3e, 0x1f, 0x27, 0x74, 0x43, 0x25,
};

static const MessageEncodingTestVector sMessageEncodingTest0069 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xCB50B7CC,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2811,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0069_EncryptionKey,
    sMessageEncodingTest0069_Payload,
    sizeof(sMessageEncodingTest0069_Payload),
    sMessageEncodingTest0069_ExpectedEncoding,
    sizeof(sMessageEncodingTest0069_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0070_EncryptionKey =
{
    {
        0x5f, 0x0c, 0xaf, 0x1d, 0xf2, 0x71, 0x1e, 0x1e, 0x4a, 0x87, 0x22, 0x2d, 0x54, 0x02, 0x39, 0x1d,
    }
};
static const uint8_t sMessageEncodingTest0070_Payload[] =
{
    0xfe, 0x4b, 0xa7, 0xeb, 0xcc, 0xda, 0xa6, 0x61, 0x78, 0x48, 0xf7, 0x2a, 0xcb, 0xaf, 0x93, 0xc8,
};

static const uint8_t sMessageEncodingTest0070_ExpectedEncoding[] =
{
    0x20, 0x28, 0x40, 0xb0, 0x32, 0x25, 0xf6, 0x22, 0x81, 0xd2, 0x8f, 0x42, 0xe6, 0xca, 0x05, 0xf2,
    0xed, 0x8a, 0x53, 0xf5, 0xbd, 0x9f, 0x4c, 0x0f, 0x69, 0x05, 0x5f, 0x89, 0x48, 0x8a, 0x24, 0xa1,
};

static const MessageEncodingTestVector sMessageEncodingTest0070 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x2532B040,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x22F6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0070_EncryptionKey,
    sMessageEncodingTest0070_Payload,
    sizeof(sMessageEncodingTest0070_Payload),
    sMessageEncodingTest0070_ExpectedEncoding,
    sizeof(sMessageEncodingTest0070_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0071_EncryptionKey =
{
    {
        0x4d, 0x49, 0x01, 0xa2, 0x45, 0x01, 0x2f, 0xb0, 0xee, 0xdf, 0x65, 0x95, 0x7a, 0xae, 0xa9, 0xb3,
    }
};
static const uint8_t sMessageEncodingTest0071_Payload[] =
{
    0x29, 0xac, 0x8e, 0x9e, 0x0e, 0x53, 0xc0, 0x0d, 0x8d, 0x1e, 0x13, 0xa6, 0x4a, 0x9a, 0x24, 0x47,
};

static const uint8_t sMessageEncodingTest0071_ExpectedEncoding[] =
{
    0x30, 0x28, 0x88, 0x64, 0xbd, 0xc8, 0x88, 0x28, 0xb8, 0xfa, 0xe9, 0xc5, 0x7d, 0xbd, 0xcf, 0x98,
    0x48, 0x9e, 0xe5, 0x91, 0xc6, 0xd8, 0xbe, 0xfa, 0x0a, 0x92, 0x9a, 0x62, 0x69, 0x09, 0xc5, 0xae,
    0xf3, 0x7c, 0x56, 0xd3, 0xa9, 0x77, 0x7f, 0xfa,
};

static const MessageEncodingTestVector sMessageEncodingTest0071 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xC8BD6488,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2888,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0071_EncryptionKey,
    sMessageEncodingTest0071_Payload,
    sizeof(sMessageEncodingTest0071_Payload),
    sMessageEncodingTest0071_ExpectedEncoding,
    sizeof(sMessageEncodingTest0071_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0072_Payload[] =
{
    0xf4, 0x5c, 0x3a, 0x65, 0x6a, 0x96, 0xeb, 0x53, 0x36, 0x61, 0x0f, 0x45, 0xc2, 0x31, 0x80, 0xa4,
};

static const uint8_t sMessageEncodingTest0072_ExpectedEncoding[] =
{
    0x00, 0x10, 0x61, 0xbb, 0xea, 0x36, 0xf4, 0x5c, 0x3a, 0x65, 0x6a, 0x96, 0xeb, 0x53, 0x36, 0x61,
    0x0f, 0x45, 0xc2, 0x31, 0x80, 0xa4,
};

static const MessageEncodingTestVector sMessageEncodingTest0072 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x36EABB61,
        0,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0072_Payload,
    sizeof(sMessageEncodingTest0072_Payload),
    sMessageEncodingTest0072_ExpectedEncoding,
    sizeof(sMessageEncodingTest0072_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0073_EncryptionKey =
{
    {
        0x98, 0x6f, 0xd3, 0xcc, 0x5a, 0x67, 0xcb, 0x24, 0xa5, 0xf1, 0x90, 0x94, 0xe8, 0x50, 0x1c, 0xb9,
    },
    {
        0x0e, 0xc7, 0x6a, 0x37, 0xee, 0x77, 0xc7, 0x94, 0xfa, 0xf5, 0xf1, 0x68, 0x20, 0x2b, 0x30, 0xca,
        0x2a, 0xbc, 0x5b, 0xa9,
    }
};
static const uint8_t sMessageEncodingTest0073_Payload[] =
{
    0xc5, 0x4d, 0xba, 0x07, 0x9e, 0x14, 0x2f, 0x4e, 0xd5, 0x27, 0x10, 0x40, 0x61, 0x70, 0xbe, 0xf0,
};

static const uint8_t sMessageEncodingTest0073_ExpectedEncoding[] =
{
    0x10, 0x10, 0x21, 0x85, 0xf4, 0x5d, 0x19, 0x22, 0xb3, 0x04, 0x0c, 0x91, 0xc2, 0xaa, 0xb8, 0xaa,
    0x8f, 0x73, 0xac, 0xa9, 0xd9, 0x07, 0x7a, 0xf7, 0x11, 0xf5, 0x4d, 0xd4, 0xf3, 0x04, 0x24, 0x9c,
    0x58, 0x99, 0xc7, 0xa0, 0x53, 0x08, 0x16, 0x62, 0x3e, 0x37, 0xb6, 0x04,
};

static const MessageEncodingTestVector sMessageEncodingTest0073 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x5DF48521,
        0,
        0x2219,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0073_EncryptionKey,
    sMessageEncodingTest0073_Payload,
    sizeof(sMessageEncodingTest0073_Payload),
    sMessageEncodingTest0073_ExpectedEncoding,
    sizeof(sMessageEncodingTest0073_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0074_EncryptionKey =
{
    {
        0x67, 0xfe, 0x6b, 0x88, 0x3c, 0x3c, 0x89, 0xde, 0xfd, 0x50, 0xc6, 0x1a, 0x27, 0x1b, 0x0d, 0x62,
    }
};
static const uint8_t sMessageEncodingTest0074_Payload[] =
{
    0x51, 0xe6, 0x83, 0x11, 0x3f, 0x3f, 0xf2, 0x94, 0x80, 0x62, 0xea, 0xf3, 0x16, 0xca, 0x21, 0x90,
};

static const uint8_t sMessageEncodingTest0074_ExpectedEncoding[] =
{
    0x20, 0x10, 0x08, 0x23, 0xa0, 0x7b, 0x3b, 0x2f, 0x70, 0x3b, 0x85, 0x64, 0xd6, 0xe1, 0xe9, 0x5b,
    0x4a, 0xbe, 0xc8, 0x1c, 0x2f, 0xa3, 0x22, 0x5a, 0x17, 0xb9, 0xe5, 0x2f, 0x7b, 0xab, 0x1b, 0x42,
};

static const MessageEncodingTestVector sMessageEncodingTest0074 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x7BA02308,
        0,
        0x2F3B,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0074_EncryptionKey,
    sMessageEncodingTest0074_Payload,
    sizeof(sMessageEncodingTest0074_Payload),
    sMessageEncodingTest0074_ExpectedEncoding,
    sizeof(sMessageEncodingTest0074_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0075_EncryptionKey =
{
    {
        0x09, 0x50, 0xae, 0x1d, 0xaf, 0xd0, 0xf5, 0x5b, 0x1a, 0x21, 0xac, 0x80, 0x02, 0x98, 0x06, 0x5c,
    }
};
static const uint8_t sMessageEncodingTest0075_Payload[] =
{
    0x13, 0x08, 0x8e, 0x58, 0x29, 0xcb, 0x7e, 0x28, 0xb0, 0x49, 0x00, 0x67, 0xd2, 0x09, 0x5c, 0x92,
};

static const uint8_t sMessageEncodingTest0075_ExpectedEncoding[] =
{
    0x30, 0x10, 0xf0, 0x97, 0x89, 0x07, 0xb5, 0x27, 0x5c, 0x08, 0xa8, 0x4e, 0x6b, 0x8d, 0xc1, 0xa4,
    0xcf, 0x3c, 0x51, 0x83, 0x06, 0xc9, 0x55, 0xbf, 0xe6, 0xb8, 0x19, 0x77, 0x44, 0x4a, 0xbf, 0xe7,
    0x2f, 0x23, 0x11, 0x31, 0x3b, 0x01, 0xd0, 0x0d,
};

static const MessageEncodingTestVector sMessageEncodingTest0075 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x078997F0,
        0,
        0x27B5,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0075_EncryptionKey,
    sMessageEncodingTest0075_Payload,
    sizeof(sMessageEncodingTest0075_Payload),
    sMessageEncodingTest0075_ExpectedEncoding,
    sizeof(sMessageEncodingTest0075_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0076_Payload[] =
{
    0x97, 0x90, 0x38, 0x5e, 0xe4, 0x99, 0x0b, 0x8b, 0x80, 0x90, 0x64, 0x18, 0x50, 0x15, 0x04, 0xf0,
};

static const uint8_t sMessageEncodingTest0076_ExpectedEncoding[] =
{
    0x00, 0x20, 0x6e, 0x7a, 0x7d, 0x4a, 0x97, 0x90, 0x38, 0x5e, 0xe4, 0x99, 0x0b, 0x8b, 0x80, 0x90,
    0x64, 0x18, 0x50, 0x15, 0x04, 0xf0,
};

static const MessageEncodingTestVector sMessageEncodingTest0076 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x4A7D7A6E,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0076_Payload,
    sizeof(sMessageEncodingTest0076_Payload),
    sMessageEncodingTest0076_ExpectedEncoding,
    sizeof(sMessageEncodingTest0076_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0077_EncryptionKey =
{
    {
        0xfe, 0xb6, 0x5f, 0x94, 0xf4, 0x22, 0xbf, 0x26, 0xeb, 0x77, 0x99, 0xef, 0x1e, 0xe6, 0x53, 0x57,
    },
    {
        0x72, 0xed, 0x93, 0xae, 0xff, 0x71, 0xd6, 0x36, 0x96, 0x61, 0x77, 0xac, 0xa1, 0xa5, 0x6c, 0x7e,
        0xbc, 0x9c, 0xc1, 0x23,
    }
};
static const uint8_t sMessageEncodingTest0077_Payload[] =
{
    0x3b, 0xd7, 0x61, 0x50, 0x64, 0x15, 0x9b, 0x84, 0x06, 0x05, 0x53, 0x30, 0x93, 0x01, 0xe4, 0x5e,
};

static const uint8_t sMessageEncodingTest0077_ExpectedEncoding[] =
{
    0x10, 0x20, 0x34, 0x7d, 0x36, 0x9f, 0x24, 0x2f, 0x29, 0x22, 0x2d, 0x4f, 0xb2, 0xc6, 0x75, 0x31,
    0x71, 0xcf, 0xa8, 0xb9, 0xf7, 0xf3, 0xfc, 0x99, 0x5c, 0xc9, 0x35, 0xcb, 0xbe, 0xdc, 0x81, 0x59,
    0x07, 0xea, 0xd6, 0xfa, 0xf4, 0x7e, 0xe3, 0x59, 0xbb, 0x6e, 0xcb, 0x00,
};

static const MessageEncodingTestVector sMessageEncodingTest0077 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x9F367D34,
        0,
        0x2F24,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0077_EncryptionKey,
    sMessageEncodingTest0077_Payload,
    sizeof(sMessageEncodingTest0077_Payload),
    sMessageEncodingTest0077_ExpectedEncoding,
    sizeof(sMessageEncodingTest0077_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0078_EncryptionKey =
{
    {
        0xa5, 0xf3, 0x9b, 0xca, 0xc8, 0xc4, 0x92, 0xbe, 0x39, 0x51, 0xf8, 0x29, 0x9a, 0x09, 0xb9, 0x4e,
    }
};
static const uint8_t sMessageEncodingTest0078_Payload[] =
{
    0xe9, 0x14, 0xcb, 0xa6, 0x9c, 0xc6, 0x8b, 0x4e, 0x08, 0x60, 0xd6, 0x52, 0xbf, 0xa1, 0x07, 0xf7,
};

static const uint8_t sMessageEncodingTest0078_ExpectedEncoding[] =
{
    0x20, 0x20, 0x48, 0x35, 0x83, 0x85, 0x96, 0x26, 0xa2, 0x98, 0x31, 0xf5, 0x88, 0xc1, 0x39, 0x40,
    0x37, 0xef, 0xfc, 0x14, 0x7c, 0x6a, 0x05, 0xc8, 0x3b, 0xe9, 0x41, 0x33, 0x95, 0xe5, 0x3a, 0x7e,
};

static const MessageEncodingTestVector sMessageEncodingTest0078 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0x85833548,
        0,
        0x2696,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0078_EncryptionKey,
    sMessageEncodingTest0078_Payload,
    sizeof(sMessageEncodingTest0078_Payload),
    sMessageEncodingTest0078_ExpectedEncoding,
    sizeof(sMessageEncodingTest0078_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0079_EncryptionKey =
{
    {
        0xae, 0x34, 0x2e, 0x55, 0xbd, 0x6e, 0x5f, 0x01, 0x20, 0xdf, 0xf8, 0xd4, 0x65, 0x36, 0x39, 0x48,
    }
};
static const uint8_t sMessageEncodingTest0079_Payload[] =
{
    0xf7, 0xae, 0xde, 0x1e, 0xdd, 0x65, 0x36, 0xdd, 0x23, 0x70, 0x56, 0x89, 0x3a, 0x88, 0x66, 0x92,
};

static const uint8_t sMessageEncodingTest0079_ExpectedEncoding[] =
{
    0x30, 0x20, 0xd2, 0x93, 0x50, 0xeb, 0xf0, 0x27, 0x5d, 0x98, 0x35, 0x62, 0xb2, 0xa5, 0x66, 0x64,
    0x3d, 0x0b, 0x91, 0x6d, 0x51, 0x0b, 0x96, 0x13, 0x35, 0x4c, 0x51, 0x6a, 0x53, 0x05, 0x73, 0xd3,
    0x9c, 0x2e, 0xa2, 0xc9, 0x60, 0x18, 0xc5, 0x1d,
};

static const MessageEncodingTestVector sMessageEncodingTest0079 =
{
    {
        0x18B4300000000001,
        0x18B4300000000042,
        0xEB5093D2,
        0,
        0x27F0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0079_EncryptionKey,
    sMessageEncodingTest0079_Payload,
    sizeof(sMessageEncodingTest0079_Payload),
    sMessageEncodingTest0079_ExpectedEncoding,
    sizeof(sMessageEncodingTest0079_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0080_Payload[] =
{
    0x2b, 0x57, 0x40, 0x76, 0x09, 0x66, 0x4f, 0xdb, 0x8b, 0xb6, 0x62, 0x9c, 0x71, 0x7c, 0x95, 0xc1,
};

static const uint8_t sMessageEncodingTest0080_ExpectedEncoding[] =
{
    0x00, 0x27, 0x29, 0x9b, 0x17, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2b, 0x57, 0x40, 0x76, 0x09, 0x66, 0x4f, 0xdb, 0x8b, 0xb6,
    0x62, 0x9c, 0x71, 0x7c, 0x95, 0xc1,
};

static const MessageEncodingTestVector sMessageEncodingTest0080 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xB7179B29,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0080_Payload,
    sizeof(sMessageEncodingTest0080_Payload),
    sMessageEncodingTest0080_ExpectedEncoding,
    sizeof(sMessageEncodingTest0080_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0081_EncryptionKey =
{
    {
        0x00, 0xa0, 0x5c, 0x14, 0x5b, 0x8e, 0x7e, 0x1f, 0x85, 0x69, 0xbe, 0x54, 0xd9, 0x7a, 0x15, 0x71,
    },
    {
        0x46, 0xef, 0x0b, 0xce, 0xa6, 0x3d, 0x01, 0x27, 0xfe, 0x3f, 0xed, 0x99, 0x3c, 0xb8, 0xd8, 0xee,
        0x87, 0x70, 0x5c, 0xf2,
    }
};
static const uint8_t sMessageEncodingTest0081_Payload[] =
{
    0x90, 0x19, 0x5c, 0x41, 0xfb, 0x26, 0x63, 0x86, 0x15, 0x8a, 0x59, 0xc9, 0x0c, 0x80, 0xbf, 0x84,
};

static const uint8_t sMessageEncodingTest0081_ExpectedEncoding[] =
{
    0x10, 0x27, 0xed, 0x68, 0x12, 0x63, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7d, 0x29, 0x7f, 0x1d, 0xd1, 0x40, 0xc4, 0x55, 0xd2, 0x94,
    0xa6, 0xf9, 0x68, 0x92, 0xfe, 0xb6, 0xdf, 0x9a, 0x2c, 0x24, 0x24, 0xcb, 0xf8, 0x5f, 0xbb, 0xfc,
    0xfc, 0xd3, 0xa8, 0xb9, 0xa6, 0xeb, 0x8d, 0xfb, 0xaa, 0x92, 0xaa, 0xe0,
};

static const MessageEncodingTestVector sMessageEncodingTest0081 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x631268ED,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x297D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0081_EncryptionKey,
    sMessageEncodingTest0081_Payload,
    sizeof(sMessageEncodingTest0081_Payload),
    sMessageEncodingTest0081_ExpectedEncoding,
    sizeof(sMessageEncodingTest0081_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0082_EncryptionKey =
{
    {
        0xeb, 0x54, 0xff, 0x77, 0x47, 0x27, 0x7c, 0xcb, 0x4d, 0x8e, 0xb0, 0x65, 0x99, 0xf9, 0xc1, 0xd1,
    }
};
static const uint8_t sMessageEncodingTest0082_Payload[] =
{
    0x15, 0xcb, 0x89, 0x22, 0xbb, 0xf7, 0xe5, 0xec, 0x43, 0x07, 0xba, 0x71, 0x32, 0x0d, 0x04, 0xe3,
};

static const uint8_t sMessageEncodingTest0082_ExpectedEncoding[] =
{
    0x20, 0x27, 0x90, 0xc0, 0x7a, 0xb2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x95, 0x23, 0xd1, 0x29, 0xb9, 0x43, 0xf4, 0x02, 0x2e, 0x6b,
    0x88, 0xe7, 0x77, 0x62, 0x18, 0xab, 0x62, 0xe1, 0x50, 0xd4, 0xc4, 0x77, 0x4d, 0xe6, 0x13, 0x17,
};

static const MessageEncodingTestVector sMessageEncodingTest0082 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xB27AC090,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2395,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0082_EncryptionKey,
    sMessageEncodingTest0082_Payload,
    sizeof(sMessageEncodingTest0082_Payload),
    sMessageEncodingTest0082_ExpectedEncoding,
    sizeof(sMessageEncodingTest0082_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0083_EncryptionKey =
{
    {
        0x32, 0x30, 0xf3, 0x99, 0x8b, 0xb9, 0x1f, 0xde, 0x18, 0xff, 0x51, 0x67, 0xc4, 0x22, 0x90, 0x04,
    }
};
static const uint8_t sMessageEncodingTest0083_Payload[] =
{
    0x7d, 0xb8, 0xb3, 0x50, 0x24, 0x4e, 0x39, 0xf1, 0x7a, 0x76, 0xca, 0x55, 0x5c, 0xef, 0x9c, 0x00,
};

static const uint8_t sMessageEncodingTest0083_ExpectedEncoding[] =
{
    0x30, 0x27, 0x1d, 0x40, 0x1f, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6b, 0x23, 0xc7, 0x57, 0xef, 0x97, 0x39, 0xae, 0x99, 0x92,
    0x89, 0xb1, 0x6a, 0xbd, 0x6d, 0x09, 0x59, 0xef, 0x89, 0x90, 0x7a, 0x23, 0x2c, 0xc2, 0x51, 0xb2,
    0xa8, 0x07, 0xf5, 0xe5, 0x99, 0x19, 0x85, 0xe4,
};

static const MessageEncodingTestVector sMessageEncodingTest0083 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xA01F401D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x236B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0083_EncryptionKey,
    sMessageEncodingTest0083_Payload,
    sizeof(sMessageEncodingTest0083_Payload),
    sMessageEncodingTest0083_ExpectedEncoding,
    sizeof(sMessageEncodingTest0083_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0084_Payload[] =
{
    0x46, 0xfc, 0xaa, 0xad, 0x88, 0xbd, 0x41, 0xb0, 0x43, 0xbc, 0x4c, 0x2c, 0x34, 0xc1, 0x99, 0x2b,
};

static const uint8_t sMessageEncodingTest0084_ExpectedEncoding[] =
{
    0x00, 0x1b, 0x3f, 0x25, 0xdd, 0xf4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x46, 0xfc, 0xaa, 0xad, 0x88, 0xbd, 0x41, 0xb0, 0x43, 0xbc,
    0x4c, 0x2c, 0x34, 0xc1, 0x99, 0x2b,
};

static const MessageEncodingTestVector sMessageEncodingTest0084 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xF4DD253F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0084_Payload,
    sizeof(sMessageEncodingTest0084_Payload),
    sMessageEncodingTest0084_ExpectedEncoding,
    sizeof(sMessageEncodingTest0084_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0085_EncryptionKey =
{
    {
        0xcb, 0x96, 0x91, 0x53, 0xbb, 0x52, 0x57, 0xcd, 0x44, 0x24, 0x38, 0x2b, 0xcd, 0x73, 0x2b, 0x90,
    },
    {
        0x12, 0xbd, 0xbb, 0x22, 0x47, 0x96, 0x37, 0x08, 0x46, 0x35, 0x74, 0xb0, 0xe0, 0xfa, 0x19, 0x2d,
        0x56, 0x12, 0xf0, 0xed,
    }
};
static const uint8_t sMessageEncodingTest0085_Payload[] =
{
    0x08, 0x03, 0x3f, 0xcd, 0x12, 0xca, 0xd9, 0x0e, 0x18, 0xad, 0x71, 0x13, 0xec, 0xed, 0x82, 0xa4,
};

static const uint8_t sMessageEncodingTest0085_ExpectedEncoding[] =
{
    0x10, 0x1b, 0x56, 0xe2, 0x75, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7a, 0x22, 0x62, 0x6c, 0xdf, 0xa0, 0x4a, 0x6a, 0xc6, 0xa4,
    0xd4, 0x29, 0x6d, 0xaa, 0xcb, 0x90, 0xfc, 0x8f, 0x2d, 0xaf, 0x68, 0xc3, 0x57, 0x5c, 0x11, 0x50,
    0x0b, 0x5d, 0xda, 0xda, 0x45, 0xa9, 0x33, 0x46, 0x50, 0xed, 0xa9, 0x50,
};

static const MessageEncodingTestVector sMessageEncodingTest0085 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xFC75E256,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x227A,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0085_EncryptionKey,
    sMessageEncodingTest0085_Payload,
    sizeof(sMessageEncodingTest0085_Payload),
    sMessageEncodingTest0085_ExpectedEncoding,
    sizeof(sMessageEncodingTest0085_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0086_EncryptionKey =
{
    {
        0xa5, 0x8c, 0x59, 0x81, 0x8c, 0xc5, 0xa3, 0x60, 0xe8, 0xe6, 0x7d, 0x9b, 0x1c, 0x32, 0xa8, 0x3b,
    }
};
static const uint8_t sMessageEncodingTest0086_Payload[] =
{
    0xb7, 0x8f, 0x37, 0x4c, 0x57, 0x89, 0x16, 0xe3, 0x83, 0xb5, 0x87, 0x6d, 0x96, 0x4d, 0x02, 0xf1,
};

static const uint8_t sMessageEncodingTest0086_ExpectedEncoding[] =
{
    0x20, 0x1b, 0xed, 0x5d, 0x30, 0xd3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1d, 0x24, 0x76, 0xcf, 0x25, 0x26, 0xdf, 0x71, 0xbd, 0x00,
    0xda, 0x05, 0x85, 0x5d, 0x46, 0xb7, 0x31, 0xb5, 0xce, 0x45, 0x8f, 0x5c, 0xa2, 0x01, 0x2b, 0xc2,
};

static const MessageEncodingTestVector sMessageEncodingTest0086 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xD3305DED,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x241D,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0086_EncryptionKey,
    sMessageEncodingTest0086_Payload,
    sizeof(sMessageEncodingTest0086_Payload),
    sMessageEncodingTest0086_ExpectedEncoding,
    sizeof(sMessageEncodingTest0086_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0087_EncryptionKey =
{
    {
        0xa9, 0x61, 0x9e, 0xd6, 0x31, 0xdc, 0xe0, 0x16, 0x75, 0x16, 0x81, 0xfd, 0x95, 0xec, 0x12, 0xb8,
    }
};
static const uint8_t sMessageEncodingTest0087_Payload[] =
{
    0x85, 0x60, 0x5c, 0x22, 0xee, 0x43, 0x19, 0x91, 0x3e, 0x54, 0x1b, 0xe6, 0x5e, 0xce, 0xc8, 0xe9,
};

static const uint8_t sMessageEncodingTest0087_ExpectedEncoding[] =
{
    0x30, 0x1b, 0x43, 0x56, 0x95, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0x22, 0xaf, 0x2c, 0x4b, 0x30, 0x1f, 0x97, 0xa6, 0x6d,
    0xe1, 0xd4, 0xe5, 0x9e, 0x90, 0x04, 0xfd, 0x85, 0xa5, 0x5f, 0x6a, 0x72, 0xa7, 0x37, 0x7d, 0xdb,
    0xf1, 0x2f, 0x88, 0x62, 0xfe, 0xea, 0x01, 0x03,
};

static const MessageEncodingTestVector sMessageEncodingTest0087 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x50955643,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x22B7,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0087_EncryptionKey,
    sMessageEncodingTest0087_Payload,
    sizeof(sMessageEncodingTest0087_Payload),
    sMessageEncodingTest0087_ExpectedEncoding,
    sizeof(sMessageEncodingTest0087_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0088_Payload[] =
{
    0x25, 0x07, 0x53, 0x28, 0x96, 0xd9, 0xe3, 0xe2, 0xbd, 0x7e, 0x3f, 0x36, 0x1d, 0x71, 0xed, 0xf9,
};

static const uint8_t sMessageEncodingTest0088_ExpectedEncoding[] =
{
    0x00, 0x2b, 0xbe, 0x12, 0x50, 0xd2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x25, 0x07, 0x53, 0x28, 0x96, 0xd9, 0xe3, 0xe2, 0xbd, 0x7e,
    0x3f, 0x36, 0x1d, 0x71, 0xed, 0xf9,
};

static const MessageEncodingTestVector sMessageEncodingTest0088 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xD25012BE,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0088_Payload,
    sizeof(sMessageEncodingTest0088_Payload),
    sMessageEncodingTest0088_ExpectedEncoding,
    sizeof(sMessageEncodingTest0088_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0089_EncryptionKey =
{
    {
        0x6f, 0xb1, 0x92, 0x0f, 0x1a, 0x30, 0xd1, 0xb9, 0x6c, 0x98, 0x1e, 0xcc, 0xc0, 0xc8, 0x5d, 0x66,
    },
    {
        0x82, 0xed, 0x65, 0xac, 0x0d, 0x77, 0xaa, 0xfa, 0x7d, 0x51, 0xe4, 0xa5, 0x67, 0x96, 0xcb, 0x13,
        0x41, 0xea, 0x10, 0x3e,
    }
};
static const uint8_t sMessageEncodingTest0089_Payload[] =
{
    0xdc, 0x51, 0x23, 0x95, 0x43, 0xd7, 0x11, 0x2f, 0x86, 0x25, 0x81, 0x9f, 0x80, 0x45, 0x27, 0x2b,
};

static const uint8_t sMessageEncodingTest0089_ExpectedEncoding[] =
{
    0x10, 0x2b, 0x4f, 0x07, 0x86, 0xec, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xda, 0x2d, 0x69, 0x5a, 0x31, 0xb7, 0x36, 0x32, 0x0e, 0xb5,
    0x5e, 0x10, 0xcb, 0x9b, 0x1d, 0x9e, 0xb3, 0x2f, 0xfa, 0x6c, 0x5b, 0xda, 0x97, 0x48, 0x4b, 0x18,
    0x18, 0xf9, 0x52, 0x8c, 0x5d, 0x80, 0x3a, 0x54, 0x6e, 0xf4, 0xe0, 0x07,
};

static const MessageEncodingTestVector sMessageEncodingTest0089 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xEC86074F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2DDA,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0089_EncryptionKey,
    sMessageEncodingTest0089_Payload,
    sizeof(sMessageEncodingTest0089_Payload),
    sMessageEncodingTest0089_ExpectedEncoding,
    sizeof(sMessageEncodingTest0089_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0090_EncryptionKey =
{
    {
        0x87, 0x48, 0x99, 0xa2, 0x20, 0xa3, 0x2a, 0x21, 0x88, 0x7b, 0x25, 0x36, 0xa9, 0x51, 0xe5, 0x1f,
    }
};
static const uint8_t sMessageEncodingTest0090_Payload[] =
{
    0x21, 0xdb, 0xf4, 0xbd, 0x1b, 0x46, 0xdd, 0xa2, 0x36, 0xe6, 0x96, 0x52, 0xa3, 0x0a, 0x23, 0xcf,
};

static const uint8_t sMessageEncodingTest0090_ExpectedEncoding[] =
{
    0x20, 0x2b, 0x87, 0xaf, 0x49, 0x0b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb4, 0x28, 0x78, 0xdf, 0xeb, 0xa0, 0x0f, 0x74, 0xb2, 0xa8,
    0x26, 0x22, 0xc7, 0x92, 0xb8, 0x3c, 0xab, 0x16, 0xc1, 0x21, 0x92, 0x0b, 0x3b, 0xd8, 0xde, 0x27,
};

static const MessageEncodingTestVector sMessageEncodingTest0090 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x0B49AF87,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x28B4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0090_EncryptionKey,
    sMessageEncodingTest0090_Payload,
    sizeof(sMessageEncodingTest0090_Payload),
    sMessageEncodingTest0090_ExpectedEncoding,
    sizeof(sMessageEncodingTest0090_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0091_EncryptionKey =
{
    {
        0x8d, 0xa1, 0x8d, 0xf7, 0x2f, 0xcb, 0xcc, 0x19, 0x59, 0x61, 0xe5, 0xcd, 0xb2, 0x66, 0xe7, 0x59,
    }
};
static const uint8_t sMessageEncodingTest0091_Payload[] =
{
    0x68, 0xbf, 0x3c, 0x46, 0xc8, 0x3c, 0xa4, 0xc5, 0xa1, 0x7c, 0xf8, 0x77, 0xb2, 0xe3, 0xd1, 0x9c,
};

static const uint8_t sMessageEncodingTest0091_ExpectedEncoding[] =
{
    0x30, 0x2b, 0x80, 0x50, 0x9e, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc5, 0x26, 0x8f, 0x0d, 0x36, 0xc5, 0xe0, 0xc8, 0x23, 0xac,
    0x60, 0x65, 0xa4, 0x7b, 0x90, 0xc2, 0x8e, 0x90, 0x14, 0xa6, 0x91, 0xbb, 0x93, 0x4a, 0x0a, 0xe8,
    0xd9, 0x09, 0x41, 0x5f, 0xec, 0xb8, 0xbd, 0x27,
};

static const MessageEncodingTestVector sMessageEncodingTest0091 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x749E5080,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x26C5,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0091_EncryptionKey,
    sMessageEncodingTest0091_Payload,
    sizeof(sMessageEncodingTest0091_Payload),
    sMessageEncodingTest0091_ExpectedEncoding,
    sizeof(sMessageEncodingTest0091_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0092_Payload[] =
{
    0x82, 0xb2, 0xec, 0x33, 0xa0, 0xc3, 0xc8, 0xc8, 0x53, 0x36, 0x35, 0xcf, 0x8f, 0xb8, 0x7a, 0x87,
};

static const uint8_t sMessageEncodingTest0092_ExpectedEncoding[] =
{
    0x00, 0x13, 0x0b, 0x71, 0x4d, 0xfd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0xb2, 0xec, 0x33, 0xa0, 0xc3, 0xc8, 0xc8, 0x53, 0x36,
    0x35, 0xcf, 0x8f, 0xb8, 0x7a, 0x87,
};

static const MessageEncodingTestVector sMessageEncodingTest0092 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xFD4D710B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0092_Payload,
    sizeof(sMessageEncodingTest0092_Payload),
    sMessageEncodingTest0092_ExpectedEncoding,
    sizeof(sMessageEncodingTest0092_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0093_EncryptionKey =
{
    {
        0x12, 0xc0, 0x86, 0x8e, 0x6e, 0xcd, 0xe7, 0x28, 0x8c, 0x10, 0xda, 0xbf, 0x88, 0xcf, 0x5f, 0x1e,
    },
    {
        0xb7, 0x79, 0x82, 0xd2, 0x88, 0x09, 0x31, 0x5e, 0x56, 0x98, 0x7a, 0x61, 0x94, 0x4d, 0x58, 0xd3,
        0xfc, 0x08, 0x5d, 0x55,
    }
};
static const uint8_t sMessageEncodingTest0093_Payload[] =
{
    0x63, 0x0c, 0xb9, 0x7b, 0xc6, 0xdd, 0x5e, 0xfc, 0x68, 0x33, 0xc6, 0x2b, 0x06, 0xf4, 0xc6, 0xaf,
};

static const uint8_t sMessageEncodingTest0093_ExpectedEncoding[] =
{
    0x10, 0x13, 0x4e, 0x88, 0x7b, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x22, 0x2b, 0x32, 0xd0, 0x60, 0x08, 0xfe, 0x1a, 0x02, 0xc2,
    0x46, 0x63, 0x36, 0x51, 0x8c, 0xb1, 0x37, 0xcd, 0x05, 0x65, 0xf8, 0x48, 0x82, 0x3b, 0x5b, 0xc7,
    0x76, 0xf7, 0xfe, 0x08, 0xe1, 0x16, 0x81, 0xd6, 0x5f, 0xc5, 0x9d, 0x5a,
};

static const MessageEncodingTestVector sMessageEncodingTest0093 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x777B884E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2B22,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0093_EncryptionKey,
    sMessageEncodingTest0093_Payload,
    sizeof(sMessageEncodingTest0093_Payload),
    sMessageEncodingTest0093_ExpectedEncoding,
    sizeof(sMessageEncodingTest0093_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0094_EncryptionKey =
{
    {
        0x52, 0x78, 0x26, 0x05, 0x66, 0xb3, 0x19, 0xda, 0x5b, 0x39, 0x13, 0xcf, 0x67, 0x11, 0x8f, 0x84,
    }
};
static const uint8_t sMessageEncodingTest0094_Payload[] =
{
    0x50, 0x24, 0x45, 0xf4, 0x32, 0x68, 0xef, 0xc4, 0xae, 0xe1, 0x92, 0xa9, 0x11, 0x91, 0x2a, 0x6e,
};

static const uint8_t sMessageEncodingTest0094_ExpectedEncoding[] =
{
    0x20, 0x13, 0xe2, 0x43, 0xef, 0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x2a, 0x94, 0xf2, 0x7e, 0x75, 0x4a, 0x82, 0xf3, 0x7a,
    0x5c, 0xff, 0xa7, 0xf9, 0xfd, 0xdf, 0x4e, 0x29, 0xe2, 0x52, 0xfe, 0xab, 0xa7, 0x5e, 0xf1, 0xc5,
};

static const MessageEncodingTestVector sMessageEncodingTest0094 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x17EF43E2,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2A0F,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0094_EncryptionKey,
    sMessageEncodingTest0094_Payload,
    sizeof(sMessageEncodingTest0094_Payload),
    sMessageEncodingTest0094_ExpectedEncoding,
    sizeof(sMessageEncodingTest0094_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0095_EncryptionKey =
{
    {
        0x4b, 0x11, 0x93, 0x0f, 0x1f, 0x1f, 0xd2, 0x1f, 0xf3, 0xfd, 0x70, 0x18, 0xd6, 0x64, 0x1b, 0xfc,
    }
};
static const uint8_t sMessageEncodingTest0095_Payload[] =
{
    0x86, 0xa3, 0x68, 0xca, 0x74, 0x8d, 0x8b, 0x86, 0x26, 0xf4, 0x90, 0x5a, 0xba, 0xa8, 0xb2, 0xd5,
};

static const uint8_t sMessageEncodingTest0095_ExpectedEncoding[] =
{
    0x30, 0x13, 0x11, 0x81, 0xf7, 0x23, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x23, 0x9d, 0xc1, 0x80, 0x0a, 0xd2, 0x22, 0xbe, 0xa3,
    0x92, 0xc7, 0xe9, 0x04, 0x3a, 0x21, 0x51, 0x01, 0x80, 0x91, 0xa4, 0x44, 0xf4, 0x91, 0x5b, 0x9e,
    0x5c, 0x82, 0x3b, 0x56, 0x6f, 0xff, 0xb0, 0x81,
};

static const MessageEncodingTestVector sMessageEncodingTest0095 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x23F78111,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x23FD,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0095_EncryptionKey,
    sMessageEncodingTest0095_Payload,
    sizeof(sMessageEncodingTest0095_Payload),
    sMessageEncodingTest0095_ExpectedEncoding,
    sizeof(sMessageEncodingTest0095_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0096_Payload[] =
{
    0x98, 0x0b, 0x8b, 0xae, 0x1c, 0x8b, 0x72, 0x4a, 0x5d, 0xf1, 0x7e, 0x58, 0x58, 0xf5, 0xb9, 0x66,
};

static const uint8_t sMessageEncodingTest0096_ExpectedEncoding[] =
{
    0x00, 0x23, 0x6b, 0xd1, 0xa4, 0xdc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x98, 0x0b, 0x8b, 0xae, 0x1c, 0x8b, 0x72, 0x4a, 0x5d, 0xf1,
    0x7e, 0x58, 0x58, 0xf5, 0xb9, 0x66,
};

static const MessageEncodingTestVector sMessageEncodingTest0096 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xDCA4D16B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0096_Payload,
    sizeof(sMessageEncodingTest0096_Payload),
    sMessageEncodingTest0096_ExpectedEncoding,
    sizeof(sMessageEncodingTest0096_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0097_EncryptionKey =
{
    {
        0xbe, 0x58, 0xae, 0x8a, 0x87, 0xaf, 0x74, 0x0e, 0x15, 0xb4, 0x54, 0xc2, 0xa9, 0x75, 0xfc, 0x6a,
    },
    {
        0x95, 0x97, 0x88, 0x09, 0x5b, 0xa6, 0x01, 0xe8, 0xa8, 0xa2, 0x49, 0x28, 0xa7, 0xac, 0x40, 0xdd,
        0x71, 0x47, 0x4a, 0x8f,
    }
};
static const uint8_t sMessageEncodingTest0097_Payload[] =
{
    0xf9, 0x9e, 0x61, 0xcd, 0xbf, 0x3e, 0x42, 0xd4, 0x09, 0x7b, 0x00, 0x7d, 0x81, 0x7a, 0x61, 0x5f,
};

static const uint8_t sMessageEncodingTest0097_ExpectedEncoding[] =
{
    0x10, 0x23, 0x87, 0xb1, 0x5f, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x26, 0x15, 0x3a, 0xca, 0x43, 0x78, 0x32, 0xb3, 0x29,
    0xb2, 0xc5, 0x83, 0xec, 0xf2, 0x62, 0xf9, 0x75, 0xc1, 0x75, 0x0d, 0xaf, 0xc6, 0xca, 0x43, 0x00,
    0x0f, 0xa7, 0xe9, 0x55, 0x6f, 0xc2, 0xf0, 0x55, 0x06, 0x7b, 0x88, 0x2f,
};

static const MessageEncodingTestVector sMessageEncodingTest0097 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x045FB187,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x26BE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0097_EncryptionKey,
    sMessageEncodingTest0097_Payload,
    sizeof(sMessageEncodingTest0097_Payload),
    sMessageEncodingTest0097_ExpectedEncoding,
    sizeof(sMessageEncodingTest0097_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0098_EncryptionKey =
{
    {
        0xa8, 0x1d, 0x3e, 0x64, 0xb8, 0x1b, 0x03, 0x3a, 0x26, 0x3b, 0x23, 0x48, 0x74, 0x56, 0x68, 0x71,
    }
};
static const uint8_t sMessageEncodingTest0098_Payload[] =
{
    0x0d, 0xc3, 0xed, 0x88, 0xc3, 0x95, 0x24, 0x71, 0x9e, 0x8b, 0x59, 0x90, 0x0b, 0xcb, 0x0b, 0x60,
};

static const uint8_t sMessageEncodingTest0098_ExpectedEncoding[] =
{
    0x20, 0x23, 0x22, 0x14, 0xff, 0x5e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcd, 0x20, 0xc2, 0xac, 0x39, 0x62, 0xcc, 0xe6, 0x19, 0x0a,
    0x8e, 0x17, 0x37, 0x3a, 0x0c, 0xb5, 0xfb, 0x56, 0x33, 0xb4, 0x2d, 0x6d, 0x4e, 0x87, 0xab, 0x7f,
};

static const MessageEncodingTestVector sMessageEncodingTest0098 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x5EFF1422,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x20CD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0098_EncryptionKey,
    sMessageEncodingTest0098_Payload,
    sizeof(sMessageEncodingTest0098_Payload),
    sMessageEncodingTest0098_ExpectedEncoding,
    sizeof(sMessageEncodingTest0098_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0099_EncryptionKey =
{
    {
        0x02, 0x59, 0x4c, 0xe1, 0x81, 0x63, 0x00, 0xb6, 0xc7, 0xfe, 0xab, 0x76, 0x81, 0x57, 0xf8, 0x6d,
    }
};
static const uint8_t sMessageEncodingTest0099_Payload[] =
{
    0x8a, 0x96, 0x37, 0x8d, 0x76, 0x64, 0xef, 0xc5, 0xd5, 0x68, 0x9c, 0x52, 0x12, 0xc9, 0x96, 0xeb,
};

static const uint8_t sMessageEncodingTest0099_ExpectedEncoding[] =
{
    0x30, 0x23, 0xd4, 0xfb, 0x4a, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc4, 0x22, 0x3b, 0x20, 0x6f, 0xd3, 0x3d, 0x5c, 0x65, 0x56,
    0xeb, 0xeb, 0xa5, 0x92, 0x3e, 0x46, 0x72, 0xd3, 0x47, 0xd8, 0x38, 0x01, 0x62, 0x93, 0x1e, 0xa1,
    0xd1, 0x19, 0xdf, 0x93, 0xc9, 0x12, 0x85, 0xfa,
};

static const MessageEncodingTestVector sMessageEncodingTest0099 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x324AFBD4,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x22C4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0099_EncryptionKey,
    sMessageEncodingTest0099_Payload,
    sizeof(sMessageEncodingTest0099_Payload),
    sMessageEncodingTest0099_ExpectedEncoding,
    sizeof(sMessageEncodingTest0099_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0100_Payload[] =
{
    0x88, 0x01, 0x81, 0x96, 0x1c, 0xef, 0x80, 0x92, 0xae, 0xd0, 0xf0, 0x3b, 0x07, 0xec, 0xd9, 0x03,
};

static const uint8_t sMessageEncodingTest0100_ExpectedEncoding[] =
{
    0x00, 0x25, 0xd1, 0xcf, 0x6e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x01,
    0x81, 0x96, 0x1c, 0xef, 0x80, 0x92, 0xae, 0xd0, 0xf0, 0x3b, 0x07, 0xec, 0xd9, 0x03,
};

static const MessageEncodingTestVector sMessageEncodingTest0100 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xFF6ECFD1,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0100_Payload,
    sizeof(sMessageEncodingTest0100_Payload),
    sMessageEncodingTest0100_ExpectedEncoding,
    sizeof(sMessageEncodingTest0100_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0101_EncryptionKey =
{
    {
        0xc9, 0x66, 0x00, 0x6e, 0xf0, 0xc1, 0x3d, 0x5a, 0xc9, 0xcc, 0x04, 0x47, 0x78, 0xe0, 0x07, 0x66,
    },
    {
        0x92, 0x3a, 0x50, 0x71, 0x10, 0x8c, 0x5a, 0xb7, 0x06, 0xf9, 0xb5, 0x8a, 0xcd, 0x81, 0xa8, 0x20,
        0xa1, 0xd4, 0xd7, 0x5d,
    }
};
static const uint8_t sMessageEncodingTest0101_Payload[] =
{
    0x5e, 0x48, 0xfa, 0x1d, 0xb2, 0x7d, 0x62, 0x20, 0xe3, 0xe2, 0x7d, 0x00, 0xe8, 0x75, 0xe2, 0x57,
};

static const uint8_t sMessageEncodingTest0101_ExpectedEncoding[] =
{
    0x10, 0x25, 0xc8, 0xd7, 0xe6, 0x50, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x35, 0x2b,
    0x6d, 0xb9, 0x07, 0xe0, 0x41, 0x13, 0x9a, 0x6e, 0x6d, 0x8d, 0xea, 0xe0, 0xaa, 0xac, 0x88, 0x89,
    0x78, 0xe8, 0xa0, 0x3b, 0xc6, 0x90, 0x4d, 0x6a, 0x71, 0xac, 0x91, 0x9f, 0x17, 0xd2, 0x2f, 0xd4,
    0x15, 0x07, 0xcf, 0xf6,
};

static const MessageEncodingTestVector sMessageEncodingTest0101 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x50E6D7C8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2B35,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0101_EncryptionKey,
    sMessageEncodingTest0101_Payload,
    sizeof(sMessageEncodingTest0101_Payload),
    sMessageEncodingTest0101_ExpectedEncoding,
    sizeof(sMessageEncodingTest0101_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0102_EncryptionKey =
{
    {
        0x8c, 0xeb, 0xcd, 0x97, 0x1b, 0x6d, 0x11, 0xee, 0xd1, 0xb3, 0xe6, 0xde, 0x6e, 0x27, 0xf6, 0xf6,
    }
};
static const uint8_t sMessageEncodingTest0102_Payload[] =
{
    0xaf, 0x9c, 0xd5, 0xc6, 0x44, 0xf6, 0x97, 0x6c, 0xd0, 0x1f, 0xdf, 0xc3, 0x65, 0x09, 0xfa, 0x40,
};

static const uint8_t sMessageEncodingTest0102_ExpectedEncoding[] =
{
    0x20, 0x25, 0x5e, 0x61, 0x6e, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb1, 0x2e,
    0xca, 0x4b, 0x54, 0xa7, 0x20, 0xd6, 0x73, 0x9a, 0xe6, 0xa9, 0x72, 0xac, 0x1a, 0x6c, 0x3b, 0x3d,
    0xdb, 0x44, 0x14, 0xfd, 0x0e, 0x23, 0xd6, 0x34,
};

static const MessageEncodingTestVector sMessageEncodingTest0102 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x816E615E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2EB1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0102_EncryptionKey,
    sMessageEncodingTest0102_Payload,
    sizeof(sMessageEncodingTest0102_Payload),
    sMessageEncodingTest0102_ExpectedEncoding,
    sizeof(sMessageEncodingTest0102_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0103_EncryptionKey =
{
    {
        0x4d, 0x6a, 0x48, 0x1f, 0xf2, 0x05, 0xc7, 0xea, 0xff, 0x45, 0x49, 0xf6, 0x1b, 0x56, 0x27, 0x8b,
    }
};
static const uint8_t sMessageEncodingTest0103_Payload[] =
{
    0x97, 0xa7, 0x18, 0x34, 0xb2, 0xf7, 0xf3, 0x0f, 0xe6, 0x75, 0x16, 0x6a, 0x3a, 0x25, 0x6a, 0xf3,
};

static const uint8_t sMessageEncodingTest0103_ExpectedEncoding[] =
{
    0x30, 0x25, 0x55, 0x8a, 0x34, 0x51, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0x28,
    0x19, 0x42, 0x96, 0x3c, 0xb3, 0x2e, 0xba, 0x2b, 0xe1, 0x4f, 0x21, 0x6f, 0xf4, 0xb1, 0xc2, 0x3f,
    0x31, 0x00, 0xeb, 0x30, 0x91, 0xbd, 0x48, 0xce, 0xe9, 0x7b, 0xe9, 0x54, 0xd2, 0x31, 0x88, 0xac,
};

static const MessageEncodingTestVector sMessageEncodingTest0103 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x51348A55,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x28DD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0103_EncryptionKey,
    sMessageEncodingTest0103_Payload,
    sizeof(sMessageEncodingTest0103_Payload),
    sMessageEncodingTest0103_ExpectedEncoding,
    sizeof(sMessageEncodingTest0103_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0104_Payload[] =
{
    0x81, 0x71, 0x81, 0x86, 0xb5, 0xf9, 0x96, 0x17, 0x55, 0xdc, 0x33, 0x55, 0xf5, 0xc8, 0x41, 0x88,
};

static const uint8_t sMessageEncodingTest0104_ExpectedEncoding[] =
{
    0x00, 0x19, 0x1b, 0x6f, 0xfa, 0xa8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x71,
    0x81, 0x86, 0xb5, 0xf9, 0x96, 0x17, 0x55, 0xdc, 0x33, 0x55, 0xf5, 0xc8, 0x41, 0x88,
};

static const MessageEncodingTestVector sMessageEncodingTest0104 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xA8FA6F1B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0104_Payload,
    sizeof(sMessageEncodingTest0104_Payload),
    sMessageEncodingTest0104_ExpectedEncoding,
    sizeof(sMessageEncodingTest0104_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0105_EncryptionKey =
{
    {
        0x1f, 0xce, 0xf6, 0x06, 0xb6, 0xc8, 0x0c, 0xbb, 0x09, 0xbe, 0xef, 0xd5, 0xc2, 0xaf, 0xf8, 0x63,
    },
    {
        0x1d, 0x9c, 0x2e, 0xaa, 0x2e, 0x03, 0x1b, 0xc3, 0xbe, 0x63, 0x0d, 0xaf, 0xdd, 0xcd, 0xfd, 0x35,
        0x80, 0xf0, 0x11, 0xb7,
    }
};
static const uint8_t sMessageEncodingTest0105_Payload[] =
{
    0xc4, 0x89, 0x9c, 0xed, 0x73, 0x65, 0x0d, 0xf1, 0x86, 0x4d, 0x26, 0x7a, 0x92, 0xfd, 0x49, 0x97,
};

static const uint8_t sMessageEncodingTest0105_ExpectedEncoding[] =
{
    0x10, 0x19, 0xe8, 0xc9, 0x9a, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8c, 0x24,
    0x21, 0x1f, 0x7b, 0xce, 0x1a, 0x05, 0x9b, 0xd3, 0x39, 0x4f, 0x24, 0x4b, 0x5c, 0x70, 0xda, 0x04,
    0x74, 0xad, 0x4a, 0x08, 0x9c, 0xc1, 0xa6, 0xf4, 0xc9, 0xd5, 0x55, 0x58, 0x49, 0xa0, 0xa2, 0x44,
    0x2e, 0x10, 0xe9, 0xef,
};

static const MessageEncodingTestVector sMessageEncodingTest0105 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xE79AC9E8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x248C,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0105_EncryptionKey,
    sMessageEncodingTest0105_Payload,
    sizeof(sMessageEncodingTest0105_Payload),
    sMessageEncodingTest0105_ExpectedEncoding,
    sizeof(sMessageEncodingTest0105_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0106_EncryptionKey =
{
    {
        0x13, 0x4f, 0x6a, 0x30, 0xf9, 0xd6, 0x65, 0xac, 0xa9, 0x13, 0xaa, 0xb7, 0xcc, 0x32, 0x04, 0x9b,
    }
};
static const uint8_t sMessageEncodingTest0106_Payload[] =
{
    0x82, 0x43, 0xa9, 0x06, 0x8b, 0xbc, 0xd4, 0xd3, 0xff, 0x6d, 0x96, 0x1a, 0x2a, 0x41, 0x2a, 0x5b,
};

static const uint8_t sMessageEncodingTest0106_ExpectedEncoding[] =
{
    0x20, 0x19, 0x0d, 0x8e, 0x84, 0xcd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0x2d,
    0x7a, 0xe0, 0xab, 0x33, 0x5a, 0xab, 0x7e, 0xf2, 0x8d, 0x76, 0x51, 0xbb, 0x0f, 0xca, 0x19, 0x30,
    0x56, 0xd7, 0x4b, 0x1d, 0x13, 0x7c, 0xd1, 0x36,
};

static const MessageEncodingTestVector sMessageEncodingTest0106 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xCD848E0D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2DEA,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0106_EncryptionKey,
    sMessageEncodingTest0106_Payload,
    sizeof(sMessageEncodingTest0106_Payload),
    sMessageEncodingTest0106_ExpectedEncoding,
    sizeof(sMessageEncodingTest0106_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0107_EncryptionKey =
{
    {
        0x56, 0xab, 0xbf, 0xb1, 0x4b, 0x83, 0xf7, 0x41, 0x8d, 0x5a, 0xa1, 0x09, 0x02, 0x4a, 0x2d, 0xa9,
    }
};
static const uint8_t sMessageEncodingTest0107_Payload[] =
{
    0xa0, 0x72, 0xbe, 0x40, 0xee, 0x4f, 0xf1, 0xe3, 0x35, 0xff, 0x17, 0x91, 0x1c, 0x44, 0xf0, 0x39,
};

static const uint8_t sMessageEncodingTest0107_ExpectedEncoding[] =
{
    0x30, 0x19, 0x5e, 0x88, 0xa9, 0x8a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6d, 0x2d,
    0xb4, 0x20, 0x06, 0x3e, 0x85, 0x3a, 0xb1, 0xf1, 0x50, 0x62, 0xc1, 0xa5, 0x48, 0xb0, 0xff, 0x4b,
    0x64, 0x8e, 0x83, 0xd5, 0x62, 0x03, 0xb4, 0xc8, 0x49, 0x10, 0x2b, 0x01, 0xc2, 0x7a, 0x68, 0x05,
};

static const MessageEncodingTestVector sMessageEncodingTest0107 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x8AA9885E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2D6D,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0107_EncryptionKey,
    sMessageEncodingTest0107_Payload,
    sizeof(sMessageEncodingTest0107_Payload),
    sMessageEncodingTest0107_ExpectedEncoding,
    sizeof(sMessageEncodingTest0107_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0108_Payload[] =
{
    0xeb, 0x41, 0x8a, 0x9d, 0x6d, 0x09, 0x90, 0x6a, 0xea, 0x18, 0xcc, 0x7b, 0x52, 0xc0, 0xfe, 0xf1,
};

static const uint8_t sMessageEncodingTest0108_ExpectedEncoding[] =
{
    0x00, 0x29, 0x2a, 0x4c, 0x67, 0x98, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0x41,
    0x8a, 0x9d, 0x6d, 0x09, 0x90, 0x6a, 0xea, 0x18, 0xcc, 0x7b, 0x52, 0xc0, 0xfe, 0xf1,
};

static const MessageEncodingTestVector sMessageEncodingTest0108 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x98674C2A,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0108_Payload,
    sizeof(sMessageEncodingTest0108_Payload),
    sMessageEncodingTest0108_ExpectedEncoding,
    sizeof(sMessageEncodingTest0108_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0109_EncryptionKey =
{
    {
        0xda, 0xe8, 0xf2, 0xda, 0x5d, 0x42, 0xa1, 0x90, 0x43, 0x21, 0x62, 0x4f, 0xa4, 0xcf, 0x4e, 0x18,
    },
    {
        0x21, 0x54, 0x11, 0x11, 0x41, 0xc8, 0x81, 0x7c, 0x43, 0x85, 0xc5, 0x6a, 0x7c, 0x95, 0x41, 0xac,
        0x02, 0x96, 0x49, 0x20,
    }
};
static const uint8_t sMessageEncodingTest0109_Payload[] =
{
    0x9f, 0xea, 0xc9, 0x3a, 0x08, 0x44, 0x41, 0x0f, 0x7f, 0xee, 0xa6, 0x38, 0x36, 0x2a, 0x27, 0xfa,
};

static const uint8_t sMessageEncodingTest0109_ExpectedEncoding[] =
{
    0x10, 0x29, 0x2f, 0x5e, 0xc4, 0x06, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8d, 0x21,
    0x3f, 0xad, 0xd6, 0x9b, 0x88, 0x2b, 0x77, 0x69, 0x4b, 0x7b, 0xd0, 0xeb, 0xe9, 0xda, 0xdf, 0x35,
    0x09, 0x90, 0xfe, 0x87, 0x34, 0xce, 0x39, 0x13, 0xc8, 0xb0, 0x6b, 0x83, 0xd6, 0x84, 0xfa, 0x0e,
    0xe2, 0x02, 0xec, 0xe5,
};

static const MessageEncodingTestVector sMessageEncodingTest0109 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x06C45E2F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x218D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0109_EncryptionKey,
    sMessageEncodingTest0109_Payload,
    sizeof(sMessageEncodingTest0109_Payload),
    sMessageEncodingTest0109_ExpectedEncoding,
    sizeof(sMessageEncodingTest0109_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0110_EncryptionKey =
{
    {
        0xf9, 0x49, 0x1b, 0x18, 0x3a, 0x76, 0x7b, 0xbb, 0xd5, 0x66, 0xd9, 0x3b, 0x3c, 0x16, 0xe7, 0xf2,
    }
};
static const uint8_t sMessageEncodingTest0110_Payload[] =
{
    0xd7, 0x1d, 0xac, 0xf7, 0xa9, 0xd2, 0xc4, 0x60, 0x7f, 0x44, 0xaa, 0x77, 0xb0, 0x6a, 0x28, 0xc8,
};

static const uint8_t sMessageEncodingTest0110_ExpectedEncoding[] =
{
    0x20, 0x29, 0xfb, 0xe9, 0xcb, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0e, 0x25,
    0x97, 0x74, 0xee, 0xb6, 0x63, 0x2f, 0xec, 0x79, 0x94, 0x5d, 0x8d, 0x61, 0x29, 0x91, 0x18, 0x11,
    0x7a, 0x99, 0x20, 0x88, 0x17, 0x39, 0x21, 0xed,
};

static const MessageEncodingTestVector sMessageEncodingTest0110 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xEDCBE9FB,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x250E,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0110_EncryptionKey,
    sMessageEncodingTest0110_Payload,
    sizeof(sMessageEncodingTest0110_Payload),
    sMessageEncodingTest0110_ExpectedEncoding,
    sizeof(sMessageEncodingTest0110_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0111_EncryptionKey =
{
    {
        0xbc, 0x82, 0x8d, 0x7a, 0x16, 0x0d, 0xa2, 0xce, 0x63, 0x89, 0x31, 0x79, 0x0c, 0xeb, 0xed, 0xa0,
    }
};
static const uint8_t sMessageEncodingTest0111_Payload[] =
{
    0x4d, 0x44, 0x8a, 0x7f, 0xa3, 0xa3, 0x0d, 0xed, 0xea, 0xad, 0x98, 0x55, 0xf8, 0xdf, 0x5f, 0xa7,
};

static const uint8_t sMessageEncodingTest0111_ExpectedEncoding[] =
{
    0x30, 0x29, 0x64, 0x9a, 0xc9, 0xb0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x23,
    0xb3, 0xad, 0xea, 0x3b, 0xc8, 0x34, 0xd6, 0x20, 0xac, 0x42, 0x6d, 0x6c, 0x95, 0x12, 0x7f, 0xe2,
    0x63, 0x73, 0xb8, 0xc1, 0x8e, 0xbf, 0x58, 0x15, 0x4c, 0xa2, 0x27, 0x4e, 0xdd, 0x45, 0x81, 0x07,
};

static const MessageEncodingTestVector sMessageEncodingTest0111 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xB0C99A64,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2388,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0111_EncryptionKey,
    sMessageEncodingTest0111_Payload,
    sizeof(sMessageEncodingTest0111_Payload),
    sMessageEncodingTest0111_ExpectedEncoding,
    sizeof(sMessageEncodingTest0111_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0112_Payload[] =
{
    0x11, 0xcf, 0xdb, 0x51, 0xcb, 0x4a, 0x45, 0xec, 0x7a, 0xcb, 0x41, 0xe8, 0x7e, 0x81, 0xb9, 0x2a,
};

static const uint8_t sMessageEncodingTest0112_ExpectedEncoding[] =
{
    0x00, 0x11, 0x15, 0x2a, 0xa6, 0x41, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x11, 0xcf,
    0xdb, 0x51, 0xcb, 0x4a, 0x45, 0xec, 0x7a, 0xcb, 0x41, 0xe8, 0x7e, 0x81, 0xb9, 0x2a,
};

static const MessageEncodingTestVector sMessageEncodingTest0112 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x41A62A15,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0112_Payload,
    sizeof(sMessageEncodingTest0112_Payload),
    sMessageEncodingTest0112_ExpectedEncoding,
    sizeof(sMessageEncodingTest0112_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0113_EncryptionKey =
{
    {
        0x1b, 0xc8, 0x9c, 0x01, 0x72, 0xbe, 0xa7, 0x37, 0xa6, 0x55, 0xc4, 0x26, 0xd5, 0xe5, 0xbb, 0xf3,
    },
    {
        0x7f, 0xcc, 0x9c, 0x1e, 0x8c, 0xf2, 0x3c, 0x31, 0xe4, 0x0b, 0xfc, 0x3a, 0xca, 0xb9, 0x26, 0xca,
        0x2f, 0xe2, 0xc2, 0x04,
    }
};
static const uint8_t sMessageEncodingTest0113_Payload[] =
{
    0xf9, 0x58, 0xce, 0xe3, 0x23, 0xfc, 0xa8, 0x70, 0x91, 0x8c, 0x9f, 0xbb, 0x0c, 0x72, 0x62, 0xc6,
};

static const uint8_t sMessageEncodingTest0113_ExpectedEncoding[] =
{
    0x10, 0x11, 0x40, 0x08, 0x11, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x53, 0x22,
    0x1d, 0x13, 0xa3, 0xe4, 0x5e, 0x23, 0xa1, 0x32, 0xf7, 0xae, 0x4b, 0x02, 0xb2, 0xaa, 0x95, 0xaa,
    0x05, 0x63, 0x94, 0x90, 0x7b, 0xe4, 0xf8, 0x04, 0xd8, 0x52, 0x9c, 0xc3, 0x48, 0x19, 0xd9, 0x9f,
    0xab, 0x7f, 0x9e, 0xe6,
};

static const MessageEncodingTestVector sMessageEncodingTest0113 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x1C110840,
        kWeaveHeaderFlag_DestNodeId,
        0x2253,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0113_EncryptionKey,
    sMessageEncodingTest0113_Payload,
    sizeof(sMessageEncodingTest0113_Payload),
    sMessageEncodingTest0113_ExpectedEncoding,
    sizeof(sMessageEncodingTest0113_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0114_EncryptionKey =
{
    {
        0x08, 0xdd, 0x86, 0x6a, 0x52, 0xfc, 0x1d, 0xdd, 0x31, 0x73, 0x69, 0xa2, 0x77, 0xc2, 0x42, 0x4d,
    }
};
static const uint8_t sMessageEncodingTest0114_Payload[] =
{
    0x0b, 0x74, 0xfc, 0x35, 0xbe, 0xd6, 0x6f, 0x26, 0xf3, 0x55, 0xbe, 0x19, 0xb6, 0xee, 0x94, 0xc9,
};

static const uint8_t sMessageEncodingTest0114_ExpectedEncoding[] =
{
    0x20, 0x11, 0x03, 0x8f, 0xd5, 0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3a, 0x25,
    0xf8, 0x20, 0x2a, 0x39, 0x69, 0xf3, 0x32, 0x38, 0xee, 0x67, 0x59, 0x98, 0x36, 0x0d, 0xa6, 0xad,
    0xfd, 0x3c, 0x9e, 0x3d, 0xa8, 0x60, 0x01, 0x7b,
};

static const MessageEncodingTestVector sMessageEncodingTest0114 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xA2D58F03,
        kWeaveHeaderFlag_DestNodeId,
        0x253A,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0114_EncryptionKey,
    sMessageEncodingTest0114_Payload,
    sizeof(sMessageEncodingTest0114_Payload),
    sMessageEncodingTest0114_ExpectedEncoding,
    sizeof(sMessageEncodingTest0114_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0115_EncryptionKey =
{
    {
        0xfb, 0xac, 0xb7, 0xff, 0x5f, 0x49, 0xca, 0xf1, 0xc2, 0xd0, 0x9a, 0x64, 0xb7, 0x8a, 0xbe, 0xbb,
    }
};
static const uint8_t sMessageEncodingTest0115_Payload[] =
{
    0x80, 0xf9, 0x92, 0xe4, 0x1c, 0x10, 0xfd, 0xba, 0x53, 0x84, 0x8a, 0xa3, 0xfb, 0x58, 0x52, 0xf4,
};

static const uint8_t sMessageEncodingTest0115_ExpectedEncoding[] =
{
    0x30, 0x11, 0x4a, 0xf4, 0x3f, 0x32, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0x2a,
    0xca, 0x8b, 0x08, 0x10, 0xd2, 0x18, 0x08, 0xeb, 0x1c, 0xc2, 0xd0, 0x4d, 0xc2, 0xbb, 0x89, 0x47,
    0x39, 0x12, 0x96, 0xee, 0x7e, 0x51, 0xf0, 0x4f, 0x91, 0x9e, 0xa1, 0xc7, 0x8b, 0x4b, 0x5a, 0x56,
};

static const MessageEncodingTestVector sMessageEncodingTest0115 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x323FF44A,
        kWeaveHeaderFlag_DestNodeId,
        0x2A10,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0115_EncryptionKey,
    sMessageEncodingTest0115_Payload,
    sizeof(sMessageEncodingTest0115_Payload),
    sMessageEncodingTest0115_ExpectedEncoding,
    sizeof(sMessageEncodingTest0115_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0116_Payload[] =
{
    0xcc, 0x72, 0x28, 0xd2, 0x5a, 0x1b, 0xe9, 0x5c, 0x3e, 0x6b, 0x67, 0x98, 0xee, 0x2f, 0x19, 0xc4,
};

static const uint8_t sMessageEncodingTest0116_ExpectedEncoding[] =
{
    0x00, 0x21, 0x8e, 0xb4, 0x06, 0x76, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x72,
    0x28, 0xd2, 0x5a, 0x1b, 0xe9, 0x5c, 0x3e, 0x6b, 0x67, 0x98, 0xee, 0x2f, 0x19, 0xc4,
};

static const MessageEncodingTestVector sMessageEncodingTest0116 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x7606B48E,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0116_Payload,
    sizeof(sMessageEncodingTest0116_Payload),
    sMessageEncodingTest0116_ExpectedEncoding,
    sizeof(sMessageEncodingTest0116_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0117_EncryptionKey =
{
    {
        0xc0, 0x70, 0x5e, 0xcd, 0x00, 0x24, 0x2b, 0xc6, 0x8d, 0xc0, 0xfa, 0x14, 0xb9, 0x44, 0xe7, 0x6a,
    },
    {
        0x24, 0xc9, 0x41, 0xa7, 0x53, 0x9e, 0x1b, 0xba, 0xdf, 0x63, 0xaf, 0xbc, 0xf9, 0x5c, 0x2a, 0xdb,
        0xde, 0xa8, 0x83, 0x8f,
    }
};
static const uint8_t sMessageEncodingTest0117_Payload[] =
{
    0xb7, 0xee, 0xf6, 0x39, 0x4c, 0x87, 0x95, 0x9e, 0x35, 0xc7, 0xa6, 0x33, 0xd0, 0xda, 0x23, 0xa9,
};

static const uint8_t sMessageEncodingTest0117_ExpectedEncoding[] =
{
    0x10, 0x21, 0xa3, 0x6b, 0x93, 0x84, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x42, 0x22,
    0x4f, 0x65, 0xb3, 0xf6, 0x44, 0x83, 0x61, 0x28, 0x55, 0xc4, 0x23, 0x1b, 0xcc, 0x29, 0xd8, 0xc2,
    0xca, 0x57, 0x72, 0xac, 0x87, 0x35, 0x90, 0x9b, 0x03, 0xb3, 0x44, 0xc1, 0x4b, 0xb4, 0xdf, 0x62,
    0x19, 0x20, 0xdd, 0x27,
};

static const MessageEncodingTestVector sMessageEncodingTest0117 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x84936BA3,
        kWeaveHeaderFlag_DestNodeId,
        0x2242,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0117_EncryptionKey,
    sMessageEncodingTest0117_Payload,
    sizeof(sMessageEncodingTest0117_Payload),
    sMessageEncodingTest0117_ExpectedEncoding,
    sizeof(sMessageEncodingTest0117_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0118_EncryptionKey =
{
    {
        0x87, 0x34, 0x7d, 0x83, 0x6e, 0xef, 0x90, 0xf4, 0xe8, 0xb5, 0xb2, 0x6d, 0x3a, 0xac, 0x82, 0x9b,
    }
};
static const uint8_t sMessageEncodingTest0118_Payload[] =
{
    0x18, 0x29, 0xad, 0xf9, 0x87, 0xa7, 0x74, 0x79, 0x65, 0x49, 0x20, 0xe9, 0x4b, 0x4a, 0x22, 0xa0,
};

static const uint8_t sMessageEncodingTest0118_ExpectedEncoding[] =
{
    0x20, 0x21, 0x3d, 0x68, 0x8c, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x25,
    0xd0, 0x53, 0xda, 0xf7, 0xc9, 0xa0, 0x14, 0xbc, 0x34, 0x98, 0x62, 0x5f, 0xf9, 0x1a, 0x81, 0xb4,
    0xef, 0xc3, 0xbb, 0x4b, 0x97, 0xb1, 0x40, 0x7f,
};

static const MessageEncodingTestVector sMessageEncodingTest0118 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x118C683D,
        kWeaveHeaderFlag_DestNodeId,
        0x2500,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0118_EncryptionKey,
    sMessageEncodingTest0118_Payload,
    sizeof(sMessageEncodingTest0118_Payload),
    sMessageEncodingTest0118_ExpectedEncoding,
    sizeof(sMessageEncodingTest0118_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0119_EncryptionKey =
{
    {
        0x0c, 0x33, 0x03, 0x0d, 0xba, 0x32, 0x37, 0xe4, 0x8f, 0x62, 0xc0, 0xf2, 0xd7, 0x65, 0x96, 0x9c,
    }
};
static const uint8_t sMessageEncodingTest0119_Payload[] =
{
    0x1e, 0x4a, 0x83, 0x5f, 0xaf, 0x64, 0x0a, 0x04, 0x19, 0x05, 0xc9, 0xf1, 0x37, 0x2e, 0xb5, 0x50,
};

static const uint8_t sMessageEncodingTest0119_ExpectedEncoding[] =
{
    0x30, 0x21, 0x76, 0x18, 0x04, 0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb9, 0x20,
    0x34, 0xc0, 0x76, 0xb6, 0x42, 0xb6, 0xf9, 0x43, 0x91, 0x6d, 0x05, 0x54, 0x8f, 0x5d, 0x96, 0xfa,
    0xba, 0x9c, 0xbc, 0x1f, 0xc7, 0x95, 0x13, 0x37, 0x19, 0xd1, 0xb9, 0xf8, 0xdf, 0x83, 0x5d, 0x30,
};

static const MessageEncodingTestVector sMessageEncodingTest0119 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xA2041876,
        kWeaveHeaderFlag_DestNodeId,
        0x20B9,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0119_EncryptionKey,
    sMessageEncodingTest0119_Payload,
    sizeof(sMessageEncodingTest0119_Payload),
    sMessageEncodingTest0119_ExpectedEncoding,
    sizeof(sMessageEncodingTest0119_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0120_Payload[] =
{
    0xbc, 0xb5, 0x7d, 0xb9, 0xcf, 0x99, 0x12, 0x93, 0x39, 0xd0, 0xdb, 0x71, 0x7b, 0x34, 0x92, 0xab,
};

static const uint8_t sMessageEncodingTest0120_ExpectedEncoding[] =
{
    0x00, 0x26, 0x34, 0x48, 0xb5, 0xf4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xbc, 0xb5,
    0x7d, 0xb9, 0xcf, 0x99, 0x12, 0x93, 0x39, 0xd0, 0xdb, 0x71, 0x7b, 0x34, 0x92, 0xab,
};

static const MessageEncodingTestVector sMessageEncodingTest0120 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xF4B54834,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0120_Payload,
    sizeof(sMessageEncodingTest0120_Payload),
    sMessageEncodingTest0120_ExpectedEncoding,
    sizeof(sMessageEncodingTest0120_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0121_EncryptionKey =
{
    {
        0x49, 0x92, 0xcc, 0x8e, 0x86, 0x20, 0x94, 0x7d, 0xac, 0x32, 0xc7, 0x57, 0x1e, 0x8a, 0x31, 0x1e,
    },
    {
        0x51, 0xbe, 0x2e, 0x8c, 0x94, 0xdd, 0xf0, 0x25, 0x0c, 0xcb, 0x42, 0xda, 0x82, 0x24, 0xe7, 0xb0,
        0xc2, 0x07, 0xaf, 0xdd,
    }
};
static const uint8_t sMessageEncodingTest0121_Payload[] =
{
    0x9f, 0xbe, 0xa7, 0xfc, 0xda, 0xc6, 0x50, 0xd8, 0xd6, 0x8a, 0x30, 0x59, 0xd7, 0x9b, 0x4d, 0x09,
};

static const uint8_t sMessageEncodingTest0121_ExpectedEncoding[] =
{
    0x10, 0x26, 0xc3, 0x12, 0x90, 0x5e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xbb, 0x27,
    0x98, 0xc9, 0x6d, 0x89, 0x18, 0xff, 0x5a, 0x54, 0x61, 0x56, 0xb4, 0xb3, 0x06, 0xeb, 0xfc, 0x9b,
    0x47, 0x7e, 0x50, 0xae, 0xc7, 0xfb, 0xa7, 0x98, 0x32, 0x58, 0x5d, 0x0a, 0xd7, 0x48, 0x65, 0x46,
    0x30, 0x4b, 0x44, 0xe9,
};

static const MessageEncodingTestVector sMessageEncodingTest0121 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x5E9012C3,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x27BB,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0121_EncryptionKey,
    sMessageEncodingTest0121_Payload,
    sizeof(sMessageEncodingTest0121_Payload),
    sMessageEncodingTest0121_ExpectedEncoding,
    sizeof(sMessageEncodingTest0121_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0122_EncryptionKey =
{
    {
        0xa1, 0xcb, 0x65, 0x9c, 0x87, 0x7b, 0x09, 0x16, 0x43, 0x84, 0x00, 0xe6, 0xce, 0xf6, 0x90, 0xb3,
    }
};
static const uint8_t sMessageEncodingTest0122_Payload[] =
{
    0x02, 0x10, 0x00, 0xbc, 0x03, 0x41, 0x98, 0x51, 0x33, 0x84, 0xfe, 0xbc, 0x8f, 0xbb, 0x61, 0xe6,
};

static const uint8_t sMessageEncodingTest0122_ExpectedEncoding[] =
{
    0x20, 0x26, 0xf1, 0x81, 0xe4, 0x0b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x86, 0x28,
    0x1c, 0x4d, 0x46, 0x19, 0x17, 0xd8, 0xc9, 0x71, 0x68, 0xb7, 0x53, 0x00, 0x2b, 0xaf, 0x43, 0x2a,
    0xd0, 0x0a, 0x44, 0x2e, 0xfa, 0x31, 0x0c, 0x71,
};

static const MessageEncodingTestVector sMessageEncodingTest0122 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x0BE481F1,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2886,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0122_EncryptionKey,
    sMessageEncodingTest0122_Payload,
    sizeof(sMessageEncodingTest0122_Payload),
    sMessageEncodingTest0122_ExpectedEncoding,
    sizeof(sMessageEncodingTest0122_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0123_EncryptionKey =
{
    {
        0xd2, 0xbf, 0xfe, 0x76, 0xbe, 0x92, 0x70, 0xc0, 0xc2, 0x10, 0x23, 0x62, 0x34, 0x2b, 0xfc, 0xcc,
    }
};
static const uint8_t sMessageEncodingTest0123_Payload[] =
{
    0x23, 0x07, 0x69, 0x29, 0xb4, 0xa2, 0x65, 0xd8, 0x66, 0x20, 0x8e, 0x30, 0x7e, 0xe2, 0x20, 0x93,
};

static const uint8_t sMessageEncodingTest0123_ExpectedEncoding[] =
{
    0x30, 0x26, 0x2b, 0x59, 0xce, 0xaf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xda, 0x28,
    0xb1, 0xbc, 0xf4, 0x50, 0x86, 0xd9, 0x0a, 0xb1, 0xa4, 0x84, 0x19, 0x7d, 0x63, 0xb5, 0xdb, 0x84,
    0xd5, 0x83, 0xbd, 0x29, 0x25, 0xe6, 0x53, 0x94, 0x67, 0x59, 0xd0, 0x65, 0x30, 0x03, 0xba, 0x22,
};

static const MessageEncodingTestVector sMessageEncodingTest0123 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xAFCE592B,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x28DA,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0123_EncryptionKey,
    sMessageEncodingTest0123_Payload,
    sizeof(sMessageEncodingTest0123_Payload),
    sMessageEncodingTest0123_ExpectedEncoding,
    sizeof(sMessageEncodingTest0123_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0124_Payload[] =
{
    0xc2, 0xc1, 0x25, 0xca, 0x0a, 0xbc, 0x49, 0xe5, 0xdb, 0xe2, 0xa2, 0x70, 0xdf, 0x24, 0x5c, 0xc7,
};

static const uint8_t sMessageEncodingTest0124_ExpectedEncoding[] =
{
    0x00, 0x1a, 0xd1, 0x15, 0x15, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc2, 0xc1,
    0x25, 0xca, 0x0a, 0xbc, 0x49, 0xe5, 0xdb, 0xe2, 0xa2, 0x70, 0xdf, 0x24, 0x5c, 0xc7,
};

static const MessageEncodingTestVector sMessageEncodingTest0124 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x321515D1,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0124_Payload,
    sizeof(sMessageEncodingTest0124_Payload),
    sMessageEncodingTest0124_ExpectedEncoding,
    sizeof(sMessageEncodingTest0124_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0125_EncryptionKey =
{
    {
        0x75, 0x17, 0xf6, 0x11, 0x03, 0x23, 0xa3, 0xd9, 0x69, 0x6c, 0x7f, 0xb6, 0x0f, 0xd5, 0x29, 0xa9,
    },
    {
        0x5e, 0x3d, 0xe1, 0x9a, 0x80, 0x6c, 0x2b, 0x2b, 0x1c, 0xa2, 0x86, 0x25, 0xe9, 0x4e, 0xbc, 0x28,
        0xab, 0xf7, 0x20, 0xac,
    }
};
static const uint8_t sMessageEncodingTest0125_Payload[] =
{
    0x1a, 0x8b, 0xb0, 0xe4, 0x67, 0x99, 0x7f, 0x68, 0x3f, 0x75, 0x60, 0xf7, 0x9c, 0x14, 0xe2, 0xfc,
};

static const uint8_t sMessageEncodingTest0125_ExpectedEncoding[] =
{
    0x10, 0x1a, 0x08, 0x0c, 0xc1, 0xf6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x31, 0x29,
    0xaf, 0xf8, 0x9c, 0x1d, 0x48, 0xa2, 0xf9, 0x81, 0x41, 0x02, 0x60, 0xf7, 0xe0, 0x07, 0x80, 0xca,
    0xde, 0x56, 0x19, 0x6d, 0x8e, 0x33, 0x19, 0x50, 0x66, 0x44, 0x6a, 0xce, 0xed, 0xbb, 0x8e, 0x4f,
    0x26, 0x2a, 0xad, 0xba,
};

static const MessageEncodingTestVector sMessageEncodingTest0125 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xF6C10C08,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2931,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0125_EncryptionKey,
    sMessageEncodingTest0125_Payload,
    sizeof(sMessageEncodingTest0125_Payload),
    sMessageEncodingTest0125_ExpectedEncoding,
    sizeof(sMessageEncodingTest0125_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0126_EncryptionKey =
{
    {
        0xa2, 0x77, 0xbc, 0xaa, 0xb5, 0x54, 0x21, 0x92, 0xe4, 0x7b, 0xb3, 0x25, 0x3b, 0x38, 0x46, 0x75,
    }
};
static const uint8_t sMessageEncodingTest0126_Payload[] =
{
    0xf9, 0xe7, 0xcc, 0xfa, 0x70, 0x35, 0x45, 0x41, 0xff, 0x71, 0x22, 0xc4, 0x53, 0x29, 0x0d, 0xf2,
};

static const uint8_t sMessageEncodingTest0126_ExpectedEncoding[] =
{
    0x20, 0x1a, 0x1d, 0x34, 0x52, 0xaa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xde, 0x29,
    0x97, 0xab, 0x20, 0xee, 0xee, 0xab, 0xb3, 0x3b, 0x5b, 0x2f, 0x2f, 0x88, 0x74, 0xfd, 0xbd, 0x2d,
    0xf1, 0x72, 0xde, 0x8b, 0x60, 0x5a, 0x4c, 0xaa,
};

static const MessageEncodingTestVector sMessageEncodingTest0126 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xAA52341D,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x29DE,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0126_EncryptionKey,
    sMessageEncodingTest0126_Payload,
    sizeof(sMessageEncodingTest0126_Payload),
    sMessageEncodingTest0126_ExpectedEncoding,
    sizeof(sMessageEncodingTest0126_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0127_EncryptionKey =
{
    {
        0xe4, 0x74, 0x6a, 0x7e, 0x2c, 0xcb, 0x07, 0x4a, 0x0e, 0x3d, 0x0a, 0x47, 0xcb, 0x8a, 0xd2, 0xb8,
    }
};
static const uint8_t sMessageEncodingTest0127_Payload[] =
{
    0xad, 0xf8, 0xaa, 0x7d, 0xfe, 0x62, 0xf2, 0xa0, 0xc5, 0xde, 0xdc, 0x39, 0x93, 0x0a, 0x01, 0xed,
};

static const uint8_t sMessageEncodingTest0127_ExpectedEncoding[] =
{
    0x30, 0x1a, 0xa9, 0xc9, 0xc7, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x75, 0x2f,
    0xee, 0x08, 0x47, 0xff, 0xcc, 0x54, 0x66, 0xfe, 0x1c, 0x94, 0x7c, 0xfe, 0x8f, 0xbd, 0xd7, 0x19,
    0x74, 0x93, 0x8a, 0xd9, 0xfd, 0xe8, 0x76, 0x4f, 0x21, 0x31, 0x92, 0xab, 0xf6, 0x7b, 0xb3, 0x7c,
};

static const MessageEncodingTestVector sMessageEncodingTest0127 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xF1C7C9A9,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2F75,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0127_EncryptionKey,
    sMessageEncodingTest0127_Payload,
    sizeof(sMessageEncodingTest0127_Payload),
    sMessageEncodingTest0127_ExpectedEncoding,
    sizeof(sMessageEncodingTest0127_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0128_Payload[] =
{
    0xc2, 0xfc, 0x1f, 0x16, 0xfd, 0x2e, 0xa0, 0x8d, 0xe9, 0x77, 0x07, 0xe5, 0x31, 0x3c, 0xf2, 0xe5,
};

static const uint8_t sMessageEncodingTest0128_ExpectedEncoding[] =
{
    0x00, 0x2a, 0xf8, 0xf7, 0xcd, 0xdf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc2, 0xfc,
    0x1f, 0x16, 0xfd, 0x2e, 0xa0, 0x8d, 0xe9, 0x77, 0x07, 0xe5, 0x31, 0x3c, 0xf2, 0xe5,
};

static const MessageEncodingTestVector sMessageEncodingTest0128 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xDFCDF7F8,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0128_Payload,
    sizeof(sMessageEncodingTest0128_Payload),
    sMessageEncodingTest0128_ExpectedEncoding,
    sizeof(sMessageEncodingTest0128_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0129_EncryptionKey =
{
    {
        0x59, 0x27, 0xab, 0xce, 0x02, 0xc5, 0x14, 0x06, 0xb8, 0xf7, 0x91, 0x0e, 0xd5, 0x66, 0xae, 0x7e,
    },
    {
        0xcd, 0xd3, 0xbb, 0x3a, 0xe5, 0x4e, 0x88, 0x7b, 0xb4, 0xdf, 0x0c, 0x07, 0x50, 0x29, 0x4c, 0xfe,
        0xb6, 0x0c, 0xf2, 0xa7,
    }
};
static const uint8_t sMessageEncodingTest0129_Payload[] =
{
    0x10, 0x43, 0xfc, 0x09, 0x4b, 0x8c, 0xd7, 0x88, 0xe7, 0xe8, 0xef, 0xc0, 0x00, 0x19, 0x41, 0x0c,
};

static const uint8_t sMessageEncodingTest0129_ExpectedEncoding[] =
{
    0x10, 0x2a, 0x03, 0x47, 0x93, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x2e,
    0x3f, 0xf9, 0x28, 0x85, 0x24, 0xc1, 0x5b, 0xa5, 0x9b, 0x17, 0xde, 0xc6, 0x36, 0x80, 0xdf, 0xfc,
    0x80, 0x74, 0x3d, 0xf3, 0xeb, 0x8b, 0x12, 0xc4, 0x30, 0x40, 0x29, 0x6e, 0x22, 0x4a, 0x86, 0xd6,
    0xd2, 0xf9, 0x7e, 0x0a,
};

static const MessageEncodingTestVector sMessageEncodingTest0129 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x4C934703,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2E01,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0129_EncryptionKey,
    sMessageEncodingTest0129_Payload,
    sizeof(sMessageEncodingTest0129_Payload),
    sMessageEncodingTest0129_ExpectedEncoding,
    sizeof(sMessageEncodingTest0129_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0130_EncryptionKey =
{
    {
        0x60, 0xd9, 0xe5, 0x3e, 0x67, 0x13, 0xb5, 0xa5, 0x4f, 0x75, 0xfa, 0x7b, 0x4c, 0x7a, 0xdb, 0x5a,
    }
};
static const uint8_t sMessageEncodingTest0130_Payload[] =
{
    0x34, 0xdf, 0xb4, 0x1d, 0x6c, 0x71, 0x32, 0x4e, 0xcf, 0x0f, 0x72, 0x21, 0xaf, 0x99, 0x13, 0xe4,
};

static const uint8_t sMessageEncodingTest0130_ExpectedEncoding[] =
{
    0x20, 0x2a, 0xb3, 0xaa, 0x53, 0x5d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4f, 0x22,
    0x43, 0xfb, 0x21, 0x05, 0x1f, 0x6b, 0xff, 0x39, 0xaf, 0xf4, 0x33, 0x13, 0x10, 0xcc, 0xed, 0xcc,
    0x01, 0x63, 0xe4, 0xef, 0xed, 0x4e, 0x51, 0x5a,
};

static const MessageEncodingTestVector sMessageEncodingTest0130 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x5D53AAB3,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x224F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0130_EncryptionKey,
    sMessageEncodingTest0130_Payload,
    sizeof(sMessageEncodingTest0130_Payload),
    sMessageEncodingTest0130_ExpectedEncoding,
    sizeof(sMessageEncodingTest0130_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0131_EncryptionKey =
{
    {
        0xb8, 0x6b, 0x06, 0xe2, 0x74, 0xc3, 0x75, 0x7c, 0xd5, 0xcc, 0xaf, 0x1c, 0x63, 0x45, 0x26, 0xeb,
    }
};
static const uint8_t sMessageEncodingTest0131_Payload[] =
{
    0x8d, 0x72, 0xbd, 0x05, 0x20, 0x66, 0x5d, 0x6a, 0x90, 0xb3, 0x86, 0xaa, 0x4e, 0x6c, 0x5c, 0xa8,
};

static const uint8_t sMessageEncodingTest0131_ExpectedEncoding[] =
{
    0x30, 0x2a, 0xa3, 0x59, 0x02, 0xc4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xde, 0x25,
    0xac, 0xd4, 0x1b, 0xa9, 0xa2, 0xf2, 0x5e, 0xbd, 0x12, 0x86, 0x36, 0x5f, 0x2d, 0x8b, 0x17, 0x41,
    0x78, 0x86, 0x8b, 0x4f, 0x8b, 0x3e, 0x9d, 0x6a, 0xbd, 0x08, 0x6a, 0x57, 0xf9, 0x50, 0x07, 0x62,
};

static const MessageEncodingTestVector sMessageEncodingTest0131 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xC40259A3,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x25DE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0131_EncryptionKey,
    sMessageEncodingTest0131_Payload,
    sizeof(sMessageEncodingTest0131_Payload),
    sMessageEncodingTest0131_ExpectedEncoding,
    sizeof(sMessageEncodingTest0131_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0132_Payload[] =
{
    0xea, 0xe3, 0x32, 0x08, 0x28, 0xbb, 0xf2, 0x96, 0xc2, 0xf0, 0xfc, 0x74, 0xbc, 0x97, 0x15, 0x6a,
};

static const uint8_t sMessageEncodingTest0132_ExpectedEncoding[] =
{
    0x00, 0x12, 0x1b, 0x19, 0xc6, 0x7e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xea, 0xe3,
    0x32, 0x08, 0x28, 0xbb, 0xf2, 0x96, 0xc2, 0xf0, 0xfc, 0x74, 0xbc, 0x97, 0x15, 0x6a,
};

static const MessageEncodingTestVector sMessageEncodingTest0132 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x7EC6191B,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0132_Payload,
    sizeof(sMessageEncodingTest0132_Payload),
    sMessageEncodingTest0132_ExpectedEncoding,
    sizeof(sMessageEncodingTest0132_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0133_EncryptionKey =
{
    {
        0x95, 0x21, 0xcc, 0xb3, 0xec, 0xcb, 0x2d, 0x6d, 0xb6, 0x3b, 0x0b, 0xb9, 0x56, 0x56, 0x4b, 0x85,
    },
    {
        0x74, 0xee, 0xb3, 0xa6, 0x2c, 0x63, 0xec, 0x08, 0x39, 0xb2, 0x0c, 0x9c, 0xf2, 0xfa, 0xf7, 0x29,
        0x70, 0x05, 0xa4, 0x8a,
    }
};
static const uint8_t sMessageEncodingTest0133_Payload[] =
{
    0x22, 0x62, 0x0d, 0xd2, 0x38, 0xa2, 0xc3, 0x77, 0x6d, 0xf4, 0x94, 0xfc, 0xa3, 0x6a, 0x8b, 0x4b,
};

static const uint8_t sMessageEncodingTest0133_ExpectedEncoding[] =
{
    0x10, 0x12, 0xe3, 0xb7, 0x48, 0xcc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4d, 0x22,
    0xa5, 0x8b, 0x82, 0x80, 0xe2, 0x25, 0x18, 0x0f, 0xb1, 0xd2, 0x7c, 0xfc, 0xaa, 0x18, 0x49, 0x69,
    0x25, 0xd8, 0xf8, 0x6f, 0x79, 0xba, 0x25, 0xc8, 0x12, 0x1b, 0x36, 0x8b, 0x70, 0x94, 0xa1, 0x1b,
    0x68, 0xaf, 0x93, 0x16,
};

static const MessageEncodingTestVector sMessageEncodingTest0133 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xCC48B7E3,
        kWeaveHeaderFlag_SourceNodeId,
        0x224D,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0133_EncryptionKey,
    sMessageEncodingTest0133_Payload,
    sizeof(sMessageEncodingTest0133_Payload),
    sMessageEncodingTest0133_ExpectedEncoding,
    sizeof(sMessageEncodingTest0133_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0134_EncryptionKey =
{
    {
        0x05, 0x90, 0x1a, 0x98, 0x35, 0xf3, 0xd3, 0x25, 0xbf, 0x27, 0x8d, 0xd2, 0x36, 0x3f, 0x79, 0x29,
    }
};
static const uint8_t sMessageEncodingTest0134_Payload[] =
{
    0x17, 0x40, 0x26, 0xa5, 0x56, 0x59, 0xab, 0x8f, 0xa4, 0x47, 0xae, 0x53, 0xc5, 0x9f, 0xf6, 0xf4,
};

static const uint8_t sMessageEncodingTest0134_ExpectedEncoding[] =
{
    0x20, 0x12, 0xd6, 0x2e, 0x35, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x28, 0x29,
    0x84, 0xd1, 0xcb, 0x58, 0x93, 0x37, 0x33, 0x66, 0x10, 0x9a, 0xb9, 0x85, 0x4f, 0xb8, 0x9f, 0x98,
    0x81, 0xbf, 0xeb, 0x96, 0x3e, 0xcd, 0xfe, 0x0f,
};

static const MessageEncodingTestVector sMessageEncodingTest0134 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x04352ED6,
        kWeaveHeaderFlag_SourceNodeId,
        0x2928,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0134_EncryptionKey,
    sMessageEncodingTest0134_Payload,
    sizeof(sMessageEncodingTest0134_Payload),
    sMessageEncodingTest0134_ExpectedEncoding,
    sizeof(sMessageEncodingTest0134_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0135_EncryptionKey =
{
    {
        0xc5, 0xfa, 0xa5, 0x05, 0xc8, 0x04, 0x80, 0xf6, 0xd5, 0x13, 0x85, 0x3f, 0xbe, 0xe8, 0xaf, 0x1c,
    }
};
static const uint8_t sMessageEncodingTest0135_Payload[] =
{
    0x50, 0xc2, 0xd0, 0xed, 0x0d, 0x71, 0xce, 0x45, 0x7e, 0x83, 0x30, 0x9a, 0x8a, 0xdf, 0xf7, 0x72,
};

static const uint8_t sMessageEncodingTest0135_ExpectedEncoding[] =
{
    0x30, 0x12, 0x42, 0xe6, 0xc4, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x41, 0x27,
    0x1d, 0xd2, 0x7b, 0x30, 0x83, 0xbd, 0x97, 0x22, 0x99, 0x33, 0xf3, 0x9a, 0x03, 0x87, 0xe7, 0xda,
    0x20, 0x30, 0x28, 0x36, 0xd5, 0x99, 0xf0, 0xa8, 0x4a, 0x03, 0x2d, 0x87, 0x17, 0xa8, 0x9f, 0x26,
};

static const MessageEncodingTestVector sMessageEncodingTest0135 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xB8C4E642,
        kWeaveHeaderFlag_SourceNodeId,
        0x2741,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0135_EncryptionKey,
    sMessageEncodingTest0135_Payload,
    sizeof(sMessageEncodingTest0135_Payload),
    sMessageEncodingTest0135_ExpectedEncoding,
    sizeof(sMessageEncodingTest0135_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0136_Payload[] =
{
    0xe8, 0x91, 0xd9, 0x68, 0x77, 0x8c, 0x10, 0xb3, 0x9e, 0x43, 0x07, 0x78, 0x20, 0xd3, 0x37, 0xbe,
};

static const uint8_t sMessageEncodingTest0136_ExpectedEncoding[] =
{
    0x00, 0x22, 0x4e, 0xf9, 0xc8, 0x8a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe8, 0x91,
    0xd9, 0x68, 0x77, 0x8c, 0x10, 0xb3, 0x9e, 0x43, 0x07, 0x78, 0x20, 0xd3, 0x37, 0xbe,
};

static const MessageEncodingTestVector sMessageEncodingTest0136 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x8AC8F94E,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0136_Payload,
    sizeof(sMessageEncodingTest0136_Payload),
    sMessageEncodingTest0136_ExpectedEncoding,
    sizeof(sMessageEncodingTest0136_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0137_EncryptionKey =
{
    {
        0xe3, 0x74, 0x41, 0xa4, 0xcc, 0xfd, 0x1d, 0xc1, 0x30, 0xfe, 0x7b, 0xbb, 0x66, 0x0c, 0x06, 0xab,
    },
    {
        0xe7, 0x52, 0x10, 0x78, 0xcc, 0x4a, 0x8d, 0xe4, 0x05, 0xd7, 0x1b, 0x7f, 0x9c, 0x03, 0x2c, 0x3c,
        0xf0, 0xab, 0x0c, 0x35,
    }
};
static const uint8_t sMessageEncodingTest0137_Payload[] =
{
    0x50, 0x21, 0xcf, 0x32, 0x3c, 0x5f, 0x05, 0xf4, 0xbc, 0xf7, 0xd8, 0xf4, 0x78, 0x1a, 0xb8, 0xf1,
};

static const uint8_t sMessageEncodingTest0137_ExpectedEncoding[] =
{
    0x10, 0x22, 0x90, 0xdd, 0x59, 0x25, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x43, 0x20,
    0xa5, 0x7a, 0x35, 0x73, 0x60, 0x4f, 0x68, 0x41, 0xd3, 0xb6, 0x7f, 0xf5, 0x39, 0xe1, 0x72, 0x70,
    0xb6, 0xfa, 0x4d, 0x15, 0x48, 0x28, 0x15, 0x6d, 0x12, 0xba, 0xc8, 0x57, 0xbf, 0xdc, 0xb4, 0x47,
    0x0c, 0xc0, 0xed, 0xfc,
};

static const MessageEncodingTestVector sMessageEncodingTest0137 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x2559DD90,
        kWeaveHeaderFlag_SourceNodeId,
        0x2043,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0137_EncryptionKey,
    sMessageEncodingTest0137_Payload,
    sizeof(sMessageEncodingTest0137_Payload),
    sMessageEncodingTest0137_ExpectedEncoding,
    sizeof(sMessageEncodingTest0137_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0138_EncryptionKey =
{
    {
        0x30, 0xe0, 0xe0, 0xda, 0xff, 0xa6, 0x02, 0xf2, 0xc5, 0xa4, 0x40, 0xbf, 0xc9, 0xe3, 0x85, 0xca,
    }
};
static const uint8_t sMessageEncodingTest0138_Payload[] =
{
    0x70, 0x40, 0x44, 0x9a, 0xf4, 0xde, 0xc5, 0x0b, 0xa0, 0x02, 0xd9, 0x4c, 0xbd, 0x34, 0xc3, 0x16,
};

static const uint8_t sMessageEncodingTest0138_ExpectedEncoding[] =
{
    0x20, 0x22, 0xd6, 0x5c, 0xdd, 0x25, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x42, 0x2e,
    0x37, 0x2d, 0x3c, 0xdb, 0x90, 0x9c, 0xb9, 0x05, 0xc7, 0xb9, 0x40, 0x46, 0xcb, 0x04, 0x61, 0x29,
    0x14, 0xd2, 0xd2, 0xf3, 0xbf, 0x11, 0x8d, 0xa8,
};

static const MessageEncodingTestVector sMessageEncodingTest0138 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x25DD5CD6,
        kWeaveHeaderFlag_SourceNodeId,
        0x2E42,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0138_EncryptionKey,
    sMessageEncodingTest0138_Payload,
    sizeof(sMessageEncodingTest0138_Payload),
    sMessageEncodingTest0138_ExpectedEncoding,
    sizeof(sMessageEncodingTest0138_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0139_EncryptionKey =
{
    {
        0xbc, 0x0c, 0x32, 0x17, 0xf3, 0x99, 0xf1, 0x87, 0x48, 0x67, 0x25, 0x49, 0x3c, 0x6b, 0x3a, 0xb2,
    }
};
static const uint8_t sMessageEncodingTest0139_Payload[] =
{
    0xf5, 0xcb, 0x9d, 0x48, 0x85, 0xea, 0xf4, 0x86, 0x54, 0x29, 0x8d, 0x3c, 0x4f, 0xbb, 0x0d, 0xfc,
};

static const uint8_t sMessageEncodingTest0139_ExpectedEncoding[] =
{
    0x30, 0x22, 0xd2, 0x45, 0x1f, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe4, 0x2c,
    0xa0, 0x0a, 0x65, 0xda, 0x94, 0x5f, 0xa7, 0x64, 0x95, 0xf7, 0xb9, 0x9c, 0x5b, 0x37, 0x8d, 0xff,
    0xf8, 0x59, 0xdd, 0x1a, 0x71, 0x8a, 0xbb, 0xb2, 0xd0, 0x62, 0x37, 0x4d, 0x27, 0xfb, 0xbe, 0x5a,
};

static const MessageEncodingTestVector sMessageEncodingTest0139 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xB81F45D2,
        kWeaveHeaderFlag_SourceNodeId,
        0x2CE4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0139_EncryptionKey,
    sMessageEncodingTest0139_Payload,
    sizeof(sMessageEncodingTest0139_Payload),
    sMessageEncodingTest0139_ExpectedEncoding,
    sizeof(sMessageEncodingTest0139_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0140_Payload[] =
{
    0x46, 0x6c, 0xed, 0xd4, 0x48, 0xf9, 0x6d, 0x91, 0x59, 0x94, 0x2b, 0x9d, 0x09, 0xa3, 0x86, 0x8b,
};

static const uint8_t sMessageEncodingTest0140_ExpectedEncoding[] =
{
    0x00, 0x24, 0xcb, 0xf9, 0x14, 0x75, 0x46, 0x6c, 0xed, 0xd4, 0x48, 0xf9, 0x6d, 0x91, 0x59, 0x94,
    0x2b, 0x9d, 0x09, 0xa3, 0x86, 0x8b,
};

static const MessageEncodingTestVector sMessageEncodingTest0140 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x7514F9CB,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0140_Payload,
    sizeof(sMessageEncodingTest0140_Payload),
    sMessageEncodingTest0140_ExpectedEncoding,
    sizeof(sMessageEncodingTest0140_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0141_EncryptionKey =
{
    {
        0x13, 0xa6, 0x22, 0x62, 0xd3, 0x58, 0xe7, 0xcc, 0x6c, 0x71, 0xdf, 0xd0, 0xd3, 0x4c, 0x9f, 0xdf,
    },
    {
        0x47, 0x3e, 0x4e, 0xed, 0xcb, 0xf1, 0xdc, 0xf9, 0x97, 0x07, 0x54, 0x9b, 0xb7, 0x4c, 0x3b, 0x99,
        0x16, 0xb9, 0x02, 0x21,
    }
};
static const uint8_t sMessageEncodingTest0141_Payload[] =
{
    0xd1, 0xb2, 0x57, 0x13, 0x2f, 0x35, 0xba, 0x83, 0x8d, 0x08, 0x55, 0x71, 0x42, 0xb5, 0xfc, 0x9a,
};

static const uint8_t sMessageEncodingTest0141_ExpectedEncoding[] =
{
    0x10, 0x24, 0x94, 0xdc, 0xfe, 0x0b, 0xa3, 0x29, 0x89, 0xff, 0xcd, 0x8a, 0xfb, 0x0b, 0x2b, 0x21,
    0x11, 0xc4, 0xbe, 0xfc, 0x9f, 0xca, 0x18, 0x08, 0xb1, 0x94, 0x72, 0x29, 0x8d, 0x32, 0xad, 0x64,
    0x77, 0xa0, 0xdd, 0x20, 0x92, 0xa9, 0xe8, 0x78, 0x2f, 0x64, 0x29, 0x85,
};

static const MessageEncodingTestVector sMessageEncodingTest0141 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x0BFEDC94,
        kWeaveHeaderFlag_TunneledData,
        0x29A3,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0141_EncryptionKey,
    sMessageEncodingTest0141_Payload,
    sizeof(sMessageEncodingTest0141_Payload),
    sMessageEncodingTest0141_ExpectedEncoding,
    sizeof(sMessageEncodingTest0141_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0142_EncryptionKey =
{
    {
        0x2c, 0x51, 0x4f, 0x60, 0x0b, 0x7a, 0x94, 0x68, 0x26, 0x33, 0x37, 0xb4, 0x40, 0xdc, 0x9e, 0x25,
    }
};
static const uint8_t sMessageEncodingTest0142_Payload[] =
{
    0xc8, 0x5a, 0xe5, 0xd7, 0x2b, 0x8f, 0x36, 0x03, 0xb2, 0x7f, 0x5f, 0xa7, 0xf9, 0xe6, 0xa5, 0xae,
};

static const uint8_t sMessageEncodingTest0142_ExpectedEncoding[] =
{
    0x20, 0x24, 0xd2, 0x1b, 0xb9, 0x57, 0x7d, 0x2a, 0x7d, 0x0d, 0xbe, 0xcb, 0x8a, 0xda, 0x0b, 0xc0,
    0xbf, 0xa2, 0x55, 0x73, 0xae, 0xbd, 0xc2, 0x88, 0x8c, 0x53, 0xe8, 0xdb, 0x1d, 0xc9, 0x9f, 0x5f,
};

static const MessageEncodingTestVector sMessageEncodingTest0142 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x57B91BD2,
        kWeaveHeaderFlag_TunneledData,
        0x2A7D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0142_EncryptionKey,
    sMessageEncodingTest0142_Payload,
    sizeof(sMessageEncodingTest0142_Payload),
    sMessageEncodingTest0142_ExpectedEncoding,
    sizeof(sMessageEncodingTest0142_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0143_EncryptionKey =
{
    {
        0x44, 0xf9, 0x2e, 0x3e, 0x4d, 0xd8, 0x49, 0xa5, 0x74, 0x8d, 0x4a, 0x4b, 0x7a, 0x5d, 0x22, 0x1c,
    }
};
static const uint8_t sMessageEncodingTest0143_Payload[] =
{
    0x61, 0x95, 0x8d, 0x36, 0xeb, 0x2d, 0x05, 0x9d, 0xcb, 0x1b, 0xaf, 0x14, 0x8a, 0x3b, 0x8b, 0x84,
};

static const uint8_t sMessageEncodingTest0143_ExpectedEncoding[] =
{
    0x30, 0x24, 0xbe, 0xa0, 0x55, 0x2b, 0x6b, 0x25, 0x08, 0xbf, 0xd4, 0x33, 0x86, 0xa3, 0x0e, 0x1d,
    0xb6, 0x28, 0xd8, 0x82, 0xa8, 0x41, 0x96, 0xdf, 0x7a, 0x98, 0x55, 0x4e, 0x63, 0x1a, 0x5d, 0x52,
    0xe0, 0x0a, 0xb8, 0x1f, 0x42, 0x90, 0x50, 0x3a,
};

static const MessageEncodingTestVector sMessageEncodingTest0143 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x2B55A0BE,
        kWeaveHeaderFlag_TunneledData,
        0x256B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0143_EncryptionKey,
    sMessageEncodingTest0143_Payload,
    sizeof(sMessageEncodingTest0143_Payload),
    sMessageEncodingTest0143_ExpectedEncoding,
    sizeof(sMessageEncodingTest0143_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0144_Payload[] =
{
    0x15, 0x0c, 0x3a, 0x8e, 0xa2, 0x20, 0xff, 0x1d, 0xa0, 0x37, 0x99, 0xf4, 0x1c, 0x4e, 0xa4, 0xbd,
};

static const uint8_t sMessageEncodingTest0144_ExpectedEncoding[] =
{
    0x00, 0x18, 0x0d, 0xfb, 0xfa, 0xda, 0x15, 0x0c, 0x3a, 0x8e, 0xa2, 0x20, 0xff, 0x1d, 0xa0, 0x37,
    0x99, 0xf4, 0x1c, 0x4e, 0xa4, 0xbd,
};

static const MessageEncodingTestVector sMessageEncodingTest0144 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xDAFAFB0D,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0144_Payload,
    sizeof(sMessageEncodingTest0144_Payload),
    sMessageEncodingTest0144_ExpectedEncoding,
    sizeof(sMessageEncodingTest0144_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0145_EncryptionKey =
{
    {
        0x34, 0x17, 0x45, 0x1b, 0xab, 0x81, 0x62, 0xa2, 0x22, 0xf4, 0x86, 0x97, 0xb1, 0x7d, 0xc8, 0x61,
    },
    {
        0xf5, 0x12, 0x2a, 0xe5, 0xc1, 0xbf, 0x60, 0xcd, 0xd7, 0x05, 0xf2, 0x7a, 0x98, 0xde, 0xc3, 0x40,
        0x44, 0x1c, 0x71, 0x03,
    }
};
static const uint8_t sMessageEncodingTest0145_Payload[] =
{
    0x7b, 0x92, 0x98, 0x27, 0x9d, 0x66, 0xe2, 0x60, 0x54, 0x68, 0x42, 0x1b, 0xac, 0xed, 0xca, 0x61,
};

static const uint8_t sMessageEncodingTest0145_ExpectedEncoding[] =
{
    0x10, 0x18, 0xba, 0x19, 0x39, 0x63, 0x10, 0x26, 0x5f, 0x1c, 0x38, 0x9b, 0xff, 0xd2, 0xf9, 0x52,
    0x21, 0x9a, 0x9d, 0xd9, 0x51, 0xdc, 0x31, 0xd9, 0xe1, 0x68, 0x69, 0xdf, 0x63, 0xa9, 0x3a, 0x61,
    0x70, 0xcb, 0x61, 0x2a, 0x1f, 0x9d, 0xf1, 0xb9, 0x52, 0x0f, 0xec, 0xb6,
};

static const MessageEncodingTestVector sMessageEncodingTest0145 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x633919BA,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2610,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0145_EncryptionKey,
    sMessageEncodingTest0145_Payload,
    sizeof(sMessageEncodingTest0145_Payload),
    sMessageEncodingTest0145_ExpectedEncoding,
    sizeof(sMessageEncodingTest0145_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0146_EncryptionKey =
{
    {
        0xf0, 0x81, 0x67, 0xc3, 0x6f, 0x09, 0x38, 0x13, 0x0e, 0xa4, 0xf8, 0xed, 0xfd, 0x7d, 0x51, 0xa2,
    }
};
static const uint8_t sMessageEncodingTest0146_Payload[] =
{
    0xe1, 0x9a, 0x70, 0x67, 0xf7, 0xd5, 0x80, 0x56, 0xf2, 0x4a, 0x51, 0x8c, 0xf0, 0xf2, 0x2d, 0x1e,
};

static const uint8_t sMessageEncodingTest0146_ExpectedEncoding[] =
{
    0x20, 0x18, 0x99, 0x07, 0xe9, 0xea, 0x80, 0x26, 0xfe, 0x81, 0xbc, 0x8e, 0x54, 0x4d, 0xb8, 0x73,
    0x24, 0xe1, 0xd6, 0xa5, 0xbb, 0x73, 0x05, 0x27, 0xa7, 0xab, 0xc8, 0x2e, 0xf6, 0x14, 0xea, 0x06,
};

static const MessageEncodingTestVector sMessageEncodingTest0146 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xEAE90799,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2680,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0146_EncryptionKey,
    sMessageEncodingTest0146_Payload,
    sizeof(sMessageEncodingTest0146_Payload),
    sMessageEncodingTest0146_ExpectedEncoding,
    sizeof(sMessageEncodingTest0146_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0147_EncryptionKey =
{
    {
        0xdb, 0xda, 0xd8, 0xfc, 0x7a, 0xbc, 0xfd, 0xdc, 0x52, 0x9d, 0x8a, 0xfc, 0xe3, 0xa8, 0xb7, 0xa8,
    }
};
static const uint8_t sMessageEncodingTest0147_Payload[] =
{
    0x64, 0xfd, 0xd4, 0x9f, 0xcb, 0x84, 0xe7, 0xb1, 0xfd, 0x07, 0xc3, 0x54, 0x21, 0xb3, 0x97, 0x48,
};

static const uint8_t sMessageEncodingTest0147_ExpectedEncoding[] =
{
    0x30, 0x18, 0x34, 0xf1, 0x4b, 0x0d, 0x75, 0x22, 0x0a, 0xc6, 0xa8, 0x89, 0x0f, 0x8f, 0xe1, 0x5a,
    0xd1, 0xd0, 0x59, 0x15, 0xba, 0xe4, 0x69, 0xb4, 0x82, 0xe1, 0xca, 0x9c, 0xc0, 0x94, 0x1c, 0x8a,
    0xc2, 0xd6, 0x10, 0xd9, 0x10, 0x90, 0x1d, 0x59,
};

static const MessageEncodingTestVector sMessageEncodingTest0147 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x0D4BF134,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2275,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0147_EncryptionKey,
    sMessageEncodingTest0147_Payload,
    sizeof(sMessageEncodingTest0147_Payload),
    sMessageEncodingTest0147_ExpectedEncoding,
    sizeof(sMessageEncodingTest0147_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0148_Payload[] =
{
    0x59, 0x97, 0xea, 0x40, 0xf2, 0x31, 0xb1, 0x78, 0xa5, 0x03, 0x78, 0xc0, 0xea, 0x78, 0x03, 0xc0,
};

static const uint8_t sMessageEncodingTest0148_ExpectedEncoding[] =
{
    0x00, 0x28, 0x64, 0x73, 0xef, 0x67, 0x59, 0x97, 0xea, 0x40, 0xf2, 0x31, 0xb1, 0x78, 0xa5, 0x03,
    0x78, 0xc0, 0xea, 0x78, 0x03, 0xc0,
};

static const MessageEncodingTestVector sMessageEncodingTest0148 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x67EF7364,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0148_Payload,
    sizeof(sMessageEncodingTest0148_Payload),
    sMessageEncodingTest0148_ExpectedEncoding,
    sizeof(sMessageEncodingTest0148_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0149_EncryptionKey =
{
    {
        0xdc, 0x4f, 0x38, 0x5e, 0x7b, 0x4a, 0xd8, 0x9d, 0xe4, 0xab, 0x87, 0x14, 0xc7, 0x2e, 0x71, 0x88,
    },
    {
        0xa5, 0xce, 0xd3, 0xdd, 0x79, 0x08, 0x58, 0x14, 0x4d, 0xb9, 0xf0, 0xe1, 0x83, 0xe2, 0x3f, 0x4e,
        0x69, 0x03, 0x8a, 0x4f,
    }
};
static const uint8_t sMessageEncodingTest0149_Payload[] =
{
    0xf2, 0xee, 0xa3, 0x0d, 0x31, 0x37, 0xac, 0x76, 0xa7, 0x57, 0x2f, 0x7e, 0xce, 0x7d, 0xf7, 0x3d,
};

static const uint8_t sMessageEncodingTest0149_ExpectedEncoding[] =
{
    0x10, 0x28, 0x5a, 0x35, 0x80, 0x9d, 0x3b, 0x25, 0x8f, 0x80, 0x7b, 0x80, 0x96, 0x83, 0x69, 0x09,
    0x81, 0xfc, 0x1a, 0x54, 0x68, 0x12, 0x8a, 0xdb, 0xfd, 0xae, 0x72, 0x05, 0x59, 0xb7, 0x9e, 0x57,
    0x01, 0x84, 0xdb, 0xaf, 0xfe, 0x9e, 0xc8, 0x59, 0x8d, 0xcb, 0xd8, 0x80,
};

static const MessageEncodingTestVector sMessageEncodingTest0149 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x9D80355A,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x253B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0149_EncryptionKey,
    sMessageEncodingTest0149_Payload,
    sizeof(sMessageEncodingTest0149_Payload),
    sMessageEncodingTest0149_ExpectedEncoding,
    sizeof(sMessageEncodingTest0149_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0150_EncryptionKey =
{
    {
        0x60, 0x33, 0x4e, 0x09, 0xd6, 0x56, 0xed, 0x9b, 0x9f, 0x6d, 0xf5, 0x82, 0xa0, 0xb2, 0xab, 0xba,
    }
};
static const uint8_t sMessageEncodingTest0150_Payload[] =
{
    0x13, 0x29, 0x7d, 0x3a, 0x9e, 0xb5, 0xca, 0x9f, 0x87, 0x57, 0xa8, 0xdf, 0x0b, 0x28, 0xef, 0xa1,
};

static const uint8_t sMessageEncodingTest0150_ExpectedEncoding[] =
{
    0x20, 0x28, 0x7c, 0xc6, 0xe4, 0x7c, 0x3d, 0x23, 0x74, 0x8d, 0x73, 0x62, 0x52, 0x2f, 0x2b, 0x29,
    0xce, 0x27, 0x24, 0x33, 0x69, 0x8e, 0x72, 0xb4, 0x8a, 0x60, 0xbb, 0xa3, 0x98, 0x81, 0x83, 0x93,
};

static const MessageEncodingTestVector sMessageEncodingTest0150 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x7CE4C67C,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x233D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0150_EncryptionKey,
    sMessageEncodingTest0150_Payload,
    sizeof(sMessageEncodingTest0150_Payload),
    sMessageEncodingTest0150_ExpectedEncoding,
    sizeof(sMessageEncodingTest0150_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0151_EncryptionKey =
{
    {
        0x61, 0x05, 0x04, 0x70, 0x10, 0x3d, 0x84, 0xeb, 0x7d, 0xe8, 0xad, 0x63, 0x4c, 0x5a, 0x3b, 0x29,
    }
};
static const uint8_t sMessageEncodingTest0151_Payload[] =
{
    0x49, 0xed, 0xa7, 0xfb, 0xf2, 0x31, 0xb5, 0xe0, 0xfa, 0x22, 0x14, 0x63, 0x35, 0x4d, 0x98, 0x3b,
};

static const uint8_t sMessageEncodingTest0151_ExpectedEncoding[] =
{
    0x30, 0x28, 0x42, 0xb5, 0x65, 0x0f, 0xb1, 0x20, 0xaa, 0x77, 0xbe, 0xbd, 0xab, 0x81, 0xfb, 0x34,
    0xbc, 0x26, 0x98, 0x83, 0x81, 0xd1, 0x0e, 0xdf, 0xfc, 0x42, 0x44, 0x05, 0x37, 0x82, 0xce, 0xf6,
    0x6d, 0xbb, 0xcf, 0x71, 0xca, 0xa9, 0xf9, 0xff,
};

static const MessageEncodingTestVector sMessageEncodingTest0151 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x0F65B542,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x20B1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0151_EncryptionKey,
    sMessageEncodingTest0151_Payload,
    sizeof(sMessageEncodingTest0151_Payload),
    sMessageEncodingTest0151_ExpectedEncoding,
    sizeof(sMessageEncodingTest0151_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0152_Payload[] =
{
    0x7e, 0x16, 0x59, 0xed, 0x31, 0x25, 0x80, 0x84, 0x0a, 0x36, 0x61, 0x10, 0xb9, 0x92, 0xc2, 0x30,
};

static const uint8_t sMessageEncodingTest0152_ExpectedEncoding[] =
{
    0x00, 0x10, 0xef, 0xc7, 0x2a, 0x89, 0x7e, 0x16, 0x59, 0xed, 0x31, 0x25, 0x80, 0x84, 0x0a, 0x36,
    0x61, 0x10, 0xb9, 0x92, 0xc2, 0x30,
};

static const MessageEncodingTestVector sMessageEncodingTest0152 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x892AC7EF,
        0,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0152_Payload,
    sizeof(sMessageEncodingTest0152_Payload),
    sMessageEncodingTest0152_ExpectedEncoding,
    sizeof(sMessageEncodingTest0152_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0153_EncryptionKey =
{
    {
        0xf3, 0xe5, 0x60, 0x67, 0xe1, 0x93, 0x49, 0x34, 0x00, 0xa8, 0x0d, 0xf5, 0x41, 0x03, 0xe6, 0x97,
    },
    {
        0xcd, 0x71, 0x40, 0xeb, 0x20, 0xa7, 0x72, 0xc8, 0x4a, 0x0b, 0xef, 0x51, 0xe9, 0x34, 0x81, 0x26,
        0x0c, 0x6a, 0x85, 0x0c,
    }
};
static const uint8_t sMessageEncodingTest0153_Payload[] =
{
    0xda, 0x99, 0xcd, 0xb7, 0x34, 0x85, 0x43, 0x99, 0xe2, 0x46, 0x03, 0xed, 0xbc, 0xae, 0x95, 0x9e,
};

static const uint8_t sMessageEncodingTest0153_ExpectedEncoding[] =
{
    0x10, 0x10, 0xe6, 0x8c, 0x4d, 0xf1, 0x7a, 0x23, 0xef, 0xe9, 0x02, 0x92, 0x08, 0x3d, 0xd7, 0xab,
    0xc2, 0xdd, 0x0e, 0x04, 0xe7, 0xd0, 0x77, 0x48, 0x24, 0x90, 0xdc, 0x79, 0x18, 0x7e, 0x61, 0x6e,
    0x64, 0x23, 0xe0, 0x6f, 0x11, 0xb3, 0xe3, 0xac, 0xd8, 0x39, 0x69, 0x4b,
};

static const MessageEncodingTestVector sMessageEncodingTest0153 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xF14D8CE6,
        0,
        0x237A,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0153_EncryptionKey,
    sMessageEncodingTest0153_Payload,
    sizeof(sMessageEncodingTest0153_Payload),
    sMessageEncodingTest0153_ExpectedEncoding,
    sizeof(sMessageEncodingTest0153_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0154_EncryptionKey =
{
    {
        0xd8, 0x41, 0xea, 0x9a, 0xf2, 0x9e, 0x88, 0x9b, 0x38, 0x91, 0x45, 0x95, 0x4c, 0xa5, 0x83, 0xfa,
    }
};
static const uint8_t sMessageEncodingTest0154_Payload[] =
{
    0xce, 0x79, 0xd0, 0x51, 0xb9, 0xf5, 0x39, 0x14, 0x4a, 0xb6, 0x5b, 0x43, 0x96, 0xd4, 0x1c, 0xd0,
};

static const uint8_t sMessageEncodingTest0154_ExpectedEncoding[] =
{
    0x20, 0x10, 0x56, 0x3b, 0x3e, 0xf2, 0x37, 0x2e, 0x6d, 0x0e, 0x54, 0xfd, 0x36, 0xb9, 0x2d, 0x6f,
    0x51, 0xfb, 0x24, 0xcb, 0x09, 0xaa, 0x11, 0xcb, 0x14, 0xca, 0x4a, 0x3c, 0x5a, 0x98, 0x10, 0xc9,
};

static const MessageEncodingTestVector sMessageEncodingTest0154 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xF23E3B56,
        0,
        0x2E37,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0154_EncryptionKey,
    sMessageEncodingTest0154_Payload,
    sizeof(sMessageEncodingTest0154_Payload),
    sMessageEncodingTest0154_ExpectedEncoding,
    sizeof(sMessageEncodingTest0154_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0155_EncryptionKey =
{
    {
        0xb5, 0x81, 0x14, 0xdb, 0xb8, 0x78, 0x3d, 0x75, 0x41, 0x37, 0xa9, 0xb2, 0x1c, 0x08, 0x18, 0x3b,
    }
};
static const uint8_t sMessageEncodingTest0155_Payload[] =
{
    0xb5, 0xad, 0xa5, 0xe7, 0xed, 0x20, 0xd9, 0x02, 0x67, 0xcc, 0xb4, 0xdd, 0x30, 0x9c, 0xc6, 0x0c,
};

static const uint8_t sMessageEncodingTest0155_ExpectedEncoding[] =
{
    0x30, 0x10, 0xae, 0xfd, 0x1d, 0x14, 0x35, 0x28, 0xf8, 0x02, 0x93, 0xd6, 0xb7, 0xab, 0xc6, 0x33,
    0x5a, 0xf9, 0x99, 0xf4, 0x09, 0x7f, 0x52, 0x3a, 0x25, 0xda, 0xba, 0x0b, 0xcc, 0x3e, 0x35, 0xec,
    0x62, 0xa9, 0x64, 0xce, 0xe1, 0x95, 0x7b, 0x82,
};

static const MessageEncodingTestVector sMessageEncodingTest0155 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x141DFDAE,
        0,
        0x2835,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0155_EncryptionKey,
    sMessageEncodingTest0155_Payload,
    sizeof(sMessageEncodingTest0155_Payload),
    sMessageEncodingTest0155_ExpectedEncoding,
    sizeof(sMessageEncodingTest0155_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0156_Payload[] =
{
    0x64, 0x71, 0x44, 0x62, 0x71, 0xc9, 0xc9, 0x33, 0xea, 0xd0, 0xaf, 0x9b, 0xae, 0xc2, 0xd2, 0x9d,
};

static const uint8_t sMessageEncodingTest0156_ExpectedEncoding[] =
{
    0x00, 0x20, 0xd5, 0xc9, 0x0a, 0x55, 0x64, 0x71, 0x44, 0x62, 0x71, 0xc9, 0xc9, 0x33, 0xea, 0xd0,
    0xaf, 0x9b, 0xae, 0xc2, 0xd2, 0x9d,
};

static const MessageEncodingTestVector sMessageEncodingTest0156 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x550AC9D5,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0156_Payload,
    sizeof(sMessageEncodingTest0156_Payload),
    sMessageEncodingTest0156_ExpectedEncoding,
    sizeof(sMessageEncodingTest0156_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0157_EncryptionKey =
{
    {
        0xad, 0x71, 0xbe, 0x23, 0x46, 0x92, 0x04, 0x9e, 0xdd, 0x92, 0x2b, 0x75, 0xa4, 0x0d, 0x21, 0x43,
    },
    {
        0x42, 0x3f, 0xc6, 0x8f, 0x35, 0x00, 0x2c, 0x96, 0x17, 0xc4, 0x79, 0xc3, 0x05, 0x9d, 0xd9, 0xe2,
        0x05, 0x46, 0xac, 0x99,
    }
};
static const uint8_t sMessageEncodingTest0157_Payload[] =
{
    0x2c, 0x5d, 0x5f, 0x93, 0x31, 0xa5, 0x9b, 0xb6, 0x04, 0xbc, 0xa5, 0xa7, 0xec, 0xb7, 0x44, 0x4d,
};

static const uint8_t sMessageEncodingTest0157_ExpectedEncoding[] =
{
    0x10, 0x20, 0x1a, 0x16, 0x96, 0xa1, 0x75, 0x24, 0x17, 0x1e, 0x6e, 0xeb, 0x4c, 0x20, 0x05, 0x27,
    0x69, 0xc8, 0xc3, 0xce, 0x3c, 0x99, 0xc8, 0x9e, 0x11, 0x5d, 0x4d, 0x7d, 0xcf, 0x8b, 0xf9, 0xdf,
    0x85, 0x24, 0x05, 0x74, 0xe0, 0xb4, 0x75, 0xe1, 0x2d, 0x41, 0xf8, 0x3f,
};

static const MessageEncodingTestVector sMessageEncodingTest0157 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xA196161A,
        0,
        0x2475,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0157_EncryptionKey,
    sMessageEncodingTest0157_Payload,
    sizeof(sMessageEncodingTest0157_Payload),
    sMessageEncodingTest0157_ExpectedEncoding,
    sizeof(sMessageEncodingTest0157_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0158_EncryptionKey =
{
    {
        0x8c, 0xf2, 0x8b, 0xb3, 0xab, 0x38, 0xb9, 0xf6, 0x1f, 0x9d, 0xf2, 0x56, 0x8f, 0x6b, 0x1f, 0x39,
    }
};
static const uint8_t sMessageEncodingTest0158_Payload[] =
{
    0x0b, 0xde, 0x5d, 0x9c, 0x9b, 0x4f, 0x50, 0x83, 0xc7, 0x1d, 0x03, 0x76, 0x09, 0x9e, 0x10, 0xb0,
};

static const uint8_t sMessageEncodingTest0158_ExpectedEncoding[] =
{
    0x20, 0x20, 0x2c, 0x4d, 0x85, 0xc2, 0x29, 0x26, 0x14, 0x04, 0x81, 0x44, 0xab, 0xe7, 0xc5, 0xb9,
    0xb5, 0x55, 0x47, 0x9a, 0x5b, 0xba, 0xbe, 0xb0, 0xd4, 0x86, 0x3a, 0x87, 0x64, 0x9a, 0xd7, 0x16,
};

static const MessageEncodingTestVector sMessageEncodingTest0158 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0xC2854D2C,
        0,
        0x2629,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0158_EncryptionKey,
    sMessageEncodingTest0158_Payload,
    sizeof(sMessageEncodingTest0158_Payload),
    sMessageEncodingTest0158_ExpectedEncoding,
    sizeof(sMessageEncodingTest0158_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0159_EncryptionKey =
{
    {
        0x5b, 0x8c, 0x39, 0xad, 0x8b, 0x26, 0x8b, 0x34, 0x8f, 0x39, 0x32, 0x1d, 0xa6, 0x2b, 0x5a, 0x00,
    }
};
static const uint8_t sMessageEncodingTest0159_Payload[] =
{
    0x06, 0xa1, 0x98, 0x79, 0x71, 0xf4, 0x53, 0x8e, 0x00, 0x64, 0xb1, 0x99, 0x36, 0x5c, 0x6d, 0xba,
};

static const uint8_t sMessageEncodingTest0159_ExpectedEncoding[] =
{
    0x30, 0x20, 0xbd, 0x98, 0x77, 0x20, 0x86, 0x2b, 0x67, 0x5b, 0xa7, 0xee, 0xc6, 0x09, 0x9d, 0xf0,
    0xa1, 0x4e, 0xed, 0x63, 0xd9, 0x73, 0x51, 0x79, 0xd4, 0x02, 0xb3, 0xf5, 0x80, 0x29, 0x14, 0x8c,
    0xfa, 0xc9, 0x91, 0x01, 0x65, 0x9a, 0xe5, 0xc1,
};

static const MessageEncodingTestVector sMessageEncodingTest0159 =
{
    {
        0x18B4300000000001,
        0xFFFFFFFFFFFFFFFF,
        0x207798BD,
        0,
        0x2B86,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0159_EncryptionKey,
    sMessageEncodingTest0159_Payload,
    sizeof(sMessageEncodingTest0159_Payload),
    sMessageEncodingTest0159_ExpectedEncoding,
    sizeof(sMessageEncodingTest0159_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0160_Payload[] =
{
    0x61, 0xa7, 0xf2, 0x65, 0x0a, 0x92, 0x8c, 0x63, 0x42, 0x20, 0xda, 0x71, 0x84, 0x5c, 0x89, 0x85,
};

static const uint8_t sMessageEncodingTest0160_ExpectedEncoding[] =
{
    0x00, 0x27, 0x7e, 0xd8, 0x07, 0x0f, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x61, 0xa7, 0xf2, 0x65, 0x0a, 0x92, 0x8c, 0x63, 0x42, 0x20,
    0xda, 0x71, 0x84, 0x5c, 0x89, 0x85,
};

static const MessageEncodingTestVector sMessageEncodingTest0160 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x0F07D87E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0160_Payload,
    sizeof(sMessageEncodingTest0160_Payload),
    sMessageEncodingTest0160_ExpectedEncoding,
    sizeof(sMessageEncodingTest0160_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0161_EncryptionKey =
{
    {
        0xc5, 0xaa, 0x40, 0xda, 0x4b, 0xae, 0x9f, 0x3f, 0x2a, 0xc6, 0xa5, 0x9c, 0x02, 0x52, 0x75, 0x44,
    },
    {
        0x38, 0x7d, 0x2e, 0x9e, 0x68, 0x3d, 0xbb, 0x33, 0xd8, 0x1d, 0xec, 0x32, 0x84, 0x60, 0x8b, 0x8c,
        0x6c, 0x65, 0x2f, 0x92,
    }
};
static const uint8_t sMessageEncodingTest0161_Payload[] =
{
    0x5b, 0x75, 0x19, 0xd8, 0xcd, 0x4a, 0x37, 0x5e, 0x7c, 0x8c, 0xfe, 0x73, 0xe9, 0x77, 0xfe, 0x5d,
};

static const uint8_t sMessageEncodingTest0161_ExpectedEncoding[] =
{
    0x10, 0x27, 0xdf, 0x54, 0x4f, 0x8b, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xfe, 0x22, 0x06, 0x8d, 0x42, 0xad, 0x3d, 0xf0, 0x9b, 0x8b,
    0x38, 0x6a, 0xc1, 0xa0, 0x8f, 0x32, 0xac, 0x0a, 0x90, 0xac, 0xf5, 0xbd, 0x8d, 0x73, 0x16, 0xe1,
    0x95, 0xd5, 0x65, 0x32, 0x64, 0xe3, 0x3d, 0x98, 0xbb, 0x49, 0xcf, 0x0f,
};

static const MessageEncodingTestVector sMessageEncodingTest0161 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x8B4F54DF,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x22FE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0161_EncryptionKey,
    sMessageEncodingTest0161_Payload,
    sizeof(sMessageEncodingTest0161_Payload),
    sMessageEncodingTest0161_ExpectedEncoding,
    sizeof(sMessageEncodingTest0161_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0162_EncryptionKey =
{
    {
        0x22, 0xa4, 0x72, 0xac, 0x2c, 0x88, 0xcd, 0xc9, 0xb0, 0xb9, 0x00, 0x30, 0x1f, 0x4d, 0x61, 0x2f,
    }
};
static const uint8_t sMessageEncodingTest0162_Payload[] =
{
    0xb6, 0x57, 0x66, 0x9b, 0x55, 0xfb, 0x82, 0xf2, 0x84, 0xac, 0x82, 0x9c, 0xf3, 0x2d, 0x9d, 0xa5,
};

static const uint8_t sMessageEncodingTest0162_ExpectedEncoding[] =
{
    0x20, 0x27, 0x22, 0x0e, 0x52, 0x03, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x91, 0x27, 0xe9, 0x91, 0xa9, 0xa3, 0x62, 0xcb, 0x49, 0xcd,
    0x72, 0xaf, 0xe6, 0x09, 0xb5, 0xed, 0x4c, 0x24, 0xdc, 0xf9, 0x83, 0x25, 0x8d, 0x9c, 0xfa, 0x09,
};

static const MessageEncodingTestVector sMessageEncodingTest0162 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x03520E22,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2791,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0162_EncryptionKey,
    sMessageEncodingTest0162_Payload,
    sizeof(sMessageEncodingTest0162_Payload),
    sMessageEncodingTest0162_ExpectedEncoding,
    sizeof(sMessageEncodingTest0162_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0163_EncryptionKey =
{
    {
        0x9a, 0x58, 0x1f, 0xc2, 0x2f, 0x52, 0x30, 0x7d, 0x9f, 0xfb, 0xde, 0x51, 0x92, 0x3a, 0xf5, 0x35,
    }
};
static const uint8_t sMessageEncodingTest0163_Payload[] =
{
    0x8b, 0xdc, 0xaa, 0xf0, 0x43, 0xf8, 0x69, 0xd8, 0xae, 0xf8, 0xed, 0xec, 0x15, 0x8d, 0x9a, 0xa3,
};

static const uint8_t sMessageEncodingTest0163_ExpectedEncoding[] =
{
    0x30, 0x27, 0xf5, 0xf2, 0x4a, 0x75, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xcc, 0x21, 0x5e, 0xef, 0x20, 0x9e, 0xb8, 0xc0, 0x8b, 0x52,
    0x95, 0x63, 0x49, 0x10, 0x1e, 0xc8, 0x4e, 0x09, 0x60, 0x3d, 0xee, 0x2c, 0xb3, 0x04, 0xad, 0x31,
    0x1b, 0xdb, 0x44, 0xe5, 0x9b, 0x45, 0xb7, 0x1e,
};

static const MessageEncodingTestVector sMessageEncodingTest0163 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x754AF2F5,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x21CC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0163_EncryptionKey,
    sMessageEncodingTest0163_Payload,
    sizeof(sMessageEncodingTest0163_Payload),
    sMessageEncodingTest0163_ExpectedEncoding,
    sizeof(sMessageEncodingTest0163_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0164_Payload[] =
{
    0x35, 0xa7, 0x04, 0xd9, 0x2b, 0x9f, 0xb6, 0x59, 0x7c, 0x1a, 0x25, 0xcf, 0xb2, 0x4d, 0x32, 0xac,
};

static const uint8_t sMessageEncodingTest0164_ExpectedEncoding[] =
{
    0x00, 0x1b, 0x92, 0xc9, 0xf3, 0x0a, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x35, 0xa7, 0x04, 0xd9, 0x2b, 0x9f, 0xb6, 0x59, 0x7c, 0x1a,
    0x25, 0xcf, 0xb2, 0x4d, 0x32, 0xac,
};

static const MessageEncodingTestVector sMessageEncodingTest0164 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x0AF3C992,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0164_Payload,
    sizeof(sMessageEncodingTest0164_Payload),
    sMessageEncodingTest0164_ExpectedEncoding,
    sizeof(sMessageEncodingTest0164_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0165_EncryptionKey =
{
    {
        0x29, 0x46, 0x5d, 0xec, 0x5a, 0x04, 0x3e, 0xd8, 0x69, 0xeb, 0x4c, 0xfe, 0x3a, 0xee, 0x11, 0x25,
    },
    {
        0x50, 0xcf, 0xb3, 0x8d, 0x4f, 0x8e, 0x61, 0x25, 0xbc, 0x5c, 0x2f, 0xdd, 0xcf, 0x46, 0x9b, 0x53,
        0x44, 0x0b, 0x43, 0xec,
    }
};
static const uint8_t sMessageEncodingTest0165_Payload[] =
{
    0x85, 0xb9, 0x81, 0x9c, 0x17, 0x42, 0xb2, 0xde, 0x32, 0x10, 0x75, 0xab, 0x55, 0xba, 0x22, 0x44,
};

static const uint8_t sMessageEncodingTest0165_ExpectedEncoding[] =
{
    0x10, 0x1b, 0xbd, 0x4f, 0xb5, 0x51, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xbd, 0x2e, 0x2d, 0xc4, 0x33, 0x76, 0x6e, 0x40, 0x69, 0xac,
    0x61, 0xdb, 0x02, 0x5e, 0x79, 0xd4, 0x9d, 0x1d, 0x64, 0x1a, 0x7c, 0x6b, 0x78, 0x52, 0x10, 0x0c,
    0x50, 0x7e, 0xc4, 0xcb, 0x1b, 0x95, 0xb0, 0x91, 0x23, 0xc4, 0x66, 0x96,
};

static const MessageEncodingTestVector sMessageEncodingTest0165 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x51B54FBD,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2EBD,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0165_EncryptionKey,
    sMessageEncodingTest0165_Payload,
    sizeof(sMessageEncodingTest0165_Payload),
    sMessageEncodingTest0165_ExpectedEncoding,
    sizeof(sMessageEncodingTest0165_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0166_EncryptionKey =
{
    {
        0x00, 0xde, 0x6f, 0x7e, 0xd7, 0x86, 0xe7, 0xf3, 0xdf, 0x0f, 0xe1, 0xf9, 0x6c, 0x16, 0x1b, 0x34,
    }
};
static const uint8_t sMessageEncodingTest0166_Payload[] =
{
    0xd3, 0xf7, 0xd2, 0x1b, 0x3d, 0x60, 0x65, 0x1f, 0x74, 0xff, 0xb7, 0xb3, 0x43, 0x47, 0x3c, 0x9e,
};

static const uint8_t sMessageEncodingTest0166_ExpectedEncoding[] =
{
    0x20, 0x1b, 0x5b, 0xd0, 0x26, 0x8d, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc7, 0x28, 0x93, 0xd2, 0x22, 0x97, 0xb9, 0xf8, 0x18, 0xda,
    0x67, 0xe5, 0x55, 0x5d, 0xf7, 0x5c, 0x9a, 0x20, 0xc2, 0x4d, 0xca, 0x98, 0x63, 0x9c, 0x30, 0x56,
};

static const MessageEncodingTestVector sMessageEncodingTest0166 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x8D26D05B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x28C7,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0166_EncryptionKey,
    sMessageEncodingTest0166_Payload,
    sizeof(sMessageEncodingTest0166_Payload),
    sMessageEncodingTest0166_ExpectedEncoding,
    sizeof(sMessageEncodingTest0166_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0167_EncryptionKey =
{
    {
        0x1a, 0xa9, 0x9f, 0xc9, 0x43, 0x43, 0xfb, 0x7b, 0x2d, 0xce, 0xd9, 0x02, 0xb5, 0x77, 0x27, 0x93,
    }
};
static const uint8_t sMessageEncodingTest0167_Payload[] =
{
    0x3b, 0x85, 0xe5, 0x5f, 0xd0, 0x57, 0x5b, 0x9f, 0x17, 0xd2, 0x26, 0xd6, 0x52, 0x7d, 0x79, 0x10,
};

static const uint8_t sMessageEncodingTest0167_ExpectedEncoding[] =
{
    0x30, 0x1b, 0xca, 0x63, 0xc4, 0x64, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa5, 0x24, 0x0b, 0xb9, 0x3a, 0xe8, 0x07, 0xe7, 0x5f, 0xf6,
    0x93, 0xe4, 0xa5, 0xaa, 0xfd, 0xe8, 0x24, 0xf3, 0xd3, 0x6a, 0x2d, 0xea, 0x90, 0x51, 0x45, 0x28,
    0xfe, 0xd8, 0xcc, 0xcb, 0x3f, 0x77, 0x03, 0xc2,
};

static const MessageEncodingTestVector sMessageEncodingTest0167 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x64C463CA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x24A5,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0167_EncryptionKey,
    sMessageEncodingTest0167_Payload,
    sizeof(sMessageEncodingTest0167_Payload),
    sMessageEncodingTest0167_ExpectedEncoding,
    sizeof(sMessageEncodingTest0167_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0168_Payload[] =
{
    0xa5, 0x6e, 0x44, 0x80, 0x3a, 0xef, 0x2c, 0xdd, 0xd8, 0xa9, 0xf4, 0xc0, 0x28, 0x4a, 0x00, 0x06,
};

static const uint8_t sMessageEncodingTest0168_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x08, 0x84, 0x74, 0xf8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa5, 0x6e, 0x44, 0x80, 0x3a, 0xef, 0x2c, 0xdd, 0xd8, 0xa9,
    0xf4, 0xc0, 0x28, 0x4a, 0x00, 0x06,
};

static const MessageEncodingTestVector sMessageEncodingTest0168 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xF8748408,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0168_Payload,
    sizeof(sMessageEncodingTest0168_Payload),
    sMessageEncodingTest0168_ExpectedEncoding,
    sizeof(sMessageEncodingTest0168_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0169_EncryptionKey =
{
    {
        0x51, 0xb2, 0xfa, 0x96, 0x6d, 0xca, 0x31, 0x0f, 0x56, 0x62, 0x12, 0xc2, 0x16, 0xf5, 0xa8, 0x96,
    },
    {
        0xe3, 0x81, 0x12, 0x8d, 0x98, 0xf3, 0x90, 0x6d, 0x54, 0xc8, 0x78, 0x97, 0xf8, 0x76, 0x92, 0x58,
        0x96, 0xdb, 0xbd, 0x27,
    }
};
static const uint8_t sMessageEncodingTest0169_Payload[] =
{
    0xa2, 0x01, 0xc1, 0xa9, 0x75, 0x20, 0x92, 0x23, 0xf9, 0x1a, 0xcb, 0xa6, 0x95, 0x3a, 0x0e, 0xff,
};

static const uint8_t sMessageEncodingTest0169_ExpectedEncoding[] =
{
    0x10, 0x2b, 0xd4, 0x44, 0xf2, 0xc2, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x28, 0x2d, 0x42, 0x5a, 0x64, 0x39, 0x11, 0x0c, 0xcd, 0x93,
    0xa1, 0x1b, 0xfb, 0x55, 0x8a, 0xc3, 0xda, 0xf7, 0x91, 0xfa, 0x98, 0xf3, 0x08, 0x1e, 0x2d, 0xa3,
    0xc9, 0x92, 0xea, 0x72, 0x97, 0x83, 0x0c, 0xdf, 0x9f, 0x4d, 0xde, 0x46,
};

static const MessageEncodingTestVector sMessageEncodingTest0169 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xC2F244D4,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2D28,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0169_EncryptionKey,
    sMessageEncodingTest0169_Payload,
    sizeof(sMessageEncodingTest0169_Payload),
    sMessageEncodingTest0169_ExpectedEncoding,
    sizeof(sMessageEncodingTest0169_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0170_EncryptionKey =
{
    {
        0x03, 0xc3, 0x1e, 0xe8, 0x95, 0xb3, 0xbe, 0x6e, 0xeb, 0x19, 0x79, 0x7e, 0xf3, 0x4b, 0x73, 0x94,
    }
};
static const uint8_t sMessageEncodingTest0170_Payload[] =
{
    0xa2, 0x5c, 0x4a, 0xe9, 0xfa, 0x8b, 0x8e, 0xbb, 0x0c, 0x9b, 0xef, 0x95, 0x7e, 0x64, 0x85, 0xef,
};

static const uint8_t sMessageEncodingTest0170_ExpectedEncoding[] =
{
    0x20, 0x2b, 0x24, 0xa8, 0xc1, 0x8c, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x3c, 0x29, 0x2f, 0x7f, 0x82, 0x99, 0xa8, 0xae, 0x96, 0x92,
    0xb6, 0x16, 0x87, 0x63, 0x45, 0x4c, 0x34, 0x83, 0xc1, 0xfc, 0xa0, 0x2d, 0x43, 0x18, 0x6d, 0x7e,
};

static const MessageEncodingTestVector sMessageEncodingTest0170 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x8CC1A824,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x293C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0170_EncryptionKey,
    sMessageEncodingTest0170_Payload,
    sizeof(sMessageEncodingTest0170_Payload),
    sMessageEncodingTest0170_ExpectedEncoding,
    sizeof(sMessageEncodingTest0170_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0171_EncryptionKey =
{
    {
        0x39, 0x95, 0x8f, 0x07, 0xe0, 0x3f, 0xda, 0x91, 0xea, 0xe4, 0x41, 0xac, 0xcb, 0xad, 0xd4, 0x32,
    }
};
static const uint8_t sMessageEncodingTest0171_Payload[] =
{
    0x60, 0x1b, 0xd4, 0x5e, 0x96, 0x9c, 0xd0, 0x2f, 0x3f, 0xb4, 0x38, 0x88, 0x91, 0x22, 0xe3, 0xa8,
};

static const uint8_t sMessageEncodingTest0171_ExpectedEncoding[] =
{
    0x30, 0x2b, 0x7f, 0x23, 0x25, 0xc2, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa5, 0x29, 0x2b, 0xa2, 0xc3, 0x5e, 0x9a, 0xdd, 0x91, 0x50,
    0x50, 0x1b, 0x30, 0x6a, 0x4c, 0x0f, 0x07, 0x10, 0xd5, 0x8f, 0xf5, 0x19, 0xca, 0xec, 0x21, 0x59,
    0xd8, 0x04, 0x89, 0xfa, 0x85, 0xfd, 0x1f, 0x4b,
};

static const MessageEncodingTestVector sMessageEncodingTest0171 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xC225237F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x29A5,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0171_EncryptionKey,
    sMessageEncodingTest0171_Payload,
    sizeof(sMessageEncodingTest0171_Payload),
    sMessageEncodingTest0171_ExpectedEncoding,
    sizeof(sMessageEncodingTest0171_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0172_Payload[] =
{
    0xc0, 0x3e, 0x19, 0x37, 0xe9, 0x9e, 0x5f, 0x9e, 0x4e, 0x9e, 0x0d, 0x94, 0x17, 0x39, 0x69, 0xee,
};

static const uint8_t sMessageEncodingTest0172_ExpectedEncoding[] =
{
    0x00, 0x13, 0x6f, 0xcd, 0x63, 0xb4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc0, 0x3e, 0x19, 0x37, 0xe9, 0x9e, 0x5f, 0x9e, 0x4e, 0x9e,
    0x0d, 0x94, 0x17, 0x39, 0x69, 0xee,
};

static const MessageEncodingTestVector sMessageEncodingTest0172 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xB463CD6F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0172_Payload,
    sizeof(sMessageEncodingTest0172_Payload),
    sMessageEncodingTest0172_ExpectedEncoding,
    sizeof(sMessageEncodingTest0172_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0173_EncryptionKey =
{
    {
        0x39, 0x4a, 0x0e, 0x91, 0x53, 0x28, 0x34, 0x79, 0x8e, 0x9e, 0x96, 0xcf, 0x5c, 0x90, 0x95, 0x82,
    },
    {
        0x2e, 0xe5, 0x86, 0x1c, 0x17, 0x81, 0x58, 0x6a, 0x36, 0x11, 0x87, 0x7b, 0xeb, 0x9f, 0x5f, 0xbd,
        0xc2, 0x8e, 0x57, 0xe0,
    }
};
static const uint8_t sMessageEncodingTest0173_Payload[] =
{
    0x55, 0x70, 0x24, 0x54, 0xf1, 0x01, 0x88, 0x93, 0xeb, 0x61, 0x63, 0x3c, 0x09, 0x5f, 0x0f, 0x9c,
};

static const uint8_t sMessageEncodingTest0173_ExpectedEncoding[] =
{
    0x10, 0x13, 0x0c, 0x3b, 0x1a, 0x6f, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x97, 0x20, 0xd5, 0x2f, 0x3c, 0x86, 0x7c, 0x96, 0x26, 0x45,
    0x3e, 0xcd, 0xac, 0x30, 0xf1, 0x86, 0xb2, 0xc3, 0xec, 0x96, 0x5d, 0x87, 0xd7, 0x79, 0xef, 0x94,
    0xbd, 0xda, 0xc0, 0xe5, 0xd1, 0x12, 0xe8, 0x8b, 0x1e, 0x4d, 0x6c, 0xdd,
};

static const MessageEncodingTestVector sMessageEncodingTest0173 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x6F1A3B0C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2097,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0173_EncryptionKey,
    sMessageEncodingTest0173_Payload,
    sizeof(sMessageEncodingTest0173_Payload),
    sMessageEncodingTest0173_ExpectedEncoding,
    sizeof(sMessageEncodingTest0173_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0174_EncryptionKey =
{
    {
        0xf2, 0xb6, 0xad, 0x59, 0x26, 0xfb, 0x21, 0x1d, 0x96, 0x2d, 0xff, 0xb5, 0x9f, 0x1c, 0x9c, 0xcb,
    }
};
static const uint8_t sMessageEncodingTest0174_Payload[] =
{
    0xfc, 0xc2, 0x91, 0xfc, 0x76, 0xc6, 0x10, 0x75, 0x4e, 0xdd, 0x14, 0xde, 0x66, 0x03, 0xa9, 0xf4,
};

static const uint8_t sMessageEncodingTest0174_ExpectedEncoding[] =
{
    0x20, 0x13, 0x46, 0xa5, 0x50, 0x27, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5a, 0x2b, 0x04, 0x82, 0x09, 0x45, 0x00, 0xb0, 0x45, 0xb9,
    0x13, 0x8b, 0x55, 0x1d, 0x87, 0xbb, 0x36, 0x47, 0xa3, 0xf1, 0x03, 0x72, 0x1f, 0xfb, 0x6d, 0x9e,
};

static const MessageEncodingTestVector sMessageEncodingTest0174 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x2750A546,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2B5A,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0174_EncryptionKey,
    sMessageEncodingTest0174_Payload,
    sizeof(sMessageEncodingTest0174_Payload),
    sMessageEncodingTest0174_ExpectedEncoding,
    sizeof(sMessageEncodingTest0174_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0175_EncryptionKey =
{
    {
        0xc1, 0xa9, 0xca, 0x1c, 0x1a, 0x62, 0x78, 0x73, 0xc5, 0x3a, 0x71, 0x1a, 0x2d, 0x69, 0x6a, 0x2f,
    }
};
static const uint8_t sMessageEncodingTest0175_Payload[] =
{
    0x10, 0xa7, 0x79, 0xcf, 0x53, 0x0a, 0x6a, 0xee, 0x3b, 0xa1, 0x14, 0x6e, 0x85, 0x13, 0x9b, 0x9e,
};

static const uint8_t sMessageEncodingTest0175_ExpectedEncoding[] =
{
    0x30, 0x13, 0xb5, 0xd6, 0x74, 0x96, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xd2, 0x28, 0xfa, 0xb4, 0x06, 0x47, 0x59, 0x48, 0x74, 0x2a,
    0xb4, 0x70, 0x40, 0xe8, 0xc5, 0xfd, 0xa5, 0xbc, 0x54, 0xbb, 0xa8, 0xb2, 0x17, 0x44, 0x52, 0xc8,
    0xd8, 0x96, 0x5d, 0x24, 0xfe, 0x75, 0x62, 0x4d,
};

static const MessageEncodingTestVector sMessageEncodingTest0175 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x9674D6B5,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x28D2,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0175_EncryptionKey,
    sMessageEncodingTest0175_Payload,
    sizeof(sMessageEncodingTest0175_Payload),
    sMessageEncodingTest0175_ExpectedEncoding,
    sizeof(sMessageEncodingTest0175_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0176_Payload[] =
{
    0x2c, 0x3f, 0x81, 0x82, 0x07, 0x74, 0x57, 0xfc, 0x56, 0xd4, 0x48, 0xab, 0xac, 0xfa, 0xde, 0x78,
};

static const uint8_t sMessageEncodingTest0176_ExpectedEncoding[] =
{
    0x00, 0x23, 0x01, 0xb1, 0x93, 0xb8, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2c, 0x3f, 0x81, 0x82, 0x07, 0x74, 0x57, 0xfc, 0x56, 0xd4,
    0x48, 0xab, 0xac, 0xfa, 0xde, 0x78,
};

static const MessageEncodingTestVector sMessageEncodingTest0176 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xB893B101,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0176_Payload,
    sizeof(sMessageEncodingTest0176_Payload),
    sMessageEncodingTest0176_ExpectedEncoding,
    sizeof(sMessageEncodingTest0176_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0177_EncryptionKey =
{
    {
        0xb3, 0x3f, 0x9b, 0x0e, 0xad, 0x41, 0x04, 0x77, 0x64, 0x43, 0xb9, 0x7a, 0x81, 0x74, 0x8f, 0x2d,
    },
    {
        0x82, 0xea, 0x96, 0xae, 0x87, 0x09, 0x89, 0x4e, 0xb6, 0x3c, 0x6b, 0x2e, 0x72, 0xf2, 0x56, 0x6c,
        0x81, 0x07, 0xfd, 0xf5,
    }
};
static const uint8_t sMessageEncodingTest0177_Payload[] =
{
    0xcf, 0xe0, 0xad, 0xfb, 0xbf, 0x94, 0xeb, 0xfb, 0xfe, 0xa4, 0x87, 0xc1, 0x62, 0xc5, 0xf3, 0x35,
};

static const uint8_t sMessageEncodingTest0177_ExpectedEncoding[] =
{
    0x10, 0x23, 0x3f, 0xa1, 0xe0, 0xc6, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe2, 0x26, 0xc1, 0xfa, 0x79, 0x65, 0xd5, 0x16, 0x59, 0xbe,
    0x39, 0xe9, 0xf9, 0x8b, 0xda, 0x73, 0x00, 0xde, 0x51, 0xa9, 0x9c, 0x45, 0xf7, 0x8f, 0xb7, 0x9b,
    0x95, 0x8b, 0x25, 0x92, 0xca, 0x93, 0x1f, 0xef, 0x0f, 0xc9, 0xf1, 0x99,
};

static const MessageEncodingTestVector sMessageEncodingTest0177 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xC6E0A13F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x26E2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0177_EncryptionKey,
    sMessageEncodingTest0177_Payload,
    sizeof(sMessageEncodingTest0177_Payload),
    sMessageEncodingTest0177_ExpectedEncoding,
    sizeof(sMessageEncodingTest0177_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0178_EncryptionKey =
{
    {
        0x1c, 0x1f, 0xf4, 0x74, 0x93, 0x5b, 0xc7, 0x8a, 0x33, 0xf7, 0x47, 0xdf, 0xd8, 0x53, 0x76, 0x3d,
    }
};
static const uint8_t sMessageEncodingTest0178_Payload[] =
{
    0xbc, 0xc9, 0x31, 0x39, 0xc2, 0xb4, 0x30, 0x14, 0x98, 0xb2, 0xa1, 0x4a, 0x1b, 0x97, 0x06, 0x27,
};

static const uint8_t sMessageEncodingTest0178_ExpectedEncoding[] =
{
    0x20, 0x23, 0xbe, 0xa8, 0xa3, 0x70, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7c, 0x28, 0x33, 0x32, 0xf7, 0xac, 0x4d, 0x67, 0xf8, 0x48,
    0x22, 0x44, 0x47, 0x9c, 0x50, 0x34, 0x89, 0xc5, 0xcb, 0x80, 0xf7, 0x90, 0x9e, 0x8f, 0xae, 0x0f,
};

static const MessageEncodingTestVector sMessageEncodingTest0178 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x70A3A8BE,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x287C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0178_EncryptionKey,
    sMessageEncodingTest0178_Payload,
    sizeof(sMessageEncodingTest0178_Payload),
    sMessageEncodingTest0178_ExpectedEncoding,
    sizeof(sMessageEncodingTest0178_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0179_EncryptionKey =
{
    {
        0x1b, 0xc6, 0x08, 0x21, 0x0e, 0x51, 0x4e, 0xb3, 0x05, 0x54, 0x6d, 0x44, 0x68, 0xf9, 0xb8, 0xc7,
    }
};
static const uint8_t sMessageEncodingTest0179_Payload[] =
{
    0xc1, 0x1a, 0xae, 0x3f, 0xec, 0x44, 0x1a, 0x6f, 0x40, 0x50, 0x9c, 0xd0, 0xf4, 0x77, 0x5e, 0x2a,
};

static const uint8_t sMessageEncodingTest0179_ExpectedEncoding[] =
{
    0x30, 0x23, 0xec, 0x5d, 0xd0, 0x3f, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x55, 0x2a, 0x73, 0x22, 0x03, 0x20, 0x14, 0x3e, 0x84, 0x06,
    0xc5, 0x21, 0x4e, 0x10, 0x96, 0xf0, 0x3b, 0xde, 0x0f, 0xd0, 0x81, 0xfe, 0x54, 0x4d, 0x9a, 0x0d,
    0x7d, 0x70, 0x3c, 0xf4, 0x3f, 0xb4, 0xc3, 0xd4,
};

static const MessageEncodingTestVector sMessageEncodingTest0179 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x3FD05DEC,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2A55,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0179_EncryptionKey,
    sMessageEncodingTest0179_Payload,
    sizeof(sMessageEncodingTest0179_Payload),
    sMessageEncodingTest0179_ExpectedEncoding,
    sizeof(sMessageEncodingTest0179_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0180_Payload[] =
{
    0x7e, 0x2c, 0xae, 0x2f, 0x3c, 0x81, 0x0e, 0x47, 0x37, 0xfa, 0x68, 0x10, 0x12, 0xfc, 0xe5, 0x99,
};

static const uint8_t sMessageEncodingTest0180_ExpectedEncoding[] =
{
    0x00, 0x25, 0x6e, 0x70, 0x4a, 0xd8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7e, 0x2c,
    0xae, 0x2f, 0x3c, 0x81, 0x0e, 0x47, 0x37, 0xfa, 0x68, 0x10, 0x12, 0xfc, 0xe5, 0x99,
};

static const MessageEncodingTestVector sMessageEncodingTest0180 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xD84A706E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0180_Payload,
    sizeof(sMessageEncodingTest0180_Payload),
    sMessageEncodingTest0180_ExpectedEncoding,
    sizeof(sMessageEncodingTest0180_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0181_EncryptionKey =
{
    {
        0x5a, 0xea, 0xd2, 0x07, 0x5f, 0x55, 0xaf, 0x1e, 0x45, 0x9f, 0x4e, 0x70, 0x6d, 0x7a, 0x28, 0xa5,
    },
    {
        0x85, 0x99, 0xc0, 0x01, 0xe9, 0x39, 0x8c, 0xc1, 0x67, 0x61, 0x41, 0x08, 0xd9, 0x2b, 0x6d, 0x51,
        0xcb, 0xdf, 0xd2, 0xb5,
    }
};
static const uint8_t sMessageEncodingTest0181_Payload[] =
{
    0xe4, 0x03, 0x41, 0xd7, 0xe6, 0x37, 0xa3, 0x38, 0xb8, 0x95, 0x40, 0xc0, 0xce, 0x03, 0x87, 0xb1,
};

static const uint8_t sMessageEncodingTest0181_ExpectedEncoding[] =
{
    0x10, 0x25, 0xb6, 0xea, 0x70, 0x93, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5c, 0x2a,
    0x06, 0x0a, 0xaf, 0x7c, 0x30, 0x5c, 0x44, 0x36, 0xd8, 0x01, 0x58, 0x0e, 0x0d, 0xae, 0x8b, 0x58,
    0x46, 0x76, 0x3a, 0x85, 0x6d, 0x7d, 0x42, 0x9f, 0x4e, 0x04, 0x85, 0x3b, 0x13, 0x96, 0xae, 0xdb,
    0xde, 0xec, 0x00, 0xd0,
};

static const MessageEncodingTestVector sMessageEncodingTest0181 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x9370EAB6,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2A5C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0181_EncryptionKey,
    sMessageEncodingTest0181_Payload,
    sizeof(sMessageEncodingTest0181_Payload),
    sMessageEncodingTest0181_ExpectedEncoding,
    sizeof(sMessageEncodingTest0181_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0182_EncryptionKey =
{
    {
        0x45, 0xb8, 0xb9, 0x22, 0xfe, 0xd5, 0x10, 0x86, 0x8a, 0xa8, 0x6c, 0x92, 0xb2, 0xc9, 0xe8, 0x5f,
    }
};
static const uint8_t sMessageEncodingTest0182_Payload[] =
{
    0x05, 0xd2, 0xe1, 0xbb, 0x7f, 0xa3, 0xe2, 0xd4, 0x6d, 0x00, 0xf9, 0x8a, 0x98, 0x3f, 0x20, 0x9b,
};

static const uint8_t sMessageEncodingTest0182_ExpectedEncoding[] =
{
    0x20, 0x25, 0xfa, 0xbe, 0xea, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xfb, 0x22,
    0x79, 0x07, 0x3b, 0x5b, 0x13, 0xe7, 0xe7, 0xa3, 0xf1, 0x13, 0x6e, 0xd7, 0x19, 0xdc, 0xa6, 0xf4,
    0xfe, 0xd5, 0xbd, 0x56, 0xb4, 0x55, 0x0b, 0x4c,
};

static const MessageEncodingTestVector sMessageEncodingTest0182 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x04EABEFA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x22FB,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0182_EncryptionKey,
    sMessageEncodingTest0182_Payload,
    sizeof(sMessageEncodingTest0182_Payload),
    sMessageEncodingTest0182_ExpectedEncoding,
    sizeof(sMessageEncodingTest0182_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0183_EncryptionKey =
{
    {
        0x1c, 0x54, 0x5a, 0x46, 0x42, 0x92, 0x17, 0x4c, 0xfd, 0xff, 0x31, 0x39, 0xe6, 0x8d, 0xa3, 0x29,
    }
};
static const uint8_t sMessageEncodingTest0183_Payload[] =
{
    0x45, 0x76, 0xa2, 0x55, 0x50, 0x42, 0x0b, 0x18, 0xc8, 0x84, 0x93, 0x9d, 0xa6, 0xbd, 0x0a, 0x0a,
};

static const uint8_t sMessageEncodingTest0183_ExpectedEncoding[] =
{
    0x30, 0x25, 0x3d, 0xb3, 0xb3, 0xcb, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x95, 0x2f,
    0x65, 0xfd, 0x7a, 0x1f, 0x20, 0x64, 0x28, 0x1c, 0xfd, 0xca, 0x41, 0x9d, 0xc9, 0x8d, 0xe5, 0x17,
    0x38, 0xf1, 0x9b, 0x79, 0x2c, 0x5a, 0x95, 0x99, 0x7a, 0xa9, 0xea, 0x49, 0x36, 0x64, 0xd7, 0xef,
};

static const MessageEncodingTestVector sMessageEncodingTest0183 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xCBB3B33D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2F95,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0183_EncryptionKey,
    sMessageEncodingTest0183_Payload,
    sizeof(sMessageEncodingTest0183_Payload),
    sMessageEncodingTest0183_ExpectedEncoding,
    sizeof(sMessageEncodingTest0183_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0184_Payload[] =
{
    0x0b, 0x9d, 0x62, 0x3c, 0x60, 0x4b, 0x98, 0x65, 0xd6, 0x93, 0x8a, 0x59, 0x02, 0x41, 0x45, 0xeb,
};

static const uint8_t sMessageEncodingTest0184_ExpectedEncoding[] =
{
    0x00, 0x19, 0x46, 0xa5, 0x3b, 0x0b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0b, 0x9d,
    0x62, 0x3c, 0x60, 0x4b, 0x98, 0x65, 0xd6, 0x93, 0x8a, 0x59, 0x02, 0x41, 0x45, 0xeb,
};

static const MessageEncodingTestVector sMessageEncodingTest0184 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x0B3BA546,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0184_Payload,
    sizeof(sMessageEncodingTest0184_Payload),
    sMessageEncodingTest0184_ExpectedEncoding,
    sizeof(sMessageEncodingTest0184_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0185_EncryptionKey =
{
    {
        0x13, 0x19, 0xb0, 0x85, 0xef, 0x59, 0x18, 0x10, 0xe2, 0x0f, 0x71, 0x89, 0xa2, 0x09, 0x27, 0x5e,
    },
    {
        0x1a, 0x8c, 0xce, 0x2e, 0x24, 0x55, 0x7d, 0xd4, 0x31, 0xde, 0x27, 0x1e, 0x23, 0xfe, 0x66, 0xcd,
        0x3d, 0x08, 0xe7, 0xe3,
    }
};
static const uint8_t sMessageEncodingTest0185_Payload[] =
{
    0x44, 0xf3, 0x09, 0xa6, 0x3e, 0x6e, 0xc1, 0xb5, 0x26, 0x9c, 0x3c, 0x9d, 0x01, 0xab, 0x63, 0x3e,
};

static const uint8_t sMessageEncodingTest0185_ExpectedEncoding[] =
{
    0x10, 0x19, 0xb5, 0x9d, 0xf1, 0x9f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9b, 0x26,
    0x9a, 0x6c, 0x29, 0xe3, 0xd1, 0x54, 0x8f, 0x98, 0x18, 0xd8, 0xfe, 0xed, 0x13, 0xeb, 0x2f, 0x37,
    0x96, 0x70, 0x68, 0xb4, 0xc9, 0x03, 0xef, 0x68, 0x96, 0xfc, 0xeb, 0x8a, 0xf3, 0x15, 0x88, 0x8d,
    0xd8, 0x9a, 0xd3, 0x8c,
};

static const MessageEncodingTestVector sMessageEncodingTest0185 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x9FF19DB5,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x269B,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0185_EncryptionKey,
    sMessageEncodingTest0185_Payload,
    sizeof(sMessageEncodingTest0185_Payload),
    sMessageEncodingTest0185_ExpectedEncoding,
    sizeof(sMessageEncodingTest0185_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0186_EncryptionKey =
{
    {
        0x50, 0x3e, 0x6e, 0x0b, 0x04, 0x03, 0x93, 0x04, 0x4d, 0x5c, 0xd4, 0xd7, 0xc1, 0xcf, 0xbd, 0x7f,
    }
};
static const uint8_t sMessageEncodingTest0186_Payload[] =
{
    0xbc, 0xfe, 0xc1, 0xed, 0x9a, 0xd4, 0x28, 0x6c, 0xab, 0xfd, 0x5f, 0xc7, 0xea, 0xcb, 0xa5, 0xa2,
};

static const uint8_t sMessageEncodingTest0186_ExpectedEncoding[] =
{
    0x20, 0x19, 0x89, 0x41, 0x6d, 0x64, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf5, 0x27,
    0x4f, 0xa5, 0xe9, 0xb3, 0x40, 0x47, 0x34, 0x4c, 0x9c, 0x61, 0xe4, 0xd7, 0xe7, 0x74, 0x00, 0x16,
    0x84, 0xce, 0x8a, 0x98, 0xc5, 0x5b, 0x70, 0x87,
};

static const MessageEncodingTestVector sMessageEncodingTest0186 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x646D4189,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x27F5,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0186_EncryptionKey,
    sMessageEncodingTest0186_Payload,
    sizeof(sMessageEncodingTest0186_Payload),
    sMessageEncodingTest0186_ExpectedEncoding,
    sizeof(sMessageEncodingTest0186_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0187_EncryptionKey =
{
    {
        0xf1, 0xae, 0x4b, 0x99, 0xab, 0xe9, 0xb8, 0xd8, 0xed, 0x06, 0x1c, 0x50, 0xe7, 0xf2, 0x85, 0x3c,
    }
};
static const uint8_t sMessageEncodingTest0187_Payload[] =
{
    0xd3, 0x66, 0xea, 0xac, 0xf2, 0xf5, 0x02, 0xd7, 0x9c, 0xc9, 0x5c, 0x78, 0x9e, 0x70, 0x00, 0x7a,
};

static const uint8_t sMessageEncodingTest0187_ExpectedEncoding[] =
{
    0x30, 0x19, 0x2d, 0x48, 0x64, 0x91, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc5, 0x27,
    0xf8, 0x10, 0x1e, 0x04, 0x6c, 0x88, 0x1c, 0x35, 0xaf, 0x48, 0xff, 0x6c, 0xf2, 0x16, 0x49, 0xae,
    0x44, 0x77, 0xab, 0x2e, 0xa6, 0x52, 0x93, 0x48, 0x98, 0xcf, 0x23, 0x55, 0x11, 0x1d, 0xfa, 0xb2,
};

static const MessageEncodingTestVector sMessageEncodingTest0187 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x9164482D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x27C5,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0187_EncryptionKey,
    sMessageEncodingTest0187_Payload,
    sizeof(sMessageEncodingTest0187_Payload),
    sMessageEncodingTest0187_ExpectedEncoding,
    sizeof(sMessageEncodingTest0187_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0188_Payload[] =
{
    0xdb, 0xf1, 0x50, 0xd5, 0x6a, 0xfc, 0xb3, 0x40, 0xc6, 0x49, 0x23, 0x2f, 0xd7, 0x3a, 0x6d, 0x00,
};

static const uint8_t sMessageEncodingTest0188_ExpectedEncoding[] =
{
    0x00, 0x29, 0x86, 0x15, 0x3b, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdb, 0xf1,
    0x50, 0xd5, 0x6a, 0xfc, 0xb3, 0x40, 0xc6, 0x49, 0x23, 0x2f, 0xd7, 0x3a, 0x6d, 0x00,
};

static const MessageEncodingTestVector sMessageEncodingTest0188 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x343B1586,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0188_Payload,
    sizeof(sMessageEncodingTest0188_Payload),
    sMessageEncodingTest0188_ExpectedEncoding,
    sizeof(sMessageEncodingTest0188_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0189_EncryptionKey =
{
    {
        0xa4, 0xc9, 0x62, 0x09, 0x0c, 0x63, 0x93, 0xc5, 0xe6, 0x72, 0x60, 0x12, 0xa0, 0x45, 0x94, 0x64,
    },
    {
        0x7f, 0x63, 0x1f, 0xd9, 0xfc, 0xaa, 0x62, 0x2e, 0x1f, 0xf7, 0x85, 0x30, 0x0c, 0x5d, 0xbb, 0x20,
        0x18, 0x26, 0x9a, 0x8f,
    }
};
static const uint8_t sMessageEncodingTest0189_Payload[] =
{
    0xbc, 0x78, 0x45, 0x20, 0x21, 0xa7, 0xaf, 0xed, 0x33, 0xe7, 0xdd, 0xf4, 0x7e, 0x05, 0xc5, 0x51,
};

static const uint8_t sMessageEncodingTest0189_ExpectedEncoding[] =
{
    0x10, 0x29, 0x38, 0xe2, 0x4e, 0x8e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb1, 0x2b,
    0xb1, 0x6d, 0x25, 0x77, 0xf3, 0xbf, 0x61, 0x49, 0x29, 0x61, 0xd0, 0x96, 0x78, 0x92, 0x2c, 0x2b,
    0x69, 0x27, 0x48, 0x49, 0xa0, 0x33, 0xc6, 0x02, 0xff, 0xdd, 0x2f, 0x21, 0x86, 0xbf, 0xbf, 0x35,
    0xe9, 0x31, 0x93, 0xf8,
};

static const MessageEncodingTestVector sMessageEncodingTest0189 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x8E4EE238,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2BB1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0189_EncryptionKey,
    sMessageEncodingTest0189_Payload,
    sizeof(sMessageEncodingTest0189_Payload),
    sMessageEncodingTest0189_ExpectedEncoding,
    sizeof(sMessageEncodingTest0189_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0190_EncryptionKey =
{
    {
        0x32, 0x45, 0x12, 0x13, 0x8a, 0xca, 0x12, 0x7a, 0xcc, 0x0d, 0x4f, 0xdf, 0x78, 0x5f, 0x7f, 0x3d,
    }
};
static const uint8_t sMessageEncodingTest0190_Payload[] =
{
    0x67, 0x34, 0x24, 0x6e, 0xab, 0x0f, 0x50, 0xe3, 0x52, 0xcf, 0x03, 0xed, 0x16, 0x23, 0x51, 0x59,
};

static const uint8_t sMessageEncodingTest0190_ExpectedEncoding[] =
{
    0x20, 0x29, 0x6c, 0x69, 0xea, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc0, 0x25,
    0x84, 0x5b, 0xaa, 0x02, 0x5b, 0x1c, 0x47, 0x0d, 0x10, 0x01, 0x4b, 0xf7, 0x82, 0x61, 0x9f, 0x62,
    0x80, 0x76, 0xc0, 0x81, 0xf9, 0xe8, 0xfe, 0x99,
};

static const MessageEncodingTestVector sMessageEncodingTest0190 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x48EA696C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x25C0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0190_EncryptionKey,
    sMessageEncodingTest0190_Payload,
    sizeof(sMessageEncodingTest0190_Payload),
    sMessageEncodingTest0190_ExpectedEncoding,
    sizeof(sMessageEncodingTest0190_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0191_EncryptionKey =
{
    {
        0xd5, 0xa7, 0xb7, 0xa7, 0xac, 0x3b, 0x7b, 0xc8, 0x75, 0x4b, 0xb8, 0x07, 0xe4, 0xe1, 0xcd, 0xb1,
    }
};
static const uint8_t sMessageEncodingTest0191_Payload[] =
{
    0x75, 0x32, 0x54, 0xd9, 0xac, 0x73, 0x17, 0x08, 0x43, 0x1a, 0xca, 0x99, 0x23, 0x90, 0x65, 0x1f,
};

static const uint8_t sMessageEncodingTest0191_ExpectedEncoding[] =
{
    0x30, 0x29, 0xce, 0x4d, 0x38, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc8, 0x29,
    0x16, 0xa3, 0xb1, 0x9b, 0xfa, 0x73, 0xfa, 0xe4, 0xc8, 0x16, 0xad, 0x36, 0x3c, 0x4a, 0x0f, 0xda,
    0xe6, 0xf8, 0xe1, 0x50, 0x83, 0x74, 0x8e, 0xf5, 0xad, 0x9e, 0xb4, 0x9b, 0x9c, 0x88, 0x6a, 0x73,
};

static const MessageEncodingTestVector sMessageEncodingTest0191 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xBE384DCE,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x29C8,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0191_EncryptionKey,
    sMessageEncodingTest0191_Payload,
    sizeof(sMessageEncodingTest0191_Payload),
    sMessageEncodingTest0191_ExpectedEncoding,
    sizeof(sMessageEncodingTest0191_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0192_Payload[] =
{
    0x0f, 0x09, 0xdb, 0x34, 0xff, 0x59, 0x28, 0xc7, 0x62, 0xe0, 0x16, 0x08, 0x39, 0xb0, 0x14, 0x66,
};

static const uint8_t sMessageEncodingTest0192_ExpectedEncoding[] =
{
    0x00, 0x11, 0xc8, 0x47, 0x6a, 0xd1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0f, 0x09,
    0xdb, 0x34, 0xff, 0x59, 0x28, 0xc7, 0x62, 0xe0, 0x16, 0x08, 0x39, 0xb0, 0x14, 0x66,
};

static const MessageEncodingTestVector sMessageEncodingTest0192 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xD16A47C8,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0192_Payload,
    sizeof(sMessageEncodingTest0192_Payload),
    sMessageEncodingTest0192_ExpectedEncoding,
    sizeof(sMessageEncodingTest0192_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0193_EncryptionKey =
{
    {
        0x28, 0xa0, 0x3b, 0xcd, 0x68, 0xc5, 0xaf, 0x06, 0x9e, 0xe9, 0x9e, 0x9e, 0x31, 0x39, 0xe7, 0x4a,
    },
    {
        0x11, 0x8a, 0x9f, 0xa3, 0xea, 0xe5, 0x15, 0x23, 0x87, 0x06, 0xac, 0x15, 0xc8, 0x8b, 0xb7, 0x69,
        0x3e, 0x3b, 0x50, 0x31,
    }
};
static const uint8_t sMessageEncodingTest0193_Payload[] =
{
    0x29, 0x48, 0x4c, 0x89, 0x59, 0x17, 0x74, 0x71, 0x67, 0xfd, 0x37, 0x73, 0x61, 0xff, 0x96, 0xaf,
};

static const uint8_t sMessageEncodingTest0193_ExpectedEncoding[] =
{
    0x10, 0x11, 0xa7, 0x20, 0x2b, 0x1f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6c, 0x26,
    0x05, 0x05, 0x1c, 0x80, 0xf6, 0xc8, 0x98, 0x77, 0xfd, 0xff, 0xd5, 0xa9, 0xc8, 0x5b, 0xed, 0x7f,
    0x96, 0xb8, 0x06, 0x23, 0xfc, 0x9b, 0x45, 0x40, 0xdb, 0x33, 0x21, 0x44, 0xf8, 0xd7, 0xed, 0xaf,
    0xdd, 0x43, 0x91, 0x19,
};

static const MessageEncodingTestVector sMessageEncodingTest0193 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x1F2B20A7,
        kWeaveHeaderFlag_DestNodeId,
        0x266C,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0193_EncryptionKey,
    sMessageEncodingTest0193_Payload,
    sizeof(sMessageEncodingTest0193_Payload),
    sMessageEncodingTest0193_ExpectedEncoding,
    sizeof(sMessageEncodingTest0193_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0194_EncryptionKey =
{
    {
        0x7c, 0x0b, 0xb2, 0x71, 0x82, 0x8b, 0xc8, 0x2e, 0xef, 0x66, 0x0b, 0xf6, 0x76, 0xdc, 0x15, 0x85,
    }
};
static const uint8_t sMessageEncodingTest0194_Payload[] =
{
    0x08, 0x73, 0x45, 0xb5, 0x24, 0x8c, 0x4f, 0x0a, 0xec, 0x0a, 0x21, 0x3b, 0x8f, 0x23, 0xe7, 0xd9,
};

static const uint8_t sMessageEncodingTest0194_ExpectedEncoding[] =
{
    0x20, 0x11, 0x54, 0x5e, 0x69, 0xe3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6d, 0x22,
    0xb0, 0x0b, 0x0e, 0xce, 0xa4, 0x11, 0x42, 0x6f, 0xa1, 0x65, 0x79, 0x63, 0x2d, 0x84, 0x3d, 0x4d,
    0xea, 0x8e, 0xa6, 0x51, 0x81, 0xa9, 0xa4, 0xd0,
};

static const MessageEncodingTestVector sMessageEncodingTest0194 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xE3695E54,
        kWeaveHeaderFlag_DestNodeId,
        0x226D,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0194_EncryptionKey,
    sMessageEncodingTest0194_Payload,
    sizeof(sMessageEncodingTest0194_Payload),
    sMessageEncodingTest0194_ExpectedEncoding,
    sizeof(sMessageEncodingTest0194_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0195_EncryptionKey =
{
    {
        0xcb, 0x15, 0x05, 0x7c, 0xf8, 0x44, 0xe2, 0x3c, 0xaf, 0x8d, 0x4d, 0xcc, 0x92, 0xf7, 0x25, 0x58,
    }
};
static const uint8_t sMessageEncodingTest0195_Payload[] =
{
    0x9b, 0xb1, 0x01, 0x99, 0x49, 0x98, 0x85, 0x31, 0x62, 0x5f, 0xf6, 0x7c, 0xa9, 0x9d, 0xe0, 0x8f,
};

static const uint8_t sMessageEncodingTest0195_ExpectedEncoding[] =
{
    0x30, 0x11, 0x1b, 0x74, 0x06, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x3b, 0x2f,
    0x57, 0x7e, 0x52, 0xb8, 0xd4, 0x94, 0x58, 0x48, 0xfa, 0x0d, 0x1d, 0xb4, 0x55, 0xb2, 0xa8, 0x64,
    0xcc, 0x5a, 0xda, 0x45, 0xa6, 0x82, 0x01, 0x1c, 0xaf, 0x99, 0x1a, 0x87, 0xc2, 0xcd, 0x67, 0xf9,
};

static const MessageEncodingTestVector sMessageEncodingTest0195 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x6106741B,
        kWeaveHeaderFlag_DestNodeId,
        0x2F3B,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0195_EncryptionKey,
    sMessageEncodingTest0195_Payload,
    sizeof(sMessageEncodingTest0195_Payload),
    sMessageEncodingTest0195_ExpectedEncoding,
    sizeof(sMessageEncodingTest0195_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0196_Payload[] =
{
    0xa1, 0x7a, 0x9a, 0x9f, 0xb3, 0x32, 0x5a, 0xe2, 0xfc, 0x6a, 0x51, 0xd4, 0x59, 0xdf, 0x7d, 0x64,
};

static const uint8_t sMessageEncodingTest0196_ExpectedEncoding[] =
{
    0x00, 0x21, 0xcf, 0x99, 0xa7, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa1, 0x7a,
    0x9a, 0x9f, 0xb3, 0x32, 0x5a, 0xe2, 0xfc, 0x6a, 0x51, 0xd4, 0x59, 0xdf, 0x7d, 0x64,
};

static const MessageEncodingTestVector sMessageEncodingTest0196 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x60A799CF,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0196_Payload,
    sizeof(sMessageEncodingTest0196_Payload),
    sMessageEncodingTest0196_ExpectedEncoding,
    sizeof(sMessageEncodingTest0196_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0197_EncryptionKey =
{
    {
        0x2c, 0x4a, 0x87, 0x7b, 0x51, 0x3e, 0xda, 0x16, 0xd4, 0x98, 0xd2, 0xcb, 0x71, 0xbc, 0x58, 0x9f,
    },
    {
        0xa8, 0x3f, 0xfb, 0x83, 0x34, 0x3e, 0x72, 0x5a, 0xcc, 0x6a, 0xf3, 0x5e, 0x67, 0x14, 0xfb, 0x46,
        0x94, 0x31, 0x18, 0x29,
    }
};
static const uint8_t sMessageEncodingTest0197_Payload[] =
{
    0xfb, 0x0d, 0x1a, 0x51, 0xa9, 0xb3, 0xd2, 0xcb, 0x08, 0x3e, 0x50, 0x3a, 0x5d, 0x72, 0x8a, 0xd7,
};

static const uint8_t sMessageEncodingTest0197_ExpectedEncoding[] =
{
    0x10, 0x21, 0x0c, 0x27, 0xf5, 0x99, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9a, 0x21,
    0x00, 0x46, 0x88, 0x52, 0x33, 0x5e, 0xcc, 0x10, 0xac, 0x10, 0x03, 0x2a, 0xce, 0xc7, 0x23, 0x43,
    0x88, 0x5a, 0x81, 0x6f, 0x41, 0xd9, 0xf0, 0xa6, 0x2f, 0x4f, 0x4a, 0xb4, 0xf5, 0xa5, 0x84, 0xad,
    0x07, 0xdc, 0x54, 0x43,
};

static const MessageEncodingTestVector sMessageEncodingTest0197 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x99F5270C,
        kWeaveHeaderFlag_DestNodeId,
        0x219A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0197_EncryptionKey,
    sMessageEncodingTest0197_Payload,
    sizeof(sMessageEncodingTest0197_Payload),
    sMessageEncodingTest0197_ExpectedEncoding,
    sizeof(sMessageEncodingTest0197_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0198_EncryptionKey =
{
    {
        0x8b, 0x04, 0x39, 0x5f, 0x77, 0x95, 0xb3, 0x59, 0x27, 0x84, 0x2b, 0x4c, 0x3e, 0xf2, 0x1e, 0xf8,
    }
};
static const uint8_t sMessageEncodingTest0198_Payload[] =
{
    0xc2, 0xc7, 0x32, 0xd6, 0xb6, 0x65, 0x30, 0xa9, 0x25, 0xe0, 0xdc, 0x54, 0xab, 0x01, 0x8e, 0x8c,
};

static const uint8_t sMessageEncodingTest0198_ExpectedEncoding[] =
{
    0x20, 0x21, 0x1e, 0x71, 0x45, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x69, 0x21,
    0x04, 0x96, 0x2d, 0xb8, 0xce, 0xd4, 0x69, 0x6a, 0xb5, 0xd1, 0xdd, 0xef, 0x0c, 0x23, 0x46, 0x2b,
    0x0a, 0x81, 0x03, 0xd8, 0x10, 0xa1, 0xd8, 0xd4,
};

static const MessageEncodingTestVector sMessageEncodingTest0198 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x7045711E,
        kWeaveHeaderFlag_DestNodeId,
        0x2169,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0198_EncryptionKey,
    sMessageEncodingTest0198_Payload,
    sizeof(sMessageEncodingTest0198_Payload),
    sMessageEncodingTest0198_ExpectedEncoding,
    sizeof(sMessageEncodingTest0198_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0199_EncryptionKey =
{
    {
        0x2e, 0x9f, 0x08, 0xb8, 0xeb, 0x15, 0xe0, 0x4f, 0xe1, 0xdd, 0x85, 0x3e, 0x51, 0x54, 0x7c, 0xb1,
    }
};
static const uint8_t sMessageEncodingTest0199_Payload[] =
{
    0xa2, 0xd1, 0xcc, 0xc3, 0x8e, 0x90, 0xf5, 0xc7, 0xfd, 0xbb, 0xe1, 0x0a, 0x05, 0xc9, 0x03, 0x77,
};

static const uint8_t sMessageEncodingTest0199_ExpectedEncoding[] =
{
    0x30, 0x21, 0xe5, 0x19, 0xf8, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7b, 0x22,
    0x5d, 0x2e, 0x67, 0x0b, 0xfb, 0xac, 0x3f, 0xe1, 0x23, 0x09, 0x59, 0x31, 0x20, 0xdb, 0x66, 0x00,
    0x4a, 0x57, 0xe2, 0x64, 0x03, 0xc2, 0xeb, 0xd9, 0x33, 0x21, 0x19, 0x96, 0x8c, 0x66, 0x89, 0x43,
};

static const MessageEncodingTestVector sMessageEncodingTest0199 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xB8F819E5,
        kWeaveHeaderFlag_DestNodeId,
        0x227B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0199_EncryptionKey,
    sMessageEncodingTest0199_Payload,
    sizeof(sMessageEncodingTest0199_Payload),
    sMessageEncodingTest0199_ExpectedEncoding,
    sizeof(sMessageEncodingTest0199_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0200_Payload[] =
{
    0x94, 0x50, 0x93, 0x85, 0x8c, 0xa5, 0x29, 0x67, 0xbc, 0x20, 0x74, 0xbd, 0xfb, 0x75, 0x57, 0x01,
};

static const uint8_t sMessageEncodingTest0200_ExpectedEncoding[] =
{
    0x00, 0x26, 0x79, 0xea, 0x95, 0xeb, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x94, 0x50,
    0x93, 0x85, 0x8c, 0xa5, 0x29, 0x67, 0xbc, 0x20, 0x74, 0xbd, 0xfb, 0x75, 0x57, 0x01,
};

static const MessageEncodingTestVector sMessageEncodingTest0200 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xEB95EA79,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0200_Payload,
    sizeof(sMessageEncodingTest0200_Payload),
    sMessageEncodingTest0200_ExpectedEncoding,
    sizeof(sMessageEncodingTest0200_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0201_EncryptionKey =
{
    {
        0x59, 0x80, 0x7b, 0x6d, 0xae, 0xab, 0x1e, 0x6f, 0xcf, 0x77, 0xba, 0x3d, 0x72, 0xe1, 0x07, 0xa0,
    },
    {
        0x43, 0xf1, 0xe1, 0xc5, 0x78, 0xef, 0xa6, 0xe7, 0x03, 0xce, 0xff, 0x15, 0x1f, 0x2b, 0x6b, 0xc3,
        0x51, 0x79, 0x8c, 0x23,
    }
};
static const uint8_t sMessageEncodingTest0201_Payload[] =
{
    0xb4, 0x35, 0x57, 0xb2, 0x77, 0xd0, 0x47, 0x35, 0x32, 0x38, 0xa6, 0x90, 0x43, 0x68, 0x7f, 0x25,
};

static const uint8_t sMessageEncodingTest0201_ExpectedEncoding[] =
{
    0x10, 0x26, 0xd9, 0xcc, 0x45, 0xef, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x11, 0x28,
    0xfc, 0x05, 0xdf, 0xb8, 0xfe, 0xe1, 0xb9, 0x83, 0x70, 0xf1, 0xec, 0x6e, 0x1b, 0x18, 0x96, 0x61,
    0x2f, 0x8d, 0xb6, 0x54, 0x21, 0x72, 0xaa, 0x84, 0x0a, 0x91, 0x91, 0x71, 0x8b, 0x8c, 0xd5, 0x88,
    0xf5, 0xfc, 0x24, 0xfe,
};

static const MessageEncodingTestVector sMessageEncodingTest0201 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xEF45CCD9,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2811,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0201_EncryptionKey,
    sMessageEncodingTest0201_Payload,
    sizeof(sMessageEncodingTest0201_Payload),
    sMessageEncodingTest0201_ExpectedEncoding,
    sizeof(sMessageEncodingTest0201_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0202_EncryptionKey =
{
    {
        0x1e, 0x44, 0xe5, 0xda, 0xf8, 0xf5, 0xdd, 0x20, 0x17, 0x05, 0x33, 0xaf, 0xb0, 0xf9, 0x80, 0x9f,
    }
};
static const uint8_t sMessageEncodingTest0202_Payload[] =
{
    0xac, 0x96, 0x10, 0x1f, 0xe8, 0x78, 0x62, 0xbf, 0xbf, 0x98, 0x0f, 0xdb, 0x3d, 0x37, 0x00, 0xc8,
};

static const uint8_t sMessageEncodingTest0202_ExpectedEncoding[] =
{
    0x20, 0x26, 0xbd, 0x5e, 0xa2, 0xd4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb0, 0x2e,
    0x77, 0xc7, 0x60, 0x61, 0xe4, 0x8a, 0xd2, 0xff, 0x44, 0xb5, 0x5e, 0xb8, 0x21, 0x88, 0x21, 0x5f,
    0xbc, 0x3c, 0x60, 0x54, 0xf9, 0x52, 0x2b, 0xb1,
};

static const MessageEncodingTestVector sMessageEncodingTest0202 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xD4A25EBD,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2EB0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0202_EncryptionKey,
    sMessageEncodingTest0202_Payload,
    sizeof(sMessageEncodingTest0202_Payload),
    sMessageEncodingTest0202_ExpectedEncoding,
    sizeof(sMessageEncodingTest0202_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0203_EncryptionKey =
{
    {
        0x97, 0xd2, 0xce, 0x97, 0x66, 0xa7, 0xeb, 0xf4, 0xf9, 0x03, 0x1c, 0x55, 0xcc, 0x2c, 0xef, 0x38,
    }
};
static const uint8_t sMessageEncodingTest0203_Payload[] =
{
    0xcb, 0xda, 0x21, 0x17, 0xf5, 0x6f, 0x44, 0xf8, 0x56, 0xd9, 0x2a, 0x7d, 0x21, 0x39, 0xf1, 0xfe,
};

static const uint8_t sMessageEncodingTest0203_ExpectedEncoding[] =
{
    0x30, 0x26, 0x46, 0x09, 0xe0, 0xd4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb4, 0x2a,
    0x9a, 0x6c, 0x55, 0x31, 0xdf, 0x00, 0x3a, 0xda, 0x8e, 0x06, 0xe5, 0xff, 0x48, 0x40, 0x2c, 0x0d,
    0xe2, 0x2c, 0x33, 0x8d, 0x12, 0x58, 0x01, 0x4e, 0x1d, 0xfa, 0xa5, 0x16, 0xf7, 0x5f, 0xe6, 0x50,
};

static const MessageEncodingTestVector sMessageEncodingTest0203 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xD4E00946,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2AB4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0203_EncryptionKey,
    sMessageEncodingTest0203_Payload,
    sizeof(sMessageEncodingTest0203_Payload),
    sMessageEncodingTest0203_ExpectedEncoding,
    sizeof(sMessageEncodingTest0203_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0204_Payload[] =
{
    0x56, 0xd4, 0x9a, 0x19, 0x7c, 0x96, 0x5f, 0x33, 0xe6, 0x73, 0xd6, 0xd7, 0x8f, 0xd9, 0x3d, 0xad,
};

static const uint8_t sMessageEncodingTest0204_ExpectedEncoding[] =
{
    0x00, 0x1a, 0xc3, 0xb9, 0x8b, 0xc6, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x56, 0xd4,
    0x9a, 0x19, 0x7c, 0x96, 0x5f, 0x33, 0xe6, 0x73, 0xd6, 0xd7, 0x8f, 0xd9, 0x3d, 0xad,
};

static const MessageEncodingTestVector sMessageEncodingTest0204 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xC68BB9C3,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0204_Payload,
    sizeof(sMessageEncodingTest0204_Payload),
    sMessageEncodingTest0204_ExpectedEncoding,
    sizeof(sMessageEncodingTest0204_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0205_EncryptionKey =
{
    {
        0x06, 0xc6, 0xea, 0xab, 0x21, 0x37, 0x27, 0x94, 0x70, 0x76, 0x8d, 0x91, 0xc4, 0x59, 0xb9, 0x19,
    },
    {
        0xd0, 0x45, 0xf5, 0xfd, 0xdb, 0x21, 0x00, 0x02, 0xee, 0xd4, 0xbc, 0xa2, 0x79, 0x3e, 0x6b, 0x12,
        0xbc, 0x77, 0xcf, 0xe8,
    }
};
static const uint8_t sMessageEncodingTest0205_Payload[] =
{
    0xb4, 0xcf, 0x17, 0x8a, 0x5b, 0xf8, 0x9f, 0x5f, 0x96, 0x69, 0xe1, 0x53, 0x83, 0x8e, 0x0e, 0xd8,
};

static const uint8_t sMessageEncodingTest0205_ExpectedEncoding[] =
{
    0x10, 0x1a, 0x49, 0x17, 0xa3, 0xb1, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x99, 0x23,
    0xde, 0xf3, 0xf2, 0xa6, 0xbb, 0xf1, 0x68, 0xe7, 0x6b, 0xc3, 0xc5, 0x73, 0xae, 0xa8, 0x93, 0xf1,
    0x42, 0x94, 0xb8, 0xd7, 0x74, 0x8a, 0x38, 0x42, 0xfa, 0x64, 0xe5, 0x62, 0xc1, 0x4d, 0xbe, 0x4e,
    0xd4, 0x51, 0xc3, 0x66,
};

static const MessageEncodingTestVector sMessageEncodingTest0205 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xB1A31749,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2399,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0205_EncryptionKey,
    sMessageEncodingTest0205_Payload,
    sizeof(sMessageEncodingTest0205_Payload),
    sMessageEncodingTest0205_ExpectedEncoding,
    sizeof(sMessageEncodingTest0205_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0206_EncryptionKey =
{
    {
        0x69, 0xdc, 0x4a, 0xc6, 0x35, 0x55, 0x0f, 0x5c, 0xf6, 0xd2, 0x01, 0x4e, 0x1b, 0x81, 0xdb, 0x90,
    }
};
static const uint8_t sMessageEncodingTest0206_Payload[] =
{
    0x61, 0x3b, 0xdc, 0x56, 0x2b, 0xb9, 0x74, 0x9f, 0x00, 0x15, 0x02, 0xa6, 0x07, 0x3a, 0x21, 0x22,
};

static const uint8_t sMessageEncodingTest0206_ExpectedEncoding[] =
{
    0x20, 0x1a, 0x31, 0x70, 0x01, 0x2f, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x98, 0x2a,
    0x36, 0x76, 0xa3, 0x36, 0x3e, 0xb1, 0xed, 0xa6, 0x49, 0x13, 0x1d, 0x22, 0x90, 0x02, 0xbc, 0x82,
    0x15, 0x0d, 0x26, 0x2b, 0x78, 0xc7, 0x6b, 0xb3,
};

static const MessageEncodingTestVector sMessageEncodingTest0206 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x2F017031,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A98,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0206_EncryptionKey,
    sMessageEncodingTest0206_Payload,
    sizeof(sMessageEncodingTest0206_Payload),
    sMessageEncodingTest0206_ExpectedEncoding,
    sizeof(sMessageEncodingTest0206_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0207_EncryptionKey =
{
    {
        0x08, 0x12, 0x69, 0x68, 0xac, 0x18, 0x8b, 0x6e, 0x58, 0x20, 0xe7, 0xb5, 0x00, 0x23, 0xe3, 0xd0,
    }
};
static const uint8_t sMessageEncodingTest0207_Payload[] =
{
    0x63, 0x21, 0xeb, 0x6f, 0x42, 0x8a, 0x13, 0xf0, 0xad, 0x47, 0x58, 0xb4, 0x46, 0x44, 0x3c, 0x1d,
};

static const uint8_t sMessageEncodingTest0207_ExpectedEncoding[] =
{
    0x30, 0x1a, 0x9c, 0x75, 0x54, 0xef, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb9, 0x28,
    0x46, 0x10, 0x3f, 0x4c, 0xa0, 0x8c, 0x6c, 0x52, 0xff, 0xd7, 0xd6, 0xc8, 0xcf, 0x54, 0xb2, 0xa7,
    0x8d, 0x17, 0x7f, 0x2f, 0x9e, 0x35, 0xce, 0xff, 0x72, 0x15, 0x12, 0x0f, 0xdc, 0x52, 0xb3, 0xb9,
};

static const MessageEncodingTestVector sMessageEncodingTest0207 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xEF54759C,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x28B9,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0207_EncryptionKey,
    sMessageEncodingTest0207_Payload,
    sizeof(sMessageEncodingTest0207_Payload),
    sMessageEncodingTest0207_ExpectedEncoding,
    sizeof(sMessageEncodingTest0207_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0208_Payload[] =
{
    0x40, 0x22, 0xd5, 0xce, 0x8f, 0xf4, 0x7b, 0xf9, 0x42, 0x29, 0xd9, 0x28, 0x5a, 0x78, 0xef, 0xdd,
};

static const uint8_t sMessageEncodingTest0208_ExpectedEncoding[] =
{
    0x00, 0x2a, 0xf8, 0xf1, 0xac, 0x3d, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x40, 0x22,
    0xd5, 0xce, 0x8f, 0xf4, 0x7b, 0xf9, 0x42, 0x29, 0xd9, 0x28, 0x5a, 0x78, 0xef, 0xdd,
};

static const MessageEncodingTestVector sMessageEncodingTest0208 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x3DACF1F8,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0208_Payload,
    sizeof(sMessageEncodingTest0208_Payload),
    sMessageEncodingTest0208_ExpectedEncoding,
    sizeof(sMessageEncodingTest0208_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0209_EncryptionKey =
{
    {
        0x13, 0x1f, 0xed, 0x3d, 0xac, 0x14, 0x4b, 0x74, 0xef, 0xc8, 0xa5, 0x58, 0xd3, 0x0a, 0xa3, 0xe7,
    },
    {
        0xe3, 0x91, 0x5a, 0x7f, 0x6f, 0xc0, 0xa7, 0xd2, 0x62, 0xf7, 0x95, 0x3a, 0xd3, 0x82, 0xb8, 0xf9,
        0x61, 0x2b, 0xb2, 0xa1,
    }
};
static const uint8_t sMessageEncodingTest0209_Payload[] =
{
    0x1a, 0xa4, 0x04, 0x5a, 0x3d, 0xe8, 0x0e, 0x61, 0x2c, 0x60, 0xb9, 0xa3, 0xe5, 0xdc, 0xea, 0xc7,
};

static const uint8_t sMessageEncodingTest0209_ExpectedEncoding[] =
{
    0x10, 0x2a, 0x9b, 0x34, 0x87, 0xf3, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xbc, 0x2b,
    0x88, 0x07, 0xee, 0x76, 0xce, 0x45, 0xaf, 0xf6, 0xc2, 0x16, 0xcb, 0x69, 0xab, 0xe4, 0x50, 0x6c,
    0x0f, 0x4e, 0x7c, 0xa5, 0xe2, 0x87, 0xf9, 0x4c, 0xc0, 0xf8, 0x62, 0xfa, 0xf9, 0x20, 0x11, 0xd6,
    0x2f, 0x89, 0xd6, 0x9a,
};

static const MessageEncodingTestVector sMessageEncodingTest0209 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xF387349B,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2BBC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0209_EncryptionKey,
    sMessageEncodingTest0209_Payload,
    sizeof(sMessageEncodingTest0209_Payload),
    sMessageEncodingTest0209_ExpectedEncoding,
    sizeof(sMessageEncodingTest0209_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0210_EncryptionKey =
{
    {
        0xa7, 0xb9, 0xe3, 0xc4, 0xb7, 0x60, 0x5f, 0x1d, 0xc7, 0xb5, 0x07, 0x37, 0x40, 0x31, 0x08, 0x32,
    }
};
static const uint8_t sMessageEncodingTest0210_Payload[] =
{
    0xe4, 0xc2, 0x2b, 0xab, 0xa5, 0x6f, 0x42, 0x1f, 0x46, 0x5f, 0xb7, 0x3b, 0x77, 0xe2, 0x01, 0xda,
};

static const uint8_t sMessageEncodingTest0210_ExpectedEncoding[] =
{
    0x20, 0x2a, 0x7f, 0x63, 0xea, 0xcd, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x34, 0x27,
    0x3c, 0x78, 0xc3, 0x1f, 0xaa, 0xb5, 0xa4, 0x76, 0xac, 0x76, 0x0d, 0x7f, 0xc7, 0x57, 0x39, 0xa1,
    0xf0, 0x0d, 0x1b, 0x05, 0x4c, 0x81, 0x04, 0xa3,
};

static const MessageEncodingTestVector sMessageEncodingTest0210 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xCDEA637F,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2734,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0210_EncryptionKey,
    sMessageEncodingTest0210_Payload,
    sizeof(sMessageEncodingTest0210_Payload),
    sMessageEncodingTest0210_ExpectedEncoding,
    sizeof(sMessageEncodingTest0210_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0211_EncryptionKey =
{
    {
        0x07, 0x89, 0x91, 0xcb, 0x85, 0x8b, 0xb0, 0x24, 0x15, 0x5a, 0x95, 0x27, 0x70, 0x7a, 0x67, 0x76,
    }
};
static const uint8_t sMessageEncodingTest0211_Payload[] =
{
    0x72, 0x9d, 0x80, 0xf6, 0x5d, 0xee, 0xa4, 0xf8, 0x96, 0xa7, 0xd4, 0x02, 0x67, 0x92, 0xc4, 0x94,
};

static const uint8_t sMessageEncodingTest0211_ExpectedEncoding[] =
{
    0x30, 0x2a, 0x63, 0x8d, 0x19, 0x64, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2a, 0x2a,
    0xf5, 0x58, 0x9d, 0xcb, 0xb3, 0xa9, 0xe3, 0x38, 0x81, 0x73, 0xe8, 0xcd, 0xa9, 0xb3, 0x6f, 0xa1,
    0xe5, 0xe0, 0x1e, 0x69, 0xa4, 0xbb, 0xcb, 0x36, 0xe6, 0xda, 0x22, 0xaa, 0xb1, 0xc8, 0xb0, 0xc4,
};

static const MessageEncodingTestVector sMessageEncodingTest0211 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x64198D63,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A2A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0211_EncryptionKey,
    sMessageEncodingTest0211_Payload,
    sizeof(sMessageEncodingTest0211_Payload),
    sMessageEncodingTest0211_ExpectedEncoding,
    sizeof(sMessageEncodingTest0211_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0212_Payload[] =
{
    0x0d, 0x75, 0xd5, 0xe4, 0x4d, 0x71, 0x0f, 0xd8, 0x03, 0xb2, 0x9c, 0x43, 0x15, 0x62, 0xec, 0x70,
};

static const uint8_t sMessageEncodingTest0212_ExpectedEncoding[] =
{
    0x00, 0x12, 0x91, 0x40, 0xb8, 0x44, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0d, 0x75,
    0xd5, 0xe4, 0x4d, 0x71, 0x0f, 0xd8, 0x03, 0xb2, 0x9c, 0x43, 0x15, 0x62, 0xec, 0x70,
};

static const MessageEncodingTestVector sMessageEncodingTest0212 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x44B84091,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0212_Payload,
    sizeof(sMessageEncodingTest0212_Payload),
    sMessageEncodingTest0212_ExpectedEncoding,
    sizeof(sMessageEncodingTest0212_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0213_EncryptionKey =
{
    {
        0x85, 0x4f, 0x1c, 0x63, 0x0a, 0xb7, 0x9c, 0x78, 0x1a, 0xcb, 0x18, 0x12, 0xad, 0xf4, 0x1c, 0x4f,
    },
    {
        0xe4, 0x19, 0xa2, 0x5d, 0x61, 0xd5, 0x32, 0x57, 0xc7, 0x8d, 0xaf, 0xfe, 0x6a, 0xb0, 0xdc, 0x4e,
        0xc3, 0x21, 0x35, 0xad,
    }
};
static const uint8_t sMessageEncodingTest0213_Payload[] =
{
    0x30, 0xf9, 0x67, 0x2a, 0xa9, 0x27, 0x55, 0x8d, 0xa8, 0x77, 0x44, 0x99, 0x4c, 0xe4, 0xa1, 0x1f,
};

static const uint8_t sMessageEncodingTest0213_ExpectedEncoding[] =
{
    0x10, 0x12, 0xa3, 0xe0, 0x83, 0xae, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x40, 0x24,
    0x31, 0x5d, 0xa0, 0x6d, 0xc2, 0x83, 0x9b, 0xf9, 0xa2, 0xb6, 0xf8, 0x91, 0xb6, 0x19, 0xcc, 0xfb,
    0x5d, 0x9e, 0xab, 0x79, 0xaf, 0x8e, 0xec, 0x7b, 0xc0, 0xde, 0x36, 0xe7, 0x14, 0x36, 0xf9, 0x24,
    0x1c, 0x24, 0xcd, 0x20,
};

static const MessageEncodingTestVector sMessageEncodingTest0213 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xAE83E0A3,
        kWeaveHeaderFlag_SourceNodeId,
        0x2440,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0213_EncryptionKey,
    sMessageEncodingTest0213_Payload,
    sizeof(sMessageEncodingTest0213_Payload),
    sMessageEncodingTest0213_ExpectedEncoding,
    sizeof(sMessageEncodingTest0213_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0214_EncryptionKey =
{
    {
        0x9d, 0x53, 0x03, 0xd2, 0xc3, 0xc7, 0xc9, 0x5e, 0x7e, 0xa4, 0x06, 0x8b, 0xee, 0xbf, 0xb9, 0x4f,
    }
};
static const uint8_t sMessageEncodingTest0214_Payload[] =
{
    0x34, 0x0e, 0x05, 0xb5, 0x51, 0xfd, 0x1d, 0xa6, 0x13, 0x3a, 0x0a, 0x79, 0x22, 0x6b, 0x83, 0x8b,
};

static const uint8_t sMessageEncodingTest0214_ExpectedEncoding[] =
{
    0x20, 0x12, 0x48, 0x48, 0xc1, 0xf6, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc0, 0x24,
    0xa9, 0xa4, 0xaf, 0x85, 0xcb, 0x86, 0x58, 0xcd, 0x06, 0x60, 0x4e, 0x15, 0x29, 0x4d, 0x1a, 0xef,
    0xae, 0xf7, 0x63, 0x58, 0x54, 0xa4, 0x25, 0xca,
};

static const MessageEncodingTestVector sMessageEncodingTest0214 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xF6C14848,
        kWeaveHeaderFlag_SourceNodeId,
        0x24C0,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0214_EncryptionKey,
    sMessageEncodingTest0214_Payload,
    sizeof(sMessageEncodingTest0214_Payload),
    sMessageEncodingTest0214_ExpectedEncoding,
    sizeof(sMessageEncodingTest0214_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0215_EncryptionKey =
{
    {
        0xa1, 0x93, 0xeb, 0x6e, 0xf6, 0xa7, 0x5c, 0x78, 0x51, 0x4b, 0xce, 0x78, 0xfa, 0xfe, 0xf7, 0xcf,
    }
};
static const uint8_t sMessageEncodingTest0215_Payload[] =
{
    0xaf, 0xbc, 0x98, 0x70, 0xd5, 0x81, 0xc1, 0xa8, 0x1c, 0xec, 0x82, 0x67, 0x5d, 0x50, 0xa6, 0xf6,
};

static const uint8_t sMessageEncodingTest0215_ExpectedEncoding[] =
{
    0x30, 0x12, 0x94, 0x24, 0x8d, 0x13, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe4, 0x28,
    0x37, 0xd3, 0x92, 0x87, 0x0e, 0x0c, 0x44, 0x00, 0x9d, 0xb3, 0x52, 0x53, 0xc7, 0xaa, 0x58, 0xe2,
    0x89, 0x9f, 0xa2, 0x0c, 0x59, 0x66, 0x65, 0xb3, 0xcb, 0xb8, 0x37, 0xbb, 0xc6, 0x08, 0xe2, 0xd5,
};

static const MessageEncodingTestVector sMessageEncodingTest0215 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x138D2494,
        kWeaveHeaderFlag_SourceNodeId,
        0x28E4,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0215_EncryptionKey,
    sMessageEncodingTest0215_Payload,
    sizeof(sMessageEncodingTest0215_Payload),
    sMessageEncodingTest0215_ExpectedEncoding,
    sizeof(sMessageEncodingTest0215_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0216_Payload[] =
{
    0x3d, 0x3e, 0x59, 0x17, 0xc6, 0xdc, 0x4b, 0x10, 0x85, 0xac, 0x0a, 0x50, 0x50, 0x40, 0x63, 0x0f,
};

static const uint8_t sMessageEncodingTest0216_ExpectedEncoding[] =
{
    0x00, 0x22, 0x7d, 0xfa, 0xfa, 0xb5, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x3d, 0x3e,
    0x59, 0x17, 0xc6, 0xdc, 0x4b, 0x10, 0x85, 0xac, 0x0a, 0x50, 0x50, 0x40, 0x63, 0x0f,
};

static const MessageEncodingTestVector sMessageEncodingTest0216 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xB5FAFA7D,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0216_Payload,
    sizeof(sMessageEncodingTest0216_Payload),
    sMessageEncodingTest0216_ExpectedEncoding,
    sizeof(sMessageEncodingTest0216_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0217_EncryptionKey =
{
    {
        0xb0, 0x2c, 0x67, 0x35, 0xb9, 0x69, 0x57, 0xc6, 0xf1, 0xee, 0x5f, 0xea, 0x69, 0x14, 0x79, 0xb0,
    },
    {
        0xed, 0x6e, 0x8f, 0xe0, 0x0a, 0x6e, 0xba, 0x77, 0xff, 0x49, 0xa5, 0xf7, 0xc3, 0xe4, 0x03, 0xb1,
        0x40, 0x57, 0x61, 0x14,
    }
};
static const uint8_t sMessageEncodingTest0217_Payload[] =
{
    0xc7, 0x36, 0x75, 0xe6, 0xaa, 0xe2, 0x01, 0x72, 0xb0, 0x35, 0x5b, 0x81, 0x24, 0xc8, 0x33, 0x07,
};

static const uint8_t sMessageEncodingTest0217_ExpectedEncoding[] =
{
    0x10, 0x22, 0x5a, 0xaf, 0x14, 0xaf, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x73, 0x27,
    0xc0, 0x7b, 0x8a, 0xcc, 0x6c, 0xb4, 0x94, 0x66, 0x13, 0xfc, 0xe3, 0xe1, 0x64, 0x93, 0xe5, 0xc3,
    0x5b, 0xcf, 0x35, 0xa4, 0x28, 0xf5, 0xcd, 0xcc, 0xd9, 0x90, 0x39, 0x64, 0x27, 0x09, 0x4d, 0x9b,
    0xf0, 0xef, 0xd1, 0x38,
};

static const MessageEncodingTestVector sMessageEncodingTest0217 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xAF14AF5A,
        kWeaveHeaderFlag_SourceNodeId,
        0x2773,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0217_EncryptionKey,
    sMessageEncodingTest0217_Payload,
    sizeof(sMessageEncodingTest0217_Payload),
    sMessageEncodingTest0217_ExpectedEncoding,
    sizeof(sMessageEncodingTest0217_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0218_EncryptionKey =
{
    {
        0x7c, 0xe5, 0xf9, 0x79, 0x6d, 0xa4, 0x3c, 0x68, 0xe8, 0x67, 0xfc, 0xe3, 0xc5, 0xef, 0x85, 0xc3,
    }
};
static const uint8_t sMessageEncodingTest0218_Payload[] =
{
    0xde, 0xbe, 0xda, 0x5e, 0xd2, 0xbb, 0x3a, 0x1b, 0xdb, 0xe9, 0xb5, 0x9f, 0xe8, 0x4f, 0xa5, 0x3a,
};

static const uint8_t sMessageEncodingTest0218_ExpectedEncoding[] =
{
    0x20, 0x22, 0x9b, 0xee, 0xdd, 0xbc, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x32, 0x21,
    0x99, 0x86, 0x81, 0xcd, 0xd4, 0xe2, 0x4c, 0x09, 0xfb, 0x25, 0x60, 0x30, 0x51, 0xcf, 0x68, 0x65,
    0x71, 0x94, 0x39, 0xa3, 0x47, 0x7e, 0x44, 0xfc,
};

static const MessageEncodingTestVector sMessageEncodingTest0218 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xBCDDEE9B,
        kWeaveHeaderFlag_SourceNodeId,
        0x2132,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0218_EncryptionKey,
    sMessageEncodingTest0218_Payload,
    sizeof(sMessageEncodingTest0218_Payload),
    sMessageEncodingTest0218_ExpectedEncoding,
    sizeof(sMessageEncodingTest0218_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0219_EncryptionKey =
{
    {
        0x44, 0x08, 0x89, 0xec, 0x6e, 0xc2, 0x72, 0x27, 0x2f, 0x54, 0xce, 0x8b, 0x88, 0xee, 0xbe, 0x25,
    }
};
static const uint8_t sMessageEncodingTest0219_Payload[] =
{
    0xd5, 0xc0, 0xf8, 0x0f, 0xba, 0x0a, 0xab, 0x06, 0xfc, 0x3e, 0x5c, 0xbf, 0xbf, 0x74, 0xa0, 0xac,
};

static const uint8_t sMessageEncodingTest0219_ExpectedEncoding[] =
{
    0x30, 0x22, 0x66, 0xe3, 0xed, 0xa5, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x82, 0x2b,
    0x38, 0x51, 0x96, 0xa0, 0x6a, 0x4d, 0x08, 0x48, 0x27, 0x22, 0x6a, 0x11, 0x9d, 0x80, 0x06, 0x59,
    0x8f, 0x30, 0x0a, 0x26, 0xa9, 0x76, 0xdf, 0x1b, 0x29, 0xeb, 0x6a, 0x45, 0x47, 0x5b, 0x47, 0x00,
};

static const MessageEncodingTestVector sMessageEncodingTest0219 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xA5EDE366,
        kWeaveHeaderFlag_SourceNodeId,
        0x2B82,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0219_EncryptionKey,
    sMessageEncodingTest0219_Payload,
    sizeof(sMessageEncodingTest0219_Payload),
    sMessageEncodingTest0219_ExpectedEncoding,
    sizeof(sMessageEncodingTest0219_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0220_Payload[] =
{
    0x46, 0xe2, 0xc8, 0xee, 0xf0, 0x25, 0x20, 0x2c, 0xed, 0x47, 0xc3, 0xdc, 0x5f, 0x9c, 0x45, 0x1f,
};

static const uint8_t sMessageEncodingTest0220_ExpectedEncoding[] =
{
    0x00, 0x24, 0x1e, 0x03, 0x66, 0x09, 0x46, 0xe2, 0xc8, 0xee, 0xf0, 0x25, 0x20, 0x2c, 0xed, 0x47,
    0xc3, 0xdc, 0x5f, 0x9c, 0x45, 0x1f,
};

static const MessageEncodingTestVector sMessageEncodingTest0220 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x0966031E,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0220_Payload,
    sizeof(sMessageEncodingTest0220_Payload),
    sMessageEncodingTest0220_ExpectedEncoding,
    sizeof(sMessageEncodingTest0220_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0221_EncryptionKey =
{
    {
        0xb6, 0xb4, 0x76, 0x5e, 0xdc, 0xe7, 0xcb, 0x5c, 0xb0, 0x6a, 0x8e, 0x1a, 0xdd, 0x06, 0x61, 0x08,
    },
    {
        0x1f, 0xb7, 0x1e, 0xbd, 0xff, 0xb9, 0x0a, 0xb5, 0x63, 0xa5, 0x45, 0xe7, 0xcf, 0x6a, 0x83, 0xf9,
        0x22, 0x52, 0xd5, 0xa1,
    }
};
static const uint8_t sMessageEncodingTest0221_Payload[] =
{
    0x13, 0xe8, 0x81, 0xee, 0x97, 0x38, 0x31, 0x47, 0xbc, 0x17, 0x7f, 0x0f, 0x5f, 0xeb, 0xdd, 0xbf,
};

static const uint8_t sMessageEncodingTest0221_ExpectedEncoding[] =
{
    0x10, 0x24, 0x87, 0x0a, 0xd1, 0xe1, 0xc1, 0x29, 0xce, 0x59, 0xf9, 0x0a, 0x82, 0x6e, 0xb7, 0x59,
    0x40, 0x95, 0x07, 0x6f, 0x92, 0x0b, 0xfc, 0x42, 0xff, 0x28, 0xe4, 0x73, 0xc3, 0x4c, 0x6b, 0x3b,
    0xa2, 0x4d, 0xc8, 0x87, 0x78, 0x94, 0xcf, 0xc6, 0xc5, 0xcc, 0xa6, 0x94,
};

static const MessageEncodingTestVector sMessageEncodingTest0221 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xE1D10A87,
        kWeaveHeaderFlag_TunneledData,
        0x29C1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0221_EncryptionKey,
    sMessageEncodingTest0221_Payload,
    sizeof(sMessageEncodingTest0221_Payload),
    sMessageEncodingTest0221_ExpectedEncoding,
    sizeof(sMessageEncodingTest0221_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0222_EncryptionKey =
{
    {
        0x6d, 0xe3, 0xa6, 0xee, 0xe0, 0x64, 0x6f, 0x50, 0x9c, 0x57, 0x9f, 0x8d, 0xe5, 0x83, 0x3c, 0xdb,
    }
};
static const uint8_t sMessageEncodingTest0222_Payload[] =
{
    0x68, 0xc1, 0xa2, 0x3a, 0x6a, 0xa5, 0xeb, 0xa8, 0xc4, 0x45, 0x9c, 0xd8, 0xa5, 0x16, 0xad, 0x78,
};

static const uint8_t sMessageEncodingTest0222_ExpectedEncoding[] =
{
    0x20, 0x24, 0x3e, 0xc9, 0xcd, 0x41, 0xd9, 0x27, 0x0a, 0x48, 0xe2, 0xac, 0x4e, 0xf0, 0x91, 0x58,
    0x3b, 0xf8, 0xfd, 0xf6, 0x8b, 0xb7, 0x73, 0x2f, 0xf4, 0x56, 0x2d, 0xbc, 0x99, 0x5c, 0x31, 0x5f,
};

static const MessageEncodingTestVector sMessageEncodingTest0222 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x41CDC93E,
        kWeaveHeaderFlag_TunneledData,
        0x27D9,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0222_EncryptionKey,
    sMessageEncodingTest0222_Payload,
    sizeof(sMessageEncodingTest0222_Payload),
    sMessageEncodingTest0222_ExpectedEncoding,
    sizeof(sMessageEncodingTest0222_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0223_EncryptionKey =
{
    {
        0x4a, 0xa9, 0x95, 0x20, 0x61, 0xf4, 0x63, 0x5c, 0x5c, 0x83, 0x26, 0x47, 0xec, 0xc8, 0x9e, 0xf0,
    }
};
static const uint8_t sMessageEncodingTest0223_Payload[] =
{
    0x30, 0x51, 0x93, 0x24, 0xc4, 0xdd, 0x0f, 0xfb, 0x13, 0xa9, 0x12, 0x28, 0x38, 0x0d, 0x52, 0xf4,
};

static const uint8_t sMessageEncodingTest0223_ExpectedEncoding[] =
{
    0x30, 0x24, 0x0c, 0x20, 0xec, 0x0e, 0x89, 0x20, 0xb8, 0x48, 0x24, 0x6a, 0xab, 0x7c, 0x11, 0xe2,
    0x24, 0xe0, 0x46, 0xaa, 0x2d, 0x77, 0x06, 0x36, 0x7f, 0xa1, 0x24, 0xdf, 0x50, 0x77, 0x34, 0x9e,
    0x6e, 0x43, 0xa0, 0x3a, 0xb7, 0x4f, 0xf6, 0x40,
};

static const MessageEncodingTestVector sMessageEncodingTest0223 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x0EEC200C,
        kWeaveHeaderFlag_TunneledData,
        0x2089,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0223_EncryptionKey,
    sMessageEncodingTest0223_Payload,
    sizeof(sMessageEncodingTest0223_Payload),
    sMessageEncodingTest0223_ExpectedEncoding,
    sizeof(sMessageEncodingTest0223_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0224_Payload[] =
{
    0xc1, 0xda, 0xb9, 0x46, 0xa4, 0xe8, 0x40, 0x89, 0x2a, 0x23, 0xbd, 0x3d, 0x35, 0xe8, 0xb8, 0x2b,
};

static const uint8_t sMessageEncodingTest0224_ExpectedEncoding[] =
{
    0x00, 0x18, 0xad, 0xed, 0x97, 0x7a, 0xc1, 0xda, 0xb9, 0x46, 0xa4, 0xe8, 0x40, 0x89, 0x2a, 0x23,
    0xbd, 0x3d, 0x35, 0xe8, 0xb8, 0x2b,
};

static const MessageEncodingTestVector sMessageEncodingTest0224 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x7A97EDAD,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0224_Payload,
    sizeof(sMessageEncodingTest0224_Payload),
    sMessageEncodingTest0224_ExpectedEncoding,
    sizeof(sMessageEncodingTest0224_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0225_EncryptionKey =
{
    {
        0x0c, 0xfe, 0x5c, 0x95, 0x48, 0xaa, 0xa9, 0xde, 0x48, 0x78, 0x17, 0x57, 0xba, 0x0a, 0x10, 0xca,
    },
    {
        0x34, 0x42, 0xd4, 0x5b, 0xdf, 0x79, 0x33, 0x4e, 0x52, 0xee, 0x96, 0x9d, 0x87, 0xfe, 0x65, 0xfd,
        0xae, 0xec, 0xa1, 0x1f,
    }
};
static const uint8_t sMessageEncodingTest0225_Payload[] =
{
    0xfa, 0xaf, 0xe6, 0xa0, 0x15, 0xe8, 0x8c, 0x1f, 0xed, 0xb0, 0xc4, 0x9b, 0x72, 0x05, 0x05, 0xe9,
};

static const uint8_t sMessageEncodingTest0225_ExpectedEncoding[] =
{
    0x10, 0x18, 0xa1, 0xfc, 0x56, 0xce, 0x83, 0x2e, 0x37, 0xb5, 0x30, 0xc0, 0xe7, 0x46, 0xf4, 0x02,
    0x2c, 0x48, 0xcf, 0x4b, 0xab, 0x9d, 0x55, 0x32, 0xc2, 0x2b, 0x22, 0xda, 0x9c, 0xfa, 0xea, 0x71,
    0x8c, 0x6c, 0x4b, 0xfc, 0x07, 0x68, 0x5a, 0x2c, 0xe4, 0x84, 0x73, 0xcf,
};

static const MessageEncodingTestVector sMessageEncodingTest0225 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xCE56FCA1,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2E83,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0225_EncryptionKey,
    sMessageEncodingTest0225_Payload,
    sizeof(sMessageEncodingTest0225_Payload),
    sMessageEncodingTest0225_ExpectedEncoding,
    sizeof(sMessageEncodingTest0225_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0226_EncryptionKey =
{
    {
        0xa7, 0x41, 0x2f, 0x29, 0x5b, 0x30, 0x86, 0x4d, 0x12, 0xac, 0x63, 0xa7, 0x7b, 0x6e, 0x29, 0xde,
    }
};
static const uint8_t sMessageEncodingTest0226_Payload[] =
{
    0xe3, 0xf5, 0x11, 0x30, 0xe1, 0x6d, 0x07, 0xa3, 0x5c, 0x46, 0x53, 0x82, 0x61, 0x96, 0xf3, 0x4e,
};

static const uint8_t sMessageEncodingTest0226_ExpectedEncoding[] =
{
    0x20, 0x18, 0xaf, 0xcc, 0xcc, 0x1b, 0x8d, 0x2b, 0x82, 0xd9, 0x61, 0xe4, 0xa5, 0x60, 0x9a, 0x89,
    0xf8, 0xf9, 0xaf, 0x5c, 0x0a, 0xcc, 0x78, 0x49, 0xc7, 0x15, 0xef, 0xce, 0x1b, 0xb8, 0x55, 0x34,
};

static const MessageEncodingTestVector sMessageEncodingTest0226 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x1BCCCCAF,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2B8D,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0226_EncryptionKey,
    sMessageEncodingTest0226_Payload,
    sizeof(sMessageEncodingTest0226_Payload),
    sMessageEncodingTest0226_ExpectedEncoding,
    sizeof(sMessageEncodingTest0226_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0227_EncryptionKey =
{
    {
        0x38, 0x78, 0xb1, 0x77, 0x26, 0xd7, 0x3f, 0x2d, 0x2e, 0x91, 0xae, 0xdf, 0xf2, 0x85, 0x16, 0xe2,
    }
};
static const uint8_t sMessageEncodingTest0227_Payload[] =
{
    0xed, 0xf3, 0xbb, 0x37, 0x1e, 0xa5, 0xa1, 0xe6, 0x9a, 0xbf, 0x26, 0x64, 0x24, 0xf0, 0x5f, 0x90,
};

static const uint8_t sMessageEncodingTest0227_ExpectedEncoding[] =
{
    0x30, 0x18, 0x27, 0x9e, 0x4d, 0x5d, 0x45, 0x23, 0xc0, 0x05, 0x45, 0x06, 0x8d, 0xab, 0x70, 0x4e,
    0x90, 0x2c, 0xc0, 0xa5, 0xcc, 0x0f, 0xa7, 0x05, 0x62, 0x1e, 0xf5, 0xf9, 0x31, 0xe0, 0x31, 0xe5,
    0x54, 0x37, 0x72, 0x8a, 0x89, 0x83, 0x59, 0xf4,
};

static const MessageEncodingTestVector sMessageEncodingTest0227 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x5D4D9E27,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2345,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0227_EncryptionKey,
    sMessageEncodingTest0227_Payload,
    sizeof(sMessageEncodingTest0227_Payload),
    sMessageEncodingTest0227_ExpectedEncoding,
    sizeof(sMessageEncodingTest0227_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0228_Payload[] =
{
    0xf5, 0xfd, 0x84, 0x3f, 0x2b, 0x60, 0xda, 0xfb, 0x31, 0xd8, 0x61, 0x3d, 0x9c, 0x6f, 0x13, 0x79,
};

static const uint8_t sMessageEncodingTest0228_ExpectedEncoding[] =
{
    0x00, 0x28, 0xe1, 0x4e, 0xc4, 0x8b, 0xf5, 0xfd, 0x84, 0x3f, 0x2b, 0x60, 0xda, 0xfb, 0x31, 0xd8,
    0x61, 0x3d, 0x9c, 0x6f, 0x13, 0x79,
};

static const MessageEncodingTestVector sMessageEncodingTest0228 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x8BC44EE1,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0228_Payload,
    sizeof(sMessageEncodingTest0228_Payload),
    sMessageEncodingTest0228_ExpectedEncoding,
    sizeof(sMessageEncodingTest0228_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0229_EncryptionKey =
{
    {
        0x95, 0xaa, 0x08, 0xf3, 0xd1, 0x18, 0xdc, 0xb9, 0xda, 0x7e, 0x80, 0x9e, 0xf5, 0x00, 0xfa, 0x2d,
    },
    {
        0x93, 0x7d, 0x75, 0x6f, 0x66, 0xb6, 0x6c, 0x9d, 0xe5, 0x41, 0xb2, 0xb5, 0x08, 0x04, 0xca, 0xcf,
        0xce, 0x19, 0xd0, 0x4b,
    }
};
static const uint8_t sMessageEncodingTest0229_Payload[] =
{
    0x72, 0xbe, 0xcc, 0xf7, 0x11, 0x57, 0xa5, 0xf8, 0xb2, 0xac, 0xfb, 0xd2, 0x02, 0x8a, 0x99, 0x33,
};

static const uint8_t sMessageEncodingTest0229_ExpectedEncoding[] =
{
    0x10, 0x28, 0x00, 0xba, 0xcf, 0xbc, 0x85, 0x2b, 0x9b, 0x50, 0xc4, 0x0a, 0xf7, 0x25, 0x73, 0x28,
    0x61, 0x9a, 0xea, 0x16, 0xae, 0xe4, 0xfb, 0x61, 0xba, 0x20, 0x6e, 0xe6, 0xb8, 0xc9, 0x32, 0xf6,
    0x8a, 0x0c, 0x01, 0xe9, 0x31, 0x7e, 0xf5, 0x94, 0xaa, 0x16, 0x04, 0x8c,
};

static const MessageEncodingTestVector sMessageEncodingTest0229 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xBCCFBA00,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2B85,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0229_EncryptionKey,
    sMessageEncodingTest0229_Payload,
    sizeof(sMessageEncodingTest0229_Payload),
    sMessageEncodingTest0229_ExpectedEncoding,
    sizeof(sMessageEncodingTest0229_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0230_EncryptionKey =
{
    {
        0x4b, 0x9d, 0x3e, 0xa5, 0xcd, 0xd8, 0x47, 0xe1, 0x05, 0x6a, 0x9c, 0xb3, 0xaa, 0x45, 0x69, 0x73,
    }
};
static const uint8_t sMessageEncodingTest0230_Payload[] =
{
    0x88, 0x6b, 0x63, 0xb7, 0x23, 0x7f, 0x19, 0x6d, 0x06, 0x73, 0x57, 0x6d, 0x67, 0xbb, 0x0c, 0xcc,
};

static const uint8_t sMessageEncodingTest0230_ExpectedEncoding[] =
{
    0x20, 0x28, 0x9a, 0xbd, 0x61, 0x9f, 0x47, 0x2a, 0x04, 0x6e, 0xb0, 0x42, 0x32, 0xa0, 0x60, 0x4e,
    0xc1, 0x2a, 0x0f, 0xe2, 0x9a, 0x87, 0x07, 0x17, 0xc9, 0x16, 0x7a, 0xce, 0xc7, 0x13, 0xd8, 0x53,
};

static const MessageEncodingTestVector sMessageEncodingTest0230 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x9F61BD9A,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A47,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0230_EncryptionKey,
    sMessageEncodingTest0230_Payload,
    sizeof(sMessageEncodingTest0230_Payload),
    sMessageEncodingTest0230_ExpectedEncoding,
    sizeof(sMessageEncodingTest0230_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0231_EncryptionKey =
{
    {
        0xab, 0xf2, 0x6e, 0x91, 0x22, 0x16, 0x59, 0x84, 0x55, 0x68, 0xfb, 0x3a, 0xe5, 0xf0, 0x94, 0xb4,
    }
};
static const uint8_t sMessageEncodingTest0231_Payload[] =
{
    0xb4, 0xef, 0xef, 0x4c, 0x27, 0xdf, 0x73, 0x77, 0xff, 0x5e, 0x12, 0x17, 0x71, 0xca, 0x0c, 0x89,
};

static const uint8_t sMessageEncodingTest0231_ExpectedEncoding[] =
{
    0x30, 0x28, 0x8d, 0x18, 0x7e, 0xb0, 0xf4, 0x24, 0x21, 0x5d, 0x4e, 0x42, 0xd2, 0x52, 0x73, 0x6b,
    0x45, 0x17, 0xb2, 0x49, 0x14, 0x19, 0x3d, 0xc0, 0xc5, 0xa6, 0x3e, 0xd3, 0x09, 0x15, 0xdd, 0x7b,
    0x01, 0x99, 0xff, 0xb3, 0x98, 0x1f, 0x76, 0x1f,
};

static const MessageEncodingTestVector sMessageEncodingTest0231 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xB07E188D,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x24F4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0231_EncryptionKey,
    sMessageEncodingTest0231_Payload,
    sizeof(sMessageEncodingTest0231_Payload),
    sMessageEncodingTest0231_ExpectedEncoding,
    sizeof(sMessageEncodingTest0231_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0232_Payload[] =
{
    0x8f, 0x55, 0xbc, 0xeb, 0x0b, 0xe5, 0x36, 0xd3, 0x69, 0x3d, 0x1f, 0xd8, 0xd2, 0xb5, 0xe8, 0xa5,
};

static const uint8_t sMessageEncodingTest0232_ExpectedEncoding[] =
{
    0x00, 0x10, 0x26, 0xb2, 0xec, 0xf1, 0x8f, 0x55, 0xbc, 0xeb, 0x0b, 0xe5, 0x36, 0xd3, 0x69, 0x3d,
    0x1f, 0xd8, 0xd2, 0xb5, 0xe8, 0xa5,
};

static const MessageEncodingTestVector sMessageEncodingTest0232 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xF1ECB226,
        0,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0232_Payload,
    sizeof(sMessageEncodingTest0232_Payload),
    sMessageEncodingTest0232_ExpectedEncoding,
    sizeof(sMessageEncodingTest0232_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0233_EncryptionKey =
{
    {
        0xac, 0x14, 0x0f, 0x5c, 0x3b, 0x62, 0xe1, 0x23, 0x99, 0xa3, 0x0f, 0x9c, 0x36, 0x3a, 0x18, 0xfe,
    },
    {
        0x5a, 0xc2, 0x4c, 0xe2, 0x77, 0xdb, 0x65, 0xad, 0x8e, 0xf2, 0x4d, 0x75, 0xc2, 0x78, 0x8f, 0xc0,
        0x03, 0x43, 0xe1, 0x69,
    }
};
static const uint8_t sMessageEncodingTest0233_Payload[] =
{
    0x87, 0x9b, 0x4b, 0xce, 0x30, 0xf0, 0xcc, 0x89, 0x19, 0x62, 0x5d, 0xa8, 0x4a, 0xc9, 0xd9, 0x58,
};

static const uint8_t sMessageEncodingTest0233_ExpectedEncoding[] =
{
    0x10, 0x10, 0x56, 0x8e, 0x51, 0xa7, 0xf3, 0x2d, 0x33, 0x34, 0x2d, 0xaf, 0x35, 0x88, 0x24, 0x50,
    0x49, 0x61, 0x21, 0x2e, 0x48, 0x58, 0x6c, 0x3d, 0xb8, 0x52, 0x2b, 0x5d, 0x76, 0x94, 0x73, 0x7a,
    0x62, 0xd8, 0x2f, 0x24, 0x7b, 0x62, 0xc2, 0x01, 0x6b, 0xe1, 0x63, 0xf6,
};

static const MessageEncodingTestVector sMessageEncodingTest0233 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xA7518E56,
        0,
        0x2DF3,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0233_EncryptionKey,
    sMessageEncodingTest0233_Payload,
    sizeof(sMessageEncodingTest0233_Payload),
    sMessageEncodingTest0233_ExpectedEncoding,
    sizeof(sMessageEncodingTest0233_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0234_EncryptionKey =
{
    {
        0x86, 0xa4, 0xa7, 0x15, 0x59, 0xcf, 0x8f, 0x66, 0x6e, 0xf7, 0xb8, 0x3e, 0x3f, 0x13, 0xf7, 0xe8,
    }
};
static const uint8_t sMessageEncodingTest0234_Payload[] =
{
    0x8d, 0x64, 0x2b, 0x2e, 0xfb, 0xee, 0x1d, 0xe4, 0xa6, 0x46, 0x11, 0x7b, 0x15, 0xa8, 0x2e, 0x73,
};

static const uint8_t sMessageEncodingTest0234_ExpectedEncoding[] =
{
    0x20, 0x10, 0xb4, 0x3d, 0x24, 0xc1, 0x95, 0x26, 0xef, 0xce, 0xdc, 0x14, 0x58, 0x52, 0xab, 0xf6,
    0xb1, 0xaa, 0x40, 0xf5, 0x1e, 0xbd, 0x94, 0xbb, 0x60, 0x14, 0x07, 0x64, 0xb7, 0x0e, 0x19, 0xa9,
};

static const MessageEncodingTestVector sMessageEncodingTest0234 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xC1243DB4,
        0,
        0x2695,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0234_EncryptionKey,
    sMessageEncodingTest0234_Payload,
    sizeof(sMessageEncodingTest0234_Payload),
    sMessageEncodingTest0234_ExpectedEncoding,
    sizeof(sMessageEncodingTest0234_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0235_EncryptionKey =
{
    {
        0xdb, 0xaf, 0xa8, 0xc2, 0xd1, 0x5c, 0xff, 0xd6, 0xc2, 0x12, 0x50, 0x04, 0x6e, 0x8e, 0x2b, 0xb3,
    }
};
static const uint8_t sMessageEncodingTest0235_Payload[] =
{
    0x1f, 0xb5, 0xf2, 0xfa, 0x0b, 0x8e, 0x19, 0xdb, 0xa9, 0xba, 0xbe, 0x45, 0x7f, 0x19, 0xdf, 0xf8,
};

static const uint8_t sMessageEncodingTest0235_ExpectedEncoding[] =
{
    0x30, 0x10, 0x82, 0x8b, 0x1f, 0x61, 0xf5, 0x25, 0x2b, 0xfa, 0xea, 0x8c, 0x5a, 0x29, 0xa5, 0x68,
    0xa2, 0xbd, 0x44, 0x25, 0xd0, 0x40, 0x32, 0xcc, 0x2a, 0x15, 0x3e, 0x46, 0x0d, 0x41, 0x42, 0x10,
    0xa5, 0xe7, 0xb0, 0x2b, 0xa8, 0x46, 0xc6, 0x5a,
};

static const MessageEncodingTestVector sMessageEncodingTest0235 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x611F8B82,
        0,
        0x25F5,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0235_EncryptionKey,
    sMessageEncodingTest0235_Payload,
    sizeof(sMessageEncodingTest0235_Payload),
    sMessageEncodingTest0235_ExpectedEncoding,
    sizeof(sMessageEncodingTest0235_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0236_Payload[] =
{
    0x89, 0x4e, 0x5a, 0x3d, 0x4b, 0x3d, 0x89, 0xb1, 0x45, 0xa9, 0x8c, 0x50, 0x84, 0x0e, 0x2e, 0x4a,
};

static const uint8_t sMessageEncodingTest0236_ExpectedEncoding[] =
{
    0x00, 0x20, 0x0c, 0x06, 0x78, 0x10, 0x89, 0x4e, 0x5a, 0x3d, 0x4b, 0x3d, 0x89, 0xb1, 0x45, 0xa9,
    0x8c, 0x50, 0x84, 0x0e, 0x2e, 0x4a,
};

static const MessageEncodingTestVector sMessageEncodingTest0236 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x1078060C,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0236_Payload,
    sizeof(sMessageEncodingTest0236_Payload),
    sMessageEncodingTest0236_ExpectedEncoding,
    sizeof(sMessageEncodingTest0236_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0237_EncryptionKey =
{
    {
        0x67, 0x71, 0xc9, 0x1e, 0xd1, 0xb0, 0x77, 0x7e, 0xc9, 0xdf, 0x46, 0x5a, 0x4e, 0xb4, 0x8b, 0x80,
    },
    {
        0x2e, 0xaf, 0x15, 0x9f, 0xc7, 0x26, 0x29, 0xaf, 0xf4, 0xab, 0xb8, 0x58, 0x6e, 0x73, 0x7c, 0x74,
        0xc4, 0x15, 0xe5, 0x52,
    }
};
static const uint8_t sMessageEncodingTest0237_Payload[] =
{
    0x47, 0xf9, 0xaa, 0xd8, 0x84, 0x3e, 0x0b, 0xcd, 0x66, 0x96, 0x86, 0x95, 0x3c, 0x43, 0xd9, 0xf8,
};

static const uint8_t sMessageEncodingTest0237_ExpectedEncoding[] =
{
    0x10, 0x20, 0x73, 0x0e, 0x99, 0x28, 0x56, 0x2c, 0x9f, 0x16, 0x35, 0xcb, 0x4e, 0xf7, 0xce, 0x2b,
    0x75, 0x96, 0xc8, 0x1d, 0x0d, 0x4a, 0x7a, 0xe6, 0xbe, 0x6e, 0x22, 0xfd, 0x16, 0xe2, 0xd1, 0xb8,
    0xe9, 0x63, 0x72, 0x0e, 0x5b, 0x6b, 0xc0, 0x4a, 0x68, 0x06, 0x12, 0x7a,
};

static const MessageEncodingTestVector sMessageEncodingTest0237 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x28990E73,
        0,
        0x2C56,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0237_EncryptionKey,
    sMessageEncodingTest0237_Payload,
    sizeof(sMessageEncodingTest0237_Payload),
    sMessageEncodingTest0237_ExpectedEncoding,
    sizeof(sMessageEncodingTest0237_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0238_EncryptionKey =
{
    {
        0x23, 0x59, 0xc0, 0x4b, 0x4d, 0xbf, 0xe1, 0xf8, 0x2a, 0x5d, 0x3c, 0xdc, 0x3f, 0x99, 0x50, 0x03,
    }
};
static const uint8_t sMessageEncodingTest0238_Payload[] =
{
    0x54, 0xe0, 0x46, 0x6a, 0xad, 0xf3, 0xe3, 0x26, 0x9b, 0x81, 0xb6, 0x3e, 0x0b, 0x74, 0x47, 0x87,
};

static const uint8_t sMessageEncodingTest0238_ExpectedEncoding[] =
{
    0x20, 0x20, 0x5b, 0x68, 0xa9, 0xde, 0x46, 0x20, 0xcb, 0x8c, 0xd2, 0x68, 0x0a, 0x49, 0x71, 0x3e,
    0x26, 0x0f, 0xd1, 0x35, 0x41, 0x91, 0xff, 0xd9, 0x36, 0xf1, 0x1c, 0xeb, 0xca, 0xe6, 0x40, 0x2c,
};

static const MessageEncodingTestVector sMessageEncodingTest0238 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0xDEA9685B,
        0,
        0x2046,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0238_EncryptionKey,
    sMessageEncodingTest0238_Payload,
    sizeof(sMessageEncodingTest0238_Payload),
    sMessageEncodingTest0238_ExpectedEncoding,
    sizeof(sMessageEncodingTest0238_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0239_EncryptionKey =
{
    {
        0xf1, 0xaf, 0x2f, 0x73, 0xfd, 0x23, 0xe5, 0x6d, 0x78, 0x75, 0x15, 0x79, 0x93, 0x50, 0x6f, 0x78,
    }
};
static const uint8_t sMessageEncodingTest0239_Payload[] =
{
    0x51, 0x03, 0x9f, 0x42, 0x53, 0x01, 0x21, 0xbf, 0x46, 0xff, 0x03, 0x1a, 0xe2, 0xc1, 0x7d, 0x9b,
};

static const uint8_t sMessageEncodingTest0239_ExpectedEncoding[] =
{
    0x30, 0x20, 0xef, 0xad, 0x67, 0x97, 0x70, 0x24, 0x8c, 0x8c, 0xd9, 0x63, 0xd8, 0x0a, 0xa2, 0x76,
    0x75, 0xa2, 0xfc, 0x59, 0x45, 0x4b, 0x86, 0xf3, 0xcd, 0xfc, 0x97, 0xb4, 0x21, 0xed, 0x69, 0xd7,
    0x4c, 0x06, 0xfc, 0x51, 0xf5, 0xea, 0x36, 0x10,
};

static const MessageEncodingTestVector sMessageEncodingTest0239 =
{
    {
        0x18B4300000000042,
        0x18B4300000000001,
        0x9767ADEF,
        0,
        0x2470,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0239_EncryptionKey,
    sMessageEncodingTest0239_Payload,
    sizeof(sMessageEncodingTest0239_Payload),
    sMessageEncodingTest0239_ExpectedEncoding,
    sizeof(sMessageEncodingTest0239_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0240_Payload[] =
{
    0x04, 0x3c, 0xb9, 0x3d, 0xcc, 0xa5, 0xad, 0x85, 0xed, 0x7e, 0x1b, 0x61, 0x98, 0xfa, 0x7d, 0x1f,
};

static const uint8_t sMessageEncodingTest0240_ExpectedEncoding[] =
{
    0x00, 0x27, 0x62, 0xc4, 0x01, 0x45, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x04, 0x3c, 0xb9, 0x3d, 0xcc, 0xa5, 0xad, 0x85, 0xed, 0x7e,
    0x1b, 0x61, 0x98, 0xfa, 0x7d, 0x1f,
};

static const MessageEncodingTestVector sMessageEncodingTest0240 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x4501C462,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0240_Payload,
    sizeof(sMessageEncodingTest0240_Payload),
    sMessageEncodingTest0240_ExpectedEncoding,
    sizeof(sMessageEncodingTest0240_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0241_EncryptionKey =
{
    {
        0x91, 0x1a, 0x2d, 0x3c, 0xde, 0x7e, 0xd1, 0xd8, 0xca, 0x43, 0xa7, 0x2c, 0xfc, 0x25, 0xc3, 0x31,
    },
    {
        0x91, 0xc7, 0x24, 0xa9, 0x67, 0x5c, 0x1a, 0x73, 0xa8, 0x4f, 0x7f, 0x22, 0x2c, 0x0f, 0xd1, 0x90,
        0x4b, 0x48, 0xc2, 0x45,
    }
};
static const uint8_t sMessageEncodingTest0241_Payload[] =
{
    0x94, 0x4c, 0xf4, 0xa4, 0xc2, 0x53, 0xb9, 0x36, 0x01, 0x6d, 0x42, 0x29, 0x3b, 0x05, 0x96, 0x9a,
};

static const uint8_t sMessageEncodingTest0241_ExpectedEncoding[] =
{
    0x10, 0x27, 0xf1, 0x4f, 0xd3, 0x19, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x59, 0x25, 0xdf, 0x35, 0x35, 0x8b, 0xa9, 0x02, 0x31, 0x8a,
    0x7e, 0xf8, 0x7f, 0xeb, 0xc2, 0x57, 0x9b, 0x3d, 0x95, 0x2b, 0x1f, 0x57, 0xca, 0x79, 0x2c, 0x62,
    0x25, 0xcd, 0x83, 0x5d, 0x85, 0x34, 0xd4, 0x0c, 0x0d, 0xf8, 0x3d, 0x05,
};

static const MessageEncodingTestVector sMessageEncodingTest0241 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x19D34FF1,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2559,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0241_EncryptionKey,
    sMessageEncodingTest0241_Payload,
    sizeof(sMessageEncodingTest0241_Payload),
    sMessageEncodingTest0241_ExpectedEncoding,
    sizeof(sMessageEncodingTest0241_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0242_EncryptionKey =
{
    {
        0x61, 0x7f, 0xf7, 0xc1, 0x2e, 0x2c, 0x95, 0xca, 0xde, 0xe5, 0xf3, 0x5a, 0x8d, 0x03, 0x3a, 0xac,
    }
};
static const uint8_t sMessageEncodingTest0242_Payload[] =
{
    0x48, 0xf2, 0xab, 0xc2, 0xe5, 0x3b, 0x38, 0x06, 0x87, 0x48, 0x7a, 0x09, 0x5d, 0x22, 0x64, 0x25,
};

static const uint8_t sMessageEncodingTest0242_ExpectedEncoding[] =
{
    0x20, 0x27, 0xfa, 0x96, 0x63, 0x70, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x29, 0x0e, 0xb6, 0xd3, 0x3c, 0x33, 0xab, 0xb9, 0xf4,
    0x29, 0xe4, 0xea, 0x7e, 0x50, 0x15, 0x21, 0xbd, 0x30, 0x56, 0x88, 0x7e, 0x86, 0x2f, 0x3b, 0x0e,
};

static const MessageEncodingTestVector sMessageEncodingTest0242 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x706396FA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x29A6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0242_EncryptionKey,
    sMessageEncodingTest0242_Payload,
    sizeof(sMessageEncodingTest0242_Payload),
    sMessageEncodingTest0242_ExpectedEncoding,
    sizeof(sMessageEncodingTest0242_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0243_EncryptionKey =
{
    {
        0x29, 0x95, 0x9c, 0x17, 0x27, 0xa8, 0x2a, 0xf4, 0x45, 0x1c, 0xd7, 0x7c, 0x7e, 0x81, 0x6d, 0x57,
    }
};
static const uint8_t sMessageEncodingTest0243_Payload[] =
{
    0xa9, 0x1d, 0x7b, 0x80, 0xb2, 0xa3, 0x5e, 0x66, 0x91, 0x60, 0xe8, 0x78, 0x09, 0x1a, 0xd7, 0x4e,
};

static const uint8_t sMessageEncodingTest0243_ExpectedEncoding[] =
{
    0x30, 0x27, 0xc6, 0xd7, 0xbe, 0xa0, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x12, 0x29, 0x01, 0x3f, 0xa1, 0x2b, 0x96, 0x88, 0x48, 0xc1,
    0x77, 0xc7, 0x59, 0x5f, 0x34, 0xc5, 0xb8, 0x8a, 0x65, 0xd9, 0xc2, 0xd4, 0xdc, 0x6a, 0xc2, 0xc8,
    0x72, 0x42, 0xef, 0xb5, 0x65, 0xa4, 0xd7, 0x95,
};

static const MessageEncodingTestVector sMessageEncodingTest0243 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xA0BED7C6,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2912,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0243_EncryptionKey,
    sMessageEncodingTest0243_Payload,
    sizeof(sMessageEncodingTest0243_Payload),
    sMessageEncodingTest0243_ExpectedEncoding,
    sizeof(sMessageEncodingTest0243_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0244_Payload[] =
{
    0x7a, 0x09, 0x36, 0x71, 0x31, 0xd3, 0x8e, 0x2d, 0xd9, 0x97, 0x3a, 0x8d, 0xf7, 0xcc, 0xd6, 0x44,
};

static const uint8_t sMessageEncodingTest0244_ExpectedEncoding[] =
{
    0x00, 0x1b, 0xd8, 0xb5, 0x8d, 0xcd, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7a, 0x09, 0x36, 0x71, 0x31, 0xd3, 0x8e, 0x2d, 0xd9, 0x97,
    0x3a, 0x8d, 0xf7, 0xcc, 0xd6, 0x44,
};

static const MessageEncodingTestVector sMessageEncodingTest0244 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xCD8DB5D8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0244_Payload,
    sizeof(sMessageEncodingTest0244_Payload),
    sMessageEncodingTest0244_ExpectedEncoding,
    sizeof(sMessageEncodingTest0244_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0245_EncryptionKey =
{
    {
        0x05, 0xe4, 0x4d, 0xb1, 0x1e, 0xf0, 0x05, 0x6b, 0xbb, 0x1f, 0x7b, 0xaf, 0x67, 0x49, 0xbe, 0xdd,
    },
    {
        0x18, 0x1b, 0xfc, 0x8d, 0x2b, 0x6b, 0x07, 0x57, 0x93, 0x3e, 0xf9, 0x26, 0x51, 0xf9, 0xcd, 0x58,
        0x80, 0xe3, 0xbe, 0x6a,
    }
};
static const uint8_t sMessageEncodingTest0245_Payload[] =
{
    0xc0, 0x05, 0x03, 0xe1, 0xfb, 0x1c, 0xc1, 0x47, 0x54, 0xb6, 0x83, 0x69, 0x71, 0x80, 0x38, 0x60,
};

static const uint8_t sMessageEncodingTest0245_ExpectedEncoding[] =
{
    0x10, 0x1b, 0xdf, 0xcd, 0xfe, 0xd9, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x2c, 0xaf, 0x11, 0x36, 0x26, 0x14, 0x7e, 0xc7, 0x83,
    0x8b, 0xd8, 0x97, 0x82, 0x93, 0x51, 0x66, 0xf2, 0x5e, 0x1f, 0x69, 0x98, 0xe1, 0xae, 0x87, 0xb7,
    0xdb, 0xe3, 0x40, 0xd9, 0xe1, 0x38, 0x6c, 0x30, 0xde, 0x03, 0xf0, 0x3f,
};

static const MessageEncodingTestVector sMessageEncodingTest0245 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xD9FECDDF,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2CA6,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0245_EncryptionKey,
    sMessageEncodingTest0245_Payload,
    sizeof(sMessageEncodingTest0245_Payload),
    sMessageEncodingTest0245_ExpectedEncoding,
    sizeof(sMessageEncodingTest0245_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0246_EncryptionKey =
{
    {
        0x64, 0xde, 0x0d, 0x18, 0x80, 0xb6, 0xe5, 0xf4, 0xb4, 0x6b, 0x0f, 0x6f, 0xbd, 0x57, 0xe4, 0x3f,
    }
};
static const uint8_t sMessageEncodingTest0246_Payload[] =
{
    0xdb, 0xf5, 0xd6, 0xc5, 0x68, 0x15, 0x2c, 0xe6, 0xcb, 0x2a, 0x91, 0xd8, 0x57, 0x59, 0x8a, 0x6f,
};

static const uint8_t sMessageEncodingTest0246_ExpectedEncoding[] =
{
    0x20, 0x1b, 0x96, 0xe3, 0x0f, 0xf2, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd8, 0x2e, 0x8d, 0xd8, 0xb7, 0xe2, 0x82, 0x1f, 0x9e, 0x52,
    0xbc, 0xad, 0x0d, 0x83, 0xe8, 0xed, 0x26, 0xe7, 0xec, 0x54, 0xf3, 0x34, 0x77, 0xfa, 0x02, 0xf0,
};

static const MessageEncodingTestVector sMessageEncodingTest0246 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xF20FE396,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2ED8,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0246_EncryptionKey,
    sMessageEncodingTest0246_Payload,
    sizeof(sMessageEncodingTest0246_Payload),
    sMessageEncodingTest0246_ExpectedEncoding,
    sizeof(sMessageEncodingTest0246_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0247_EncryptionKey =
{
    {
        0x80, 0x50, 0xc0, 0x0c, 0x5f, 0x68, 0x1c, 0xc5, 0x7e, 0xdf, 0x30, 0xc2, 0x32, 0x5b, 0xdc, 0x69,
    }
};
static const uint8_t sMessageEncodingTest0247_Payload[] =
{
    0x6d, 0x15, 0x56, 0xda, 0x92, 0x2e, 0xd7, 0x21, 0x7f, 0x6b, 0x41, 0xc0, 0x81, 0xea, 0x34, 0x3e,
};

static const uint8_t sMessageEncodingTest0247_ExpectedEncoding[] =
{
    0x30, 0x1b, 0x32, 0xd5, 0xb3, 0xa3, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb8, 0x25, 0x66, 0xed, 0x12, 0xe3, 0xed, 0x5c, 0xb5, 0x2f,
    0xb2, 0x08, 0xd1, 0x94, 0xc5, 0xcb, 0xbf, 0x95, 0x51, 0x10, 0xb1, 0x71, 0xf7, 0x42, 0xb6, 0x15,
    0x0a, 0xb7, 0x78, 0x44, 0x77, 0x79, 0x0a, 0x65,
};

static const MessageEncodingTestVector sMessageEncodingTest0247 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xA3B3D532,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x25B8,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0247_EncryptionKey,
    sMessageEncodingTest0247_Payload,
    sizeof(sMessageEncodingTest0247_Payload),
    sMessageEncodingTest0247_ExpectedEncoding,
    sizeof(sMessageEncodingTest0247_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0248_Payload[] =
{
    0x79, 0x0e, 0x26, 0x2b, 0xaf, 0x9d, 0xad, 0x9e, 0xd9, 0x46, 0xeb, 0x79, 0xef, 0x1e, 0x5b, 0xfc,
};

static const uint8_t sMessageEncodingTest0248_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x3d, 0xf7, 0xab, 0x1a, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x79, 0x0e, 0x26, 0x2b, 0xaf, 0x9d, 0xad, 0x9e, 0xd9, 0x46,
    0xeb, 0x79, 0xef, 0x1e, 0x5b, 0xfc,
};

static const MessageEncodingTestVector sMessageEncodingTest0248 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x1AABF73D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0248_Payload,
    sizeof(sMessageEncodingTest0248_Payload),
    sMessageEncodingTest0248_ExpectedEncoding,
    sizeof(sMessageEncodingTest0248_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0249_EncryptionKey =
{
    {
        0xac, 0x2a, 0x11, 0x88, 0xb4, 0xc7, 0xe0, 0xdc, 0x46, 0xa1, 0xa0, 0x5b, 0xf6, 0xf3, 0x60, 0xd2,
    },
    {
        0xd6, 0xaa, 0xe0, 0x72, 0xf4, 0xc2, 0xc3, 0xbb, 0xa1, 0x3a, 0x48, 0x7a, 0xe9, 0xcb, 0x45, 0x1d,
        0x20, 0x0e, 0x73, 0x14,
    }
};
static const uint8_t sMessageEncodingTest0249_Payload[] =
{
    0x70, 0xce, 0x98, 0x5e, 0x6d, 0x07, 0x60, 0xc7, 0xd4, 0x81, 0x20, 0xe5, 0xc9, 0x9b, 0xfe, 0xc4,
};

static const uint8_t sMessageEncodingTest0249_ExpectedEncoding[] =
{
    0x10, 0x2b, 0x3c, 0xea, 0xbe, 0x2f, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x2f, 0xce, 0x49, 0x52, 0xc9, 0x82, 0x77, 0xd8, 0x70,
    0x43, 0x71, 0x86, 0x6b, 0x71, 0x28, 0x41, 0xd1, 0x83, 0xaf, 0x3c, 0xde, 0x7d, 0x4c, 0xc1, 0xbd,
    0x16, 0xc2, 0x31, 0xd7, 0xe5, 0x06, 0x4d, 0x38, 0x61, 0xb2, 0xb7, 0x65,
};

static const MessageEncodingTestVector sMessageEncodingTest0249 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x2FBEEA3C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2FE8,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0249_EncryptionKey,
    sMessageEncodingTest0249_Payload,
    sizeof(sMessageEncodingTest0249_Payload),
    sMessageEncodingTest0249_ExpectedEncoding,
    sizeof(sMessageEncodingTest0249_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0250_EncryptionKey =
{
    {
        0x66, 0xaf, 0x41, 0x1c, 0x14, 0x36, 0x24, 0x3b, 0xd5, 0xf8, 0xee, 0xe8, 0xaf, 0xa6, 0x57, 0xdc,
    }
};
static const uint8_t sMessageEncodingTest0250_Payload[] =
{
    0xb0, 0xd6, 0x0a, 0x25, 0x84, 0x0f, 0xa5, 0x39, 0xaf, 0x62, 0x5b, 0x1e, 0x4d, 0x9a, 0x39, 0x2b,
};

static const uint8_t sMessageEncodingTest0250_ExpectedEncoding[] =
{
    0x20, 0x2b, 0x12, 0xbf, 0x9a, 0x48, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x32, 0x2a, 0xc4, 0x90, 0x3c, 0x4f, 0xff, 0x6c, 0x75, 0xbb,
    0xc7, 0xfb, 0x77, 0x6e, 0xcd, 0x40, 0x98, 0x7d, 0x54, 0x94, 0xf6, 0xa7, 0x74, 0x43, 0x9a, 0xaa,
};

static const MessageEncodingTestVector sMessageEncodingTest0250 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x489ABF12,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A32,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0250_EncryptionKey,
    sMessageEncodingTest0250_Payload,
    sizeof(sMessageEncodingTest0250_Payload),
    sMessageEncodingTest0250_ExpectedEncoding,
    sizeof(sMessageEncodingTest0250_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0251_EncryptionKey =
{
    {
        0xa7, 0x1a, 0xeb, 0xa6, 0xf8, 0x17, 0x12, 0x21, 0xa1, 0x78, 0x4d, 0x2b, 0xa7, 0xca, 0x35, 0x7d,
    }
};
static const uint8_t sMessageEncodingTest0251_Payload[] =
{
    0x4d, 0xd7, 0xe2, 0xc6, 0x43, 0x8e, 0x80, 0x68, 0x62, 0x09, 0x71, 0x9b, 0x6f, 0x86, 0x18, 0x8c,
};

static const uint8_t sMessageEncodingTest0251_ExpectedEncoding[] =
{
    0x30, 0x2b, 0x34, 0x73, 0x15, 0xf0, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x2c, 0x76, 0x10, 0x60, 0xcf, 0xb3, 0x1e, 0x32, 0x4b,
    0x7e, 0xc0, 0xa1, 0x92, 0x95, 0xb5, 0x2c, 0xbc, 0x7b, 0x19, 0x29, 0xa8, 0x77, 0xfe, 0x6a, 0xf3,
    0xe5, 0xec, 0x6a, 0x62, 0x41, 0x08, 0xfd, 0x31,
};

static const MessageEncodingTestVector sMessageEncodingTest0251 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xF0157334,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2C06,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0251_EncryptionKey,
    sMessageEncodingTest0251_Payload,
    sizeof(sMessageEncodingTest0251_Payload),
    sMessageEncodingTest0251_ExpectedEncoding,
    sizeof(sMessageEncodingTest0251_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0252_Payload[] =
{
    0x44, 0xd8, 0xed, 0x63, 0x90, 0x32, 0xbb, 0xd5, 0x2e, 0xa9, 0xce, 0x83, 0x6b, 0x85, 0x02, 0x10,
};

static const uint8_t sMessageEncodingTest0252_ExpectedEncoding[] =
{
    0x00, 0x13, 0xfb, 0xa3, 0xd5, 0xe9, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x44, 0xd8, 0xed, 0x63, 0x90, 0x32, 0xbb, 0xd5, 0x2e, 0xa9,
    0xce, 0x83, 0x6b, 0x85, 0x02, 0x10,
};

static const MessageEncodingTestVector sMessageEncodingTest0252 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xE9D5A3FB,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0252_Payload,
    sizeof(sMessageEncodingTest0252_Payload),
    sMessageEncodingTest0252_ExpectedEncoding,
    sizeof(sMessageEncodingTest0252_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0253_EncryptionKey =
{
    {
        0x4e, 0x2a, 0x7f, 0x21, 0x2a, 0x64, 0xb1, 0xd8, 0x9c, 0x76, 0x7a, 0x6d, 0xbf, 0x94, 0x1f, 0xeb,
    },
    {
        0xf2, 0x6c, 0xc2, 0xe4, 0x02, 0x5b, 0x08, 0xf3, 0x67, 0x88, 0x21, 0x53, 0x9c, 0xdb, 0x37, 0x56,
        0x93, 0x04, 0x90, 0x9c,
    }
};
static const uint8_t sMessageEncodingTest0253_Payload[] =
{
    0x7b, 0xc1, 0xa9, 0xc2, 0x49, 0x51, 0x13, 0x47, 0x30, 0x5b, 0xf1, 0x8d, 0xdf, 0x3d, 0x29, 0x9b,
};

static const uint8_t sMessageEncodingTest0253_ExpectedEncoding[] =
{
    0x10, 0x13, 0x50, 0x39, 0xa4, 0x0b, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x52, 0x2e, 0xc9, 0xcc, 0x1f, 0xb1, 0xbe, 0x00, 0x9e, 0xf2,
    0xa1, 0x57, 0x63, 0xd6, 0xb7, 0x55, 0x19, 0x9e, 0xeb, 0x2e, 0xa3, 0x5f, 0x21, 0x81, 0xdb, 0x68,
    0xb9, 0xf7, 0xc4, 0xe0, 0x00, 0xa0, 0xc9, 0x5f, 0xb8, 0x30, 0x49, 0xbe,
};

static const MessageEncodingTestVector sMessageEncodingTest0253 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x0BA43950,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2E52,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0253_EncryptionKey,
    sMessageEncodingTest0253_Payload,
    sizeof(sMessageEncodingTest0253_Payload),
    sMessageEncodingTest0253_ExpectedEncoding,
    sizeof(sMessageEncodingTest0253_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0254_EncryptionKey =
{
    {
        0xa4, 0x9b, 0xb8, 0x82, 0x2c, 0x05, 0xac, 0x50, 0x57, 0x45, 0x08, 0x51, 0x06, 0x23, 0x87, 0x06,
    }
};
static const uint8_t sMessageEncodingTest0254_Payload[] =
{
    0x08, 0xff, 0x02, 0x96, 0x36, 0x07, 0x4a, 0xc0, 0xcc, 0x89, 0x75, 0x6d, 0x0f, 0x08, 0x8e, 0xa8,
};

static const uint8_t sMessageEncodingTest0254_ExpectedEncoding[] =
{
    0x20, 0x13, 0x41, 0x3d, 0xb4, 0x05, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0x27, 0x18, 0xdd, 0xb0, 0xe4, 0xad, 0x51, 0x27, 0x9e,
    0x1f, 0x2f, 0xb4, 0x51, 0x5e, 0xaf, 0x4a, 0x3f, 0x7a, 0x02, 0x0f, 0xa4, 0xbc, 0x31, 0xef, 0xcc,
};

static const MessageEncodingTestVector sMessageEncodingTest0254 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x05B43D41,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x27DE,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0254_EncryptionKey,
    sMessageEncodingTest0254_Payload,
    sizeof(sMessageEncodingTest0254_Payload),
    sMessageEncodingTest0254_ExpectedEncoding,
    sizeof(sMessageEncodingTest0254_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0255_EncryptionKey =
{
    {
        0x1d, 0x38, 0x4a, 0x80, 0x16, 0xac, 0xdf, 0x0e, 0x17, 0x6d, 0xbe, 0xfa, 0xd2, 0x9c, 0x86, 0x77,
    }
};
static const uint8_t sMessageEncodingTest0255_Payload[] =
{
    0xba, 0xa6, 0xd0, 0x95, 0xbb, 0x11, 0x76, 0x99, 0xcb, 0xa9, 0x15, 0x2f, 0x80, 0x04, 0x7b, 0x1d,
};

static const uint8_t sMessageEncodingTest0255_ExpectedEncoding[] =
{
    0x30, 0x13, 0x68, 0x90, 0x4a, 0xbd, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x24, 0xdf, 0x84, 0xc4, 0xde, 0x3b, 0xdd, 0x78, 0xc1,
    0xaa, 0xbf, 0xe4, 0xac, 0xbd, 0x8e, 0x89, 0x53, 0x22, 0x1e, 0xa2, 0x0f, 0x03, 0xc8, 0xcc, 0x7f,
    0xaf, 0xb5, 0x9b, 0xc0, 0xd1, 0x20, 0xf5, 0xf3,
};

static const MessageEncodingTestVector sMessageEncodingTest0255 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xBD4A9068,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2473,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0255_EncryptionKey,
    sMessageEncodingTest0255_Payload,
    sizeof(sMessageEncodingTest0255_Payload),
    sMessageEncodingTest0255_ExpectedEncoding,
    sizeof(sMessageEncodingTest0255_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0256_Payload[] =
{
    0xc3, 0xbf, 0x4a, 0x68, 0xb9, 0x9b, 0x8f, 0x8b, 0x9b, 0x10, 0x84, 0x8f, 0xb3, 0x65, 0x4a, 0xcf,
};

static const uint8_t sMessageEncodingTest0256_ExpectedEncoding[] =
{
    0x00, 0x23, 0x74, 0x9f, 0xd3, 0x9c, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xbf, 0x4a, 0x68, 0xb9, 0x9b, 0x8f, 0x8b, 0x9b, 0x10,
    0x84, 0x8f, 0xb3, 0x65, 0x4a, 0xcf,
};

static const MessageEncodingTestVector sMessageEncodingTest0256 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x9CD39F74,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0256_Payload,
    sizeof(sMessageEncodingTest0256_Payload),
    sMessageEncodingTest0256_ExpectedEncoding,
    sizeof(sMessageEncodingTest0256_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0257_EncryptionKey =
{
    {
        0x43, 0xc2, 0x74, 0x97, 0x67, 0x07, 0xca, 0xef, 0xda, 0x9a, 0x52, 0x08, 0x92, 0xca, 0xa4, 0x2a,
    },
    {
        0x9a, 0x49, 0xa7, 0x3e, 0x81, 0x40, 0x64, 0x4a, 0x6c, 0xa8, 0xf5, 0x22, 0x9d, 0x1f, 0xa9, 0xa1,
        0xbd, 0xcb, 0xe8, 0x20,
    }
};
static const uint8_t sMessageEncodingTest0257_Payload[] =
{
    0x57, 0xa9, 0xf2, 0x84, 0x47, 0xf9, 0x0c, 0x07, 0x00, 0x60, 0xe4, 0xc1, 0xdf, 0xb5, 0x45, 0x0f,
};

static const uint8_t sMessageEncodingTest0257_ExpectedEncoding[] =
{
    0x10, 0x23, 0xf9, 0xdc, 0x55, 0xe4, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x49, 0x2d, 0x54, 0xb7, 0x98, 0x22, 0x83, 0xca, 0xe6, 0xbe,
    0xa6, 0xe0, 0x02, 0x4c, 0x88, 0x58, 0x1a, 0x65, 0x19, 0x19, 0x23, 0xf0, 0x11, 0x8f, 0x1f, 0x1e,
    0xa9, 0xbb, 0x79, 0xb5, 0x56, 0x64, 0x56, 0x92, 0x6c, 0xee, 0x14, 0x7c,
};

static const MessageEncodingTestVector sMessageEncodingTest0257 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xE455DCF9,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2D49,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0257_EncryptionKey,
    sMessageEncodingTest0257_Payload,
    sizeof(sMessageEncodingTest0257_Payload),
    sMessageEncodingTest0257_ExpectedEncoding,
    sizeof(sMessageEncodingTest0257_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0258_EncryptionKey =
{
    {
        0x8a, 0xe5, 0x84, 0xab, 0x6b, 0x64, 0x2b, 0x12, 0x5f, 0x6b, 0xac, 0xdc, 0x23, 0xc2, 0x7e, 0x10,
    }
};
static const uint8_t sMessageEncodingTest0258_Payload[] =
{
    0xd0, 0xda, 0xe5, 0x9a, 0xda, 0x92, 0xd7, 0x3f, 0x0a, 0xe0, 0x68, 0x99, 0x8e, 0xc8, 0xa1, 0xb0,
};

static const uint8_t sMessageEncodingTest0258_ExpectedEncoding[] =
{
    0x20, 0x23, 0x1d, 0xcd, 0x09, 0x7c, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa1, 0x21, 0xa5, 0xa1, 0x22, 0x48, 0x0c, 0xf7, 0x22, 0x11,
    0x1f, 0xd1, 0x17, 0x31, 0xb6, 0xf3, 0x83, 0x34, 0x52, 0xda, 0xd6, 0xdd, 0x35, 0x36, 0xa7, 0x98,
};

static const MessageEncodingTestVector sMessageEncodingTest0258 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x7C09CD1D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x21A1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0258_EncryptionKey,
    sMessageEncodingTest0258_Payload,
    sizeof(sMessageEncodingTest0258_Payload),
    sMessageEncodingTest0258_ExpectedEncoding,
    sizeof(sMessageEncodingTest0258_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0259_EncryptionKey =
{
    {
        0x25, 0x3b, 0xbc, 0x36, 0x27, 0xd9, 0x80, 0xd5, 0xb6, 0x27, 0x48, 0x52, 0x60, 0x89, 0x6c, 0xbc,
    }
};
static const uint8_t sMessageEncodingTest0259_Payload[] =
{
    0x69, 0xcc, 0xd9, 0x4a, 0x48, 0xd1, 0x3a, 0xda, 0xd9, 0xdc, 0xe8, 0x71, 0xa4, 0x5b, 0x26, 0x2e,
};

static const uint8_t sMessageEncodingTest0259_ExpectedEncoding[] =
{
    0x30, 0x23, 0xff, 0xe9, 0x90, 0x15, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb0, 0x22, 0xf8, 0xd9, 0x2a, 0xdf, 0x9d, 0x07, 0xd6, 0x49,
    0xca, 0x4f, 0xe7, 0x3d, 0xc9, 0xa8, 0x63, 0xaa, 0x59, 0x9f, 0x7d, 0xd7, 0x3d, 0xf1, 0x5f, 0x8f,
    0xb6, 0xeb, 0x9e, 0xa8, 0x67, 0xfa, 0x3e, 0x64,
};

static const MessageEncodingTestVector sMessageEncodingTest0259 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x1590E9FF,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x22B0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0259_EncryptionKey,
    sMessageEncodingTest0259_Payload,
    sizeof(sMessageEncodingTest0259_Payload),
    sMessageEncodingTest0259_ExpectedEncoding,
    sizeof(sMessageEncodingTest0259_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0260_Payload[] =
{
    0xa6, 0x5b, 0x07, 0x04, 0xb8, 0xbb, 0xf7, 0x5d, 0xc5, 0x7d, 0x4d, 0x26, 0xd8, 0x61, 0x73, 0x6a,
};

static const uint8_t sMessageEncodingTest0260_ExpectedEncoding[] =
{
    0x00, 0x25, 0xa3, 0x98, 0x67, 0xd4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa6, 0x5b,
    0x07, 0x04, 0xb8, 0xbb, 0xf7, 0x5d, 0xc5, 0x7d, 0x4d, 0x26, 0xd8, 0x61, 0x73, 0x6a,
};

static const MessageEncodingTestVector sMessageEncodingTest0260 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xD46798A3,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0260_Payload,
    sizeof(sMessageEncodingTest0260_Payload),
    sMessageEncodingTest0260_ExpectedEncoding,
    sizeof(sMessageEncodingTest0260_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0261_EncryptionKey =
{
    {
        0x42, 0x11, 0x15, 0x6b, 0xb2, 0xa4, 0x6d, 0xab, 0x94, 0xb1, 0x3a, 0xdf, 0xe5, 0x5a, 0x24, 0x35,
    },
    {
        0x86, 0xcf, 0x01, 0xb9, 0xb1, 0xad, 0x53, 0x53, 0x5f, 0x62, 0xb3, 0xba, 0xa6, 0x7b, 0x4b, 0x63,
        0xd9, 0x21, 0x20, 0x1c,
    }
};
static const uint8_t sMessageEncodingTest0261_Payload[] =
{
    0xd2, 0x25, 0x38, 0x68, 0x56, 0x22, 0x22, 0x46, 0x73, 0xfb, 0x91, 0x91, 0x46, 0x40, 0xb7, 0xb4,
};

static const uint8_t sMessageEncodingTest0261_ExpectedEncoding[] =
{
    0x10, 0x25, 0xd8, 0x34, 0xea, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0x26,
    0xe7, 0xa1, 0xc1, 0xcc, 0xbd, 0xc8, 0x4e, 0x24, 0xd8, 0xab, 0x90, 0xd8, 0x20, 0x4f, 0xdb, 0x88,
    0xa9, 0xc2, 0x97, 0x53, 0x0a, 0xa6, 0x56, 0x50, 0xe8, 0xd7, 0x36, 0xdf, 0xa2, 0x7f, 0xb8, 0xa0,
    0x8c, 0xdc, 0xe9, 0x8e,
};

static const MessageEncodingTestVector sMessageEncodingTest0261 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x9DEA34D8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x26DE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0261_EncryptionKey,
    sMessageEncodingTest0261_Payload,
    sizeof(sMessageEncodingTest0261_Payload),
    sMessageEncodingTest0261_ExpectedEncoding,
    sizeof(sMessageEncodingTest0261_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0262_EncryptionKey =
{
    {
        0x61, 0x91, 0xbf, 0x9d, 0x7d, 0x2a, 0xcb, 0xd7, 0x5b, 0xad, 0x38, 0xc1, 0xeb, 0xa3, 0xff, 0xb6,
    }
};
static const uint8_t sMessageEncodingTest0262_Payload[] =
{
    0x06, 0x3a, 0xdc, 0xbf, 0xa2, 0x3e, 0xda, 0x2d, 0xdb, 0x19, 0x1f, 0x4e, 0xe4, 0xfa, 0xcd, 0xf2,
};

static const uint8_t sMessageEncodingTest0262_ExpectedEncoding[] =
{
    0x20, 0x25, 0x3d, 0x1c, 0xbe, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x92, 0x24,
    0xdc, 0x86, 0x71, 0xc3, 0x5a, 0x35, 0xa1, 0x25, 0x05, 0x38, 0x56, 0x53, 0x86, 0xe6, 0x87, 0x1e,
    0xdf, 0x13, 0x49, 0xbb, 0x7a, 0x97, 0x77, 0x24,
};

static const MessageEncodingTestVector sMessageEncodingTest0262 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xF8BE1C3D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2492,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0262_EncryptionKey,
    sMessageEncodingTest0262_Payload,
    sizeof(sMessageEncodingTest0262_Payload),
    sMessageEncodingTest0262_ExpectedEncoding,
    sizeof(sMessageEncodingTest0262_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0263_EncryptionKey =
{
    {
        0xcd, 0x72, 0xf9, 0x51, 0x2c, 0xfc, 0x89, 0x6f, 0x22, 0xf1, 0x29, 0xca, 0xd8, 0x52, 0xaa, 0xfc,
    }
};
static const uint8_t sMessageEncodingTest0263_Payload[] =
{
    0x0a, 0x60, 0xff, 0x27, 0x14, 0xc4, 0x7e, 0x95, 0x9d, 0xf2, 0x64, 0x45, 0x82, 0x29, 0xec, 0x0d,
};

static const uint8_t sMessageEncodingTest0263_ExpectedEncoding[] =
{
    0x30, 0x25, 0x2d, 0x04, 0xa4, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x22,
    0x9a, 0x38, 0x7e, 0xa1, 0x83, 0xc0, 0x9b, 0x20, 0x04, 0xd6, 0xd9, 0x51, 0xa0, 0x04, 0x29, 0x22,
    0x34, 0x27, 0x2b, 0x25, 0x14, 0x5d, 0x18, 0x8a, 0xa3, 0x3d, 0x79, 0x47, 0xe8, 0x7b, 0x3f, 0x80,
};

static const MessageEncodingTestVector sMessageEncodingTest0263 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x9FA4042D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x22FD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0263_EncryptionKey,
    sMessageEncodingTest0263_Payload,
    sizeof(sMessageEncodingTest0263_Payload),
    sMessageEncodingTest0263_ExpectedEncoding,
    sizeof(sMessageEncodingTest0263_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0264_Payload[] =
{
    0xab, 0x03, 0x3b, 0xf1, 0xc0, 0x71, 0x72, 0x47, 0x57, 0x98, 0xef, 0x10, 0xd8, 0xa2, 0x66, 0xe7,
};

static const uint8_t sMessageEncodingTest0264_ExpectedEncoding[] =
{
    0x00, 0x19, 0x42, 0x63, 0x45, 0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xab, 0x03,
    0x3b, 0xf1, 0xc0, 0x71, 0x72, 0x47, 0x57, 0x98, 0xef, 0x10, 0xd8, 0xa2, 0x66, 0xe7,
};

static const MessageEncodingTestVector sMessageEncodingTest0264 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xA2456342,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0264_Payload,
    sizeof(sMessageEncodingTest0264_Payload),
    sMessageEncodingTest0264_ExpectedEncoding,
    sizeof(sMessageEncodingTest0264_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0265_EncryptionKey =
{
    {
        0x18, 0x4d, 0xff, 0x01, 0xf7, 0x9f, 0x3a, 0xe8, 0xc4, 0xe1, 0xf9, 0xdd, 0x75, 0xad, 0xb8, 0x82,
    },
    {
        0x79, 0xe0, 0xd4, 0x35, 0x98, 0xa5, 0xeb, 0x3c, 0x89, 0x94, 0x3a, 0xa4, 0x46, 0xf1, 0xa1, 0x3a,
        0x71, 0x5c, 0xb5, 0x52,
    }
};
static const uint8_t sMessageEncodingTest0265_Payload[] =
{
    0xfe, 0x4a, 0x4e, 0xf2, 0xe3, 0xe5, 0x90, 0x64, 0x02, 0x78, 0x73, 0x11, 0x5b, 0xb2, 0xe3, 0x88,
};

static const uint8_t sMessageEncodingTest0265_ExpectedEncoding[] =
{
    0x10, 0x19, 0xb5, 0x92, 0xb9, 0xb4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x93, 0x27,
    0xbf, 0x46, 0x0b, 0x40, 0xce, 0x03, 0x04, 0x7c, 0x66, 0xa9, 0xc4, 0x57, 0x80, 0xd6, 0xf4, 0xfe,
    0x3e, 0x70, 0x21, 0x4a, 0x8c, 0x7e, 0x67, 0x18, 0x0f, 0x29, 0xf2, 0x34, 0x01, 0x80, 0x13, 0xe1,
    0x04, 0x10, 0x54, 0xb5,
};

static const MessageEncodingTestVector sMessageEncodingTest0265 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xB4B992B5,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2793,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0265_EncryptionKey,
    sMessageEncodingTest0265_Payload,
    sizeof(sMessageEncodingTest0265_Payload),
    sMessageEncodingTest0265_ExpectedEncoding,
    sizeof(sMessageEncodingTest0265_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0266_EncryptionKey =
{
    {
        0x2c, 0xb6, 0x28, 0xed, 0x0d, 0xd2, 0xa8, 0x60, 0x51, 0x05, 0xf2, 0x23, 0x40, 0xea, 0x7d, 0x50,
    }
};
static const uint8_t sMessageEncodingTest0266_Payload[] =
{
    0x3e, 0x4b, 0x67, 0xe8, 0x73, 0xdb, 0x50, 0xd8, 0x2b, 0xe2, 0x4c, 0x7d, 0xbb, 0x4b, 0xc8, 0xfa,
};

static const uint8_t sMessageEncodingTest0266_ExpectedEncoding[] =
{
    0x20, 0x19, 0xe9, 0x6a, 0x43, 0x31, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6d, 0x27,
    0x26, 0xaf, 0x75, 0xa6, 0x09, 0x0e, 0x58, 0x39, 0x7f, 0x17, 0xc5, 0xaa, 0x57, 0xf2, 0x1b, 0xc7,
    0x51, 0xad, 0x3a, 0xee, 0xba, 0x43, 0xc3, 0x35,
};

static const MessageEncodingTestVector sMessageEncodingTest0266 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x31436AE9,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x276D,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0266_EncryptionKey,
    sMessageEncodingTest0266_Payload,
    sizeof(sMessageEncodingTest0266_Payload),
    sMessageEncodingTest0266_ExpectedEncoding,
    sizeof(sMessageEncodingTest0266_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0267_EncryptionKey =
{
    {
        0x60, 0xa6, 0x2f, 0x63, 0xbc, 0x8e, 0x93, 0xaa, 0x51, 0x42, 0xad, 0xa6, 0x76, 0xd4, 0xb0, 0xb2,
    }
};
static const uint8_t sMessageEncodingTest0267_Payload[] =
{
    0xbd, 0xb6, 0x69, 0x17, 0xf7, 0x85, 0x45, 0x7b, 0xb0, 0xba, 0xea, 0xc4, 0x64, 0x11, 0x34, 0x2a,
};

static const uint8_t sMessageEncodingTest0267_ExpectedEncoding[] =
{
    0x30, 0x19, 0xf9, 0x9b, 0x84, 0x6e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x21, 0x2c,
    0x2b, 0x7a, 0xe4, 0x0d, 0x6e, 0x8a, 0x54, 0x55, 0x7d, 0x48, 0x72, 0x2d, 0xef, 0xc5, 0xfc, 0x93,
    0xb6, 0x51, 0x76, 0xb8, 0xa1, 0x8b, 0x4f, 0xdb, 0xcf, 0x09, 0x67, 0x4b, 0x42, 0x1b, 0xc4, 0x2e,
};

static const MessageEncodingTestVector sMessageEncodingTest0267 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x6E849BF9,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2C21,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0267_EncryptionKey,
    sMessageEncodingTest0267_Payload,
    sizeof(sMessageEncodingTest0267_Payload),
    sMessageEncodingTest0267_ExpectedEncoding,
    sizeof(sMessageEncodingTest0267_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0268_Payload[] =
{
    0x93, 0xc4, 0xf2, 0x13, 0x51, 0xcd, 0xb9, 0xc0, 0xfc, 0x34, 0x3f, 0x25, 0xc0, 0x37, 0x4d, 0x57,
};

static const uint8_t sMessageEncodingTest0268_ExpectedEncoding[] =
{
    0x00, 0x29, 0x58, 0x7f, 0x71, 0xa2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x93, 0xc4,
    0xf2, 0x13, 0x51, 0xcd, 0xb9, 0xc0, 0xfc, 0x34, 0x3f, 0x25, 0xc0, 0x37, 0x4d, 0x57,
};

static const MessageEncodingTestVector sMessageEncodingTest0268 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xA2717F58,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0268_Payload,
    sizeof(sMessageEncodingTest0268_Payload),
    sMessageEncodingTest0268_ExpectedEncoding,
    sizeof(sMessageEncodingTest0268_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0269_EncryptionKey =
{
    {
        0xee, 0xec, 0xf6, 0xf7, 0x25, 0xf2, 0x96, 0x97, 0x94, 0xd8, 0xb6, 0x84, 0x0c, 0xaa, 0xa5, 0x4d,
    },
    {
        0xa7, 0x87, 0x71, 0x21, 0xac, 0x12, 0x08, 0x3c, 0x27, 0xe3, 0x2a, 0x56, 0x41, 0x12, 0xe9, 0x66,
        0xbc, 0xe7, 0x5e, 0xe8,
    }
};
static const uint8_t sMessageEncodingTest0269_Payload[] =
{
    0x99, 0x4f, 0x52, 0xa1, 0xe2, 0x0e, 0x1a, 0xce, 0x2d, 0x16, 0x69, 0xf8, 0x7c, 0xbc, 0x99, 0xbb,
};

static const uint8_t sMessageEncodingTest0269_ExpectedEncoding[] =
{
    0x10, 0x29, 0x22, 0xdc, 0xc6, 0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x20,
    0xdd, 0xfe, 0x39, 0xc0, 0x72, 0x03, 0x49, 0xe2, 0x97, 0x8b, 0x15, 0x58, 0x10, 0x99, 0x4b, 0xd2,
    0x9b, 0x4f, 0x21, 0xa7, 0x47, 0x4e, 0x65, 0xb6, 0x54, 0x41, 0xd6, 0xd3, 0x7a, 0x0b, 0x09, 0x6f,
    0xe8, 0x83, 0x2c, 0x23,
};

static const MessageEncodingTestVector sMessageEncodingTest0269 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x12C6DC22,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x200F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0269_EncryptionKey,
    sMessageEncodingTest0269_Payload,
    sizeof(sMessageEncodingTest0269_Payload),
    sMessageEncodingTest0269_ExpectedEncoding,
    sizeof(sMessageEncodingTest0269_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0270_EncryptionKey =
{
    {
        0x14, 0x56, 0x87, 0x93, 0x42, 0x6e, 0xb8, 0x97, 0x5f, 0x3d, 0xc5, 0xf0, 0xac, 0x89, 0x16, 0x2d,
    }
};
static const uint8_t sMessageEncodingTest0270_Payload[] =
{
    0x7c, 0x26, 0xc8, 0x3f, 0x8e, 0x16, 0x8a, 0x5f, 0x2e, 0x7f, 0x54, 0xaa, 0x9d, 0xa7, 0x04, 0xb5,
};

static const uint8_t sMessageEncodingTest0270_ExpectedEncoding[] =
{
    0x20, 0x29, 0xe2, 0x4e, 0x8e, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x27,
    0xaf, 0xa1, 0x8f, 0x09, 0x82, 0xb8, 0x3a, 0x2f, 0xbc, 0x56, 0x22, 0xf2, 0x63, 0xe4, 0x9a, 0xbf,
    0xc8, 0xac, 0x27, 0x89, 0x6e, 0x3d, 0xd0, 0xdb,
};

static const MessageEncodingTestVector sMessageEncodingTest0270 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x6F8E4EE2,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x27C1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0270_EncryptionKey,
    sMessageEncodingTest0270_Payload,
    sizeof(sMessageEncodingTest0270_Payload),
    sMessageEncodingTest0270_ExpectedEncoding,
    sizeof(sMessageEncodingTest0270_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0271_EncryptionKey =
{
    {
        0xd4, 0x05, 0xcc, 0x06, 0xb5, 0x3b, 0xa9, 0xb8, 0x33, 0xee, 0x5a, 0x06, 0xba, 0x8e, 0xdd, 0xf3,
    }
};
static const uint8_t sMessageEncodingTest0271_Payload[] =
{
    0x58, 0xc4, 0x16, 0x60, 0x9b, 0x07, 0x47, 0xc2, 0x89, 0x69, 0x5a, 0xe0, 0x5a, 0x7d, 0x8b, 0x72,
};

static const uint8_t sMessageEncodingTest0271_ExpectedEncoding[] =
{
    0x30, 0x29, 0x06, 0x55, 0x2f, 0xca, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x2b,
    0x01, 0x85, 0xe8, 0xdc, 0x31, 0x7e, 0x4e, 0x68, 0xbf, 0x80, 0x03, 0x1b, 0x38, 0x9a, 0x5f, 0x4b,
    0x48, 0x56, 0xcf, 0x65, 0x3f, 0x7b, 0x28, 0x84, 0x2f, 0xcc, 0x4f, 0xba, 0x85, 0x4a, 0x6c, 0x91,
};

static const MessageEncodingTestVector sMessageEncodingTest0271 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xCA2F5506,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2BFD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0271_EncryptionKey,
    sMessageEncodingTest0271_Payload,
    sizeof(sMessageEncodingTest0271_Payload),
    sMessageEncodingTest0271_ExpectedEncoding,
    sizeof(sMessageEncodingTest0271_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0272_Payload[] =
{
    0xb8, 0x57, 0x5f, 0xcb, 0x3d, 0x19, 0xf6, 0x5c, 0x44, 0x83, 0x5f, 0xef, 0x00, 0x70, 0x26, 0xc7,
};

static const uint8_t sMessageEncodingTest0272_ExpectedEncoding[] =
{
    0x00, 0x11, 0xba, 0x71, 0xd7, 0x49, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb8, 0x57,
    0x5f, 0xcb, 0x3d, 0x19, 0xf6, 0x5c, 0x44, 0x83, 0x5f, 0xef, 0x00, 0x70, 0x26, 0xc7,
};

static const MessageEncodingTestVector sMessageEncodingTest0272 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x49D771BA,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0272_Payload,
    sizeof(sMessageEncodingTest0272_Payload),
    sMessageEncodingTest0272_ExpectedEncoding,
    sizeof(sMessageEncodingTest0272_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0273_EncryptionKey =
{
    {
        0x47, 0xbd, 0x91, 0x43, 0x8b, 0xca, 0xc7, 0x5b, 0x1d, 0x49, 0x06, 0x2b, 0xc6, 0x72, 0xea, 0xba,
    },
    {
        0x82, 0xba, 0x6c, 0x6f, 0xc9, 0x23, 0xe5, 0x4d, 0xbd, 0x85, 0x52, 0xe3, 0x94, 0x9f, 0x18, 0x1b,
        0xe9, 0x5b, 0xb9, 0x06,
    }
};
static const uint8_t sMessageEncodingTest0273_Payload[] =
{
    0xf4, 0xda, 0xd7, 0x36, 0x58, 0x8d, 0x1a, 0x0c, 0x11, 0xd6, 0xe2, 0x47, 0x27, 0x88, 0x97, 0x41,
};

static const uint8_t sMessageEncodingTest0273_ExpectedEncoding[] =
{
    0x10, 0x11, 0x9b, 0x5f, 0xd8, 0x0a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x57, 0x23,
    0xcc, 0x39, 0xfe, 0x9b, 0x82, 0x4e, 0x78, 0x26, 0x7a, 0xcd, 0x13, 0x5e, 0x46, 0xf3, 0x68, 0x5c,
    0x6d, 0x92, 0xe5, 0x7d, 0xd2, 0x39, 0x34, 0x09, 0xcc, 0x5a, 0x2c, 0xfb, 0xcf, 0xde, 0xe7, 0x73,
    0x7a, 0x5f, 0x7a, 0x54,
};

static const MessageEncodingTestVector sMessageEncodingTest0273 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x0AD85F9B,
        kWeaveHeaderFlag_DestNodeId,
        0x2357,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0273_EncryptionKey,
    sMessageEncodingTest0273_Payload,
    sizeof(sMessageEncodingTest0273_Payload),
    sMessageEncodingTest0273_ExpectedEncoding,
    sizeof(sMessageEncodingTest0273_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0274_EncryptionKey =
{
    {
        0xcf, 0x7f, 0x7e, 0x71, 0x67, 0xdb, 0x0a, 0xd5, 0x12, 0x33, 0x96, 0x2a, 0x9f, 0xcc, 0xe0, 0xc8,
    }
};
static const uint8_t sMessageEncodingTest0274_Payload[] =
{
    0x58, 0x84, 0xcb, 0xa8, 0x62, 0x8b, 0xa0, 0x03, 0xf5, 0x52, 0x64, 0x56, 0x78, 0xbb, 0x02, 0xb3,
};

static const uint8_t sMessageEncodingTest0274_ExpectedEncoding[] =
{
    0x20, 0x11, 0x3e, 0x9a, 0x26, 0x62, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x26,
    0x30, 0x5f, 0xdb, 0xb0, 0x67, 0x43, 0xc6, 0xf6, 0x33, 0x18, 0x76, 0x3e, 0x04, 0x4f, 0x5d, 0x8c,
    0x0c, 0xf4, 0x17, 0xd8, 0x49, 0x5b, 0xf7, 0x90,
};

static const MessageEncodingTestVector sMessageEncodingTest0274 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x62269A3E,
        kWeaveHeaderFlag_DestNodeId,
        0x26F5,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0274_EncryptionKey,
    sMessageEncodingTest0274_Payload,
    sizeof(sMessageEncodingTest0274_Payload),
    sMessageEncodingTest0274_ExpectedEncoding,
    sizeof(sMessageEncodingTest0274_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0275_EncryptionKey =
{
    {
        0x5d, 0x52, 0x09, 0x57, 0xb3, 0x1d, 0xa0, 0x94, 0xc0, 0xfe, 0xed, 0x37, 0xf2, 0xf2, 0xe5, 0xc5,
    }
};
static const uint8_t sMessageEncodingTest0275_Payload[] =
{
    0xfd, 0x8e, 0x33, 0x2e, 0x04, 0x63, 0x90, 0x40, 0xd7, 0xd9, 0x20, 0x36, 0x2f, 0x81, 0x91, 0x8c,
};

static const uint8_t sMessageEncodingTest0275_ExpectedEncoding[] =
{
    0x30, 0x11, 0x8f, 0x42, 0x3b, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3a, 0x2e,
    0x2b, 0xcb, 0xc4, 0x62, 0x1b, 0xfa, 0xd0, 0x13, 0x46, 0x70, 0xb8, 0xe6, 0xb1, 0x4c, 0xae, 0x50,
    0x7d, 0x40, 0x88, 0xcf, 0x38, 0x54, 0x73, 0x0b, 0x93, 0xe0, 0x86, 0xa4, 0x87, 0x44, 0x6c, 0x49,
};

static const MessageEncodingTestVector sMessageEncodingTest0275 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xE13B428F,
        kWeaveHeaderFlag_DestNodeId,
        0x2E3A,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0275_EncryptionKey,
    sMessageEncodingTest0275_Payload,
    sizeof(sMessageEncodingTest0275_Payload),
    sMessageEncodingTest0275_ExpectedEncoding,
    sizeof(sMessageEncodingTest0275_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0276_Payload[] =
{
    0xed, 0x8a, 0xd4, 0x72, 0x9e, 0xe8, 0x8d, 0x23, 0xd0, 0x93, 0x96, 0xc5, 0x2d, 0xef, 0x61, 0x80,
};

static const uint8_t sMessageEncodingTest0276_ExpectedEncoding[] =
{
    0x00, 0x21, 0x0f, 0xd9, 0x6e, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xed, 0x8a,
    0xd4, 0x72, 0x9e, 0xe8, 0x8d, 0x23, 0xd0, 0x93, 0x96, 0xc5, 0x2d, 0xef, 0x61, 0x80,
};

static const MessageEncodingTestVector sMessageEncodingTest0276 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x9D6ED90F,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0276_Payload,
    sizeof(sMessageEncodingTest0276_Payload),
    sMessageEncodingTest0276_ExpectedEncoding,
    sizeof(sMessageEncodingTest0276_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0277_EncryptionKey =
{
    {
        0x88, 0xfe, 0xe2, 0xed, 0xfd, 0x90, 0x0d, 0x2a, 0x3b, 0xc2, 0xfb, 0x64, 0x8d, 0x99, 0xf1, 0x13,
    },
    {
        0x62, 0x8a, 0x8d, 0x6c, 0x6b, 0xc8, 0x38, 0x92, 0xeb, 0x00, 0xdd, 0x1d, 0x90, 0x82, 0x30, 0x2e,
        0xf1, 0xbb, 0xa1, 0x71,
    }
};
static const uint8_t sMessageEncodingTest0277_Payload[] =
{
    0x9d, 0x53, 0x46, 0xca, 0x6e, 0xcc, 0xe6, 0x90, 0x3a, 0xb1, 0x8b, 0x43, 0xec, 0xf8, 0xa9, 0x1b,
};

static const uint8_t sMessageEncodingTest0277_ExpectedEncoding[] =
{
    0x10, 0x21, 0x43, 0xce, 0x0b, 0x90, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x21,
    0x8d, 0x91, 0x94, 0xa7, 0x0c, 0x7b, 0x2b, 0xcc, 0xde, 0x60, 0xa8, 0x4b, 0x71, 0xf8, 0x2c, 0xbc,
    0xc9, 0x7c, 0xe1, 0xba, 0xde, 0xa6, 0xf9, 0x17, 0xb3, 0xfb, 0x9b, 0x97, 0xd2, 0x09, 0xde, 0xba,
    0x34, 0xab, 0xb8, 0x96,
};

static const MessageEncodingTestVector sMessageEncodingTest0277 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x900BCE43,
        kWeaveHeaderFlag_DestNodeId,
        0x21FD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0277_EncryptionKey,
    sMessageEncodingTest0277_Payload,
    sizeof(sMessageEncodingTest0277_Payload),
    sMessageEncodingTest0277_ExpectedEncoding,
    sizeof(sMessageEncodingTest0277_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0278_EncryptionKey =
{
    {
        0xa9, 0x75, 0xb5, 0xbd, 0x87, 0xb5, 0xeb, 0xda, 0x73, 0xc3, 0x88, 0xe6, 0xc4, 0xdf, 0xd3, 0x92,
    }
};
static const uint8_t sMessageEncodingTest0278_Payload[] =
{
    0x3a, 0x1b, 0x5a, 0xec, 0x1e, 0x9a, 0x46, 0x81, 0xdd, 0x0c, 0xf4, 0xaf, 0x5e, 0xb4, 0x95, 0xa0,
};

static const uint8_t sMessageEncodingTest0278_ExpectedEncoding[] =
{
    0x20, 0x21, 0xa7, 0x76, 0x6e, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x2b,
    0xb8, 0x60, 0x11, 0x49, 0xda, 0x0a, 0x55, 0xf8, 0x42, 0xc5, 0x57, 0x35, 0xde, 0x78, 0x7b, 0x7c,
    0xc0, 0x83, 0x93, 0x08, 0xb0, 0xd8, 0xd1, 0x04,
};

static const MessageEncodingTestVector sMessageEncodingTest0278 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x7C6E76A7,
        kWeaveHeaderFlag_DestNodeId,
        0x2B9F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0278_EncryptionKey,
    sMessageEncodingTest0278_Payload,
    sizeof(sMessageEncodingTest0278_Payload),
    sMessageEncodingTest0278_ExpectedEncoding,
    sizeof(sMessageEncodingTest0278_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0279_EncryptionKey =
{
    {
        0x50, 0x18, 0x1c, 0x4e, 0x61, 0xf1, 0x9b, 0xf4, 0x8f, 0x0f, 0xf1, 0x63, 0x33, 0x2e, 0xe7, 0x37,
    }
};
static const uint8_t sMessageEncodingTest0279_Payload[] =
{
    0x41, 0xd2, 0x17, 0x12, 0x27, 0x70, 0x55, 0xdf, 0x5a, 0xda, 0x86, 0x5b, 0x45, 0xfb, 0x3f, 0xc7,
};

static const uint8_t sMessageEncodingTest0279_ExpectedEncoding[] =
{
    0x30, 0x21, 0x4e, 0xcb, 0x82, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x58, 0x2a,
    0x79, 0x5b, 0x4a, 0x2b, 0xb5, 0x12, 0xa4, 0xf8, 0x83, 0x96, 0xa4, 0x78, 0x97, 0x19, 0x0c, 0x94,
    0x7c, 0x48, 0x66, 0xfc, 0x85, 0xa6, 0x10, 0xb8, 0x52, 0xf3, 0x22, 0x08, 0xc7, 0x94, 0xa9, 0xeb,
};

static const MessageEncodingTestVector sMessageEncodingTest0279 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x0382CB4E,
        kWeaveHeaderFlag_DestNodeId,
        0x2A58,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0279_EncryptionKey,
    sMessageEncodingTest0279_Payload,
    sizeof(sMessageEncodingTest0279_Payload),
    sMessageEncodingTest0279_ExpectedEncoding,
    sizeof(sMessageEncodingTest0279_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0280_Payload[] =
{
    0xdc, 0x45, 0x1c, 0xd7, 0xce, 0x85, 0xaa, 0x5e, 0x12, 0xb4, 0x79, 0x1c, 0xc0, 0x2d, 0x91, 0x6d,
};

static const uint8_t sMessageEncodingTest0280_ExpectedEncoding[] =
{
    0x00, 0x26, 0x04, 0xc0, 0x34, 0x5e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdc, 0x45,
    0x1c, 0xd7, 0xce, 0x85, 0xaa, 0x5e, 0x12, 0xb4, 0x79, 0x1c, 0xc0, 0x2d, 0x91, 0x6d,
};

static const MessageEncodingTestVector sMessageEncodingTest0280 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x5E34C004,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0280_Payload,
    sizeof(sMessageEncodingTest0280_Payload),
    sMessageEncodingTest0280_ExpectedEncoding,
    sizeof(sMessageEncodingTest0280_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0281_EncryptionKey =
{
    {
        0x04, 0x7c, 0xe3, 0xf7, 0x10, 0xbd, 0x21, 0xfd, 0xd7, 0xf3, 0x95, 0xf7, 0x16, 0x3a, 0x0c, 0x8c,
    },
    {
        0xf7, 0x9b, 0x9d, 0x89, 0x68, 0x9d, 0x80, 0x6f, 0xa8, 0xb3, 0xc5, 0x1d, 0x70, 0x57, 0x75, 0xbb,
        0x23, 0xbb, 0xc1, 0x2b,
    }
};
static const uint8_t sMessageEncodingTest0281_Payload[] =
{
    0xc6, 0x92, 0xca, 0x7d, 0xec, 0x89, 0x47, 0x06, 0x96, 0x1b, 0x4b, 0x85, 0xbf, 0x0d, 0x8b, 0x8c,
};

static const uint8_t sMessageEncodingTest0281_ExpectedEncoding[] =
{
    0x10, 0x26, 0x6c, 0x96, 0xf9, 0x4e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x60, 0x2a,
    0x4e, 0x9e, 0x1d, 0xae, 0x94, 0xbb, 0xab, 0xd4, 0x69, 0xb7, 0xe8, 0xe5, 0xa1, 0x7e, 0x22, 0x0e,
    0xd9, 0x38, 0x07, 0xd0, 0xaa, 0x9b, 0xe0, 0xb9, 0x84, 0x73, 0xfe, 0x3b, 0xea, 0xde, 0xa0, 0xfa,
    0xbb, 0x3b, 0x5d, 0x81,
};

static const MessageEncodingTestVector sMessageEncodingTest0281 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x4EF9966C,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2A60,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0281_EncryptionKey,
    sMessageEncodingTest0281_Payload,
    sizeof(sMessageEncodingTest0281_Payload),
    sMessageEncodingTest0281_ExpectedEncoding,
    sizeof(sMessageEncodingTest0281_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0282_EncryptionKey =
{
    {
        0x44, 0xc6, 0x9a, 0x07, 0xdb, 0xf7, 0x6b, 0x1e, 0x82, 0x93, 0x06, 0xf9, 0xb2, 0x69, 0x21, 0x5e,
    }
};
static const uint8_t sMessageEncodingTest0282_Payload[] =
{
    0x8c, 0x9f, 0xfa, 0x5b, 0x9d, 0x38, 0xb2, 0x75, 0x77, 0xba, 0xf3, 0xa0, 0x1e, 0x90, 0xa8, 0x79,
};

static const uint8_t sMessageEncodingTest0282_ExpectedEncoding[] =
{
    0x20, 0x26, 0xdf, 0x02, 0x98, 0x73, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x32, 0x2c,
    0x94, 0x69, 0x63, 0x88, 0xe8, 0x58, 0x24, 0x74, 0x13, 0x44, 0x88, 0x57, 0xd4, 0x4a, 0xd0, 0x3f,
    0xc1, 0xe5, 0xa7, 0x9a, 0x49, 0x9b, 0xa5, 0x6c,
};

static const MessageEncodingTestVector sMessageEncodingTest0282 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x739802DF,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2C32,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0282_EncryptionKey,
    sMessageEncodingTest0282_Payload,
    sizeof(sMessageEncodingTest0282_Payload),
    sMessageEncodingTest0282_ExpectedEncoding,
    sizeof(sMessageEncodingTest0282_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0283_EncryptionKey =
{
    {
        0x6a, 0xf9, 0x91, 0x82, 0x17, 0xf5, 0x28, 0xa5, 0xa6, 0x37, 0x10, 0x51, 0x6e, 0x62, 0xef, 0x48,
    }
};
static const uint8_t sMessageEncodingTest0283_Payload[] =
{
    0x93, 0xe2, 0x24, 0x08, 0xe7, 0xf9, 0xa4, 0x5e, 0xea, 0xd4, 0x0c, 0x2e, 0x50, 0x3c, 0x0e, 0x9f,
};

static const uint8_t sMessageEncodingTest0283_ExpectedEncoding[] =
{
    0x30, 0x26, 0xd9, 0x7e, 0x23, 0x98, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa6, 0x21,
    0x74, 0x36, 0x31, 0x68, 0xe3, 0x0f, 0xbf, 0xc1, 0x88, 0xb6, 0x5f, 0x8e, 0x78, 0x21, 0x0c, 0x17,
    0xcb, 0x70, 0xd4, 0xb6, 0xa5, 0x6a, 0x11, 0x78, 0xa6, 0x79, 0x27, 0x57, 0x92, 0x07, 0x7e, 0xec,
};

static const MessageEncodingTestVector sMessageEncodingTest0283 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x98237ED9,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x21A6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0283_EncryptionKey,
    sMessageEncodingTest0283_Payload,
    sizeof(sMessageEncodingTest0283_Payload),
    sMessageEncodingTest0283_ExpectedEncoding,
    sizeof(sMessageEncodingTest0283_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0284_Payload[] =
{
    0x96, 0x99, 0xbe, 0x72, 0xf0, 0xe1, 0xa0, 0x20, 0xfc, 0xcd, 0xeb, 0x90, 0x91, 0x11, 0xf7, 0x2e,
};

static const uint8_t sMessageEncodingTest0284_ExpectedEncoding[] =
{
    0x00, 0x1a, 0xed, 0xa1, 0x0e, 0xae, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x96, 0x99,
    0xbe, 0x72, 0xf0, 0xe1, 0xa0, 0x20, 0xfc, 0xcd, 0xeb, 0x90, 0x91, 0x11, 0xf7, 0x2e,
};

static const MessageEncodingTestVector sMessageEncodingTest0284 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xAE0EA1ED,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0284_Payload,
    sizeof(sMessageEncodingTest0284_Payload),
    sMessageEncodingTest0284_ExpectedEncoding,
    sizeof(sMessageEncodingTest0284_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0285_EncryptionKey =
{
    {
        0x4a, 0x2b, 0x9e, 0xd1, 0x9b, 0x77, 0xc7, 0xad, 0x5a, 0x49, 0x44, 0xad, 0xd5, 0xe6, 0xeb, 0xb2,
    },
    {
        0xcb, 0x74, 0x6e, 0x32, 0x47, 0x56, 0x94, 0xdf, 0xe1, 0x70, 0x7d, 0xc3, 0xd9, 0x62, 0x33, 0x85,
        0x73, 0x57, 0xa4, 0x5d,
    }
};
static const uint8_t sMessageEncodingTest0285_Payload[] =
{
    0xaa, 0xfa, 0xe8, 0x18, 0x26, 0x66, 0x07, 0x5b, 0xaf, 0xd9, 0x33, 0x96, 0x69, 0x1b, 0x03, 0x91,
};

static const uint8_t sMessageEncodingTest0285_ExpectedEncoding[] =
{
    0x10, 0x1a, 0x44, 0x1d, 0x73, 0x53, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x85, 0x2e,
    0xfb, 0x3c, 0xa8, 0x6f, 0x76, 0x4a, 0x0a, 0x9c, 0xb1, 0x26, 0x70, 0x9d, 0x32, 0xd0, 0x7c, 0x36,
    0x8a, 0xc4, 0x3f, 0x39, 0x83, 0x70, 0x25, 0x30, 0x42, 0xd6, 0x2b, 0xdb, 0x2b, 0x12, 0xa7, 0x30,
    0x05, 0xc3, 0x78, 0xb8,
};

static const MessageEncodingTestVector sMessageEncodingTest0285 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x53731D44,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2E85,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0285_EncryptionKey,
    sMessageEncodingTest0285_Payload,
    sizeof(sMessageEncodingTest0285_Payload),
    sMessageEncodingTest0285_ExpectedEncoding,
    sizeof(sMessageEncodingTest0285_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0286_EncryptionKey =
{
    {
        0xa1, 0x6e, 0x28, 0x95, 0x80, 0x78, 0xae, 0x10, 0xce, 0x9e, 0xab, 0x5a, 0x0f, 0x21, 0xb9, 0xdd,
    }
};
static const uint8_t sMessageEncodingTest0286_Payload[] =
{
    0xba, 0x38, 0xf4, 0x86, 0x76, 0xd4, 0x2c, 0xf2, 0x20, 0xa4, 0x51, 0x81, 0x7c, 0x6d, 0xd3, 0xbf,
};

static const uint8_t sMessageEncodingTest0286_ExpectedEncoding[] =
{
    0x20, 0x1a, 0x91, 0x68, 0x52, 0x29, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x19, 0x2f,
    0x07, 0x72, 0x83, 0x94, 0xb5, 0x89, 0x0a, 0x76, 0x1a, 0xc0, 0x3f, 0x99, 0x9f, 0x1e, 0x5b, 0x72,
    0x35, 0x42, 0x1e, 0x96, 0xf0, 0x47, 0x2e, 0x13,
};

static const MessageEncodingTestVector sMessageEncodingTest0286 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x29526891,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2F19,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0286_EncryptionKey,
    sMessageEncodingTest0286_Payload,
    sizeof(sMessageEncodingTest0286_Payload),
    sMessageEncodingTest0286_ExpectedEncoding,
    sizeof(sMessageEncodingTest0286_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0287_EncryptionKey =
{
    {
        0x22, 0xb4, 0xd9, 0x83, 0xc6, 0x5e, 0x76, 0xfc, 0x5c, 0x7a, 0x2e, 0x72, 0x6b, 0x20, 0x53, 0xd2,
    }
};
static const uint8_t sMessageEncodingTest0287_Payload[] =
{
    0xa1, 0xdf, 0x57, 0xf2, 0x97, 0x9a, 0x08, 0xf6, 0xe4, 0x7a, 0xe4, 0x53, 0x80, 0x57, 0xb3, 0x6b,
};

static const uint8_t sMessageEncodingTest0287_ExpectedEncoding[] =
{
    0x30, 0x1a, 0x23, 0x25, 0x3a, 0x0c, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x68, 0x23,
    0xe7, 0xdb, 0x5c, 0xc3, 0xd3, 0xad, 0x8e, 0x1e, 0x20, 0x51, 0x43, 0x2e, 0x12, 0x2c, 0x6b, 0x4e,
    0x10, 0xbf, 0x0a, 0x00, 0x31, 0x7e, 0x86, 0xd1, 0xa4, 0x3c, 0x04, 0xe5, 0xec, 0x0c, 0x29, 0x37,
};

static const MessageEncodingTestVector sMessageEncodingTest0287 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x0C3A2523,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2368,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0287_EncryptionKey,
    sMessageEncodingTest0287_Payload,
    sizeof(sMessageEncodingTest0287_Payload),
    sMessageEncodingTest0287_ExpectedEncoding,
    sizeof(sMessageEncodingTest0287_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0288_Payload[] =
{
    0x48, 0xf5, 0x6c, 0x34, 0xbd, 0x67, 0xb3, 0xbb, 0x48, 0x66, 0x44, 0x04, 0x8f, 0xcc, 0x7f, 0x7e,
};

static const uint8_t sMessageEncodingTest0288_ExpectedEncoding[] =
{
    0x00, 0x2a, 0x4b, 0x27, 0x0c, 0x1f, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x48, 0xf5,
    0x6c, 0x34, 0xbd, 0x67, 0xb3, 0xbb, 0x48, 0x66, 0x44, 0x04, 0x8f, 0xcc, 0x7f, 0x7e,
};

static const MessageEncodingTestVector sMessageEncodingTest0288 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x1F0C274B,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0288_Payload,
    sizeof(sMessageEncodingTest0288_Payload),
    sMessageEncodingTest0288_ExpectedEncoding,
    sizeof(sMessageEncodingTest0288_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0289_EncryptionKey =
{
    {
        0xfe, 0x45, 0x4c, 0xe2, 0xcb, 0xaf, 0x46, 0x02, 0x9c, 0xb1, 0xa6, 0xe6, 0x2e, 0x2b, 0xbc, 0x2f,
    },
    {
        0x0f, 0xbc, 0x4c, 0x4c, 0x6b, 0xc1, 0x33, 0x6f, 0xac, 0x74, 0x6b, 0xb4, 0xe7, 0xab, 0x6b, 0x9c,
        0xf0, 0x66, 0x52, 0xde,
    }
};
static const uint8_t sMessageEncodingTest0289_Payload[] =
{
    0x35, 0x0e, 0xd7, 0xd1, 0xb7, 0xd7, 0x22, 0x46, 0x09, 0xb5, 0x0c, 0x16, 0xe4, 0xea, 0xcf, 0xc6,
};

static const uint8_t sMessageEncodingTest0289_ExpectedEncoding[] =
{
    0x10, 0x2a, 0x5a, 0xfd, 0x14, 0x5e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x87, 0x20,
    0x77, 0x3b, 0xe1, 0xb4, 0x77, 0xb4, 0x35, 0x47, 0xc0, 0x6a, 0x41, 0xcc, 0x45, 0xcc, 0x92, 0xed,
    0x47, 0x73, 0x0d, 0x79, 0x6c, 0x49, 0x76, 0x33, 0x33, 0xe2, 0x58, 0x7f, 0xb5, 0xed, 0xb0, 0x7e,
    0xbf, 0x69, 0x10, 0xb7,
};

static const MessageEncodingTestVector sMessageEncodingTest0289 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x5E14FD5A,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2087,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0289_EncryptionKey,
    sMessageEncodingTest0289_Payload,
    sizeof(sMessageEncodingTest0289_Payload),
    sMessageEncodingTest0289_ExpectedEncoding,
    sizeof(sMessageEncodingTest0289_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0290_EncryptionKey =
{
    {
        0xbb, 0xf3, 0xff, 0x62, 0x25, 0x1e, 0x07, 0x44, 0x4d, 0x0b, 0x65, 0x6f, 0xbe, 0xf7, 0xda, 0x28,
    }
};
static const uint8_t sMessageEncodingTest0290_Payload[] =
{
    0x22, 0x81, 0x5a, 0x44, 0x7a, 0x31, 0xfa, 0xdb, 0xf1, 0x5f, 0xef, 0x99, 0x2d, 0x09, 0xc6, 0x04,
};

static const uint8_t sMessageEncodingTest0290_ExpectedEncoding[] =
{
    0x20, 0x2a, 0xd6, 0x6f, 0x59, 0xe5, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xd1, 0x26,
    0x32, 0x9c, 0xbc, 0x37, 0x77, 0x4a, 0x29, 0x44, 0xf0, 0x3a, 0xc4, 0x70, 0xf8, 0x6d, 0x9d, 0xd2,
    0xf3, 0xee, 0x2d, 0xa2, 0xa9, 0x41, 0x36, 0xb5,
};

static const MessageEncodingTestVector sMessageEncodingTest0290 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xE5596FD6,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x26D1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0290_EncryptionKey,
    sMessageEncodingTest0290_Payload,
    sizeof(sMessageEncodingTest0290_Payload),
    sMessageEncodingTest0290_ExpectedEncoding,
    sizeof(sMessageEncodingTest0290_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0291_EncryptionKey =
{
    {
        0xd7, 0x6f, 0xfa, 0xba, 0xeb, 0x7c, 0x9f, 0x16, 0xbf, 0xfb, 0xdf, 0x1c, 0x18, 0x83, 0xe9, 0xba,
    }
};
static const uint8_t sMessageEncodingTest0291_Payload[] =
{
    0xbe, 0x92, 0x49, 0x0e, 0x7f, 0x1b, 0x88, 0x6a, 0xc0, 0x4c, 0x80, 0xfa, 0xa7, 0x7f, 0x98, 0xbd,
};

static const uint8_t sMessageEncodingTest0291_ExpectedEncoding[] =
{
    0x30, 0x2a, 0x49, 0x7c, 0xa4, 0x36, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x1f, 0x27,
    0x4b, 0x94, 0x96, 0x91, 0x7d, 0xb0, 0xe5, 0x52, 0x7f, 0x55, 0xd4, 0xc4, 0x9c, 0xab, 0x5e, 0xad,
    0xba, 0xe5, 0xdb, 0x76, 0xcf, 0x08, 0xab, 0x31, 0xef, 0xc7, 0xf2, 0xe8, 0x7f, 0xf2, 0xe6, 0x99,
};

static const MessageEncodingTestVector sMessageEncodingTest0291 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x36A47C49,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x271F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0291_EncryptionKey,
    sMessageEncodingTest0291_Payload,
    sizeof(sMessageEncodingTest0291_Payload),
    sMessageEncodingTest0291_ExpectedEncoding,
    sizeof(sMessageEncodingTest0291_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0292_Payload[] =
{
    0xe1, 0xb4, 0x89, 0x66, 0xf8, 0x3c, 0x86, 0xaf, 0x37, 0x52, 0x25, 0xa3, 0x68, 0x54, 0x72, 0x01,
};

static const uint8_t sMessageEncodingTest0292_ExpectedEncoding[] =
{
    0x00, 0x12, 0x6c, 0xc5, 0xfc, 0xbe, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe1, 0xb4,
    0x89, 0x66, 0xf8, 0x3c, 0x86, 0xaf, 0x37, 0x52, 0x25, 0xa3, 0x68, 0x54, 0x72, 0x01,
};

static const MessageEncodingTestVector sMessageEncodingTest0292 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xBEFCC56C,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0292_Payload,
    sizeof(sMessageEncodingTest0292_Payload),
    sMessageEncodingTest0292_ExpectedEncoding,
    sizeof(sMessageEncodingTest0292_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0293_EncryptionKey =
{
    {
        0xb8, 0xc1, 0x45, 0x37, 0x66, 0x14, 0x2c, 0x57, 0xdb, 0x66, 0xd9, 0x76, 0x7b, 0xfb, 0xc5, 0x17,
    },
    {
        0x95, 0x6f, 0xda, 0xaa, 0x1b, 0xf6, 0x58, 0x00, 0x5c, 0xd9, 0x94, 0x9e, 0x6b, 0x9d, 0x93, 0x1e,
        0x29, 0x74, 0xaf, 0x44,
    }
};
static const uint8_t sMessageEncodingTest0293_Payload[] =
{
    0x43, 0xcf, 0x83, 0x00, 0x0b, 0xab, 0x2c, 0x7b, 0x77, 0x8d, 0xff, 0x93, 0xfb, 0xcd, 0xab, 0x43,
};

static const uint8_t sMessageEncodingTest0293_ExpectedEncoding[] =
{
    0x10, 0x12, 0x17, 0x2b, 0x70, 0x97, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xca, 0x2f,
    0xa6, 0x88, 0xcb, 0xcc, 0xef, 0x13, 0x5e, 0xe7, 0xae, 0xa7, 0x76, 0x07, 0x51, 0x43, 0x14, 0xd0,
    0x3d, 0x29, 0xb8, 0xd4, 0x41, 0x9e, 0xc1, 0x16, 0x59, 0x44, 0xf1, 0xd8, 0x5e, 0x73, 0x3e, 0xfe,
    0x56, 0x56, 0x58, 0x7a,
};

static const MessageEncodingTestVector sMessageEncodingTest0293 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x97702B17,
        kWeaveHeaderFlag_SourceNodeId,
        0x2FCA,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0293_EncryptionKey,
    sMessageEncodingTest0293_Payload,
    sizeof(sMessageEncodingTest0293_Payload),
    sMessageEncodingTest0293_ExpectedEncoding,
    sizeof(sMessageEncodingTest0293_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0294_EncryptionKey =
{
    {
        0xa3, 0x1d, 0x3c, 0x33, 0x0d, 0xd9, 0x9a, 0xf0, 0xfe, 0x0d, 0x1b, 0xff, 0xd3, 0xcf, 0x7d, 0xa4,
    }
};
static const uint8_t sMessageEncodingTest0294_Payload[] =
{
    0x13, 0xe6, 0x4c, 0x69, 0x0f, 0xb3, 0x07, 0x20, 0x2f, 0x5e, 0xcc, 0xbb, 0xe6, 0xa6, 0x69, 0xd8,
};

static const uint8_t sMessageEncodingTest0294_ExpectedEncoding[] =
{
    0x20, 0x12, 0xfc, 0xde, 0x84, 0xd9, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x66, 0x20,
    0x55, 0x0b, 0x2d, 0xd2, 0x61, 0x12, 0x56, 0xd2, 0x23, 0x45, 0xa0, 0x27, 0xaa, 0x77, 0x1a, 0xa9,
    0xa7, 0x87, 0x5e, 0x4c, 0xf6, 0x3e, 0x3a, 0x32,
};

static const MessageEncodingTestVector sMessageEncodingTest0294 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xD984DEFC,
        kWeaveHeaderFlag_SourceNodeId,
        0x2066,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0294_EncryptionKey,
    sMessageEncodingTest0294_Payload,
    sizeof(sMessageEncodingTest0294_Payload),
    sMessageEncodingTest0294_ExpectedEncoding,
    sizeof(sMessageEncodingTest0294_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0295_EncryptionKey =
{
    {
        0x0a, 0xc3, 0xc4, 0x77, 0x7d, 0x29, 0x8c, 0x06, 0xd0, 0x34, 0x18, 0xa9, 0x68, 0x3c, 0x79, 0xb3,
    }
};
static const uint8_t sMessageEncodingTest0295_Payload[] =
{
    0x16, 0x38, 0x80, 0xc0, 0xb8, 0x12, 0x79, 0x69, 0xa6, 0x81, 0xba, 0x86, 0xe7, 0x98, 0x1d, 0x47,
};

static const uint8_t sMessageEncodingTest0295_ExpectedEncoding[] =
{
    0x30, 0x12, 0x4b, 0x77, 0x32, 0x2d, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x54, 0x20,
    0x5f, 0x1a, 0xa9, 0xcf, 0xf8, 0xee, 0xa2, 0x8c, 0xa8, 0x2f, 0x3b, 0xe6, 0xd6, 0xa5, 0x7f, 0xdd,
    0x42, 0xc8, 0x77, 0x26, 0x15, 0x14, 0x54, 0x85, 0xf7, 0x92, 0xd3, 0xdd, 0xfa, 0x5b, 0xd2, 0xb5,
};

static const MessageEncodingTestVector sMessageEncodingTest0295 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x2D32774B,
        kWeaveHeaderFlag_SourceNodeId,
        0x2054,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0295_EncryptionKey,
    sMessageEncodingTest0295_Payload,
    sizeof(sMessageEncodingTest0295_Payload),
    sMessageEncodingTest0295_ExpectedEncoding,
    sizeof(sMessageEncodingTest0295_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0296_Payload[] =
{
    0x2b, 0xd9, 0x00, 0x4d, 0xd5, 0x61, 0x81, 0xad, 0x3d, 0xa1, 0xb6, 0xd9, 0xe0, 0x1e, 0xcc, 0x76,
};

static const uint8_t sMessageEncodingTest0296_ExpectedEncoding[] =
{
    0x00, 0x22, 0x49, 0x87, 0x23, 0x22, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2b, 0xd9,
    0x00, 0x4d, 0xd5, 0x61, 0x81, 0xad, 0x3d, 0xa1, 0xb6, 0xd9, 0xe0, 0x1e, 0xcc, 0x76,
};

static const MessageEncodingTestVector sMessageEncodingTest0296 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x22238749,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0296_Payload,
    sizeof(sMessageEncodingTest0296_Payload),
    sMessageEncodingTest0296_ExpectedEncoding,
    sizeof(sMessageEncodingTest0296_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0297_EncryptionKey =
{
    {
        0x9c, 0x51, 0xdb, 0x05, 0x6f, 0x2e, 0xd9, 0xff, 0x9a, 0x04, 0x86, 0x3c, 0x15, 0x21, 0xf3, 0x7e,
    },
    {
        0x4b, 0xbf, 0x4e, 0xd5, 0x64, 0x8d, 0xde, 0x5a, 0x08, 0x5c, 0x40, 0x94, 0x7e, 0x66, 0xd3, 0xdc,
        0x82, 0x2e, 0x56, 0x19,
    }
};
static const uint8_t sMessageEncodingTest0297_Payload[] =
{
    0x27, 0xac, 0x81, 0x79, 0x54, 0xa6, 0x63, 0x6d, 0xb7, 0x9e, 0x07, 0x75, 0x96, 0xc1, 0x45, 0xc8,
};

static const uint8_t sMessageEncodingTest0297_ExpectedEncoding[] =
{
    0x10, 0x22, 0x82, 0xe3, 0x00, 0x1e, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2f, 0x25,
    0xc8, 0x24, 0xf4, 0x97, 0xb2, 0x8e, 0x5f, 0xdd, 0x45, 0x19, 0xf3, 0x3a, 0x36, 0x39, 0x16, 0x40,
    0xe4, 0xac, 0x2b, 0x6e, 0x4a, 0x1d, 0x5a, 0xe1, 0xa6, 0x8a, 0xfd, 0x2c, 0x2d, 0x66, 0xe4, 0xab,
    0x17, 0xb2, 0x96, 0x21,
};

static const MessageEncodingTestVector sMessageEncodingTest0297 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x1E00E382,
        kWeaveHeaderFlag_SourceNodeId,
        0x252F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0297_EncryptionKey,
    sMessageEncodingTest0297_Payload,
    sizeof(sMessageEncodingTest0297_Payload),
    sMessageEncodingTest0297_ExpectedEncoding,
    sizeof(sMessageEncodingTest0297_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0298_EncryptionKey =
{
    {
        0x3f, 0x7e, 0x48, 0x47, 0xc4, 0x2c, 0x26, 0x6f, 0x70, 0x91, 0xe5, 0x05, 0xe9, 0xa4, 0xc9, 0xac,
    }
};
static const uint8_t sMessageEncodingTest0298_Payload[] =
{
    0x0a, 0x8f, 0xf5, 0x22, 0xc1, 0x3b, 0xe2, 0x9a, 0x3f, 0x4a, 0x7f, 0x6b, 0x44, 0x04, 0x9d, 0xdb,
};

static const uint8_t sMessageEncodingTest0298_ExpectedEncoding[] =
{
    0x20, 0x22, 0xa6, 0x7c, 0x41, 0x98, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x53, 0x2e,
    0xe0, 0x1f, 0x67, 0x81, 0x6c, 0x71, 0x30, 0x21, 0x49, 0x42, 0x55, 0x61, 0x08, 0x7e, 0xd2, 0xae,
    0x1b, 0x5e, 0x30, 0x97, 0x4f, 0xdb, 0xbd, 0x42,
};

static const MessageEncodingTestVector sMessageEncodingTest0298 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x98417CA6,
        kWeaveHeaderFlag_SourceNodeId,
        0x2E53,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0298_EncryptionKey,
    sMessageEncodingTest0298_Payload,
    sizeof(sMessageEncodingTest0298_Payload),
    sMessageEncodingTest0298_ExpectedEncoding,
    sizeof(sMessageEncodingTest0298_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0299_EncryptionKey =
{
    {
        0x4e, 0xfa, 0xe4, 0x56, 0xad, 0xb6, 0x92, 0xba, 0x52, 0x6a, 0x26, 0xed, 0x47, 0x20, 0x42, 0x96,
    }
};
static const uint8_t sMessageEncodingTest0299_Payload[] =
{
    0xb1, 0x70, 0xe9, 0xa1, 0xc2, 0x4d, 0x34, 0xa5, 0xfc, 0xd2, 0x6b, 0x61, 0x17, 0x50, 0xbb, 0x52,
};

static const uint8_t sMessageEncodingTest0299_ExpectedEncoding[] =
{
    0x30, 0x22, 0x47, 0x97, 0x0b, 0xd2, 0x42, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe9, 0x26,
    0x36, 0xd7, 0x3e, 0x37, 0x88, 0xd0, 0x01, 0x93, 0x24, 0x6d, 0x71, 0xe3, 0x7c, 0xf0, 0xec, 0xb9,
    0xe9, 0xff, 0x06, 0x49, 0x75, 0x5a, 0x3d, 0x45, 0xb0, 0xd6, 0x7b, 0x46, 0xd0, 0x6c, 0x22, 0xd6,
};

static const MessageEncodingTestVector sMessageEncodingTest0299 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xD20B9747,
        kWeaveHeaderFlag_SourceNodeId,
        0x26E9,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0299_EncryptionKey,
    sMessageEncodingTest0299_Payload,
    sizeof(sMessageEncodingTest0299_Payload),
    sMessageEncodingTest0299_ExpectedEncoding,
    sizeof(sMessageEncodingTest0299_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0300_Payload[] =
{
    0x25, 0xf0, 0xa4, 0x40, 0x33, 0x21, 0x51, 0x86, 0x3f, 0xd4, 0xb7, 0xad, 0x32, 0x91, 0x6a, 0xad,
};

static const uint8_t sMessageEncodingTest0300_ExpectedEncoding[] =
{
    0x00, 0x24, 0x69, 0xf9, 0x4f, 0xb8, 0x25, 0xf0, 0xa4, 0x40, 0x33, 0x21, 0x51, 0x86, 0x3f, 0xd4,
    0xb7, 0xad, 0x32, 0x91, 0x6a, 0xad,
};

static const MessageEncodingTestVector sMessageEncodingTest0300 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xB84FF969,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0300_Payload,
    sizeof(sMessageEncodingTest0300_Payload),
    sMessageEncodingTest0300_ExpectedEncoding,
    sizeof(sMessageEncodingTest0300_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0301_EncryptionKey =
{
    {
        0xde, 0x8d, 0xca, 0xa7, 0xab, 0x0d, 0x66, 0x9e, 0x0a, 0x4a, 0x82, 0xe6, 0xcb, 0x03, 0xc2, 0x99,
    },
    {
        0xc2, 0xd9, 0x66, 0x49, 0x51, 0x4e, 0xe0, 0xf2, 0xb1, 0x8c, 0x4e, 0x34, 0x47, 0xd7, 0xe6, 0x77,
        0xe8, 0xaa, 0x40, 0x79,
    }
};
static const uint8_t sMessageEncodingTest0301_Payload[] =
{
    0xba, 0xa3, 0x2e, 0x69, 0x6c, 0xe3, 0x05, 0x4c, 0x72, 0xae, 0xc4, 0xb1, 0x5b, 0xdd, 0x05, 0xe2,
};

static const uint8_t sMessageEncodingTest0301_ExpectedEncoding[] =
{
    0x10, 0x24, 0x17, 0x0a, 0x8a, 0xd0, 0xcf, 0x26, 0xd4, 0xb8, 0x41, 0x55, 0xac, 0x14, 0x79, 0x73,
    0x46, 0x85, 0x79, 0x93, 0xc4, 0x06, 0x2b, 0xe9, 0x8d, 0x04, 0xf4, 0xe5, 0x78, 0x16, 0x3e, 0x13,
    0xfe, 0x74, 0xbd, 0x6c, 0xce, 0x33, 0x3d, 0x1e, 0xa9, 0xab, 0x59, 0x0f,
};

static const MessageEncodingTestVector sMessageEncodingTest0301 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xD08A0A17,
        kWeaveHeaderFlag_TunneledData,
        0x26CF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0301_EncryptionKey,
    sMessageEncodingTest0301_Payload,
    sizeof(sMessageEncodingTest0301_Payload),
    sMessageEncodingTest0301_ExpectedEncoding,
    sizeof(sMessageEncodingTest0301_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0302_EncryptionKey =
{
    {
        0xfb, 0xa8, 0xc1, 0xa9, 0xa9, 0x6b, 0xed, 0x7f, 0x7d, 0x19, 0x86, 0x37, 0x9a, 0xba, 0x7a, 0xee,
    }
};
static const uint8_t sMessageEncodingTest0302_Payload[] =
{
    0x84, 0x73, 0xce, 0xa1, 0xef, 0x8f, 0x84, 0x49, 0xe8, 0x56, 0xf4, 0x52, 0xe3, 0x42, 0x4f, 0xe8,
};

static const uint8_t sMessageEncodingTest0302_ExpectedEncoding[] =
{
    0x20, 0x24, 0x9f, 0xf0, 0xcb, 0x64, 0x6d, 0x2b, 0x82, 0x6f, 0x79, 0x96, 0xe5, 0x0c, 0xab, 0xc6,
    0x1a, 0x94, 0xda, 0x6a, 0x4d, 0xc1, 0x9e, 0x61, 0x55, 0xa5, 0xad, 0xc2, 0x55, 0xae, 0xd1, 0x90,
};

static const MessageEncodingTestVector sMessageEncodingTest0302 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x64CBF09F,
        kWeaveHeaderFlag_TunneledData,
        0x2B6D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0302_EncryptionKey,
    sMessageEncodingTest0302_Payload,
    sizeof(sMessageEncodingTest0302_Payload),
    sMessageEncodingTest0302_ExpectedEncoding,
    sizeof(sMessageEncodingTest0302_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0303_EncryptionKey =
{
    {
        0xfb, 0xc6, 0xd7, 0x51, 0x4e, 0xf7, 0x88, 0x93, 0xdc, 0xcb, 0x51, 0x46, 0xd5, 0x65, 0x0b, 0xcb,
    }
};
static const uint8_t sMessageEncodingTest0303_Payload[] =
{
    0xf8, 0x41, 0x39, 0xf7, 0x4d, 0x1e, 0xc9, 0xdc, 0xf9, 0x77, 0x41, 0x23, 0x38, 0x4e, 0x67, 0x80,
};

static const uint8_t sMessageEncodingTest0303_ExpectedEncoding[] =
{
    0x30, 0x24, 0xc2, 0xfe, 0x48, 0xb2, 0xe7, 0x2a, 0x30, 0x3b, 0x71, 0xce, 0xdf, 0xe2, 0xc8, 0xa4,
    0x19, 0x68, 0x1c, 0xdd, 0x10, 0x66, 0x63, 0x97, 0x27, 0x3d, 0xe3, 0xed, 0xf6, 0x36, 0xc5, 0x51,
    0x45, 0xb2, 0x9b, 0xd7, 0x11, 0xca, 0x1b, 0x9d,
};

static const MessageEncodingTestVector sMessageEncodingTest0303 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xB248FEC2,
        kWeaveHeaderFlag_TunneledData,
        0x2AE7,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0303_EncryptionKey,
    sMessageEncodingTest0303_Payload,
    sizeof(sMessageEncodingTest0303_Payload),
    sMessageEncodingTest0303_ExpectedEncoding,
    sizeof(sMessageEncodingTest0303_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0304_Payload[] =
{
    0x45, 0x18, 0x22, 0x4f, 0xbb, 0xc3, 0xa2, 0xbc, 0x7d, 0x78, 0xeb, 0xa3, 0x9c, 0x7b, 0x0d, 0x15,
};

static const uint8_t sMessageEncodingTest0304_ExpectedEncoding[] =
{
    0x00, 0x18, 0x8c, 0xd1, 0x08, 0xf2, 0x45, 0x18, 0x22, 0x4f, 0xbb, 0xc3, 0xa2, 0xbc, 0x7d, 0x78,
    0xeb, 0xa3, 0x9c, 0x7b, 0x0d, 0x15,
};

static const MessageEncodingTestVector sMessageEncodingTest0304 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xF208D18C,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0304_Payload,
    sizeof(sMessageEncodingTest0304_Payload),
    sMessageEncodingTest0304_ExpectedEncoding,
    sizeof(sMessageEncodingTest0304_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0305_EncryptionKey =
{
    {
        0x3f, 0x50, 0x66, 0x42, 0x64, 0x24, 0xbd, 0xc1, 0xac, 0xc7, 0x74, 0xc0, 0x34, 0x05, 0xa4, 0xf8,
    },
    {
        0x17, 0xbf, 0x5a, 0xde, 0xed, 0xa0, 0xac, 0xf0, 0x25, 0xff, 0xf7, 0x1b, 0xf7, 0x88, 0x2b, 0x20,
        0xd2, 0xea, 0x8f, 0x4c,
    }
};
static const uint8_t sMessageEncodingTest0305_Payload[] =
{
    0x28, 0x3c, 0x0e, 0x54, 0x32, 0xb8, 0xab, 0x7f, 0x75, 0x47, 0xcf, 0xb8, 0x43, 0xa8, 0x9e, 0xe9,
};

static const uint8_t sMessageEncodingTest0305_ExpectedEncoding[] =
{
    0x10, 0x18, 0x33, 0x7b, 0x30, 0xb6, 0x4f, 0x25, 0xb1, 0x15, 0x21, 0x34, 0x5c, 0x51, 0x92, 0xab,
    0x1d, 0xe9, 0xfd, 0x31, 0x19, 0xc1, 0x07, 0x5a, 0xd5, 0x95, 0x30, 0x0a, 0x61, 0x25, 0x48, 0xcc,
    0x5d, 0x84, 0x3c, 0x45, 0x73, 0xe0, 0x5f, 0xb9, 0x21, 0xf2, 0x91, 0x19,
};

static const MessageEncodingTestVector sMessageEncodingTest0305 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xB6307B33,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x254F,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0305_EncryptionKey,
    sMessageEncodingTest0305_Payload,
    sizeof(sMessageEncodingTest0305_Payload),
    sMessageEncodingTest0305_ExpectedEncoding,
    sizeof(sMessageEncodingTest0305_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0306_EncryptionKey =
{
    {
        0x57, 0x69, 0x7e, 0x1c, 0x64, 0x33, 0xc1, 0x52, 0xca, 0x35, 0xff, 0x04, 0x47, 0xa1, 0xb3, 0xf5,
    }
};
static const uint8_t sMessageEncodingTest0306_Payload[] =
{
    0xd8, 0x0f, 0x6f, 0x88, 0xe2, 0xc9, 0xf7, 0x9a, 0x29, 0x16, 0xdb, 0x07, 0x33, 0xdd, 0x06, 0xde,
};

static const uint8_t sMessageEncodingTest0306_ExpectedEncoding[] =
{
    0x20, 0x18, 0x67, 0x09, 0xe6, 0xe8, 0x3f, 0x22, 0x5b, 0x29, 0x68, 0x86, 0x06, 0xf1, 0x52, 0x5a,
    0xa7, 0xad, 0x13, 0xcd, 0xd2, 0x7b, 0x03, 0x6b, 0xe0, 0xc1, 0xd7, 0x4e, 0x7d, 0x69, 0x1d, 0xda,
};

static const MessageEncodingTestVector sMessageEncodingTest0306 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xE8E60967,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x223F,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0306_EncryptionKey,
    sMessageEncodingTest0306_Payload,
    sizeof(sMessageEncodingTest0306_Payload),
    sMessageEncodingTest0306_ExpectedEncoding,
    sizeof(sMessageEncodingTest0306_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0307_EncryptionKey =
{
    {
        0xaf, 0x5f, 0x10, 0x32, 0xe9, 0x29, 0x0d, 0x88, 0x3a, 0x1d, 0x6e, 0x13, 0x7f, 0x71, 0xfc, 0x49,
    }
};
static const uint8_t sMessageEncodingTest0307_Payload[] =
{
    0xff, 0x54, 0x55, 0x16, 0xf2, 0x5a, 0x87, 0x9b, 0x9b, 0x72, 0xb7, 0xcb, 0xae, 0x16, 0xd3, 0xdf,
};

static const uint8_t sMessageEncodingTest0307_ExpectedEncoding[] =
{
    0x30, 0x18, 0x0f, 0x64, 0xcc, 0x48, 0xa2, 0x28, 0x2f, 0x90, 0x0d, 0x27, 0x3b, 0x02, 0xce, 0x50,
    0xc7, 0xd4, 0xc8, 0x87, 0x69, 0xd4, 0xe4, 0x0a, 0x2e, 0x62, 0xcb, 0x44, 0xe3, 0x84, 0x23, 0x75,
    0x25, 0x40, 0xb4, 0x31, 0xb2, 0x4e, 0xb2, 0x0e,
};

static const MessageEncodingTestVector sMessageEncodingTest0307 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x48CC640F,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x28A2,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0307_EncryptionKey,
    sMessageEncodingTest0307_Payload,
    sizeof(sMessageEncodingTest0307_Payload),
    sMessageEncodingTest0307_ExpectedEncoding,
    sizeof(sMessageEncodingTest0307_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0308_Payload[] =
{
    0x0f, 0xc7, 0xcb, 0xe2, 0x7f, 0x81, 0x07, 0xb5, 0x4d, 0xc3, 0xb3, 0x02, 0x99, 0x06, 0xec, 0x82,
};

static const uint8_t sMessageEncodingTest0308_ExpectedEncoding[] =
{
    0x00, 0x28, 0x14, 0x19, 0x75, 0x42, 0x0f, 0xc7, 0xcb, 0xe2, 0x7f, 0x81, 0x07, 0xb5, 0x4d, 0xc3,
    0xb3, 0x02, 0x99, 0x06, 0xec, 0x82,
};

static const MessageEncodingTestVector sMessageEncodingTest0308 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x42751914,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0308_Payload,
    sizeof(sMessageEncodingTest0308_Payload),
    sMessageEncodingTest0308_ExpectedEncoding,
    sizeof(sMessageEncodingTest0308_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0309_EncryptionKey =
{
    {
        0xe0, 0x6d, 0xc5, 0x71, 0xd5, 0xd9, 0x00, 0x7e, 0x50, 0xe9, 0x5a, 0x32, 0x1e, 0xd9, 0x2a, 0xe5,
    },
    {
        0x80, 0x63, 0x2f, 0x74, 0x38, 0xad, 0x54, 0x0b, 0x2c, 0x44, 0xcd, 0x7a, 0x44, 0xc4, 0xa4, 0x18,
        0xaf, 0x1b, 0x6d, 0x0e,
    }
};
static const uint8_t sMessageEncodingTest0309_Payload[] =
{
    0xff, 0x6a, 0x9e, 0x24, 0x58, 0x6a, 0x3c, 0x8a, 0x36, 0x93, 0x20, 0xe1, 0xb5, 0x3c, 0x82, 0x86,
};

static const uint8_t sMessageEncodingTest0309_ExpectedEncoding[] =
{
    0x10, 0x28, 0x73, 0xe1, 0x6f, 0xbc, 0x0d, 0x24, 0x17, 0x1b, 0x61, 0xf5, 0x83, 0xe2, 0x8d, 0x5b,
    0x9d, 0x5a, 0x53, 0xda, 0x17, 0x0b, 0xab, 0xab, 0xf8, 0x07, 0x8c, 0x69, 0x19, 0x23, 0x3b, 0xfd,
    0x35, 0x11, 0x82, 0xa3, 0x2b, 0x0b, 0xeb, 0x6f, 0x53, 0xd1, 0xc6, 0x60,
};

static const MessageEncodingTestVector sMessageEncodingTest0309 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xBC6FE173,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x240D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0309_EncryptionKey,
    sMessageEncodingTest0309_Payload,
    sizeof(sMessageEncodingTest0309_Payload),
    sMessageEncodingTest0309_ExpectedEncoding,
    sizeof(sMessageEncodingTest0309_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0310_EncryptionKey =
{
    {
        0x4b, 0x5b, 0xb6, 0x57, 0x7c, 0xb9, 0xb6, 0xcb, 0xd7, 0xa0, 0x1e, 0x23, 0x90, 0x4a, 0x0d, 0xfd,
    }
};
static const uint8_t sMessageEncodingTest0310_Payload[] =
{
    0xdb, 0xcf, 0x4a, 0x5d, 0xfe, 0xa8, 0x8e, 0x3a, 0x2a, 0xd2, 0xa7, 0x80, 0x24, 0x68, 0x8b, 0x85,
};

static const uint8_t sMessageEncodingTest0310_ExpectedEncoding[] =
{
    0x20, 0x28, 0x3d, 0xe9, 0xe0, 0x1c, 0x4e, 0x2f, 0x28, 0xc3, 0x80, 0xef, 0xf0, 0x34, 0x71, 0x74,
    0xae, 0x79, 0x7b, 0x0e, 0x20, 0x33, 0x13, 0x20, 0x1d, 0x78, 0x55, 0x08, 0x98, 0x34, 0xb5, 0xdb,
};

static const MessageEncodingTestVector sMessageEncodingTest0310 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x1CE0E93D,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2F4E,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0310_EncryptionKey,
    sMessageEncodingTest0310_Payload,
    sizeof(sMessageEncodingTest0310_Payload),
    sMessageEncodingTest0310_ExpectedEncoding,
    sizeof(sMessageEncodingTest0310_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0311_EncryptionKey =
{
    {
        0x7a, 0x6c, 0x59, 0x59, 0x74, 0x19, 0xc8, 0x49, 0x6c, 0xb7, 0x84, 0x7e, 0xad, 0xd5, 0x13, 0x21,
    }
};
static const uint8_t sMessageEncodingTest0311_Payload[] =
{
    0x7d, 0x2a, 0x98, 0x97, 0x58, 0x8a, 0x7b, 0xc5, 0xa3, 0x54, 0x44, 0x79, 0x7c, 0x56, 0x7d, 0xf0,
};

static const uint8_t sMessageEncodingTest0311_ExpectedEncoding[] =
{
    0x30, 0x28, 0xd4, 0xa4, 0x92, 0xe2, 0x03, 0x2d, 0x78, 0x44, 0xfa, 0xb1, 0xf4, 0x47, 0xa7, 0xdf,
    0x5e, 0x4c, 0x7e, 0x88, 0x56, 0x69, 0xdb, 0x2b, 0x10, 0x8e, 0x7b, 0xea, 0xcc, 0x8a, 0xb5, 0x78,
    0xd5, 0x39, 0x7c, 0xa1, 0xe8, 0x83, 0x8d, 0xcb,
};

static const MessageEncodingTestVector sMessageEncodingTest0311 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xE292A4D4,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2D03,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0311_EncryptionKey,
    sMessageEncodingTest0311_Payload,
    sizeof(sMessageEncodingTest0311_Payload),
    sMessageEncodingTest0311_ExpectedEncoding,
    sizeof(sMessageEncodingTest0311_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0312_Payload[] =
{
    0xc3, 0x28, 0x08, 0xd2, 0x5a, 0x7f, 0x03, 0x90, 0xe3, 0xa0, 0x50, 0xc4, 0x08, 0x8a, 0x2b, 0x77,
};

static const uint8_t sMessageEncodingTest0312_ExpectedEncoding[] =
{
    0x00, 0x10, 0xed, 0x7b, 0x6a, 0x97, 0xc3, 0x28, 0x08, 0xd2, 0x5a, 0x7f, 0x03, 0x90, 0xe3, 0xa0,
    0x50, 0xc4, 0x08, 0x8a, 0x2b, 0x77,
};

static const MessageEncodingTestVector sMessageEncodingTest0312 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x976A7BED,
        0,
        0x0000,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0312_Payload,
    sizeof(sMessageEncodingTest0312_Payload),
    sMessageEncodingTest0312_ExpectedEncoding,
    sizeof(sMessageEncodingTest0312_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0313_EncryptionKey =
{
    {
        0xf6, 0xd7, 0xe3, 0x79, 0xea, 0xca, 0xd1, 0x0f, 0x68, 0xa8, 0x24, 0xf1, 0xc1, 0xc9, 0x9d, 0xb5,
    },
    {
        0xad, 0x5e, 0x24, 0x91, 0x03, 0xdb, 0x67, 0x85, 0x10, 0xb9, 0xd6, 0x13, 0x4b, 0xbe, 0x30, 0xe5,
        0x34, 0xd6, 0x32, 0xc7,
    }
};
static const uint8_t sMessageEncodingTest0313_Payload[] =
{
    0x75, 0x92, 0xcb, 0xf9, 0x79, 0x5f, 0xd8, 0xb1, 0x31, 0x4c, 0x31, 0x54, 0x89, 0x37, 0xc7, 0x1c,
};

static const uint8_t sMessageEncodingTest0313_ExpectedEncoding[] =
{
    0x10, 0x10, 0xcf, 0x41, 0xbf, 0xea, 0xcd, 0x2a, 0xd9, 0xe1, 0x07, 0x90, 0x12, 0xce, 0x11, 0xba,
    0xb8, 0x24, 0xd0, 0xa3, 0x15, 0xff, 0x65, 0x0e, 0x32, 0x88, 0x60, 0xe3, 0x39, 0xce, 0xc6, 0x30,
    0x28, 0x4c, 0xbe, 0x92, 0x64, 0x33, 0xdb, 0x61, 0x53, 0x4d, 0x4b, 0x67,
};

static const MessageEncodingTestVector sMessageEncodingTest0313 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xEABF41CF,
        0,
        0x2ACD,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0313_EncryptionKey,
    sMessageEncodingTest0313_Payload,
    sizeof(sMessageEncodingTest0313_Payload),
    sMessageEncodingTest0313_ExpectedEncoding,
    sizeof(sMessageEncodingTest0313_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0314_EncryptionKey =
{
    {
        0x9c, 0x25, 0x02, 0xaa, 0x3d, 0x27, 0x3a, 0x70, 0xf5, 0x06, 0xe5, 0x3a, 0x22, 0x20, 0x71, 0x5c,
    }
};
static const uint8_t sMessageEncodingTest0314_Payload[] =
{
    0x2b, 0x26, 0x7e, 0x62, 0x49, 0xc6, 0xa1, 0xa9, 0x76, 0xc2, 0x86, 0x51, 0xcc, 0x6f, 0xce, 0xf6,
};

static const uint8_t sMessageEncodingTest0314_ExpectedEncoding[] =
{
    0x20, 0x10, 0x0e, 0x82, 0xf4, 0x85, 0xcf, 0x27, 0x16, 0x19, 0xb0, 0x4c, 0xed, 0xa9, 0xee, 0x76,
    0x8c, 0x85, 0x38, 0xab, 0x04, 0xd7, 0xe8, 0x5b, 0x0b, 0xce, 0xb7, 0xc5, 0xad, 0x67, 0xd9, 0xe2,
};

static const MessageEncodingTestVector sMessageEncodingTest0314 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x85F4820E,
        0,
        0x27CF,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0314_EncryptionKey,
    sMessageEncodingTest0314_Payload,
    sizeof(sMessageEncodingTest0314_Payload),
    sMessageEncodingTest0314_ExpectedEncoding,
    sizeof(sMessageEncodingTest0314_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0315_EncryptionKey =
{
    {
        0x03, 0x52, 0x84, 0x45, 0x20, 0x1c, 0x4f, 0xec, 0x65, 0x96, 0x82, 0xe1, 0xb0, 0x12, 0x9d, 0x99,
    }
};
static const uint8_t sMessageEncodingTest0315_Payload[] =
{
    0x25, 0x9d, 0xe2, 0xc8, 0xb5, 0x40, 0x75, 0x4f, 0x56, 0x56, 0x83, 0x8a, 0x90, 0xeb, 0x5f, 0x6e,
};

static const uint8_t sMessageEncodingTest0315_ExpectedEncoding[] =
{
    0x30, 0x10, 0x47, 0xc3, 0x27, 0x8d, 0x68, 0x2a, 0x28, 0x00, 0x6c, 0xc1, 0x7a, 0x7d, 0x04, 0xa0,
    0x30, 0x0b, 0x62, 0xfd, 0x85, 0xea, 0x28, 0xc1, 0xf8, 0x42, 0x6c, 0xb6, 0xb6, 0xd2, 0x5a, 0xa2,
    0xdb, 0x7d, 0xf9, 0x13, 0xf9, 0x48, 0xe8, 0x37,
};

static const MessageEncodingTestVector sMessageEncodingTest0315 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x8D27C347,
        0,
        0x2A68,
        kWeaveMessageVersion_V1,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0315_EncryptionKey,
    sMessageEncodingTest0315_Payload,
    sizeof(sMessageEncodingTest0315_Payload),
    sMessageEncodingTest0315_ExpectedEncoding,
    sizeof(sMessageEncodingTest0315_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0316_Payload[] =
{
    0x04, 0x82, 0xdc, 0x04, 0xaa, 0x29, 0x03, 0xe9, 0xa9, 0xa1, 0xa6, 0x99, 0x46, 0x92, 0x0b, 0x8d,
};

static const uint8_t sMessageEncodingTest0316_ExpectedEncoding[] =
{
    0x00, 0x20, 0x74, 0x78, 0x37, 0x1b, 0x04, 0x82, 0xdc, 0x04, 0xaa, 0x29, 0x03, 0xe9, 0xa9, 0xa1,
    0xa6, 0x99, 0x46, 0x92, 0x0b, 0x8d,
};

static const MessageEncodingTestVector sMessageEncodingTest0316 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0x1B377874,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0316_Payload,
    sizeof(sMessageEncodingTest0316_Payload),
    sMessageEncodingTest0316_ExpectedEncoding,
    sizeof(sMessageEncodingTest0316_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0317_EncryptionKey =
{
    {
        0xca, 0xe5, 0x8c, 0xd2, 0x6a, 0x18, 0x73, 0x2d, 0xfa, 0x2d, 0xbb, 0x64, 0x63, 0x29, 0x17, 0x5d,
    },
    {
        0x41, 0xb9, 0xb4, 0xcd, 0x30, 0xa7, 0x7d, 0xf0, 0x6a, 0xeb, 0xa8, 0x09, 0xc2, 0xed, 0x28, 0x93,
        0x9d, 0xbd, 0x37, 0xe4,
    }
};
static const uint8_t sMessageEncodingTest0317_Payload[] =
{
    0xf1, 0x3f, 0x13, 0x5c, 0xa5, 0xfe, 0x95, 0x47, 0x93, 0xe6, 0xfc, 0x00, 0x3d, 0x15, 0x92, 0xa7,
};

static const uint8_t sMessageEncodingTest0317_ExpectedEncoding[] =
{
    0x10, 0x20, 0x46, 0xbe, 0xe2, 0xa3, 0x7b, 0x2e, 0xd7, 0xe0, 0x36, 0x4f, 0x8a, 0xf0, 0x42, 0x8b,
    0x67, 0x2a, 0xc9, 0xb8, 0x5a, 0xb4, 0x69, 0x91, 0x60, 0xef, 0xa7, 0xce, 0x4f, 0x6e, 0xe5, 0x1c,
    0x3a, 0x1a, 0xa2, 0xfa, 0x1c, 0x85, 0xab, 0xe0, 0x61, 0x4a, 0x8d, 0x43,
};

static const MessageEncodingTestVector sMessageEncodingTest0317 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xA3E2BE46,
        0,
        0x2E7B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0317_EncryptionKey,
    sMessageEncodingTest0317_Payload,
    sizeof(sMessageEncodingTest0317_Payload),
    sMessageEncodingTest0317_ExpectedEncoding,
    sizeof(sMessageEncodingTest0317_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0318_EncryptionKey =
{
    {
        0x4e, 0xf5, 0x5d, 0x8d, 0xa4, 0x98, 0x2d, 0x3f, 0xa1, 0x06, 0x39, 0x7a, 0x39, 0xd5, 0x90, 0x0d,
    }
};
static const uint8_t sMessageEncodingTest0318_Payload[] =
{
    0xcb, 0xf3, 0x3d, 0x3a, 0x59, 0x3c, 0x7a, 0x14, 0x44, 0xab, 0x74, 0x6f, 0x82, 0x51, 0x76, 0x0e,
};

static const uint8_t sMessageEncodingTest0318_ExpectedEncoding[] =
{
    0x20, 0x20, 0x13, 0x61, 0x53, 0xbe, 0xa4, 0x24, 0x65, 0x87, 0xd3, 0xb0, 0xb2, 0x7a, 0x10, 0x11,
    0xd7, 0x4e, 0x9d, 0x0a, 0x82, 0x66, 0x86, 0xa2, 0x8c, 0xa3, 0x4e, 0x85, 0xac, 0x86, 0xe8, 0x67,
};

static const MessageEncodingTestVector sMessageEncodingTest0318 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xBE536113,
        0,
        0x24A4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0318_EncryptionKey,
    sMessageEncodingTest0318_Payload,
    sizeof(sMessageEncodingTest0318_Payload),
    sMessageEncodingTest0318_ExpectedEncoding,
    sizeof(sMessageEncodingTest0318_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0319_EncryptionKey =
{
    {
        0x21, 0x87, 0xa1, 0x61, 0x3d, 0xf4, 0xbf, 0x88, 0x0a, 0x5e, 0x36, 0x9c, 0xe8, 0x2c, 0xdb, 0xef,
    }
};
static const uint8_t sMessageEncodingTest0319_Payload[] =
{
    0x57, 0x8b, 0x13, 0xae, 0xee, 0x5f, 0xe4, 0x66, 0x3e, 0x37, 0x13, 0x13, 0x5a, 0x29, 0xaf, 0xc8,
};

static const uint8_t sMessageEncodingTest0319_ExpectedEncoding[] =
{
    0x30, 0x20, 0x1f, 0x1d, 0x1c, 0xd3, 0xe4, 0x2b, 0xf4, 0x8e, 0xad, 0xeb, 0x57, 0x30, 0xf8, 0xc3,
    0x4b, 0x7c, 0x6a, 0x2c, 0x45, 0x41, 0x64, 0xdc, 0x05, 0x3c, 0x5a, 0x4b, 0x3e, 0xaa, 0x33, 0xcf,
    0x3f, 0xde, 0x91, 0x0b, 0x82, 0x9c, 0xb7, 0xa3,
};

static const MessageEncodingTestVector sMessageEncodingTest0319 =
{
    {
        0x18B4300000000042,
        0xFFFFFFFFFFFFFFFF,
        0xD31C1D1F,
        0,
        0x2BE4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0319_EncryptionKey,
    sMessageEncodingTest0319_Payload,
    sizeof(sMessageEncodingTest0319_Payload),
    sMessageEncodingTest0319_ExpectedEncoding,
    sizeof(sMessageEncodingTest0319_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0320_EncryptionKey =
{
    {
        0x25, 0xfb, 0xb3, 0xf5, 0x62, 0x9f, 0xe9, 0xf1, 0x71, 0x71, 0x9f, 0x7c, 0x7c, 0x32, 0x5c, 0x81,
    },
    {
        0x5d, 0x22, 0xaf, 0xae, 0xa4, 0x7e, 0x20, 0x37, 0x07, 0x31, 0xe3, 0x63, 0x53, 0xd4, 0xd8, 0x2a,
        0x60, 0x27, 0x48, 0xe9,
    }
};
static const uint8_t sMessageEncodingTest0320_Payload[] =
{
    0xe7, 0x29, 0xed, 0x26, 0x90, 0x41, 0x8e, 0x5f, 0x3b, 0x43, 0x0e, 0x86, 0x38, 0xb3, 0xca, 0x06,
};

static const uint8_t sMessageEncodingTest0320_ExpectedEncoding[] =
{
    0x10, 0x20, 0x37, 0xf4, 0x36, 0xc7, 0x01, 0x20, 0x6a, 0x79, 0xeb, 0x71, 0x25, 0x87, 0x70, 0xa5,
    0x97, 0xe1, 0x92, 0x09, 0x25, 0x4e, 0xa8, 0x96, 0x3a, 0x51, 0xf1, 0x12, 0x84, 0xe4, 0x43, 0xd8,
    0xfd, 0xaa, 0x2d, 0x3a, 0x4c, 0xa7, 0x5f, 0xaa, 0x23, 0x00, 0x12, 0x73,
};

static const MessageEncodingTestVector sMessageEncodingTest0320 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xC736F437,
        0,
        0x2001,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0320_EncryptionKey,
    sMessageEncodingTest0320_Payload,
    sizeof(sMessageEncodingTest0320_Payload),
    sMessageEncodingTest0320_ExpectedEncoding,
    sizeof(sMessageEncodingTest0320_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0321_EncryptionKey =
{
    {
        0xd4, 0xfe, 0xad, 0x48, 0xf7, 0xb9, 0x84, 0x16, 0x34, 0x56, 0xd9, 0x1d, 0xce, 0x76, 0x8f, 0x49,
    }
};
static const uint8_t sMessageEncodingTest0321_Payload[] =
{
    0x71, 0xca, 0xb1, 0xdc, 0x93, 0x52, 0x1f, 0xe0, 0x23, 0x8f, 0x8c, 0x5c, 0x6c, 0x1b, 0x2f, 0xa9,
};

static const uint8_t sMessageEncodingTest0321_ExpectedEncoding[] =
{
    0x20, 0x20, 0x72, 0xce, 0xc3, 0x63, 0x01, 0x20, 0x36, 0x14, 0xa7, 0xb5, 0xd7, 0x52, 0x2b, 0xe0,
    0xfe, 0x52, 0x49, 0x46, 0x8b, 0x19, 0xd2, 0xbd, 0x0f, 0xd2, 0xa9, 0x77, 0x2a, 0x64, 0xa2, 0x3f,
};

static const MessageEncodingTestVector sMessageEncodingTest0321 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x63C3CE72,
        0,
        0x2001,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0321_EncryptionKey,
    sMessageEncodingTest0321_Payload,
    sizeof(sMessageEncodingTest0321_Payload),
    sMessageEncodingTest0321_ExpectedEncoding,
    sizeof(sMessageEncodingTest0321_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0322_EncryptionKey =
{
    {
        0x1c, 0x48, 0x06, 0x8b, 0x85, 0x9f, 0x6a, 0xd5, 0x52, 0xf3, 0xa0, 0x80, 0xb6, 0xff, 0x6b, 0x20,
    }
};
static const uint8_t sMessageEncodingTest0322_Payload[] =
{
    0x86, 0x6d, 0x6c, 0x88, 0xf6, 0x39, 0x37, 0xfd, 0x8c, 0x34, 0x62, 0xd4, 0x1b, 0x72, 0x43, 0x49,
};

static const uint8_t sMessageEncodingTest0322_ExpectedEncoding[] =
{
    0x30, 0x20, 0xe7, 0x74, 0x62, 0xa9, 0x01, 0x20, 0xac, 0xac, 0x08, 0xb0, 0x99, 0x34, 0x5d, 0xd7,
    0xf1, 0x55, 0x2e, 0x8a, 0xdf, 0x66, 0xaf, 0x31, 0xcc, 0x05, 0x4f, 0x7f, 0x4f, 0xed, 0xb9, 0xb7,
    0x59, 0x25, 0x54, 0x09, 0x39, 0x72, 0x3b, 0x1c,
};

static const MessageEncodingTestVector sMessageEncodingTest0322 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA96274E7,
        0,
        0x2001,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0322_EncryptionKey,
    sMessageEncodingTest0322_Payload,
    sizeof(sMessageEncodingTest0322_Payload),
    sMessageEncodingTest0322_ExpectedEncoding,
    sizeof(sMessageEncodingTest0322_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0323_EncryptionKey =
{
    {
        0x28, 0xdd, 0x15, 0x2f, 0x78, 0x2c, 0x02, 0xa2, 0x55, 0x24, 0xf7, 0x69, 0x60, 0x65, 0xda, 0x4d,
    },
    {
        0x8e, 0x47, 0x30, 0xe7, 0xd4, 0xbd, 0xb9, 0xc1, 0xc7, 0x09, 0x00, 0x95, 0xcf, 0x3c, 0x00, 0xfa,
        0xb1, 0x2a, 0x5d, 0xbe,
    }
};
static const uint8_t sMessageEncodingTest0323_Payload[] =
{
    0xef, 0x2f, 0x33, 0xb7, 0xfa, 0x1d, 0xac, 0xc8, 0x06, 0xf4, 0xa7, 0xab, 0xf5, 0xd2, 0xeb, 0xa8,
};

static const uint8_t sMessageEncodingTest0323_ExpectedEncoding[] =
{
    0x10, 0x20, 0x21, 0x43, 0x03, 0x7f, 0x10, 0x20, 0x0a, 0x4f, 0x59, 0x53, 0x0b, 0xd8, 0x33, 0x44,
    0x29, 0x90, 0x5b, 0xd3, 0x53, 0xe4, 0x24, 0xbb, 0x30, 0x5e, 0x10, 0x05, 0xf8, 0xae, 0xae, 0x4a,
    0x22, 0x15, 0x13, 0x59, 0xbe, 0x46, 0x5e, 0xbf, 0x7c, 0x8f, 0x3b, 0x6b,
};

static const MessageEncodingTestVector sMessageEncodingTest0323 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7F034321,
        0,
        0x2010,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0323_EncryptionKey,
    sMessageEncodingTest0323_Payload,
    sizeof(sMessageEncodingTest0323_Payload),
    sMessageEncodingTest0323_ExpectedEncoding,
    sizeof(sMessageEncodingTest0323_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0324_EncryptionKey =
{
    {
        0x17, 0x9a, 0x92, 0x16, 0x28, 0x9a, 0xfa, 0xcc, 0x54, 0x0b, 0x83, 0x43, 0x75, 0x46, 0xdb, 0x2c,
    }
};
static const uint8_t sMessageEncodingTest0324_Payload[] =
{
    0x58, 0xb2, 0x6a, 0x83, 0xed, 0xa0, 0x15, 0x81, 0x9d, 0x18, 0xce, 0x42, 0x24, 0x0d, 0x6a, 0x40,
};

static const uint8_t sMessageEncodingTest0324_ExpectedEncoding[] =
{
    0x20, 0x20, 0x38, 0x54, 0xed, 0x64, 0x10, 0x20, 0x85, 0x18, 0xcc, 0xd3, 0xaf, 0xd0, 0x9c, 0xae,
    0x48, 0xd6, 0x37, 0xda, 0x0a, 0x5d, 0x16, 0xf6, 0xb0, 0x6d, 0xa0, 0x2a, 0xd7, 0x88, 0x23, 0xc5,
};

static const MessageEncodingTestVector sMessageEncodingTest0324 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x64ED5438,
        0,
        0x2010,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0324_EncryptionKey,
    sMessageEncodingTest0324_Payload,
    sizeof(sMessageEncodingTest0324_Payload),
    sMessageEncodingTest0324_ExpectedEncoding,
    sizeof(sMessageEncodingTest0324_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0325_EncryptionKey =
{
    {
        0xca, 0x72, 0x1a, 0xf3, 0x1b, 0x6f, 0xd2, 0xcc, 0x38, 0xde, 0x7e, 0x3b, 0x09, 0x1c, 0xbd, 0x92,
    }
};
static const uint8_t sMessageEncodingTest0325_Payload[] =
{
    0xb0, 0x3d, 0x9c, 0x96, 0x82, 0xb7, 0xd2, 0x0b, 0x9f, 0xd7, 0xb5, 0x0b, 0xcc, 0xcc, 0x05, 0x4a,
};

static const uint8_t sMessageEncodingTest0325_ExpectedEncoding[] =
{
    0x30, 0x20, 0x22, 0x93, 0x25, 0x9c, 0x10, 0x20, 0xd6, 0xa1, 0x91, 0x32, 0xe0, 0xbd, 0x30, 0x56,
    0x76, 0x90, 0xd4, 0x68, 0x42, 0x0c, 0xe9, 0xfa, 0xe6, 0x15, 0x03, 0x34, 0xdc, 0x3a, 0x27, 0x39,
    0xdd, 0x9f, 0x3d, 0xac, 0xdf, 0x87, 0x01, 0xe9,
};

static const MessageEncodingTestVector sMessageEncodingTest0325 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x9C259322,
        0,
        0x2010,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0325_EncryptionKey,
    sMessageEncodingTest0325_Payload,
    sizeof(sMessageEncodingTest0325_Payload),
    sMessageEncodingTest0325_ExpectedEncoding,
    sizeof(sMessageEncodingTest0325_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0326_EncryptionKey =
{
    {
        0xc5, 0xb9, 0x4d, 0xa9, 0x85, 0xa8, 0xf8, 0x85, 0x52, 0x51, 0xe1, 0x9d, 0x76, 0xfc, 0x75, 0xe2,
    },
    {
        0xb1, 0x91, 0x95, 0x87, 0xd5, 0x25, 0x9d, 0xc5, 0xf5, 0x9b, 0x70, 0xc9, 0x12, 0xf4, 0x6a, 0xc4,
        0x21, 0xa1, 0xda, 0xfc,
    }
};
static const uint8_t sMessageEncodingTest0326_Payload[] =
{
    0x39, 0x75, 0xc3, 0xf3, 0x01, 0x12, 0x85, 0x67, 0x03, 0x2a, 0x27, 0xdb, 0x3b, 0xdd, 0x9b, 0xc3,
};

static const uint8_t sMessageEncodingTest0326_ExpectedEncoding[] =
{
    0x10, 0x20, 0x99, 0x36, 0xd1, 0xa8, 0x00, 0x28, 0x56, 0x64, 0x60, 0xd9, 0x3b, 0x94, 0x7a, 0xb4,
    0x5a, 0x87, 0xe0, 0x1f, 0x67, 0x5f, 0x32, 0x1d, 0x77, 0x82, 0x24, 0x90, 0xb5, 0xab, 0x24, 0x67,
    0xd6, 0xdc, 0xff, 0xf2, 0x3a, 0x3a, 0x68, 0x4e, 0xa8, 0xce, 0x7a, 0xa1,
};

static const MessageEncodingTestVector sMessageEncodingTest0326 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA8D13699,
        0,
        0x2800,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0326_EncryptionKey,
    sMessageEncodingTest0326_Payload,
    sizeof(sMessageEncodingTest0326_Payload),
    sMessageEncodingTest0326_ExpectedEncoding,
    sizeof(sMessageEncodingTest0326_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0327_EncryptionKey =
{
    {
        0x67, 0xd1, 0xd0, 0x2c, 0x8c, 0x89, 0xd3, 0x2d, 0xcb, 0x7a, 0x05, 0x3b, 0xb1, 0xe5, 0x6f, 0x70,
    }
};
static const uint8_t sMessageEncodingTest0327_Payload[] =
{
    0x64, 0x19, 0x53, 0xce, 0xdb, 0xf7, 0xf9, 0x5a, 0x1f, 0x07, 0x03, 0x0e, 0x50, 0x4b, 0x22, 0xa2,
};

static const uint8_t sMessageEncodingTest0327_ExpectedEncoding[] =
{
    0x20, 0x20, 0xfe, 0x18, 0xf8, 0xc6, 0x00, 0x28, 0xe4, 0x66, 0xaa, 0x99, 0xd4, 0xaf, 0x90, 0x01,
    0xb4, 0x00, 0xde, 0x40, 0xb6, 0xe6, 0xad, 0x94, 0x2c, 0x70, 0x4f, 0x90, 0x01, 0x4c, 0xc1, 0x8e,
};

static const MessageEncodingTestVector sMessageEncodingTest0327 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xC6F818FE,
        0,
        0x2800,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0327_EncryptionKey,
    sMessageEncodingTest0327_Payload,
    sizeof(sMessageEncodingTest0327_Payload),
    sMessageEncodingTest0327_ExpectedEncoding,
    sizeof(sMessageEncodingTest0327_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0328_EncryptionKey =
{
    {
        0xcc, 0xc4, 0x17, 0x4c, 0x58, 0xfd, 0xfe, 0xff, 0x77, 0x23, 0x65, 0x18, 0x05, 0x88, 0xe4, 0x0d,
    }
};
static const uint8_t sMessageEncodingTest0328_Payload[] =
{
    0x82, 0x1a, 0xc9, 0x75, 0x79, 0x74, 0x0b, 0x5d, 0x67, 0xc9, 0x36, 0x9b, 0x70, 0x1c, 0xc5, 0x95,
};

static const uint8_t sMessageEncodingTest0328_ExpectedEncoding[] =
{
    0x30, 0x20, 0xbe, 0x72, 0x03, 0x95, 0x00, 0x28, 0xaf, 0x55, 0xb7, 0x19, 0xa4, 0x2e, 0x14, 0x0b,
    0xaf, 0x76, 0x91, 0x12, 0x9a, 0x80, 0xdf, 0x19, 0x89, 0xfd, 0x87, 0x5e, 0x4e, 0x41, 0x03, 0x25,
    0xbd, 0x5b, 0x0e, 0x59, 0x2f, 0xbf, 0xd4, 0xf1,
};

static const MessageEncodingTestVector sMessageEncodingTest0328 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x950372BE,
        0,
        0x2800,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0328_EncryptionKey,
    sMessageEncodingTest0328_Payload,
    sizeof(sMessageEncodingTest0328_Payload),
    sMessageEncodingTest0328_ExpectedEncoding,
    sizeof(sMessageEncodingTest0328_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0329_EncryptionKey =
{
    {
        0xbc, 0x66, 0xeb, 0x19, 0x61, 0x6f, 0xb8, 0xf5, 0x58, 0x8a, 0xa0, 0xfb, 0x90, 0x5a, 0xb6, 0xae,
    },
    {
        0xda, 0x51, 0x65, 0xd1, 0x57, 0xb3, 0xe2, 0x1c, 0xec, 0x0a, 0xfb, 0x58, 0x5e, 0x71, 0xfd, 0x88,
        0x83, 0x19, 0xaa, 0x24,
    }
};
static const uint8_t sMessageEncodingTest0329_Payload[] =
{
    0x8b, 0xeb, 0xd5, 0x81, 0x3c, 0xf2, 0x29, 0x13, 0xb4, 0x8f, 0x13, 0xb6, 0xd0, 0xdf, 0x1c, 0x8b,
};

static const uint8_t sMessageEncodingTest0329_ExpectedEncoding[] =
{
    0x10, 0x20, 0xec, 0x0b, 0x16, 0x57, 0xff, 0x28, 0x01, 0x5f, 0x8e, 0xba, 0x09, 0x8a, 0xf5, 0x64,
    0x72, 0x94, 0xc1, 0x84, 0x96, 0x63, 0xa2, 0x3c, 0x9e, 0x7f, 0xd7, 0x1d, 0xda, 0xd2, 0x16, 0x99,
    0xaf, 0xff, 0xb8, 0x2c, 0x72, 0x18, 0x45, 0xd0, 0xc3, 0xc9, 0xb7, 0xea,
};

static const MessageEncodingTestVector sMessageEncodingTest0329 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x57160BEC,
        0,
        0x28FF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0329_EncryptionKey,
    sMessageEncodingTest0329_Payload,
    sizeof(sMessageEncodingTest0329_Payload),
    sMessageEncodingTest0329_ExpectedEncoding,
    sizeof(sMessageEncodingTest0329_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0330_EncryptionKey =
{
    {
        0xd4, 0xb3, 0xfa, 0xe6, 0x48, 0x83, 0x9d, 0xd4, 0x93, 0x6e, 0x88, 0x92, 0x3c, 0xd8, 0xa3, 0x58,
    }
};
static const uint8_t sMessageEncodingTest0330_Payload[] =
{
    0x50, 0x28, 0x73, 0xca, 0x5a, 0x59, 0x7b, 0xaf, 0xf6, 0xf7, 0x57, 0xce, 0x49, 0x92, 0xfe, 0xe5,
};

static const uint8_t sMessageEncodingTest0330_ExpectedEncoding[] =
{
    0x20, 0x20, 0x46, 0xfc, 0xab, 0x97, 0xff, 0x28, 0x4e, 0xae, 0x03, 0x0a, 0x18, 0xe7, 0xe3, 0x9e,
    0x62, 0xe1, 0xfc, 0x4f, 0x87, 0x2d, 0xd1, 0xbc, 0x34, 0x94, 0x07, 0x3e, 0x66, 0xc4, 0x14, 0x83,
};

static const MessageEncodingTestVector sMessageEncodingTest0330 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x97ABFC46,
        0,
        0x28FF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0330_EncryptionKey,
    sMessageEncodingTest0330_Payload,
    sizeof(sMessageEncodingTest0330_Payload),
    sMessageEncodingTest0330_ExpectedEncoding,
    sizeof(sMessageEncodingTest0330_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0331_EncryptionKey =
{
    {
        0xab, 0x47, 0xe8, 0x1b, 0x8b, 0xad, 0xda, 0x64, 0x09, 0x32, 0x6e, 0xc1, 0x1d, 0x08, 0xdf, 0xaf,
    }
};
static const uint8_t sMessageEncodingTest0331_Payload[] =
{
    0x09, 0x19, 0x97, 0xe5, 0x0c, 0x95, 0x07, 0x8e, 0xff, 0x9c, 0x9a, 0x97, 0xaa, 0x2a, 0x95, 0xa9,
};

static const uint8_t sMessageEncodingTest0331_ExpectedEncoding[] =
{
    0x30, 0x20, 0x37, 0x2c, 0x85, 0xa0, 0xff, 0x28, 0x92, 0xdc, 0x2e, 0xeb, 0xfd, 0x4b, 0xef, 0x3f,
    0x0c, 0x39, 0xcc, 0x52, 0x4c, 0x06, 0x38, 0x27, 0xb9, 0xcc, 0xe3, 0x0d, 0x52, 0x97, 0xcb, 0x33,
    0xf8, 0xd4, 0x58, 0x14, 0x52, 0x7e, 0x08, 0x32,
};

static const MessageEncodingTestVector sMessageEncodingTest0331 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA0852C37,
        0,
        0x28FF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0331_EncryptionKey,
    sMessageEncodingTest0331_Payload,
    sizeof(sMessageEncodingTest0331_Payload),
    sMessageEncodingTest0331_ExpectedEncoding,
    sizeof(sMessageEncodingTest0331_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0332_EncryptionKey =
{
    {
        0x94, 0xdc, 0x32, 0x8e, 0xbb, 0x30, 0x2d, 0x6b, 0x92, 0x45, 0x5a, 0x4d, 0x2e, 0xd7, 0x61, 0xf0,
    },
    {
        0x4f, 0x01, 0x0a, 0xb1, 0x4f, 0x3b, 0xf9, 0xac, 0x20, 0x65, 0x30, 0x1d, 0xea, 0x83, 0x79, 0x10,
        0x95, 0xb2, 0x8b, 0x4b,
    }
};
static const uint8_t sMessageEncodingTest0332_Payload[] =
{
    0xa3, 0x19, 0xaa, 0x56, 0x4c, 0x2a, 0x3a, 0xb0, 0x01, 0x64, 0xbd, 0x0c, 0x24, 0x18, 0xc1, 0x96,
};

static const uint8_t sMessageEncodingTest0332_ExpectedEncoding[] =
{
    0x10, 0x20, 0xac, 0xb4, 0xcd, 0x3e, 0xff, 0x2f, 0x9e, 0x93, 0x44, 0xdc, 0x52, 0x4e, 0x25, 0xf2,
    0x80, 0xcd, 0x63, 0xbc, 0xaf, 0x9a, 0x6c, 0x9d, 0xcb, 0xc6, 0x8f, 0x12, 0x3f, 0x0f, 0xcf, 0x7b,
    0x26, 0xe3, 0xd8, 0x18, 0xf3, 0x92, 0xf8, 0x54, 0xdd, 0xad, 0x8c, 0x58,
};

static const MessageEncodingTestVector sMessageEncodingTest0332 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x3ECDB4AC,
        0,
        0x2FFF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0332_EncryptionKey,
    sMessageEncodingTest0332_Payload,
    sizeof(sMessageEncodingTest0332_Payload),
    sMessageEncodingTest0332_ExpectedEncoding,
    sizeof(sMessageEncodingTest0332_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0333_EncryptionKey =
{
    {
        0x22, 0x38, 0x53, 0xd8, 0x7a, 0x99, 0x2c, 0x11, 0x99, 0x40, 0x63, 0x89, 0x25, 0x36, 0xd6, 0x55,
    }
};
static const uint8_t sMessageEncodingTest0333_Payload[] =
{
    0x29, 0x37, 0x50, 0xd5, 0xbc, 0xad, 0xdb, 0x37, 0xf2, 0x5f, 0xea, 0x16, 0xf2, 0x98, 0x1b, 0x14,
};

static const uint8_t sMessageEncodingTest0333_ExpectedEncoding[] =
{
    0x20, 0x20, 0x63, 0x88, 0xd7, 0x77, 0xff, 0x2f, 0xac, 0x61, 0x00, 0x30, 0x7c, 0x8f, 0x88, 0x1d,
    0x91, 0xda, 0x47, 0x1c, 0xce, 0x08, 0xc6, 0x67, 0x0b, 0xf9, 0xaa, 0xba, 0xc0, 0x83, 0x13, 0x84,
};

static const MessageEncodingTestVector sMessageEncodingTest0333 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x77D78863,
        0,
        0x2FFF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0333_EncryptionKey,
    sMessageEncodingTest0333_Payload,
    sizeof(sMessageEncodingTest0333_Payload),
    sMessageEncodingTest0333_ExpectedEncoding,
    sizeof(sMessageEncodingTest0333_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0334_EncryptionKey =
{
    {
        0x63, 0xc8, 0x73, 0x40, 0xda, 0x12, 0x78, 0xa5, 0x47, 0x1c, 0xb4, 0x4d, 0xb4, 0x4e, 0x4c, 0x7a,
    }
};
static const uint8_t sMessageEncodingTest0334_Payload[] =
{
    0x89, 0x0a, 0x83, 0xe3, 0xf3, 0x33, 0x2d, 0x38, 0x15, 0x2a, 0x83, 0xff, 0xb9, 0xfa, 0xbf, 0xd0,
};

static const uint8_t sMessageEncodingTest0334_ExpectedEncoding[] =
{
    0x30, 0x20, 0xad, 0xea, 0x84, 0xcb, 0xff, 0x2f, 0x46, 0x60, 0x34, 0xa4, 0xe1, 0xe6, 0x50, 0xaf,
    0x76, 0xf3, 0xc3, 0xb3, 0x9d, 0x14, 0x93, 0x86, 0xb5, 0x76, 0x9e, 0x13, 0x15, 0xa3, 0xe1, 0xeb,
    0xd4, 0xe3, 0x6e, 0xb2, 0xcb, 0xe3, 0x8a, 0x1b,
};

static const MessageEncodingTestVector sMessageEncodingTest0334 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xCB84EAAD,
        0,
        0x2FFF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0334_EncryptionKey,
    sMessageEncodingTest0334_Payload,
    sizeof(sMessageEncodingTest0334_Payload),
    sMessageEncodingTest0334_ExpectedEncoding,
    sizeof(sMessageEncodingTest0334_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0335_Payload[] =
{
    0x82,
};

static const uint8_t sMessageEncodingTest0335_ExpectedEncoding[] =
{
    0x00, 0x27, 0xf3, 0xbf, 0x0a, 0x79, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x82,
};

static const MessageEncodingTestVector sMessageEncodingTest0335 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x790ABFF3,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0335_Payload,
    sizeof(sMessageEncodingTest0335_Payload),
    sMessageEncodingTest0335_ExpectedEncoding,
    sizeof(sMessageEncodingTest0335_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0336_EncryptionKey =
{
    {
        0x82, 0x7a, 0x14, 0xd1, 0x0a, 0xf5, 0xe6, 0x65, 0x8f, 0x2a, 0xd0, 0xef, 0xa5, 0x21, 0x72, 0x13,
    },
    {
        0x62, 0x2c, 0xa1, 0xf0, 0xcd, 0x58, 0xa0, 0x2b, 0x92, 0x9f, 0x6b, 0x3a, 0x30, 0x63, 0xd2, 0x6d,
        0xff, 0x90, 0xb8, 0x35,
    }
};
static const uint8_t sMessageEncodingTest0336_Payload[] =
{
    0x6c,
};

static const uint8_t sMessageEncodingTest0336_ExpectedEncoding[] =
{
    0x10, 0x27, 0x3b, 0xff, 0x71, 0x59, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6c, 0x2d, 0xe7, 0xff, 0x18, 0x4a, 0x68, 0xcf, 0x93, 0x25,
    0x5a, 0x6c, 0x36, 0xbb, 0x52, 0xab, 0xc9, 0x60, 0x76, 0xbe, 0xc6, 0x3d, 0xcd,
};

static const MessageEncodingTestVector sMessageEncodingTest0336 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x5971FF3B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2D6C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0336_EncryptionKey,
    sMessageEncodingTest0336_Payload,
    sizeof(sMessageEncodingTest0336_Payload),
    sMessageEncodingTest0336_ExpectedEncoding,
    sizeof(sMessageEncodingTest0336_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0337_EncryptionKey =
{
    {
        0xb6, 0x25, 0x48, 0x7f, 0x02, 0x4d, 0xb3, 0x93, 0xd7, 0x58, 0x7e, 0x45, 0xeb, 0x9a, 0xd0, 0x24,
    }
};
static const uint8_t sMessageEncodingTest0337_Payload[] =
{
    0x68,
};

static const uint8_t sMessageEncodingTest0337_ExpectedEncoding[] =
{
    0x20, 0x27, 0x35, 0x35, 0x02, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x14, 0x25, 0x61, 0x7a, 0x1e, 0xc1, 0x1e, 0xf6, 0x2f, 0xe6,
    0x96,
};

static const MessageEncodingTestVector sMessageEncodingTest0337 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x81023535,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2514,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0337_EncryptionKey,
    sMessageEncodingTest0337_Payload,
    sizeof(sMessageEncodingTest0337_Payload),
    sMessageEncodingTest0337_ExpectedEncoding,
    sizeof(sMessageEncodingTest0337_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0338_EncryptionKey =
{
    {
        0xe8, 0x25, 0x63, 0xb9, 0x2f, 0x8d, 0x6d, 0xdd, 0x27, 0xc8, 0x9d, 0xea, 0x1d, 0xe3, 0xed, 0x09,
    }
};
static const uint8_t sMessageEncodingTest0338_Payload[] =
{
    0x0d,
};

static const uint8_t sMessageEncodingTest0338_ExpectedEncoding[] =
{
    0x30, 0x27, 0x60, 0xe7, 0xe8, 0x97, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x17, 0x2b, 0xdf, 0x08, 0xcb, 0xe9, 0x5e, 0x3f, 0x19, 0x87,
    0x02, 0xd4, 0x2f, 0x94, 0xd5, 0x58, 0x99, 0xbc, 0x74,
};

static const MessageEncodingTestVector sMessageEncodingTest0338 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x97E8E760,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2B17,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0338_EncryptionKey,
    sMessageEncodingTest0338_Payload,
    sizeof(sMessageEncodingTest0338_Payload),
    sMessageEncodingTest0338_ExpectedEncoding,
    sizeof(sMessageEncodingTest0338_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0339_Payload[] =
{
    0x67,
};

static const uint8_t sMessageEncodingTest0339_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x8f, 0x26, 0x1f, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x67,
};

static const MessageEncodingTestVector sMessageEncodingTest0339 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4C1F268F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0339_Payload,
    sizeof(sMessageEncodingTest0339_Payload),
    sMessageEncodingTest0339_ExpectedEncoding,
    sizeof(sMessageEncodingTest0339_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0340_EncryptionKey =
{
    {
        0x02, 0x39, 0x6b, 0xd0, 0xfa, 0x0e, 0x2c, 0xc7, 0x78, 0xa5, 0x1d, 0x8d, 0x92, 0x32, 0x03, 0xd1,
    },
    {
        0xde, 0xb9, 0xa1, 0xe5, 0xd6, 0x38, 0xfd, 0x06, 0x9d, 0xc8, 0xb3, 0x96, 0x0c, 0xf5, 0x11, 0x39,
        0xcd, 0x0b, 0xbf, 0xbd,
    }
};
static const uint8_t sMessageEncodingTest0340_Payload[] =
{
    0xba,
};

static const uint8_t sMessageEncodingTest0340_ExpectedEncoding[] =
{
    0x10, 0x2b, 0x8e, 0xb5, 0xad, 0x62, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc6, 0x2f, 0x78, 0xab, 0xfe, 0x9e, 0x07, 0xf2, 0x47, 0x84,
    0x91, 0xee, 0xea, 0x76, 0x20, 0x43, 0x85, 0xde, 0x8f, 0x1b, 0xa6, 0x39, 0x55,
};

static const MessageEncodingTestVector sMessageEncodingTest0340 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x62ADB58E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2FC6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0340_EncryptionKey,
    sMessageEncodingTest0340_Payload,
    sizeof(sMessageEncodingTest0340_Payload),
    sMessageEncodingTest0340_ExpectedEncoding,
    sizeof(sMessageEncodingTest0340_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0341_EncryptionKey =
{
    {
        0x00, 0xaa, 0xec, 0x1d, 0xb4, 0x7a, 0xe8, 0x95, 0x1d, 0x3e, 0x08, 0xd2, 0xe9, 0x1d, 0x5c, 0x1a,
    }
};
static const uint8_t sMessageEncodingTest0341_Payload[] =
{
    0xb7,
};

static const uint8_t sMessageEncodingTest0341_ExpectedEncoding[] =
{
    0x20, 0x2b, 0xea, 0xff, 0xa4, 0x97, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x31, 0x2e, 0xa4, 0x21, 0xb7, 0x6c, 0xa9, 0x36, 0xfa, 0x57,
    0xfa,
};

static const MessageEncodingTestVector sMessageEncodingTest0341 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x97A4FFEA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2E31,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0341_EncryptionKey,
    sMessageEncodingTest0341_Payload,
    sizeof(sMessageEncodingTest0341_Payload),
    sMessageEncodingTest0341_ExpectedEncoding,
    sizeof(sMessageEncodingTest0341_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0342_EncryptionKey =
{
    {
        0xd7, 0xab, 0x47, 0x64, 0xcc, 0x5c, 0x4c, 0x77, 0xa3, 0xf3, 0xa1, 0xf2, 0x2d, 0x0b, 0x02, 0x61,
    }
};
static const uint8_t sMessageEncodingTest0342_Payload[] =
{
    0x6b,
};

static const uint8_t sMessageEncodingTest0342_ExpectedEncoding[] =
{
    0x30, 0x2b, 0x0d, 0xbb, 0x83, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb0, 0x20, 0xe4, 0xc2, 0xa2, 0x9a, 0xe8, 0x75, 0xfc, 0xaa,
    0x8c, 0x1a, 0xc1, 0x71, 0x9c, 0xdf, 0x9d, 0x4b, 0x44,
};

static const MessageEncodingTestVector sMessageEncodingTest0342 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x3483BB0D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x20B0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0342_EncryptionKey,
    sMessageEncodingTest0342_Payload,
    sizeof(sMessageEncodingTest0342_Payload),
    sMessageEncodingTest0342_ExpectedEncoding,
    sizeof(sMessageEncodingTest0342_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0343_Payload[] =
{
    0x16,
};

static const uint8_t sMessageEncodingTest0343_ExpectedEncoding[] =
{
    0x00, 0x23, 0x54, 0x96, 0x29, 0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x16,
};

static const MessageEncodingTestVector sMessageEncodingTest0343 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB4299654,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0343_Payload,
    sizeof(sMessageEncodingTest0343_Payload),
    sMessageEncodingTest0343_ExpectedEncoding,
    sizeof(sMessageEncodingTest0343_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0344_EncryptionKey =
{
    {
        0x48, 0xb4, 0x34, 0xab, 0x10, 0x46, 0x20, 0xa7, 0xf5, 0x49, 0xb1, 0x84, 0x43, 0x62, 0x29, 0x89,
    },
    {
        0x51, 0x24, 0x23, 0x4f, 0xc5, 0x28, 0xc7, 0x1b, 0xca, 0x12, 0x46, 0x2b, 0x83, 0xb0, 0xdb, 0x71,
        0xc9, 0x4c, 0xde, 0x62,
    }
};
static const uint8_t sMessageEncodingTest0344_Payload[] =
{
    0x43,
};

static const uint8_t sMessageEncodingTest0344_ExpectedEncoding[] =
{
    0x10, 0x23, 0x9b, 0xb0, 0x01, 0x4e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x95, 0x25, 0x42, 0x8f, 0xf5, 0xa5, 0xc6, 0xbf, 0x41, 0x9c,
    0x89, 0xb0, 0x78, 0x78, 0x19, 0x2d, 0x93, 0xee, 0x75, 0xba, 0x39, 0x85, 0x2e,
};

static const MessageEncodingTestVector sMessageEncodingTest0344 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4E01B09B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2595,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0344_EncryptionKey,
    sMessageEncodingTest0344_Payload,
    sizeof(sMessageEncodingTest0344_Payload),
    sMessageEncodingTest0344_ExpectedEncoding,
    sizeof(sMessageEncodingTest0344_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0345_EncryptionKey =
{
    {
        0xb7, 0x1a, 0xd8, 0xf8, 0x1c, 0x33, 0x3f, 0xc2, 0x07, 0xc6, 0x48, 0x2b, 0xe4, 0x00, 0x86, 0xe1,
    }
};
static const uint8_t sMessageEncodingTest0345_Payload[] =
{
    0xd6,
};

static const uint8_t sMessageEncodingTest0345_ExpectedEncoding[] =
{
    0x20, 0x23, 0xb4, 0x8e, 0xe8, 0xdf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x40, 0x2b, 0x9b, 0xb2, 0xe2, 0xa5, 0x5f, 0xc1, 0xab, 0x25,
    0xfc,
};

static const MessageEncodingTestVector sMessageEncodingTest0345 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xDFE88EB4,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2B40,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0345_EncryptionKey,
    sMessageEncodingTest0345_Payload,
    sizeof(sMessageEncodingTest0345_Payload),
    sMessageEncodingTest0345_ExpectedEncoding,
    sizeof(sMessageEncodingTest0345_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0346_EncryptionKey =
{
    {
        0x9d, 0xfd, 0x4f, 0x53, 0xfa, 0xa5, 0x3c, 0x2d, 0x90, 0xa9, 0x79, 0x96, 0xc9, 0x72, 0xea, 0xe5,
    }
};
static const uint8_t sMessageEncodingTest0346_Payload[] =
{
    0x21,
};

static const uint8_t sMessageEncodingTest0346_ExpectedEncoding[] =
{
    0x30, 0x23, 0xfc, 0xf5, 0x0a, 0x65, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2a, 0x22, 0xeb, 0xcd, 0x27, 0x83, 0x58, 0xa2, 0x72, 0x91,
    0x18, 0xe1, 0x40, 0x6f, 0x31, 0x8b, 0x93, 0x7a, 0x71,
};

static const MessageEncodingTestVector sMessageEncodingTest0346 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x650AF5FC,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x222A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0346_EncryptionKey,
    sMessageEncodingTest0346_Payload,
    sizeof(sMessageEncodingTest0346_Payload),
    sMessageEncodingTest0346_ExpectedEncoding,
    sizeof(sMessageEncodingTest0346_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0347_Payload[] =
{
    0xf8,
};

static const uint8_t sMessageEncodingTest0347_ExpectedEncoding[] =
{
    0x00, 0x25, 0x0a, 0x0b, 0x2b, 0xe7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf8,
};

static const MessageEncodingTestVector sMessageEncodingTest0347 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE72B0B0A,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0347_Payload,
    sizeof(sMessageEncodingTest0347_Payload),
    sMessageEncodingTest0347_ExpectedEncoding,
    sizeof(sMessageEncodingTest0347_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0348_EncryptionKey =
{
    {
        0xcb, 0xc4, 0xcb, 0x7e, 0x2b, 0xf2, 0x68, 0xdc, 0xf0, 0x76, 0x43, 0xbe, 0x4f, 0x63, 0x20, 0x52,
    },
    {
        0xd8, 0xf6, 0x7f, 0x33, 0x46, 0xa4, 0xfb, 0x33, 0x72, 0x69, 0x54, 0xa3, 0x21, 0xfc, 0xa1, 0x04,
        0x31, 0x1d, 0xa7, 0x35,
    }
};
static const uint8_t sMessageEncodingTest0348_Payload[] =
{
    0xdd,
};

static const uint8_t sMessageEncodingTest0348_ExpectedEncoding[] =
{
    0x10, 0x25, 0x85, 0x8d, 0xee, 0x2f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0e, 0x2b,
    0xbc, 0x57, 0x6a, 0x26, 0x88, 0x09, 0x29, 0x90, 0xd7, 0x10, 0xe2, 0xb8, 0x28, 0xef, 0x97, 0xd5,
    0x63, 0x55, 0xfe, 0x96, 0x15,
};

static const MessageEncodingTestVector sMessageEncodingTest0348 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2FEE8D85,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2B0E,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0348_EncryptionKey,
    sMessageEncodingTest0348_Payload,
    sizeof(sMessageEncodingTest0348_Payload),
    sMessageEncodingTest0348_ExpectedEncoding,
    sizeof(sMessageEncodingTest0348_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0349_EncryptionKey =
{
    {
        0x85, 0x22, 0xc2, 0x70, 0x8a, 0x16, 0x62, 0xee, 0xdd, 0xda, 0x02, 0x65, 0xcb, 0x26, 0x30, 0x8a,
    }
};
static const uint8_t sMessageEncodingTest0349_Payload[] =
{
    0xcf,
};

static const uint8_t sMessageEncodingTest0349_ExpectedEncoding[] =
{
    0x20, 0x25, 0x6c, 0x7b, 0xc6, 0x98, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf3, 0x25,
    0x90, 0x84, 0x3d, 0x62, 0xc5, 0x7b, 0xf3, 0xcf, 0xd3,
};

static const MessageEncodingTestVector sMessageEncodingTest0349 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x98C67B6C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x25F3,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0349_EncryptionKey,
    sMessageEncodingTest0349_Payload,
    sizeof(sMessageEncodingTest0349_Payload),
    sMessageEncodingTest0349_ExpectedEncoding,
    sizeof(sMessageEncodingTest0349_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0350_EncryptionKey =
{
    {
        0xe0, 0xfc, 0x1b, 0xdc, 0x84, 0xf9, 0x0b, 0xde, 0x16, 0x34, 0x11, 0x36, 0x3a, 0xd0, 0xcb, 0xfb,
    }
};
static const uint8_t sMessageEncodingTest0350_Payload[] =
{
    0x36,
};

static const uint8_t sMessageEncodingTest0350_ExpectedEncoding[] =
{
    0x30, 0x25, 0x85, 0x8a, 0x0e, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x62, 0x2b,
    0x30, 0xa3, 0xa5, 0xeb, 0x47, 0xd0, 0x08, 0x66, 0x1e, 0xa3, 0x03, 0x56, 0x3a, 0xab, 0x35, 0x34,
    0x9e,
};

static const MessageEncodingTestVector sMessageEncodingTest0350 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x020E8A85,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2B62,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0350_EncryptionKey,
    sMessageEncodingTest0350_Payload,
    sizeof(sMessageEncodingTest0350_Payload),
    sMessageEncodingTest0350_ExpectedEncoding,
    sizeof(sMessageEncodingTest0350_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0351_Payload[] =
{
    0xde,
};

static const uint8_t sMessageEncodingTest0351_ExpectedEncoding[] =
{
    0x00, 0x29, 0x02, 0x35, 0x83, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xde,
};

static const MessageEncodingTestVector sMessageEncodingTest0351 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x38833502,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0351_Payload,
    sizeof(sMessageEncodingTest0351_Payload),
    sMessageEncodingTest0351_ExpectedEncoding,
    sizeof(sMessageEncodingTest0351_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0352_EncryptionKey =
{
    {
        0x53, 0x5f, 0xf0, 0xf0, 0x42, 0x9e, 0x59, 0x80, 0x08, 0x42, 0x64, 0x50, 0x1b, 0x3a, 0x25, 0xba,
    },
    {
        0x7b, 0xc1, 0x94, 0xb4, 0xff, 0x0a, 0xe6, 0xb5, 0x70, 0x89, 0xcd, 0x52, 0xe5, 0xd5, 0x1b, 0x53,
        0xb8, 0xa9, 0x7c, 0x67,
    }
};
static const uint8_t sMessageEncodingTest0352_Payload[] =
{
    0xd7,
};

static const uint8_t sMessageEncodingTest0352_ExpectedEncoding[] =
{
    0x10, 0x29, 0xcf, 0x47, 0x88, 0x0a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x58, 0x2f,
    0xfd, 0x9e, 0xca, 0xb1, 0xb7, 0x74, 0x89, 0x8f, 0x93, 0x77, 0x2c, 0xcb, 0x58, 0xeb, 0x51, 0x07,
    0x40, 0x42, 0x5c, 0xb1, 0x29,
};

static const MessageEncodingTestVector sMessageEncodingTest0352 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0A8847CF,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2F58,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0352_EncryptionKey,
    sMessageEncodingTest0352_Payload,
    sizeof(sMessageEncodingTest0352_Payload),
    sMessageEncodingTest0352_ExpectedEncoding,
    sizeof(sMessageEncodingTest0352_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0353_EncryptionKey =
{
    {
        0xa0, 0x95, 0xe5, 0x83, 0xb6, 0x9b, 0xe6, 0x57, 0x14, 0x89, 0x37, 0xcc, 0xa9, 0x01, 0x4d, 0xfc,
    }
};
static const uint8_t sMessageEncodingTest0353_Payload[] =
{
    0x1c,
};

static const uint8_t sMessageEncodingTest0353_ExpectedEncoding[] =
{
    0x20, 0x29, 0x79, 0xb1, 0x3f, 0x6f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9f, 0x2d,
    0x8e, 0xe8, 0x19, 0xad, 0x6a, 0xf8, 0xcf, 0x73, 0xb6,
};

static const MessageEncodingTestVector sMessageEncodingTest0353 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x6F3FB179,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2D9F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0353_EncryptionKey,
    sMessageEncodingTest0353_Payload,
    sizeof(sMessageEncodingTest0353_Payload),
    sMessageEncodingTest0353_ExpectedEncoding,
    sizeof(sMessageEncodingTest0353_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0354_EncryptionKey =
{
    {
        0x3e, 0x3f, 0xba, 0x4f, 0x87, 0xfc, 0x64, 0xb2, 0xd1, 0xc7, 0x2d, 0x8e, 0xb6, 0x57, 0x3f, 0x5e,
    }
};
static const uint8_t sMessageEncodingTest0354_Payload[] =
{
    0x2a,
};

static const uint8_t sMessageEncodingTest0354_ExpectedEncoding[] =
{
    0x30, 0x29, 0xcf, 0x01, 0x60, 0x98, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa0, 0x2f,
    0x08, 0xa8, 0x79, 0xfd, 0x59, 0xf7, 0x89, 0x6e, 0xe0, 0x20, 0x4c, 0x02, 0xdc, 0xdb, 0x3b, 0x58,
    0x3c,
};

static const MessageEncodingTestVector sMessageEncodingTest0354 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x986001CF,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2FA0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0354_EncryptionKey,
    sMessageEncodingTest0354_Payload,
    sizeof(sMessageEncodingTest0354_Payload),
    sMessageEncodingTest0354_ExpectedEncoding,
    sizeof(sMessageEncodingTest0354_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0355_Payload[] =
{
    0xb6,
};

static const uint8_t sMessageEncodingTest0355_ExpectedEncoding[] =
{
    0x00, 0x21, 0x81, 0x45, 0xa4, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb6,
};

static const MessageEncodingTestVector sMessageEncodingTest0355 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2BA44581,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0355_Payload,
    sizeof(sMessageEncodingTest0355_Payload),
    sMessageEncodingTest0355_ExpectedEncoding,
    sizeof(sMessageEncodingTest0355_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0356_EncryptionKey =
{
    {
        0x06, 0x60, 0x9f, 0x56, 0x0c, 0xc5, 0x84, 0x34, 0x1c, 0x25, 0x80, 0x95, 0xcd, 0x21, 0x2b, 0xca,
    },
    {
        0x9f, 0xbc, 0x6a, 0x8f, 0xba, 0x00, 0x4c, 0xf0, 0xde, 0xce, 0xd0, 0xf6, 0x21, 0x2b, 0xb3, 0xff,
        0x1b, 0x37, 0xc7, 0x54,
    }
};
static const uint8_t sMessageEncodingTest0356_Payload[] =
{
    0xc0,
};

static const uint8_t sMessageEncodingTest0356_ExpectedEncoding[] =
{
    0x10, 0x21, 0xa4, 0x70, 0xad, 0xac, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc8, 0x20,
    0x74, 0xc0, 0x21, 0xa2, 0xf5, 0x4b, 0xd1, 0x86, 0x85, 0x17, 0xf2, 0xf2, 0x73, 0xb9, 0x6f, 0x59,
    0x32, 0x9a, 0x65, 0x3d, 0x5d,
};

static const MessageEncodingTestVector sMessageEncodingTest0356 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xACAD70A4,
        kWeaveHeaderFlag_DestNodeId,
        0x20C8,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0356_EncryptionKey,
    sMessageEncodingTest0356_Payload,
    sizeof(sMessageEncodingTest0356_Payload),
    sMessageEncodingTest0356_ExpectedEncoding,
    sizeof(sMessageEncodingTest0356_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0357_EncryptionKey =
{
    {
        0x1a, 0x20, 0x0c, 0x59, 0x01, 0x7b, 0x73, 0x1e, 0xa9, 0xd4, 0xf0, 0xed, 0x6b, 0x8e, 0xc3, 0xfe,
    }
};
static const uint8_t sMessageEncodingTest0357_Payload[] =
{
    0x4d,
};

static const uint8_t sMessageEncodingTest0357_ExpectedEncoding[] =
{
    0x20, 0x21, 0x2d, 0x84, 0xc5, 0xdc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x51, 0x24,
    0xe4, 0xb3, 0x13, 0xcd, 0xa4, 0x98, 0x3b, 0x82, 0xe3,
};

static const MessageEncodingTestVector sMessageEncodingTest0357 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xDCC5842D,
        kWeaveHeaderFlag_DestNodeId,
        0x2451,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0357_EncryptionKey,
    sMessageEncodingTest0357_Payload,
    sizeof(sMessageEncodingTest0357_Payload),
    sMessageEncodingTest0357_ExpectedEncoding,
    sizeof(sMessageEncodingTest0357_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0358_EncryptionKey =
{
    {
        0x2d, 0xac, 0x0c, 0xce, 0x5a, 0x0b, 0x84, 0xdd, 0x87, 0x19, 0x99, 0x2c, 0x42, 0xd2, 0x24, 0x28,
    }
};
static const uint8_t sMessageEncodingTest0358_Payload[] =
{
    0x8b,
};

static const uint8_t sMessageEncodingTest0358_ExpectedEncoding[] =
{
    0x30, 0x21, 0x53, 0x17, 0x5e, 0xe0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xd3, 0x22,
    0x96, 0x4d, 0x21, 0x6d, 0x4b, 0x87, 0x53, 0x77, 0x9b, 0xa3, 0x9e, 0x1f, 0x06, 0xaf, 0x92, 0x47,
    0x41,
};

static const MessageEncodingTestVector sMessageEncodingTest0358 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE05E1753,
        kWeaveHeaderFlag_DestNodeId,
        0x22D3,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0358_EncryptionKey,
    sMessageEncodingTest0358_Payload,
    sizeof(sMessageEncodingTest0358_Payload),
    sMessageEncodingTest0358_ExpectedEncoding,
    sizeof(sMessageEncodingTest0358_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0359_Payload[] =
{
    0xed,
};

static const uint8_t sMessageEncodingTest0359_ExpectedEncoding[] =
{
    0x00, 0x26, 0x6a, 0x36, 0x5f, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xed,
};

static const MessageEncodingTestVector sMessageEncodingTest0359 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x505F366A,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0359_Payload,
    sizeof(sMessageEncodingTest0359_Payload),
    sMessageEncodingTest0359_ExpectedEncoding,
    sizeof(sMessageEncodingTest0359_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0360_EncryptionKey =
{
    {
        0x63, 0xff, 0xcc, 0x09, 0x0b, 0xe2, 0x8c, 0x4d, 0x2f, 0x2c, 0x55, 0x63, 0xc8, 0x8f, 0x86, 0x28,
    },
    {
        0xe4, 0xd4, 0xe9, 0x31, 0xf6, 0x4f, 0x57, 0x4f, 0x53, 0xbf, 0x5a, 0x16, 0x30, 0x12, 0x4c, 0x09,
        0x12, 0xbb, 0x73, 0xf8,
    }
};
static const uint8_t sMessageEncodingTest0360_Payload[] =
{
    0x7e,
};

static const uint8_t sMessageEncodingTest0360_ExpectedEncoding[] =
{
    0x10, 0x26, 0xd9, 0xa1, 0xf9, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf2, 0x2f,
    0x4b, 0xeb, 0x02, 0xb9, 0x1a, 0x9e, 0xa2, 0x65, 0x54, 0x74, 0x77, 0x81, 0xb9, 0xa1, 0xd0, 0x4a,
    0x66, 0x47, 0x6f, 0x00, 0x5e,
};

static const MessageEncodingTestVector sMessageEncodingTest0360 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xFFF9A1D9,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2FF2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0360_EncryptionKey,
    sMessageEncodingTest0360_Payload,
    sizeof(sMessageEncodingTest0360_Payload),
    sMessageEncodingTest0360_ExpectedEncoding,
    sizeof(sMessageEncodingTest0360_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0361_EncryptionKey =
{
    {
        0x30, 0x2d, 0xa7, 0xad, 0xa4, 0xc7, 0x2a, 0xc8, 0xe2, 0x57, 0xb0, 0xd9, 0x73, 0x1f, 0xfa, 0x08,
    }
};
static const uint8_t sMessageEncodingTest0361_Payload[] =
{
    0x16,
};

static const uint8_t sMessageEncodingTest0361_ExpectedEncoding[] =
{
    0x20, 0x26, 0xee, 0x05, 0xc8, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x98, 0x2b,
    0x0f, 0x77, 0x3c, 0x1f, 0x94, 0xcd, 0x92, 0x1f, 0xdc,
};

static const MessageEncodingTestVector sMessageEncodingTest0361 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x06C805EE,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2B98,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0361_EncryptionKey,
    sMessageEncodingTest0361_Payload,
    sizeof(sMessageEncodingTest0361_Payload),
    sMessageEncodingTest0361_ExpectedEncoding,
    sizeof(sMessageEncodingTest0361_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0362_EncryptionKey =
{
    {
        0x7b, 0xaa, 0x39, 0x6d, 0xb7, 0x3b, 0x3b, 0x0d, 0x90, 0x1a, 0xd1, 0x17, 0xe7, 0x67, 0x8d, 0x14,
    }
};
static const uint8_t sMessageEncodingTest0362_Payload[] =
{
    0x1a,
};

static const uint8_t sMessageEncodingTest0362_ExpectedEncoding[] =
{
    0x30, 0x26, 0x33, 0xf1, 0x47, 0x43, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x69, 0x23,
    0xdb, 0xd3, 0x0a, 0x27, 0x65, 0x9d, 0x93, 0x56, 0x4d, 0x82, 0x2e, 0xca, 0x27, 0x84, 0x0f, 0xb9,
    0xde,
};

static const MessageEncodingTestVector sMessageEncodingTest0362 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4347F133,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2369,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0362_EncryptionKey,
    sMessageEncodingTest0362_Payload,
    sizeof(sMessageEncodingTest0362_Payload),
    sMessageEncodingTest0362_ExpectedEncoding,
    sizeof(sMessageEncodingTest0362_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0363_Payload[] =
{
    0x20,
};

static const uint8_t sMessageEncodingTest0363_ExpectedEncoding[] =
{
    0x00, 0x2a, 0xc1, 0x68, 0x35, 0xf2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x20,
};

static const MessageEncodingTestVector sMessageEncodingTest0363 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF23568C1,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0363_Payload,
    sizeof(sMessageEncodingTest0363_Payload),
    sMessageEncodingTest0363_ExpectedEncoding,
    sizeof(sMessageEncodingTest0363_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0364_EncryptionKey =
{
    {
        0xaf, 0x5b, 0xd5, 0xbf, 0x21, 0x44, 0xc6, 0x37, 0x56, 0x19, 0x33, 0x10, 0xf4, 0x99, 0x6d, 0x3e,
    },
    {
        0x75, 0x0b, 0x85, 0x39, 0xf1, 0xd5, 0x91, 0xa7, 0x2d, 0xda, 0xcd, 0xbe, 0x5c, 0xc4, 0x30, 0x7b,
        0x75, 0x06, 0x16, 0x3c,
    }
};
static const uint8_t sMessageEncodingTest0364_Payload[] =
{
    0xc2,
};

static const uint8_t sMessageEncodingTest0364_ExpectedEncoding[] =
{
    0x10, 0x2a, 0x44, 0x92, 0xea, 0x47, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa7, 0x23,
    0x5c, 0x86, 0x21, 0xc8, 0x1a, 0x42, 0xbb, 0x4e, 0x53, 0xeb, 0xc9, 0x87, 0x7c, 0x80, 0xa2, 0x35,
    0x1c, 0x1c, 0x20, 0xae, 0xaf,
};

static const MessageEncodingTestVector sMessageEncodingTest0364 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x47EA9244,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x23A7,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0364_EncryptionKey,
    sMessageEncodingTest0364_Payload,
    sizeof(sMessageEncodingTest0364_Payload),
    sMessageEncodingTest0364_ExpectedEncoding,
    sizeof(sMessageEncodingTest0364_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0365_EncryptionKey =
{
    {
        0x45, 0x02, 0x01, 0xab, 0xc2, 0xa9, 0xa4, 0xcc, 0xac, 0x55, 0xac, 0x6e, 0x49, 0xca, 0x25, 0x6f,
    }
};
static const uint8_t sMessageEncodingTest0365_Payload[] =
{
    0x8e,
};

static const uint8_t sMessageEncodingTest0365_ExpectedEncoding[] =
{
    0x20, 0x2a, 0xd5, 0x21, 0x29, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc7, 0x23,
    0xcc, 0xbe, 0xbe, 0x3f, 0x7b, 0x01, 0xa3, 0x1f, 0xde,
};

static const MessageEncodingTestVector sMessageEncodingTest0365 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x332921D5,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x23C7,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0365_EncryptionKey,
    sMessageEncodingTest0365_Payload,
    sizeof(sMessageEncodingTest0365_Payload),
    sMessageEncodingTest0365_ExpectedEncoding,
    sizeof(sMessageEncodingTest0365_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0366_EncryptionKey =
{
    {
        0x00, 0xf2, 0x06, 0xf9, 0x3e, 0x51, 0xf2, 0xd9, 0xd5, 0x82, 0xbd, 0x2a, 0x7d, 0xc2, 0xde, 0xb7,
    }
};
static const uint8_t sMessageEncodingTest0366_Payload[] =
{
    0xbd,
};

static const uint8_t sMessageEncodingTest0366_ExpectedEncoding[] =
{
    0x30, 0x2a, 0x73, 0x9e, 0xbb, 0x14, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x86, 0x26,
    0x04, 0x4c, 0x17, 0x42, 0xc5, 0x32, 0xbf, 0x1b, 0xaf, 0x62, 0xca, 0x4d, 0x06, 0x40, 0x74, 0x8f,
    0xb0,
};

static const MessageEncodingTestVector sMessageEncodingTest0366 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x14BB9E73,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2686,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0366_EncryptionKey,
    sMessageEncodingTest0366_Payload,
    sizeof(sMessageEncodingTest0366_Payload),
    sMessageEncodingTest0366_ExpectedEncoding,
    sizeof(sMessageEncodingTest0366_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0367_Payload[] =
{
    0xbd,
};

static const uint8_t sMessageEncodingTest0367_ExpectedEncoding[] =
{
    0x00, 0x22, 0x7f, 0x49, 0xb9, 0xd4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xbd,
};

static const MessageEncodingTestVector sMessageEncodingTest0367 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xD4B9497F,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0367_Payload,
    sizeof(sMessageEncodingTest0367_Payload),
    sMessageEncodingTest0367_ExpectedEncoding,
    sizeof(sMessageEncodingTest0367_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0368_EncryptionKey =
{
    {
        0x38, 0x8c, 0x54, 0xed, 0x47, 0x4d, 0x31, 0xc0, 0x72, 0x22, 0x51, 0xc0, 0x5b, 0x22, 0xef, 0x4d,
    },
    {
        0xb2, 0x94, 0x14, 0x13, 0xd8, 0xc7, 0xe0, 0x6e, 0x12, 0xbf, 0x6e, 0xe4, 0xd8, 0xa3, 0x9f, 0x26,
        0x00, 0x19, 0x93, 0x15,
    }
};
static const uint8_t sMessageEncodingTest0368_Payload[] =
{
    0x43,
};

static const uint8_t sMessageEncodingTest0368_ExpectedEncoding[] =
{
    0x10, 0x22, 0x5c, 0x10, 0x85, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xcd, 0x21,
    0xc5, 0x8f, 0x0b, 0x39, 0x47, 0x61, 0xdf, 0x25, 0x63, 0x9f, 0xc5, 0xf6, 0x57, 0x64, 0x1e, 0xdb,
    0x48, 0x31, 0xe7, 0x9b, 0x84,
};

static const MessageEncodingTestVector sMessageEncodingTest0368 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x9085105C,
        kWeaveHeaderFlag_SourceNodeId,
        0x21CD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0368_EncryptionKey,
    sMessageEncodingTest0368_Payload,
    sizeof(sMessageEncodingTest0368_Payload),
    sMessageEncodingTest0368_ExpectedEncoding,
    sizeof(sMessageEncodingTest0368_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0369_EncryptionKey =
{
    {
        0x2c, 0xd3, 0x88, 0x2c, 0x5f, 0x8d, 0x4d, 0xf7, 0xbe, 0xc7, 0x8d, 0x77, 0xa9, 0x71, 0xdf, 0xf5,
    }
};
static const uint8_t sMessageEncodingTest0369_Payload[] =
{
    0xf6,
};

static const uint8_t sMessageEncodingTest0369_ExpectedEncoding[] =
{
    0x20, 0x22, 0x3d, 0x1b, 0xef, 0x79, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x49, 0x26,
    0x0d, 0x03, 0x22, 0xad, 0xa6, 0xe8, 0x93, 0xca, 0x2c,
};

static const MessageEncodingTestVector sMessageEncodingTest0369 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x79EF1B3D,
        kWeaveHeaderFlag_SourceNodeId,
        0x2649,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0369_EncryptionKey,
    sMessageEncodingTest0369_Payload,
    sizeof(sMessageEncodingTest0369_Payload),
    sMessageEncodingTest0369_ExpectedEncoding,
    sizeof(sMessageEncodingTest0369_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0370_EncryptionKey =
{
    {
        0x38, 0x78, 0xe5, 0x2c, 0x45, 0xb4, 0x27, 0x1c, 0x93, 0x60, 0x51, 0xa6, 0x00, 0xbe, 0x83, 0xe3,
    }
};
static const uint8_t sMessageEncodingTest0370_Payload[] =
{
    0xf7,
};

static const uint8_t sMessageEncodingTest0370_ExpectedEncoding[] =
{
    0x30, 0x22, 0xf7, 0xc0, 0xad, 0x7b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc8, 0x28,
    0x94, 0xd2, 0x6a, 0xb1, 0xc5, 0xe1, 0x77, 0xd6, 0x88, 0xe6, 0x42, 0x18, 0x00, 0xf3, 0xb4, 0x3a,
    0x63,
};

static const MessageEncodingTestVector sMessageEncodingTest0370 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7BADC0F7,
        kWeaveHeaderFlag_SourceNodeId,
        0x28C8,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0370_EncryptionKey,
    sMessageEncodingTest0370_Payload,
    sizeof(sMessageEncodingTest0370_Payload),
    sMessageEncodingTest0370_ExpectedEncoding,
    sizeof(sMessageEncodingTest0370_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0371_Payload[] =
{
    0xa2,
};

static const uint8_t sMessageEncodingTest0371_ExpectedEncoding[] =
{
    0x00, 0x24, 0xf9, 0x20, 0x17, 0x2f, 0xa2,
};

static const MessageEncodingTestVector sMessageEncodingTest0371 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2F1720F9,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0371_Payload,
    sizeof(sMessageEncodingTest0371_Payload),
    sMessageEncodingTest0371_ExpectedEncoding,
    sizeof(sMessageEncodingTest0371_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0372_EncryptionKey =
{
    {
        0x27, 0x50, 0x80, 0xff, 0xc7, 0xf1, 0x26, 0x3a, 0xea, 0x51, 0xfc, 0x9e, 0xb3, 0x4e, 0x8c, 0xb8,
    },
    {
        0x98, 0xd6, 0xdb, 0x03, 0xa3, 0x1e, 0x88, 0x36, 0xfc, 0xf3, 0x12, 0x61, 0xbd, 0xa1, 0x54, 0x80,
        0xdb, 0xd5, 0xd7, 0xc9,
    }
};
static const uint8_t sMessageEncodingTest0372_Payload[] =
{
    0xcf,
};

static const uint8_t sMessageEncodingTest0372_ExpectedEncoding[] =
{
    0x10, 0x24, 0x7e, 0x68, 0x97, 0x46, 0x28, 0x29, 0x3e, 0x3d, 0xe5, 0x86, 0x2d, 0x14, 0x21, 0xa8,
    0x04, 0x81, 0x16, 0x2b, 0xd9, 0x4a, 0x97, 0x46, 0x67, 0xb3, 0x7d, 0xf6, 0xf2,
};

static const MessageEncodingTestVector sMessageEncodingTest0372 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4697687E,
        kWeaveHeaderFlag_TunneledData,
        0x2928,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0372_EncryptionKey,
    sMessageEncodingTest0372_Payload,
    sizeof(sMessageEncodingTest0372_Payload),
    sMessageEncodingTest0372_ExpectedEncoding,
    sizeof(sMessageEncodingTest0372_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0373_EncryptionKey =
{
    {
        0x1c, 0x14, 0xa9, 0xa4, 0xf4, 0x85, 0x5c, 0xef, 0x20, 0xbc, 0x9c, 0x3e, 0x29, 0x3c, 0xe3, 0xeb,
    }
};
static const uint8_t sMessageEncodingTest0373_Payload[] =
{
    0x01,
};

static const uint8_t sMessageEncodingTest0373_ExpectedEncoding[] =
{
    0x20, 0x24, 0x84, 0xb3, 0x1c, 0xa5, 0xa5, 0x24, 0x25, 0x5b, 0xac, 0x64, 0x9c, 0x32, 0x5b, 0xc8,
    0x15,
};

static const MessageEncodingTestVector sMessageEncodingTest0373 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA51CB384,
        kWeaveHeaderFlag_TunneledData,
        0x24A5,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0373_EncryptionKey,
    sMessageEncodingTest0373_Payload,
    sizeof(sMessageEncodingTest0373_Payload),
    sMessageEncodingTest0373_ExpectedEncoding,
    sizeof(sMessageEncodingTest0373_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0374_EncryptionKey =
{
    {
        0xac, 0xaa, 0x0d, 0x73, 0x6b, 0x12, 0xbc, 0x2c, 0x1b, 0xa7, 0x6b, 0x75, 0x0f, 0x69, 0xdd, 0x2b,
    }
};
static const uint8_t sMessageEncodingTest0374_Payload[] =
{
    0x1e,
};

static const uint8_t sMessageEncodingTest0374_ExpectedEncoding[] =
{
    0x30, 0x24, 0x8a, 0xb5, 0x38, 0x2b, 0x5b, 0x24, 0xe8, 0x81, 0x17, 0x1e, 0x46, 0x40, 0x08, 0x38,
    0x13, 0xa9, 0xa6, 0x63, 0x98, 0xff, 0xb7, 0xba, 0x71,
};

static const MessageEncodingTestVector sMessageEncodingTest0374 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2B38B58A,
        kWeaveHeaderFlag_TunneledData,
        0x245B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0374_EncryptionKey,
    sMessageEncodingTest0374_Payload,
    sizeof(sMessageEncodingTest0374_Payload),
    sMessageEncodingTest0374_ExpectedEncoding,
    sizeof(sMessageEncodingTest0374_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0375_Payload[] =
{
    0xa4,
};

static const uint8_t sMessageEncodingTest0375_ExpectedEncoding[] =
{
    0x00, 0x28, 0xd5, 0x2b, 0xdd, 0xa8, 0xa4,
};

static const MessageEncodingTestVector sMessageEncodingTest0375 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA8DD2BD5,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0375_Payload,
    sizeof(sMessageEncodingTest0375_Payload),
    sMessageEncodingTest0375_ExpectedEncoding,
    sizeof(sMessageEncodingTest0375_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0376_EncryptionKey =
{
    {
        0xe0, 0x21, 0x90, 0x7d, 0x4e, 0x3f, 0x51, 0xf6, 0xc2, 0x91, 0xc3, 0x19, 0x08, 0x10, 0x74, 0x7e,
    },
    {
        0x3a, 0x62, 0xd3, 0x52, 0xe6, 0x35, 0xba, 0x34, 0x8a, 0x2f, 0x1c, 0x0c, 0x9d, 0x72, 0x95, 0x15,
        0x57, 0x90, 0xd9, 0xde,
    }
};
static const uint8_t sMessageEncodingTest0376_Payload[] =
{
    0x88,
};

static const uint8_t sMessageEncodingTest0376_ExpectedEncoding[] =
{
    0x10, 0x28, 0x58, 0x43, 0x04, 0xa6, 0xce, 0x21, 0xf4, 0x17, 0x5f, 0x1d, 0x73, 0x97, 0xaa, 0xcc,
    0x25, 0xd7, 0x91, 0x5c, 0xc6, 0xf8, 0x02, 0x59, 0xc8, 0x86, 0x43, 0x84, 0xb1,
};

static const MessageEncodingTestVector sMessageEncodingTest0376 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA6044358,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x21CE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0376_EncryptionKey,
    sMessageEncodingTest0376_Payload,
    sizeof(sMessageEncodingTest0376_Payload),
    sMessageEncodingTest0376_ExpectedEncoding,
    sizeof(sMessageEncodingTest0376_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0377_EncryptionKey =
{
    {
        0xbd, 0xeb, 0xa3, 0x73, 0xc0, 0x53, 0xc6, 0xdf, 0x6c, 0x6e, 0x35, 0xcd, 0x47, 0x40, 0x0c, 0x9e,
    }
};
static const uint8_t sMessageEncodingTest0377_Payload[] =
{
    0x3e,
};

static const uint8_t sMessageEncodingTest0377_ExpectedEncoding[] =
{
    0x20, 0x28, 0x43, 0xe9, 0xfe, 0xe7, 0xc2, 0x26, 0x57, 0x3a, 0xf1, 0xb9, 0x28, 0xc8, 0x6b, 0x9f,
    0x49,
};

static const MessageEncodingTestVector sMessageEncodingTest0377 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE7FEE943,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x26C2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0377_EncryptionKey,
    sMessageEncodingTest0377_Payload,
    sizeof(sMessageEncodingTest0377_Payload),
    sMessageEncodingTest0377_ExpectedEncoding,
    sizeof(sMessageEncodingTest0377_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0378_EncryptionKey =
{
    {
        0xd8, 0xd2, 0x93, 0xc3, 0xaf, 0x5c, 0xa7, 0xac, 0xc6, 0x4d, 0xe9, 0xd4, 0x3b, 0x85, 0xab, 0x5c,
    }
};
static const uint8_t sMessageEncodingTest0378_Payload[] =
{
    0x00,
};

static const uint8_t sMessageEncodingTest0378_ExpectedEncoding[] =
{
    0x30, 0x28, 0x8d, 0x55, 0xc4, 0x99, 0x50, 0x2c, 0x36, 0xde, 0x33, 0x00, 0x6b, 0x11, 0x31, 0xca,
    0xc8, 0x9c, 0xb6, 0x4f, 0x29, 0x57, 0x5d, 0xf4, 0x93,
};

static const MessageEncodingTestVector sMessageEncodingTest0378 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x99C4558D,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2C50,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0378_EncryptionKey,
    sMessageEncodingTest0378_Payload,
    sizeof(sMessageEncodingTest0378_Payload),
    sMessageEncodingTest0378_ExpectedEncoding,
    sizeof(sMessageEncodingTest0378_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0379_Payload[] =
{
    0x2d,
};

static const uint8_t sMessageEncodingTest0379_ExpectedEncoding[] =
{
    0x00, 0x20, 0x47, 0x7c, 0x50, 0xa4, 0x2d,
};

static const MessageEncodingTestVector sMessageEncodingTest0379 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA4507C47,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0379_Payload,
    sizeof(sMessageEncodingTest0379_Payload),
    sMessageEncodingTest0379_ExpectedEncoding,
    sizeof(sMessageEncodingTest0379_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0380_EncryptionKey =
{
    {
        0xcb, 0x5b, 0x0d, 0xf2, 0x1c, 0xa8, 0x5f, 0xa4, 0xb4, 0xf3, 0x56, 0xaa, 0x7f, 0x40, 0xc1, 0x5e,
    },
    {
        0x09, 0x26, 0xa5, 0xd8, 0x25, 0xcb, 0x76, 0xf4, 0x9b, 0x2e, 0x76, 0xfc, 0xb6, 0xcd, 0x39, 0x6d,
        0x26, 0x95, 0x5a, 0xaf,
    }
};
static const uint8_t sMessageEncodingTest0380_Payload[] =
{
    0x53,
};

static const uint8_t sMessageEncodingTest0380_ExpectedEncoding[] =
{
    0x10, 0x20, 0x82, 0x72, 0xd3, 0x69, 0x50, 0x2c, 0x77, 0x5a, 0xf4, 0x26, 0xdb, 0x1d, 0x3c, 0xf7,
    0x3f, 0x6a, 0x67, 0x4a, 0x5e, 0x0b, 0xb6, 0x69, 0xf6, 0x73, 0xc5, 0x5e, 0xdd,
};

static const MessageEncodingTestVector sMessageEncodingTest0380 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x69D37282,
        0,
        0x2C50,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0380_EncryptionKey,
    sMessageEncodingTest0380_Payload,
    sizeof(sMessageEncodingTest0380_Payload),
    sMessageEncodingTest0380_ExpectedEncoding,
    sizeof(sMessageEncodingTest0380_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0381_EncryptionKey =
{
    {
        0x14, 0xcd, 0xcc, 0xc3, 0x1d, 0xba, 0xba, 0x6b, 0xab, 0x17, 0xee, 0x7a, 0x5f, 0x7d, 0x83, 0x96,
    }
};
static const uint8_t sMessageEncodingTest0381_Payload[] =
{
    0xf9,
};

static const uint8_t sMessageEncodingTest0381_ExpectedEncoding[] =
{
    0x20, 0x20, 0x34, 0x55, 0x5a, 0x94, 0x6f, 0x28, 0xc9, 0xa3, 0xb2, 0x4f, 0xe8, 0xe1, 0xd3, 0x9d,
    0x95,
};

static const MessageEncodingTestVector sMessageEncodingTest0381 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x945A5534,
        0,
        0x286F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0381_EncryptionKey,
    sMessageEncodingTest0381_Payload,
    sizeof(sMessageEncodingTest0381_Payload),
    sMessageEncodingTest0381_ExpectedEncoding,
    sizeof(sMessageEncodingTest0381_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0382_EncryptionKey =
{
    {
        0xe8, 0x04, 0xb5, 0x80, 0x52, 0x61, 0x35, 0x1f, 0xa8, 0xc4, 0xb5, 0x46, 0x5f, 0x23, 0x82, 0x70,
    }
};
static const uint8_t sMessageEncodingTest0382_Payload[] =
{
    0xce,
};

static const uint8_t sMessageEncodingTest0382_ExpectedEncoding[] =
{
    0x30, 0x20, 0xd3, 0x87, 0xbb, 0xda, 0x60, 0x24, 0xdc, 0xcc, 0x96, 0x9a, 0x98, 0x4d, 0x84, 0x73,
    0x5c, 0xbb, 0x9f, 0xc1, 0x6f, 0xd5, 0x36, 0x95, 0x9d,
};

static const MessageEncodingTestVector sMessageEncodingTest0382 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xDABB87D3,
        0,
        0x2460,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0382_EncryptionKey,
    sMessageEncodingTest0382_Payload,
    sizeof(sMessageEncodingTest0382_Payload),
    sMessageEncodingTest0382_ExpectedEncoding,
    sizeof(sMessageEncodingTest0382_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0383_Payload[] =
{
    0x9c, 0xe2, 0xb7, 0x6e, 0xff, 0xb2, 0xcc, 0xbd, 0x6a, 0x19,
};

static const uint8_t sMessageEncodingTest0383_ExpectedEncoding[] =
{
    0x00, 0x27, 0xbb, 0x1b, 0xec, 0x76, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9c, 0xe2, 0xb7, 0x6e, 0xff, 0xb2, 0xcc, 0xbd, 0x6a, 0x19,
};

static const MessageEncodingTestVector sMessageEncodingTest0383 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x76EC1BBB,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0383_Payload,
    sizeof(sMessageEncodingTest0383_Payload),
    sMessageEncodingTest0383_ExpectedEncoding,
    sizeof(sMessageEncodingTest0383_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0384_EncryptionKey =
{
    {
        0x5d, 0x2e, 0x77, 0x2b, 0x85, 0x83, 0xa5, 0xb0, 0x1f, 0xbc, 0x9b, 0x95, 0x85, 0x76, 0x13, 0x5c,
    },
    {
        0x20, 0x7a, 0x2f, 0x0e, 0xd4, 0x46, 0xa0, 0xf3, 0xf3, 0x39, 0x90, 0xaa, 0x5b, 0xf2, 0x52, 0x0c,
        0x7b, 0xc5, 0xb3, 0x38,
    }
};
static const uint8_t sMessageEncodingTest0384_Payload[] =
{
    0xca, 0x35, 0xd5, 0x45, 0x88, 0x66, 0xc1, 0xef, 0x5b, 0x04,
};

static const uint8_t sMessageEncodingTest0384_ExpectedEncoding[] =
{
    0x10, 0x27, 0xe5, 0xe2, 0xa4, 0x67, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x54, 0x25, 0x7e, 0x8a, 0xe2, 0xed, 0x40, 0x0e, 0x46, 0xfe,
    0xe7, 0x96, 0xf9, 0xe2, 0xe0, 0x43, 0x36, 0x9f, 0x58, 0x69, 0xfc, 0x9a, 0x2b, 0x7d, 0x36, 0x27,
    0x32, 0x4b, 0x8d, 0x8e, 0x85, 0xa3,
};

static const MessageEncodingTestVector sMessageEncodingTest0384 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x67A4E2E5,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2554,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0384_EncryptionKey,
    sMessageEncodingTest0384_Payload,
    sizeof(sMessageEncodingTest0384_Payload),
    sMessageEncodingTest0384_ExpectedEncoding,
    sizeof(sMessageEncodingTest0384_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0385_EncryptionKey =
{
    {
        0x1d, 0x5a, 0x71, 0xb0, 0x4f, 0x32, 0xe3, 0xc3, 0xb9, 0x90, 0x82, 0x1b, 0xec, 0x82, 0x8e, 0x80,
    }
};
static const uint8_t sMessageEncodingTest0385_Payload[] =
{
    0xbb, 0x96, 0x40, 0xca, 0x73, 0x82, 0x2d, 0xe8, 0x93, 0xbb,
};

static const uint8_t sMessageEncodingTest0385_ExpectedEncoding[] =
{
    0x20, 0x27, 0x5e, 0x15, 0x55, 0x5b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0c, 0x29, 0x4b, 0x7a, 0xde, 0x52, 0x78, 0x9a, 0xed, 0x2b,
    0xc8, 0xc4, 0x2d, 0x4b, 0x45, 0x97, 0x08, 0xc5, 0x88, 0xfa,
};

static const MessageEncodingTestVector sMessageEncodingTest0385 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x5B55155E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x290C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0385_EncryptionKey,
    sMessageEncodingTest0385_Payload,
    sizeof(sMessageEncodingTest0385_Payload),
    sMessageEncodingTest0385_ExpectedEncoding,
    sizeof(sMessageEncodingTest0385_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0386_EncryptionKey =
{
    {
        0x17, 0x00, 0x2c, 0x0d, 0x9f, 0x00, 0x32, 0xc7, 0x79, 0xf3, 0x02, 0xa7, 0x9d, 0x13, 0x72, 0x46,
    }
};
static const uint8_t sMessageEncodingTest0386_Payload[] =
{
    0xa7, 0x35, 0x9c, 0x6d, 0x7a, 0x0e, 0xc6, 0xcb, 0x31, 0x3b,
};

static const uint8_t sMessageEncodingTest0386_ExpectedEncoding[] =
{
    0x30, 0x27, 0xa5, 0x2f, 0xd7, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb2, 0x2c, 0x2f, 0xd0, 0xeb, 0xf4, 0xc1, 0x56, 0x9d, 0xc9,
    0x52, 0xc0, 0xe7, 0x1f, 0x07, 0x43, 0x30, 0x66, 0x4c, 0x53, 0x5b, 0x38, 0xde, 0xba, 0x43, 0xed,
    0x47, 0xb8,
};

static const MessageEncodingTestVector sMessageEncodingTest0386 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7FD72FA5,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2CB2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0386_EncryptionKey,
    sMessageEncodingTest0386_Payload,
    sizeof(sMessageEncodingTest0386_Payload),
    sMessageEncodingTest0386_ExpectedEncoding,
    sizeof(sMessageEncodingTest0386_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0387_Payload[] =
{
    0x1e, 0x9f, 0xa6, 0x9f, 0x93, 0xd4, 0x85, 0xa9, 0x14, 0xc3,
};

static const uint8_t sMessageEncodingTest0387_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x1f, 0xf4, 0xfc, 0x83, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x1e, 0x9f, 0xa6, 0x9f, 0x93, 0xd4, 0x85, 0xa9, 0x14, 0xc3,
};

static const MessageEncodingTestVector sMessageEncodingTest0387 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x83FCF41F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0387_Payload,
    sizeof(sMessageEncodingTest0387_Payload),
    sMessageEncodingTest0387_ExpectedEncoding,
    sizeof(sMessageEncodingTest0387_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0388_EncryptionKey =
{
    {
        0x28, 0x83, 0xc4, 0x03, 0x50, 0x61, 0x5f, 0xf7, 0x97, 0x73, 0xad, 0xae, 0xc4, 0x36, 0x8a, 0x80,
    },
    {
        0xcd, 0x7e, 0xf1, 0x86, 0x65, 0x7e, 0xae, 0x2a, 0x79, 0x09, 0x31, 0x5a, 0x07, 0xe0, 0xd6, 0xa1,
        0xc7, 0xf0, 0x82, 0x25,
    }
};
static const uint8_t sMessageEncodingTest0388_Payload[] =
{
    0x22, 0x23, 0xb9, 0xe7, 0x4d, 0x9c, 0xd4, 0x62, 0xf1, 0x56,
};

static const uint8_t sMessageEncodingTest0388_ExpectedEncoding[] =
{
    0x10, 0x2b, 0x31, 0x78, 0xa1, 0xfa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x27, 0x2f, 0xab, 0xb0, 0xb5, 0x1e, 0x13, 0xe5, 0xf2, 0xd3,
    0xc6, 0xc7, 0x81, 0x25, 0x58, 0x33, 0x93, 0xe3, 0x14, 0xc4, 0xd0, 0x09, 0x6f, 0xf6, 0x21, 0xdc,
    0x79, 0x00, 0x84, 0x6e, 0xb2, 0xe4,
};

static const MessageEncodingTestVector sMessageEncodingTest0388 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xFAA17831,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2F27,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0388_EncryptionKey,
    sMessageEncodingTest0388_Payload,
    sizeof(sMessageEncodingTest0388_Payload),
    sMessageEncodingTest0388_ExpectedEncoding,
    sizeof(sMessageEncodingTest0388_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0389_EncryptionKey =
{
    {
        0xf2, 0x84, 0x24, 0xa4, 0x26, 0xed, 0x01, 0x85, 0x9c, 0x04, 0xde, 0x43, 0xbe, 0x13, 0xf5, 0x23,
    }
};
static const uint8_t sMessageEncodingTest0389_Payload[] =
{
    0x53, 0xe5, 0x31, 0x1a, 0x9c, 0xbb, 0x20, 0x64, 0xed, 0x6c,
};

static const uint8_t sMessageEncodingTest0389_ExpectedEncoding[] =
{
    0x20, 0x2b, 0x33, 0x45, 0x4f, 0xfd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8b, 0x2f, 0xa3, 0xe8, 0x96, 0x6d, 0xae, 0x1f, 0x41, 0xce,
    0x5b, 0xca, 0xd1, 0x0a, 0xd6, 0x16, 0x3c, 0x45, 0xf2, 0x3d,
};

static const MessageEncodingTestVector sMessageEncodingTest0389 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xFD4F4533,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2F8B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0389_EncryptionKey,
    sMessageEncodingTest0389_Payload,
    sizeof(sMessageEncodingTest0389_Payload),
    sMessageEncodingTest0389_ExpectedEncoding,
    sizeof(sMessageEncodingTest0389_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0390_EncryptionKey =
{
    {
        0x7c, 0x33, 0xc7, 0xb6, 0x89, 0xb5, 0x78, 0xd2, 0x53, 0xd6, 0x3b, 0x5a, 0x63, 0x76, 0x9e, 0xbf,
    }
};
static const uint8_t sMessageEncodingTest0390_Payload[] =
{
    0x2c, 0xb2, 0xd4, 0x13, 0xb5, 0xed, 0xca, 0xb5, 0x25, 0x60,
};

static const uint8_t sMessageEncodingTest0390_ExpectedEncoding[] =
{
    0x30, 0x2b, 0xe7, 0xe8, 0x7f, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x89, 0x25, 0x8c, 0x73, 0x27, 0xdf, 0x58, 0xb0, 0xcf, 0xb2,
    0x45, 0xbe, 0x3a, 0xa5, 0x91, 0x87, 0xeb, 0xe7, 0x63, 0x1b, 0xe5, 0xd4, 0xb0, 0x91, 0x09, 0x9a,
    0x7d, 0x4d,
};

static const MessageEncodingTestVector sMessageEncodingTest0390 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF87FE8E7,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2589,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0390_EncryptionKey,
    sMessageEncodingTest0390_Payload,
    sizeof(sMessageEncodingTest0390_Payload),
    sMessageEncodingTest0390_ExpectedEncoding,
    sizeof(sMessageEncodingTest0390_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0391_Payload[] =
{
    0xaa, 0x7a, 0x1e, 0xce, 0x61, 0xe3, 0x6b, 0x7b, 0x1d, 0xf2,
};

static const uint8_t sMessageEncodingTest0391_ExpectedEncoding[] =
{
    0x00, 0x23, 0x45, 0x7d, 0xb1, 0x4b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xaa, 0x7a, 0x1e, 0xce, 0x61, 0xe3, 0x6b, 0x7b, 0x1d, 0xf2,
};

static const MessageEncodingTestVector sMessageEncodingTest0391 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4BB17D45,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0391_Payload,
    sizeof(sMessageEncodingTest0391_Payload),
    sMessageEncodingTest0391_ExpectedEncoding,
    sizeof(sMessageEncodingTest0391_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0392_EncryptionKey =
{
    {
        0x87, 0xa9, 0xc8, 0xfe, 0x32, 0x69, 0x4f, 0x17, 0x32, 0xe8, 0x84, 0x56, 0xcc, 0x5b, 0x9d, 0x52,
    },
    {
        0xa5, 0x9f, 0x0b, 0xdd, 0x5c, 0x53, 0x17, 0x7c, 0x96, 0x45, 0xf9, 0x6d, 0xd0, 0x74, 0x52, 0x62,
        0xc0, 0x56, 0x83, 0x9e,
    }
};
static const uint8_t sMessageEncodingTest0392_Payload[] =
{
    0x3b, 0xb6, 0xa0, 0x1e, 0x42, 0x1c, 0xbe, 0xd5, 0xb4, 0x85,
};

static const uint8_t sMessageEncodingTest0392_ExpectedEncoding[] =
{
    0x10, 0x23, 0xa0, 0xb8, 0x87, 0xb2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xad, 0x29, 0x55, 0xec, 0x40, 0x3f, 0x90, 0xa4, 0x75, 0xf6,
    0x57, 0x86, 0xd3, 0x78, 0x07, 0x29, 0xbc, 0xf5, 0xed, 0x1e, 0x49, 0xc8, 0x43, 0x05, 0x22, 0x95,
    0xa3, 0xe9, 0x78, 0x1e, 0x95, 0x44,
};

static const MessageEncodingTestVector sMessageEncodingTest0392 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB287B8A0,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x29AD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0392_EncryptionKey,
    sMessageEncodingTest0392_Payload,
    sizeof(sMessageEncodingTest0392_Payload),
    sMessageEncodingTest0392_ExpectedEncoding,
    sizeof(sMessageEncodingTest0392_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0393_EncryptionKey =
{
    {
        0x36, 0x12, 0x5d, 0xc1, 0xf6, 0xc8, 0x5f, 0x14, 0x4b, 0xe9, 0x07, 0x00, 0x74, 0x3b, 0x8f, 0xd3,
    }
};
static const uint8_t sMessageEncodingTest0393_Payload[] =
{
    0x8e, 0x95, 0x59, 0xcf, 0xf0, 0xc5, 0x16, 0x0e, 0x48, 0x2f,
};

static const uint8_t sMessageEncodingTest0393_ExpectedEncoding[] =
{
    0x20, 0x23, 0xb8, 0x45, 0x33, 0x9d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xba, 0x22, 0xdc, 0x12, 0xb4, 0xfa, 0x3a, 0xc7, 0x43, 0x62,
    0x6f, 0xb5, 0x65, 0xed, 0xab, 0xa4, 0xc6, 0xea, 0x76, 0xf5,
};

static const MessageEncodingTestVector sMessageEncodingTest0393 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x9D3345B8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x22BA,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0393_EncryptionKey,
    sMessageEncodingTest0393_Payload,
    sizeof(sMessageEncodingTest0393_Payload),
    sMessageEncodingTest0393_ExpectedEncoding,
    sizeof(sMessageEncodingTest0393_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0394_EncryptionKey =
{
    {
        0xec, 0x45, 0x03, 0xf1, 0xcf, 0xba, 0x32, 0x95, 0xda, 0xe7, 0x64, 0x5f, 0x57, 0x88, 0x7e, 0x56,
    }
};
static const uint8_t sMessageEncodingTest0394_Payload[] =
{
    0xa4, 0x3e, 0xce, 0x10, 0xcd, 0xc0, 0x0c, 0x99, 0x06, 0x13,
};

static const uint8_t sMessageEncodingTest0394_ExpectedEncoding[] =
{
    0x30, 0x23, 0x71, 0xef, 0x62, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x29, 0x2c, 0x30, 0xf2, 0x24, 0xda, 0x25, 0x3b, 0x09, 0xa3,
    0x23, 0xa4, 0x41, 0x76, 0x2a, 0x89, 0xed, 0x6e, 0xc7, 0x8f, 0x44, 0x02, 0x27, 0xb0, 0x10, 0x53,
    0xbd, 0x45,
};

static const MessageEncodingTestVector sMessageEncodingTest0394 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0C62EF71,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2C29,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0394_EncryptionKey,
    sMessageEncodingTest0394_Payload,
    sizeof(sMessageEncodingTest0394_Payload),
    sMessageEncodingTest0394_ExpectedEncoding,
    sizeof(sMessageEncodingTest0394_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0395_Payload[] =
{
    0x62, 0x79, 0xc0, 0x41, 0xc9, 0xc9, 0x09, 0x15, 0xbd, 0xc6,
};

static const uint8_t sMessageEncodingTest0395_ExpectedEncoding[] =
{
    0x00, 0x25, 0xa3, 0x82, 0x9b, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x62, 0x79,
    0xc0, 0x41, 0xc9, 0xc9, 0x09, 0x15, 0xbd, 0xc6,
};

static const MessageEncodingTestVector sMessageEncodingTest0395 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x029B82A3,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0395_Payload,
    sizeof(sMessageEncodingTest0395_Payload),
    sMessageEncodingTest0395_ExpectedEncoding,
    sizeof(sMessageEncodingTest0395_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0396_EncryptionKey =
{
    {
        0xa5, 0xaf, 0x54, 0x21, 0x32, 0xa1, 0xcb, 0xd5, 0x17, 0x39, 0xb9, 0x95, 0x08, 0xff, 0xa6, 0x7e,
    },
    {
        0x11, 0xea, 0x58, 0x7f, 0x24, 0xe7, 0xda, 0x25, 0xe4, 0x6b, 0x65, 0xde, 0x2b, 0xe0, 0xda, 0xbb,
        0xa1, 0x7f, 0x38, 0xa9,
    }
};
static const uint8_t sMessageEncodingTest0396_Payload[] =
{
    0x76, 0x11, 0xc7, 0x2d, 0xfd, 0xe8, 0x32, 0x00, 0x4b, 0xa9,
};

static const uint8_t sMessageEncodingTest0396_ExpectedEncoding[] =
{
    0x10, 0x25, 0x5c, 0xe6, 0x48, 0xbf, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa1, 0x29,
    0x2a, 0x8a, 0x1e, 0xbc, 0x13, 0xc8, 0xaf, 0x02, 0x3a, 0x2b, 0xd7, 0xea, 0x81, 0x6a, 0x8c, 0xa0,
    0x4b, 0x22, 0x01, 0xbd, 0xe4, 0x47, 0xa7, 0xcd, 0xd4, 0xe9, 0x03, 0x4e, 0x13, 0x00,
};

static const MessageEncodingTestVector sMessageEncodingTest0396 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xBF48E65C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x29A1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0396_EncryptionKey,
    sMessageEncodingTest0396_Payload,
    sizeof(sMessageEncodingTest0396_Payload),
    sMessageEncodingTest0396_ExpectedEncoding,
    sizeof(sMessageEncodingTest0396_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0397_EncryptionKey =
{
    {
        0x14, 0x03, 0x89, 0x60, 0x6e, 0xd8, 0x52, 0xe0, 0x9e, 0x80, 0xb2, 0x6d, 0x3f, 0xc0, 0x25, 0xb8,
    }
};
static const uint8_t sMessageEncodingTest0397_Payload[] =
{
    0xae, 0x9a, 0xdc, 0x1e, 0xd4, 0x0e, 0xbd, 0x84, 0x34, 0xdc,
};

static const uint8_t sMessageEncodingTest0397_ExpectedEncoding[] =
{
    0x20, 0x25, 0x50, 0xb2, 0x26, 0x6d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x1b, 0x2b,
    0x7f, 0xe2, 0x42, 0xc8, 0xf0, 0x25, 0xce, 0x7b, 0xc0, 0xd1, 0x70, 0xdc, 0x11, 0xac, 0xed, 0x2f,
    0x67, 0xd0,
};

static const MessageEncodingTestVector sMessageEncodingTest0397 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x6D26B250,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2B1B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0397_EncryptionKey,
    sMessageEncodingTest0397_Payload,
    sizeof(sMessageEncodingTest0397_Payload),
    sMessageEncodingTest0397_ExpectedEncoding,
    sizeof(sMessageEncodingTest0397_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0398_EncryptionKey =
{
    {
        0xdb, 0x7f, 0x8a, 0x7b, 0x5f, 0xa6, 0x93, 0x88, 0x00, 0x89, 0x02, 0xbb, 0xfe, 0xe3, 0xb1, 0x62,
    }
};
static const uint8_t sMessageEncodingTest0398_Payload[] =
{
    0x73, 0x95, 0x5e, 0xd8, 0xc6, 0xf5, 0x1b, 0xb4, 0xfa, 0x74,
};

static const uint8_t sMessageEncodingTest0398_ExpectedEncoding[] =
{
    0x30, 0x25, 0x6d, 0x16, 0x99, 0xc5, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x72, 0x28,
    0x66, 0x77, 0x2c, 0x4f, 0xb8, 0x1f, 0x2c, 0x77, 0xe8, 0xc5, 0x69, 0xec, 0x34, 0xf8, 0xdd, 0x92,
    0x45, 0xf7, 0x3d, 0xba, 0xe5, 0x67, 0x75, 0x0a, 0x30, 0xcf,
};

static const MessageEncodingTestVector sMessageEncodingTest0398 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xC599166D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2872,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0398_EncryptionKey,
    sMessageEncodingTest0398_Payload,
    sizeof(sMessageEncodingTest0398_Payload),
    sMessageEncodingTest0398_ExpectedEncoding,
    sizeof(sMessageEncodingTest0398_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0399_Payload[] =
{
    0x3a, 0x35, 0x49, 0x7f, 0x02, 0x44, 0x6d, 0x91, 0x17, 0xc4,
};

static const uint8_t sMessageEncodingTest0399_ExpectedEncoding[] =
{
    0x00, 0x29, 0xd0, 0x8c, 0xf9, 0xa9, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x3a, 0x35,
    0x49, 0x7f, 0x02, 0x44, 0x6d, 0x91, 0x17, 0xc4,
};

static const MessageEncodingTestVector sMessageEncodingTest0399 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA9F98CD0,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0399_Payload,
    sizeof(sMessageEncodingTest0399_Payload),
    sMessageEncodingTest0399_ExpectedEncoding,
    sizeof(sMessageEncodingTest0399_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0400_EncryptionKey =
{
    {
        0xd7, 0x65, 0x49, 0x7f, 0xef, 0xb7, 0xae, 0x91, 0x2a, 0xb3, 0x80, 0x8c, 0x1f, 0xbf, 0x70, 0x32,
    },
    {
        0xce, 0xa1, 0x2f, 0x3c, 0xe5, 0x1d, 0xe8, 0xb6, 0x27, 0xf8, 0x2f, 0x80, 0xa7, 0x56, 0x59, 0x05,
        0x5a, 0x15, 0xda, 0x23,
    }
};
static const uint8_t sMessageEncodingTest0400_Payload[] =
{
    0x57, 0x1b, 0x18, 0x6a, 0x1e, 0x3a, 0x17, 0x4e, 0x72, 0x1c,
};

static const uint8_t sMessageEncodingTest0400_ExpectedEncoding[] =
{
    0x10, 0x29, 0x1b, 0x8b, 0x2a, 0xce, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xac, 0x25,
    0x6c, 0xbf, 0x20, 0xd7, 0xbe, 0xe4, 0xaf, 0xc4, 0xdd, 0xac, 0x12, 0xc0, 0xaa, 0x63, 0xf5, 0x3f,
    0x54, 0x43, 0xab, 0x6b, 0xe7, 0x42, 0x44, 0x6e, 0xf5, 0x55, 0xb7, 0xd8, 0x5e, 0x1d,
};

static const MessageEncodingTestVector sMessageEncodingTest0400 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xCE2A8B1B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x25AC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0400_EncryptionKey,
    sMessageEncodingTest0400_Payload,
    sizeof(sMessageEncodingTest0400_Payload),
    sMessageEncodingTest0400_ExpectedEncoding,
    sizeof(sMessageEncodingTest0400_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0401_EncryptionKey =
{
    {
        0xe0, 0x7e, 0x1e, 0xc4, 0xd3, 0xf4, 0x3a, 0xcc, 0xc3, 0xbb, 0x2a, 0xf9, 0x2a, 0x38, 0x6b, 0x01,
    }
};
static const uint8_t sMessageEncodingTest0401_Payload[] =
{
    0x88, 0xc8, 0x61, 0xcf, 0x65, 0x3d, 0x30, 0xdf, 0x7b, 0xd1,
};

static const uint8_t sMessageEncodingTest0401_ExpectedEncoding[] =
{
    0x20, 0x29, 0xdb, 0xab, 0x38, 0xcb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7a, 0x20,
    0xcb, 0x5e, 0x7e, 0xc1, 0xb3, 0x50, 0x1a, 0x32, 0xc6, 0x46, 0x8a, 0x7f, 0x35, 0x9a, 0xd8, 0x38,
    0x6f, 0xb3,
};

static const MessageEncodingTestVector sMessageEncodingTest0401 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xCB38ABDB,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x207A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0401_EncryptionKey,
    sMessageEncodingTest0401_Payload,
    sizeof(sMessageEncodingTest0401_Payload),
    sMessageEncodingTest0401_ExpectedEncoding,
    sizeof(sMessageEncodingTest0401_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0402_EncryptionKey =
{
    {
        0x65, 0x4a, 0xd8, 0xb2, 0xc2, 0x35, 0xae, 0xd1, 0x5d, 0xfa, 0x3f, 0x26, 0xf1, 0x4e, 0x63, 0xc6,
    }
};
static const uint8_t sMessageEncodingTest0402_Payload[] =
{
    0x7b, 0x01, 0x8a, 0x57, 0xcc, 0x95, 0x56, 0xf0, 0x6a, 0x1a,
};

static const uint8_t sMessageEncodingTest0402_ExpectedEncoding[] =
{
    0x30, 0x29, 0x58, 0x10, 0x17, 0xb7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x20, 0x2a,
    0x91, 0xcc, 0x61, 0x80, 0xf2, 0x7a, 0xa5, 0x87, 0xf3, 0x07, 0xc8, 0x8c, 0xfb, 0xda, 0x0c, 0x67,
    0xed, 0xcb, 0xb9, 0x93, 0xd8, 0x76, 0x8f, 0x84, 0x9c, 0x1d,
};

static const MessageEncodingTestVector sMessageEncodingTest0402 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB7171058,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A20,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0402_EncryptionKey,
    sMessageEncodingTest0402_Payload,
    sizeof(sMessageEncodingTest0402_Payload),
    sMessageEncodingTest0402_ExpectedEncoding,
    sizeof(sMessageEncodingTest0402_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0403_Payload[] =
{
    0xec, 0xcf, 0x9f, 0xa9, 0x6c, 0x36, 0x2a, 0x67, 0x19, 0xc3,
};

static const uint8_t sMessageEncodingTest0403_ExpectedEncoding[] =
{
    0x00, 0x21, 0x23, 0x86, 0xc3, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xec, 0xcf,
    0x9f, 0xa9, 0x6c, 0x36, 0x2a, 0x67, 0x19, 0xc3,
};

static const MessageEncodingTestVector sMessageEncodingTest0403 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x64C38623,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0403_Payload,
    sizeof(sMessageEncodingTest0403_Payload),
    sMessageEncodingTest0403_ExpectedEncoding,
    sizeof(sMessageEncodingTest0403_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0404_EncryptionKey =
{
    {
        0x2c, 0x4b, 0x71, 0x0f, 0x7c, 0xae, 0xb7, 0x6d, 0x86, 0xdb, 0x5c, 0x24, 0x9d, 0xa4, 0xc6, 0xbf,
    },
    {
        0x31, 0x52, 0x20, 0xe0, 0xa2, 0xed, 0x80, 0x27, 0xc0, 0xe1, 0xe4, 0xe9, 0x03, 0x76, 0xa0, 0x75,
        0x29, 0xd5, 0x63, 0x82,
    }
};
static const uint8_t sMessageEncodingTest0404_Payload[] =
{
    0xec, 0x55, 0x86, 0x7a, 0xfa, 0x23, 0x67, 0x1b, 0x7c, 0x18,
};

static const uint8_t sMessageEncodingTest0404_ExpectedEncoding[] =
{
    0x10, 0x21, 0xc6, 0x6c, 0xde, 0x54, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xd5, 0x26,
    0xd6, 0xa0, 0xef, 0x55, 0xa2, 0x7a, 0x91, 0x18, 0x12, 0xa6, 0x73, 0x26, 0x71, 0xaa, 0x19, 0xea,
    0xd4, 0x98, 0xf9, 0x0a, 0x08, 0x6a, 0xa7, 0x3a, 0x94, 0x4e, 0xee, 0xb5, 0x55, 0x55,
};

static const MessageEncodingTestVector sMessageEncodingTest0404 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x54DE6CC6,
        kWeaveHeaderFlag_DestNodeId,
        0x26D5,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0404_EncryptionKey,
    sMessageEncodingTest0404_Payload,
    sizeof(sMessageEncodingTest0404_Payload),
    sMessageEncodingTest0404_ExpectedEncoding,
    sizeof(sMessageEncodingTest0404_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0405_EncryptionKey =
{
    {
        0x9e, 0xec, 0xf9, 0x6e, 0x96, 0xac, 0xfd, 0x73, 0x0f, 0xb2, 0x70, 0xd6, 0x92, 0x11, 0xdf, 0x6c,
    }
};
static const uint8_t sMessageEncodingTest0405_Payload[] =
{
    0x90, 0x89, 0x16, 0x6c, 0x38, 0xc4, 0xf2, 0xb3, 0x71, 0xc9,
};

static const uint8_t sMessageEncodingTest0405_ExpectedEncoding[] =
{
    0x20, 0x21, 0xe0, 0x82, 0xbc, 0x8a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xcc, 0x25,
    0x31, 0xdd, 0x3d, 0x79, 0x61, 0xf5, 0x33, 0x4f, 0x2a, 0x96, 0xe8, 0x50, 0x5b, 0x08, 0x7c, 0x76,
    0x00, 0x58,
};

static const MessageEncodingTestVector sMessageEncodingTest0405 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x8ABC82E0,
        kWeaveHeaderFlag_DestNodeId,
        0x25CC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0405_EncryptionKey,
    sMessageEncodingTest0405_Payload,
    sizeof(sMessageEncodingTest0405_Payload),
    sMessageEncodingTest0405_ExpectedEncoding,
    sizeof(sMessageEncodingTest0405_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0406_EncryptionKey =
{
    {
        0xe9, 0x1a, 0xaa, 0x11, 0x00, 0x02, 0xe4, 0x63, 0xfc, 0x73, 0x48, 0x26, 0xf5, 0x71, 0xc2, 0x57,
    }
};
static const uint8_t sMessageEncodingTest0406_Payload[] =
{
    0x79, 0xfe, 0x35, 0x41, 0x8c, 0x1f, 0xf8, 0x95, 0xe6, 0x1b,
};

static const uint8_t sMessageEncodingTest0406_ExpectedEncoding[] =
{
    0x30, 0x21, 0xf7, 0x9b, 0xa6, 0x71, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x22, 0x2b,
    0xdc, 0xa7, 0x50, 0xe5, 0x5e, 0x6d, 0x3d, 0xaa, 0xd5, 0x3a, 0x7a, 0x57, 0x91, 0x52, 0xee, 0x24,
    0xe5, 0x7b, 0x3d, 0xbd, 0x8f, 0x2c, 0x9d, 0xe3, 0x6d, 0x5c,
};

static const MessageEncodingTestVector sMessageEncodingTest0406 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x71A69BF7,
        kWeaveHeaderFlag_DestNodeId,
        0x2B22,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0406_EncryptionKey,
    sMessageEncodingTest0406_Payload,
    sizeof(sMessageEncodingTest0406_Payload),
    sMessageEncodingTest0406_ExpectedEncoding,
    sizeof(sMessageEncodingTest0406_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0407_Payload[] =
{
    0x6c, 0x1c, 0x08, 0xeb, 0x77, 0xdd, 0x4f, 0x42, 0x8d, 0xf0,
};

static const uint8_t sMessageEncodingTest0407_ExpectedEncoding[] =
{
    0x00, 0x26, 0x0c, 0x24, 0x83, 0xe1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6c, 0x1c,
    0x08, 0xeb, 0x77, 0xdd, 0x4f, 0x42, 0x8d, 0xf0,
};

static const MessageEncodingTestVector sMessageEncodingTest0407 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE183240C,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0407_Payload,
    sizeof(sMessageEncodingTest0407_Payload),
    sMessageEncodingTest0407_ExpectedEncoding,
    sizeof(sMessageEncodingTest0407_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0408_EncryptionKey =
{
    {
        0x26, 0x46, 0xf9, 0xe8, 0xce, 0x79, 0x02, 0x05, 0x49, 0x94, 0x3e, 0xe2, 0x51, 0xd2, 0x07, 0x62,
    },
    {
        0xe2, 0x27, 0xee, 0x11, 0x6c, 0x8b, 0x59, 0x0c, 0xd1, 0x7f, 0xb5, 0x28, 0xa6, 0x39, 0x17, 0x66,
        0x8a, 0x84, 0x3f, 0xce,
    }
};
static const uint8_t sMessageEncodingTest0408_Payload[] =
{
    0x31, 0x2c, 0x44, 0x22, 0x25, 0xb3, 0x36, 0x43, 0x33, 0x84,
};

static const uint8_t sMessageEncodingTest0408_ExpectedEncoding[] =
{
    0x10, 0x26, 0x80, 0x19, 0x25, 0xeb, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x55, 0x2f,
    0x0d, 0x0c, 0xe2, 0x0a, 0xef, 0x38, 0xe3, 0xb3, 0xe8, 0x9c, 0xbf, 0x19, 0xc3, 0xa7, 0x5c, 0x6a,
    0x04, 0x41, 0x6c, 0x51, 0xbe, 0xb1, 0xe6, 0x37, 0x62, 0xf3, 0xe1, 0xf0, 0x99, 0xfe,
};

static const MessageEncodingTestVector sMessageEncodingTest0408 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xEB251980,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2F55,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0408_EncryptionKey,
    sMessageEncodingTest0408_Payload,
    sizeof(sMessageEncodingTest0408_Payload),
    sMessageEncodingTest0408_ExpectedEncoding,
    sizeof(sMessageEncodingTest0408_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0409_EncryptionKey =
{
    {
        0x79, 0xf5, 0x16, 0xcc, 0x48, 0x6a, 0xd7, 0xfd, 0x62, 0xa3, 0x9b, 0x29, 0xc7, 0xe8, 0xeb, 0x53,
    }
};
static const uint8_t sMessageEncodingTest0409_Payload[] =
{
    0x2c, 0x19, 0x77, 0xa4, 0xcf, 0xbc, 0x65, 0x3f, 0x98, 0x4c,
};

static const uint8_t sMessageEncodingTest0409_ExpectedEncoding[] =
{
    0x20, 0x26, 0xeb, 0x28, 0x99, 0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x50, 0x27,
    0xc8, 0xfe, 0xe9, 0x50, 0xd4, 0x5a, 0x2d, 0xe4, 0x4f, 0x5b, 0x8a, 0xb6, 0xa7, 0xea, 0x0d, 0x16,
    0x78, 0x3d,
};

static const MessageEncodingTestVector sMessageEncodingTest0409 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x739928EB,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2750,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0409_EncryptionKey,
    sMessageEncodingTest0409_Payload,
    sizeof(sMessageEncodingTest0409_Payload),
    sMessageEncodingTest0409_ExpectedEncoding,
    sizeof(sMessageEncodingTest0409_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0410_EncryptionKey =
{
    {
        0x94, 0x28, 0xe1, 0x11, 0x3d, 0x4a, 0xa8, 0x68, 0x34, 0xcb, 0x87, 0x12, 0x21, 0x6d, 0xa9, 0xf3,
    }
};
static const uint8_t sMessageEncodingTest0410_Payload[] =
{
    0x47, 0x46, 0xa1, 0xad, 0x12, 0x88, 0x9b, 0xe1, 0x4b, 0x99,
};

static const uint8_t sMessageEncodingTest0410_ExpectedEncoding[] =
{
    0x30, 0x26, 0xf2, 0x90, 0x38, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdc, 0x24,
    0xbb, 0xc8, 0x21, 0x9d, 0xd9, 0x7f, 0x18, 0x48, 0x39, 0xdf, 0xeb, 0xd4, 0x62, 0xd6, 0x9f, 0xe8,
    0xc1, 0x2f, 0x7e, 0x34, 0xe4, 0x82, 0xe5, 0x13, 0xf4, 0x90,
};

static const MessageEncodingTestVector sMessageEncodingTest0410 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x093890F2,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x24DC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0410_EncryptionKey,
    sMessageEncodingTest0410_Payload,
    sizeof(sMessageEncodingTest0410_Payload),
    sMessageEncodingTest0410_ExpectedEncoding,
    sizeof(sMessageEncodingTest0410_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0411_Payload[] =
{
    0x6a, 0x62, 0x2c, 0xf3, 0x31, 0xfc, 0x49, 0x13, 0x94, 0x1e,
};

static const uint8_t sMessageEncodingTest0411_ExpectedEncoding[] =
{
    0x00, 0x2a, 0x66, 0xab, 0x20, 0x27, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6a, 0x62,
    0x2c, 0xf3, 0x31, 0xfc, 0x49, 0x13, 0x94, 0x1e,
};

static const MessageEncodingTestVector sMessageEncodingTest0411 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2720AB66,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0411_Payload,
    sizeof(sMessageEncodingTest0411_Payload),
    sMessageEncodingTest0411_ExpectedEncoding,
    sizeof(sMessageEncodingTest0411_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0412_EncryptionKey =
{
    {
        0x19, 0x88, 0x58, 0x04, 0x03, 0x79, 0x78, 0x70, 0x64, 0x86, 0x0c, 0x92, 0x88, 0x27, 0x28, 0x81,
    },
    {
        0x48, 0xe9, 0x7b, 0x37, 0xfe, 0x34, 0x4e, 0x38, 0x9e, 0x7c, 0x05, 0x0a, 0x1c, 0x37, 0xa1, 0x91,
        0x0e, 0xf7, 0x01, 0xd8,
    }
};
static const uint8_t sMessageEncodingTest0412_Payload[] =
{
    0x95, 0x8c, 0xe0, 0x52, 0x2d, 0xc7, 0x3f, 0xb2, 0x62, 0xa9,
};

static const uint8_t sMessageEncodingTest0412_ExpectedEncoding[] =
{
    0x10, 0x2a, 0x41, 0xc8, 0xbd, 0xe5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x96, 0x2a,
    0x1c, 0x77, 0x07, 0x7c, 0x0d, 0x80, 0xe5, 0x91, 0x2c, 0x3c, 0x73, 0xcb, 0x7d, 0xba, 0xa0, 0x15,
    0xc8, 0x91, 0xdb, 0xbc, 0x0e, 0xbd, 0x2a, 0xa0, 0x33, 0x28, 0x1d, 0x7a, 0x62, 0xca,
};

static const MessageEncodingTestVector sMessageEncodingTest0412 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE5BDC841,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A96,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0412_EncryptionKey,
    sMessageEncodingTest0412_Payload,
    sizeof(sMessageEncodingTest0412_Payload),
    sMessageEncodingTest0412_ExpectedEncoding,
    sizeof(sMessageEncodingTest0412_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0413_EncryptionKey =
{
    {
        0xd0, 0x04, 0x5e, 0x98, 0x15, 0xf1, 0x7c, 0x96, 0x49, 0xb2, 0x6d, 0xf6, 0x88, 0x55, 0x77, 0xc5,
    }
};
static const uint8_t sMessageEncodingTest0413_Payload[] =
{
    0x65, 0x21, 0xa3, 0x31, 0x50, 0x1e, 0x3b, 0xe0, 0xad, 0xf9,
};

static const uint8_t sMessageEncodingTest0413_ExpectedEncoding[] =
{
    0x20, 0x2a, 0xa3, 0xd2, 0xcc, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb2, 0x21,
    0x4c, 0xeb, 0xc3, 0xfc, 0xf5, 0x9f, 0x11, 0xef, 0x45, 0xf1, 0xaf, 0x40, 0x18, 0x1d, 0x16, 0x6b,
    0xf5, 0xe4,
};

static const MessageEncodingTestVector sMessageEncodingTest0413 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xD5CCD2A3,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x21B2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0413_EncryptionKey,
    sMessageEncodingTest0413_Payload,
    sizeof(sMessageEncodingTest0413_Payload),
    sMessageEncodingTest0413_ExpectedEncoding,
    sizeof(sMessageEncodingTest0413_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0414_EncryptionKey =
{
    {
        0x59, 0xcb, 0x10, 0x9e, 0x6b, 0x6a, 0xcb, 0xc1, 0x20, 0x14, 0xec, 0x14, 0x76, 0x0c, 0x43, 0xcc,
    }
};
static const uint8_t sMessageEncodingTest0414_Payload[] =
{
    0x1f, 0x2d, 0x2a, 0xc5, 0xe5, 0x19, 0x09, 0x8b, 0x2c, 0xa7,
};

static const uint8_t sMessageEncodingTest0414_ExpectedEncoding[] =
{
    0x30, 0x2a, 0x0c, 0xb9, 0x85, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5f, 0x21,
    0xd6, 0x2f, 0xf5, 0x8e, 0xfb, 0xce, 0xc6, 0xb9, 0xe8, 0xb5, 0xef, 0x37, 0x86, 0xcc, 0x46, 0x36,
    0x22, 0x1a, 0xa1, 0xa7, 0xa1, 0xc7, 0xfb, 0xb6, 0xb6, 0xfa,
};

static const MessageEncodingTestVector sMessageEncodingTest0414 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4185B90C,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x215F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0414_EncryptionKey,
    sMessageEncodingTest0414_Payload,
    sizeof(sMessageEncodingTest0414_Payload),
    sMessageEncodingTest0414_ExpectedEncoding,
    sizeof(sMessageEncodingTest0414_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0415_Payload[] =
{
    0x9e, 0xb1, 0xad, 0x7d, 0x64, 0x5f, 0xf0, 0x3c, 0x54, 0x29,
};

static const uint8_t sMessageEncodingTest0415_ExpectedEncoding[] =
{
    0x00, 0x22, 0x6e, 0x90, 0xfa, 0xf2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9e, 0xb1,
    0xad, 0x7d, 0x64, 0x5f, 0xf0, 0x3c, 0x54, 0x29,
};

static const MessageEncodingTestVector sMessageEncodingTest0415 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF2FA906E,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0415_Payload,
    sizeof(sMessageEncodingTest0415_Payload),
    sMessageEncodingTest0415_ExpectedEncoding,
    sizeof(sMessageEncodingTest0415_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0416_EncryptionKey =
{
    {
        0x08, 0x1d, 0x2b, 0xf0, 0xbd, 0x27, 0xdb, 0xe0, 0xab, 0x06, 0x69, 0x78, 0x67, 0x1c, 0x44, 0x79,
    },
    {
        0x64, 0x32, 0x26, 0xa1, 0x10, 0xce, 0xa7, 0x2f, 0x59, 0x86, 0xd7, 0xc2, 0x1d, 0xa7, 0x3f, 0x2b,
        0x78, 0xe8, 0xc9, 0x5d,
    }
};
static const uint8_t sMessageEncodingTest0416_Payload[] =
{
    0xce, 0x5e, 0x88, 0x2a, 0xb4, 0x42, 0x99, 0x49, 0x10, 0xf1,
};

static const uint8_t sMessageEncodingTest0416_ExpectedEncoding[] =
{
    0x10, 0x22, 0x3d, 0xb9, 0x79, 0xdf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x38, 0x22,
    0x3f, 0x69, 0xaa, 0xd0, 0xa1, 0x77, 0x32, 0xa3, 0x5c, 0xdc, 0x16, 0x05, 0x52, 0xf0, 0x58, 0xe6,
    0xec, 0x84, 0xa1, 0x3f, 0x59, 0x2d, 0x54, 0xc0, 0x72, 0x45, 0x6a, 0xd8, 0x81, 0xbf,
};

static const MessageEncodingTestVector sMessageEncodingTest0416 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xDF79B93D,
        kWeaveHeaderFlag_SourceNodeId,
        0x2238,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0416_EncryptionKey,
    sMessageEncodingTest0416_Payload,
    sizeof(sMessageEncodingTest0416_Payload),
    sMessageEncodingTest0416_ExpectedEncoding,
    sizeof(sMessageEncodingTest0416_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0417_EncryptionKey =
{
    {
        0x34, 0x02, 0x8d, 0x41, 0x1c, 0xb1, 0x97, 0x30, 0x0f, 0x06, 0x23, 0x01, 0xff, 0xd0, 0x46, 0xa1,
    }
};
static const uint8_t sMessageEncodingTest0417_Payload[] =
{
    0x2d, 0xe2, 0x43, 0xee, 0x32, 0x1d, 0x54, 0xc5, 0x97, 0xa5,
};

static const uint8_t sMessageEncodingTest0417_ExpectedEncoding[] =
{
    0x20, 0x22, 0x6b, 0xad, 0x2f, 0x25, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x09, 0x2c,
    0x13, 0x3a, 0x45, 0x74, 0x1a, 0x4e, 0xfe, 0x6a, 0x77, 0x02, 0x77, 0xcf, 0xd0, 0x67, 0xf3, 0x86,
    0xeb, 0x56,
};

static const MessageEncodingTestVector sMessageEncodingTest0417 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x252FAD6B,
        kWeaveHeaderFlag_SourceNodeId,
        0x2C09,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0417_EncryptionKey,
    sMessageEncodingTest0417_Payload,
    sizeof(sMessageEncodingTest0417_Payload),
    sMessageEncodingTest0417_ExpectedEncoding,
    sizeof(sMessageEncodingTest0417_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0418_EncryptionKey =
{
    {
        0xbb, 0x80, 0x77, 0xfb, 0x2c, 0xd3, 0xc3, 0x90, 0x4d, 0xac, 0x49, 0xd1, 0xc3, 0x2e, 0xff, 0xd5,
    }
};
static const uint8_t sMessageEncodingTest0418_Payload[] =
{
    0xa8, 0x13, 0x3e, 0x85, 0x2c, 0x07, 0x19, 0xb1, 0xf1, 0x7d,
};

static const uint8_t sMessageEncodingTest0418_ExpectedEncoding[] =
{
    0x30, 0x22, 0x99, 0xba, 0x73, 0x7e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x86, 0x26,
    0x54, 0x97, 0xc9, 0x20, 0x3e, 0x71, 0x91, 0x66, 0x77, 0x31, 0x0a, 0x14, 0x1a, 0x0f, 0x34, 0x1b,
    0x3f, 0x78, 0xfd, 0x44, 0x38, 0xb6, 0xa2, 0x8b, 0x77, 0x1b,
};

static const MessageEncodingTestVector sMessageEncodingTest0418 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7E73BA99,
        kWeaveHeaderFlag_SourceNodeId,
        0x2686,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0418_EncryptionKey,
    sMessageEncodingTest0418_Payload,
    sizeof(sMessageEncodingTest0418_Payload),
    sMessageEncodingTest0418_ExpectedEncoding,
    sizeof(sMessageEncodingTest0418_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0419_Payload[] =
{
    0x04, 0x43, 0xeb, 0x81, 0xd2, 0x58, 0x04, 0x48, 0x57, 0xef,
};

static const uint8_t sMessageEncodingTest0419_ExpectedEncoding[] =
{
    0x00, 0x24, 0xb1, 0xa0, 0x1c, 0x7a, 0x04, 0x43, 0xeb, 0x81, 0xd2, 0x58, 0x04, 0x48, 0x57, 0xef,
};

static const MessageEncodingTestVector sMessageEncodingTest0419 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7A1CA0B1,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0419_Payload,
    sizeof(sMessageEncodingTest0419_Payload),
    sMessageEncodingTest0419_ExpectedEncoding,
    sizeof(sMessageEncodingTest0419_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0420_EncryptionKey =
{
    {
        0x6a, 0x54, 0x45, 0xce, 0x54, 0xa9, 0x0a, 0x1e, 0x27, 0x6b, 0x9f, 0xee, 0x7b, 0xdc, 0xdd, 0x12,
    },
    {
        0xb4, 0xe7, 0x81, 0xd5, 0x4e, 0xa2, 0xb3, 0xe3, 0x3d, 0xf3, 0x2f, 0x3f, 0x7e, 0xd7, 0xfd, 0x63,
        0x55, 0xaa, 0x70, 0x78,
    }
};
static const uint8_t sMessageEncodingTest0420_Payload[] =
{
    0xa7, 0x86, 0x20, 0x5c, 0x16, 0x75, 0xab, 0x4b, 0xc2, 0xdc,
};

static const uint8_t sMessageEncodingTest0420_ExpectedEncoding[] =
{
    0x10, 0x24, 0x22, 0x35, 0x63, 0xc0, 0x4e, 0x26, 0x38, 0xf9, 0xa7, 0x5e, 0xca, 0x62, 0xc4, 0xb7,
    0x9b, 0xe7, 0xd8, 0xbb, 0x3a, 0xf3, 0xf8, 0x0e, 0xb5, 0x33, 0x67, 0xf0, 0x6c, 0xcf, 0x0c, 0xee,
    0xe3, 0x92, 0x69, 0x42, 0x26, 0x53,
};

static const MessageEncodingTestVector sMessageEncodingTest0420 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xC0633522,
        kWeaveHeaderFlag_TunneledData,
        0x264E,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0420_EncryptionKey,
    sMessageEncodingTest0420_Payload,
    sizeof(sMessageEncodingTest0420_Payload),
    sMessageEncodingTest0420_ExpectedEncoding,
    sizeof(sMessageEncodingTest0420_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0421_EncryptionKey =
{
    {
        0x7f, 0xc7, 0x6d, 0xb1, 0xe2, 0xfe, 0x4b, 0x6e, 0xc5, 0x8e, 0xeb, 0x19, 0xaa, 0x61, 0x4c, 0x40,
    }
};
static const uint8_t sMessageEncodingTest0421_Payload[] =
{
    0x1a, 0x23, 0x39, 0x9a, 0xed, 0x1d, 0x50, 0x7f, 0xb9, 0x7b,
};

static const uint8_t sMessageEncodingTest0421_ExpectedEncoding[] =
{
    0x20, 0x24, 0x1e, 0x3d, 0xfa, 0x0b, 0x6b, 0x27, 0x56, 0x25, 0x7b, 0x2f, 0x9f, 0xee, 0x3b, 0x89,
    0xa3, 0x41, 0xdd, 0x0d, 0x83, 0x59, 0x6d, 0xc9, 0x90, 0xbc,
};

static const MessageEncodingTestVector sMessageEncodingTest0421 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0BFA3D1E,
        kWeaveHeaderFlag_TunneledData,
        0x276B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0421_EncryptionKey,
    sMessageEncodingTest0421_Payload,
    sizeof(sMessageEncodingTest0421_Payload),
    sMessageEncodingTest0421_ExpectedEncoding,
    sizeof(sMessageEncodingTest0421_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0422_EncryptionKey =
{
    {
        0x6d, 0x75, 0xae, 0xba, 0xbe, 0x18, 0x38, 0xec, 0xd4, 0x52, 0x58, 0x95, 0x43, 0xd4, 0x8d, 0x58,
    }
};
static const uint8_t sMessageEncodingTest0422_Payload[] =
{
    0xcb, 0xa8, 0xb7, 0xbc, 0xce, 0xc3, 0x8f, 0x7b, 0xc4, 0xf5,
};

static const uint8_t sMessageEncodingTest0422_ExpectedEncoding[] =
{
    0x30, 0x24, 0x03, 0x8d, 0x29, 0x64, 0x56, 0x26, 0xd5, 0xa6, 0xf9, 0x85, 0x91, 0xa4, 0x1a, 0x60,
    0xbb, 0x14, 0x13, 0xd0, 0xe8, 0x94, 0x2f, 0xea, 0x09, 0x62, 0x7e, 0x18, 0x6b, 0x3c, 0x38, 0x23,
    0xf2, 0xe0,
};

static const MessageEncodingTestVector sMessageEncodingTest0422 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x64298D03,
        kWeaveHeaderFlag_TunneledData,
        0x2656,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0422_EncryptionKey,
    sMessageEncodingTest0422_Payload,
    sizeof(sMessageEncodingTest0422_Payload),
    sMessageEncodingTest0422_ExpectedEncoding,
    sizeof(sMessageEncodingTest0422_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0423_Payload[] =
{
    0x90, 0xd0, 0xf2, 0x89, 0x9f, 0xef, 0xbd, 0x78, 0x5e, 0x37,
};

static const uint8_t sMessageEncodingTest0423_ExpectedEncoding[] =
{
    0x00, 0x28, 0xaa, 0x35, 0xe0, 0xef, 0x90, 0xd0, 0xf2, 0x89, 0x9f, 0xef, 0xbd, 0x78, 0x5e, 0x37,
};

static const MessageEncodingTestVector sMessageEncodingTest0423 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xEFE035AA,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0423_Payload,
    sizeof(sMessageEncodingTest0423_Payload),
    sMessageEncodingTest0423_ExpectedEncoding,
    sizeof(sMessageEncodingTest0423_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0424_EncryptionKey =
{
    {
        0x8e, 0xa9, 0xda, 0xab, 0x2b, 0x7b, 0xf2, 0xa7, 0xc8, 0xbc, 0xc0, 0xeb, 0x70, 0x38, 0x4d, 0x6f,
    },
    {
        0xbc, 0x4c, 0xad, 0xbe, 0x5e, 0xb7, 0x68, 0xf5, 0xec, 0x17, 0x77, 0xa5, 0xfb, 0xb4, 0x4d, 0xec,
        0x55, 0xbe, 0x9c, 0x8d,
    }
};
static const uint8_t sMessageEncodingTest0424_Payload[] =
{
    0x67, 0x1e, 0x07, 0xc0, 0x8d, 0xd8, 0x6a, 0x72, 0xbe, 0x0e,
};

static const uint8_t sMessageEncodingTest0424_ExpectedEncoding[] =
{
    0x10, 0x28, 0xde, 0xa6, 0x9d, 0xc4, 0x7d, 0x26, 0x90, 0x6c, 0x85, 0x80, 0x17, 0xf7, 0x6e, 0xb8,
    0xc7, 0xee, 0x1f, 0xbe, 0xe9, 0x67, 0xd9, 0xef, 0xa7, 0x83, 0xd5, 0x33, 0x36, 0x8f, 0x0b, 0x5b,
    0x76, 0xbd, 0xb2, 0xda, 0xf4, 0xf0,
};

static const MessageEncodingTestVector sMessageEncodingTest0424 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xC49DA6DE,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x267D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0424_EncryptionKey,
    sMessageEncodingTest0424_Payload,
    sizeof(sMessageEncodingTest0424_Payload),
    sMessageEncodingTest0424_ExpectedEncoding,
    sizeof(sMessageEncodingTest0424_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0425_EncryptionKey =
{
    {
        0x25, 0xd5, 0x49, 0x66, 0x2c, 0x76, 0x15, 0x52, 0x3c, 0x12, 0xa9, 0x5d, 0x84, 0xdc, 0x02, 0x6b,
    }
};
static const uint8_t sMessageEncodingTest0425_Payload[] =
{
    0xbf, 0x09, 0xdf, 0x95, 0x26, 0xe8, 0x04, 0x0b, 0x3f, 0x31,
};

static const uint8_t sMessageEncodingTest0425_ExpectedEncoding[] =
{
    0x20, 0x28, 0x64, 0x9a, 0x93, 0x9b, 0xf6, 0x2c, 0xc1, 0x27, 0xbb, 0xaa, 0x96, 0xfc, 0xde, 0x82,
    0x3c, 0xfe, 0x2f, 0x91, 0xb1, 0x7d, 0x17, 0xaa, 0x5d, 0x90,
};

static const MessageEncodingTestVector sMessageEncodingTest0425 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x9B939A64,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2CF6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0425_EncryptionKey,
    sMessageEncodingTest0425_Payload,
    sizeof(sMessageEncodingTest0425_Payload),
    sMessageEncodingTest0425_ExpectedEncoding,
    sizeof(sMessageEncodingTest0425_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0426_EncryptionKey =
{
    {
        0xf2, 0x27, 0x7d, 0x0f, 0xc2, 0x51, 0x00, 0x23, 0x87, 0x70, 0xc8, 0xc3, 0x88, 0x20, 0xc6, 0x32,
    }
};
static const uint8_t sMessageEncodingTest0426_Payload[] =
{
    0xc9, 0x2d, 0xf8, 0xf0, 0x7e, 0x2a, 0x8b, 0x35, 0x82, 0xbb,
};

static const uint8_t sMessageEncodingTest0426_ExpectedEncoding[] =
{
    0x30, 0x28, 0xa9, 0x89, 0x75, 0x52, 0xfe, 0x29, 0x63, 0x75, 0xd9, 0x4e, 0xfa, 0x00, 0x5d, 0x5b,
    0x96, 0x59, 0x53, 0x04, 0xd5, 0x3f, 0xe2, 0x56, 0xd5, 0xe3, 0x7c, 0x7d, 0xd3, 0x0b, 0x81, 0x4f,
    0xcb, 0x09,
};

static const MessageEncodingTestVector sMessageEncodingTest0426 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x527589A9,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x29FE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0426_EncryptionKey,
    sMessageEncodingTest0426_Payload,
    sizeof(sMessageEncodingTest0426_Payload),
    sMessageEncodingTest0426_ExpectedEncoding,
    sizeof(sMessageEncodingTest0426_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0427_Payload[] =
{
    0xcf, 0xd6, 0x37, 0x52, 0x6f, 0xd0, 0xb6, 0xec, 0x56, 0x86,
};

static const uint8_t sMessageEncodingTest0427_ExpectedEncoding[] =
{
    0x00, 0x20, 0x22, 0x1d, 0xcc, 0xe5, 0xcf, 0xd6, 0x37, 0x52, 0x6f, 0xd0, 0xb6, 0xec, 0x56, 0x86,
};

static const MessageEncodingTestVector sMessageEncodingTest0427 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE5CC1D22,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0427_Payload,
    sizeof(sMessageEncodingTest0427_Payload),
    sMessageEncodingTest0427_ExpectedEncoding,
    sizeof(sMessageEncodingTest0427_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0428_EncryptionKey =
{
    {
        0x67, 0x68, 0xe5, 0x01, 0x78, 0xd9, 0x05, 0x1f, 0xac, 0x3f, 0xef, 0xf7, 0x5b, 0x1f, 0x19, 0xca,
    },
    {
        0x68, 0x13, 0x59, 0xdb, 0x78, 0x9f, 0xd4, 0x8b, 0x2c, 0x49, 0x4d, 0x5e, 0x32, 0xd6, 0x9a, 0x94,
        0x3e, 0x0d, 0x19, 0x63,
    }
};
static const uint8_t sMessageEncodingTest0428_Payload[] =
{
    0xb3, 0xb9, 0x69, 0xda, 0xf5, 0xec, 0x67, 0x19, 0xe5, 0x67,
};

static const uint8_t sMessageEncodingTest0428_ExpectedEncoding[] =
{
    0x10, 0x20, 0xbb, 0x4d, 0x5e, 0x89, 0xfe, 0x2e, 0x02, 0x4a, 0x59, 0x27, 0xc3, 0x87, 0xfb, 0x86,
    0x2d, 0x3c, 0x3d, 0x42, 0xb3, 0xbe, 0x67, 0x28, 0x4c, 0xc0, 0xc2, 0x6e, 0x48, 0x46, 0x3b, 0xa4,
    0xec, 0xbe, 0x9a, 0xa4, 0x6b, 0x74,
};

static const MessageEncodingTestVector sMessageEncodingTest0428 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x895E4DBB,
        0,
        0x2EFE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0428_EncryptionKey,
    sMessageEncodingTest0428_Payload,
    sizeof(sMessageEncodingTest0428_Payload),
    sMessageEncodingTest0428_ExpectedEncoding,
    sizeof(sMessageEncodingTest0428_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0429_EncryptionKey =
{
    {
        0x59, 0x36, 0xcf, 0x41, 0xe8, 0x22, 0x15, 0x53, 0xa6, 0xa9, 0x9c, 0x38, 0x02, 0xa1, 0xc4, 0x5a,
    }
};
static const uint8_t sMessageEncodingTest0429_Payload[] =
{
    0x3c, 0xff, 0x64, 0xe9, 0x21, 0x34, 0x54, 0x02, 0xb7, 0x95,
};

static const uint8_t sMessageEncodingTest0429_ExpectedEncoding[] =
{
    0x20, 0x20, 0xc4, 0xc9, 0x67, 0xc1, 0x73, 0x2d, 0x5e, 0x41, 0x48, 0xb9, 0xc9, 0x62, 0xde, 0xc1,
    0x63, 0x28, 0xfa, 0x9b, 0x2c, 0xe3, 0xd0, 0x4d, 0x00, 0x12,
};

static const MessageEncodingTestVector sMessageEncodingTest0429 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xC167C9C4,
        0,
        0x2D73,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0429_EncryptionKey,
    sMessageEncodingTest0429_Payload,
    sizeof(sMessageEncodingTest0429_Payload),
    sMessageEncodingTest0429_ExpectedEncoding,
    sizeof(sMessageEncodingTest0429_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0430_EncryptionKey =
{
    {
        0x18, 0xeb, 0x5a, 0xa0, 0x64, 0x54, 0xbd, 0xd8, 0x78, 0x07, 0x7f, 0xd8, 0x15, 0x5e, 0x1a, 0xfa,
    }
};
static const uint8_t sMessageEncodingTest0430_Payload[] =
{
    0xf0, 0x89, 0x46, 0x79, 0x21, 0xc5, 0xea, 0x53, 0xc4, 0x36,
};

static const uint8_t sMessageEncodingTest0430_ExpectedEncoding[] =
{
    0x30, 0x20, 0xb4, 0xd7, 0x3d, 0x95, 0xed, 0x26, 0x5f, 0x46, 0xf3, 0x83, 0x1d, 0xcc, 0xfd, 0xd4,
    0x7d, 0xcd, 0x04, 0xbc, 0x8f, 0x5f, 0xef, 0xa1, 0x1a, 0x2c, 0xce, 0xf0, 0x04, 0x8d, 0xa1, 0xee,
    0x53, 0x5e,
};

static const MessageEncodingTestVector sMessageEncodingTest0430 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x953DD7B4,
        0,
        0x26ED,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0430_EncryptionKey,
    sMessageEncodingTest0430_Payload,
    sizeof(sMessageEncodingTest0430_Payload),
    sMessageEncodingTest0430_ExpectedEncoding,
    sizeof(sMessageEncodingTest0430_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0431_Payload[] =
{
    0x54, 0xcd, 0xf6, 0xde, 0xda, 0xda, 0x06, 0x66, 0xfb, 0x73, 0x2a, 0x85, 0x3f, 0x95, 0x3f, 0x60,
    0x1a, 0x28, 0x44, 0x59, 0x17, 0x7b, 0x25, 0x23, 0xb6, 0x90, 0xf3, 0xaf, 0xff, 0xd4, 0xa1, 0x3e,
    0x4b, 0xf3, 0xf8, 0xda, 0xdc, 0xd8, 0x0b, 0xf0, 0xaa, 0xd8, 0x55, 0xc6, 0x3b, 0xb4, 0x1b, 0xd0,
    0x19, 0x7e,
};

static const uint8_t sMessageEncodingTest0431_ExpectedEncoding[] =
{
    0x00, 0x27, 0xd9, 0xd7, 0x53, 0x69, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x54, 0xcd, 0xf6, 0xde, 0xda, 0xda, 0x06, 0x66, 0xfb, 0x73,
    0x2a, 0x85, 0x3f, 0x95, 0x3f, 0x60, 0x1a, 0x28, 0x44, 0x59, 0x17, 0x7b, 0x25, 0x23, 0xb6, 0x90,
    0xf3, 0xaf, 0xff, 0xd4, 0xa1, 0x3e, 0x4b, 0xf3, 0xf8, 0xda, 0xdc, 0xd8, 0x0b, 0xf0, 0xaa, 0xd8,
    0x55, 0xc6, 0x3b, 0xb4, 0x1b, 0xd0, 0x19, 0x7e,
};

static const MessageEncodingTestVector sMessageEncodingTest0431 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x6953D7D9,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0431_Payload,
    sizeof(sMessageEncodingTest0431_Payload),
    sMessageEncodingTest0431_ExpectedEncoding,
    sizeof(sMessageEncodingTest0431_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0432_EncryptionKey =
{
    {
        0x55, 0x57, 0x12, 0x47, 0xa4, 0x73, 0xa3, 0x8a, 0xb9, 0x21, 0x04, 0x14, 0x16, 0x46, 0xeb, 0x8d,
    },
    {
        0x9b, 0xdc, 0xd9, 0xb3, 0x2c, 0x2e, 0x65, 0xbe, 0x37, 0x43, 0xf3, 0x27, 0x19, 0xee, 0x8a, 0x68,
        0xf8, 0xe3, 0xa3, 0x61,
    }
};
static const uint8_t sMessageEncodingTest0432_Payload[] =
{
    0xf9, 0x4d, 0x87, 0xc3, 0xaa, 0x8b, 0xd3, 0x08, 0x6a, 0x13, 0x48, 0xfd, 0x08, 0x55, 0x94, 0x19,
    0xd1, 0x3c, 0x2b, 0xd1, 0xf8, 0xfc, 0x45, 0x3f, 0x08, 0x75, 0x37, 0xc3, 0x97, 0x15, 0xe3, 0xa8,
    0x23, 0x52, 0xca, 0xe9, 0xda, 0x2f, 0x61, 0x45, 0xaf, 0xb5, 0x95, 0x61, 0x99, 0x53, 0x60, 0x26,
    0x02, 0xdf,
};

static const uint8_t sMessageEncodingTest0432_ExpectedEncoding[] =
{
    0x10, 0x27, 0xf2, 0x24, 0xf3, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdc, 0x24, 0xfa, 0x1e, 0x7e, 0x25, 0x1c, 0xa4, 0x72, 0x7d,
    0xc1, 0xf4, 0x6d, 0x8a, 0x25, 0x64, 0xa0, 0x08, 0x13, 0x58, 0x73, 0xad, 0x95, 0xbd, 0xd5, 0x0a,
    0x85, 0x81, 0x0b, 0x01, 0x66, 0x5c, 0x8a, 0x7f, 0x43, 0x7f, 0x6f, 0x0e, 0xc5, 0x0e, 0x17, 0x03,
    0x0e, 0x18, 0xe7, 0xb6, 0x2c, 0x20, 0xd2, 0x26, 0xf4, 0x7a, 0x8d, 0xcb, 0x96, 0x24, 0x9d, 0xf0,
    0xcd, 0x5d, 0x4c, 0x66, 0x30, 0x44, 0x8e, 0x8f, 0x83, 0xa6, 0x1a, 0xe9, 0x6a, 0x36,
};

static const MessageEncodingTestVector sMessageEncodingTest0432 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xFFF324F2,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x24DC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0432_EncryptionKey,
    sMessageEncodingTest0432_Payload,
    sizeof(sMessageEncodingTest0432_Payload),
    sMessageEncodingTest0432_ExpectedEncoding,
    sizeof(sMessageEncodingTest0432_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0433_EncryptionKey =
{
    {
        0xde, 0xbe, 0x73, 0x9f, 0x23, 0xc2, 0x46, 0x15, 0x86, 0xed, 0x4e, 0x2f, 0x9a, 0xe9, 0xd9, 0x7a,
    }
};
static const uint8_t sMessageEncodingTest0433_Payload[] =
{
    0x2e, 0xf6, 0x3e, 0xca, 0x20, 0x00, 0x0e, 0x42, 0x60, 0x59, 0x04, 0x59, 0x2f, 0xd8, 0xea, 0x3f,
    0x8a, 0x15, 0x41, 0x41, 0x6e, 0x84, 0x03, 0x5c, 0xd7, 0x7a, 0xa9, 0xf1, 0x60, 0xef, 0xcf, 0x94,
    0xf8, 0xf7, 0xb3, 0x3e, 0x30, 0xa1, 0x5e, 0x93, 0x36, 0x0b, 0xdc, 0x16, 0x0c, 0x07, 0x63, 0x95,
    0xe1, 0xda,
};

static const uint8_t sMessageEncodingTest0433_ExpectedEncoding[] =
{
    0x20, 0x27, 0x96, 0x8c, 0xdd, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x84, 0x23, 0x60, 0x41, 0x03, 0xaf, 0xaa, 0xbc, 0x1d, 0x25,
    0x1f, 0x50, 0xb9, 0xa5, 0xae, 0x69, 0x8f, 0x52, 0x7e, 0x6b, 0x76, 0xee, 0x41, 0x28, 0xd8, 0xf7,
    0xd2, 0x60, 0x02, 0xf3, 0x1d, 0x2b, 0x85, 0x52, 0x20, 0x74, 0x24, 0x89, 0xcd, 0xaa, 0xcf, 0xcf,
    0x3b, 0xca, 0x79, 0x63, 0x9e, 0x63, 0xc3, 0x00, 0xca, 0xb0, 0x64, 0xe7, 0x3e, 0xd7, 0x55, 0xd7,
    0x16, 0xda,
};

static const MessageEncodingTestVector sMessageEncodingTest0433 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF8DD8C96,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2384,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0433_EncryptionKey,
    sMessageEncodingTest0433_Payload,
    sizeof(sMessageEncodingTest0433_Payload),
    sMessageEncodingTest0433_ExpectedEncoding,
    sizeof(sMessageEncodingTest0433_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0434_EncryptionKey =
{
    {
        0xf3, 0x6f, 0x6f, 0x5a, 0x95, 0x00, 0xe2, 0x8a, 0xf7, 0xe3, 0x80, 0x41, 0xf2, 0x81, 0xea, 0x05,
    }
};
static const uint8_t sMessageEncodingTest0434_Payload[] =
{
    0xa5, 0x58, 0x2d, 0xa7, 0xfa, 0xb8, 0x8d, 0xed, 0xc1, 0x2b, 0x88, 0xf0, 0x94, 0xda, 0x51, 0x10,
    0x84, 0xba, 0x65, 0xb7, 0x85, 0xe1, 0xd6, 0xf7, 0xd8, 0x7f, 0x79, 0xe8, 0x43, 0x82, 0x4d, 0x71,
    0xd1, 0xb6, 0x8b, 0xd6, 0x7f, 0x4b, 0x37, 0xf6, 0x5c, 0x19, 0x40, 0x98, 0x6c, 0x99, 0xfc, 0xb0,
    0x75, 0x81,
};

static const uint8_t sMessageEncodingTest0434_ExpectedEncoding[] =
{
    0x30, 0x27, 0x66, 0x80, 0x6b, 0x34, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x91, 0x2d, 0xb4, 0xe4, 0x50, 0x59, 0x2e, 0xce, 0xd5, 0xe5,
    0xb0, 0x77, 0xe1, 0x88, 0x7d, 0x6b, 0x40, 0x8b, 0x79, 0x90, 0x4d, 0xf9, 0x74, 0x07, 0x41, 0x10,
    0xb9, 0x97, 0x6b, 0x3f, 0x12, 0x6e, 0x9d, 0x66, 0x62, 0x0b, 0x28, 0x35, 0x91, 0x76, 0xde, 0x94,
    0xc0, 0xb0, 0xc4, 0xd9, 0xa9, 0xf4, 0xfc, 0x0d, 0x48, 0xb3, 0xc4, 0x01, 0x5d, 0x7d, 0xe6, 0xe2,
    0x91, 0x57, 0xed, 0x58, 0x6a, 0x77, 0x99, 0x92, 0x35, 0xea,
};

static const MessageEncodingTestVector sMessageEncodingTest0434 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x346B8066,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2D91,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0434_EncryptionKey,
    sMessageEncodingTest0434_Payload,
    sizeof(sMessageEncodingTest0434_Payload),
    sMessageEncodingTest0434_ExpectedEncoding,
    sizeof(sMessageEncodingTest0434_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0435_Payload[] =
{
    0xe5, 0xbb, 0x38, 0x93, 0x2a, 0x81, 0x63, 0x64, 0xa7, 0xad, 0x9b, 0xa6, 0xc9, 0x31, 0xce, 0xff,
    0x8d, 0x41, 0x4d, 0x87, 0x53, 0x65, 0x63, 0x6a, 0xc9, 0x7e, 0xb3, 0xe5, 0x72, 0x29, 0xeb, 0xf4,
    0xb5, 0xa2, 0x91, 0xb9, 0xe0, 0xab, 0x5f, 0x19, 0x9a, 0x1a, 0xff, 0xbf, 0x26, 0xb4, 0xf4, 0x52,
    0x2a, 0xd0,
};

static const uint8_t sMessageEncodingTest0435_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x48, 0x19, 0x90, 0x35, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe5, 0xbb, 0x38, 0x93, 0x2a, 0x81, 0x63, 0x64, 0xa7, 0xad,
    0x9b, 0xa6, 0xc9, 0x31, 0xce, 0xff, 0x8d, 0x41, 0x4d, 0x87, 0x53, 0x65, 0x63, 0x6a, 0xc9, 0x7e,
    0xb3, 0xe5, 0x72, 0x29, 0xeb, 0xf4, 0xb5, 0xa2, 0x91, 0xb9, 0xe0, 0xab, 0x5f, 0x19, 0x9a, 0x1a,
    0xff, 0xbf, 0x26, 0xb4, 0xf4, 0x52, 0x2a, 0xd0,
};

static const MessageEncodingTestVector sMessageEncodingTest0435 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x35901948,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0435_Payload,
    sizeof(sMessageEncodingTest0435_Payload),
    sMessageEncodingTest0435_ExpectedEncoding,
    sizeof(sMessageEncodingTest0435_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0436_EncryptionKey =
{
    {
        0xa9, 0xac, 0x47, 0x71, 0x85, 0x8f, 0x0a, 0x38, 0x95, 0x74, 0x19, 0x13, 0x1f, 0x2e, 0x07, 0x74,
    },
    {
        0x71, 0x23, 0x21, 0x18, 0x24, 0xd2, 0x5a, 0x48, 0x71, 0x39, 0xc9, 0xbb, 0x95, 0x66, 0x42, 0xd2,
        0x0b, 0x7b, 0x96, 0x0a,
    }
};
static const uint8_t sMessageEncodingTest0436_Payload[] =
{
    0x87, 0x50, 0xd6, 0x36, 0x85, 0x33, 0x9d, 0xb0, 0xdb, 0xd4, 0x63, 0x02, 0x45, 0x77, 0xa7, 0x2f,
    0x8f, 0x2c, 0x35, 0x09, 0x74, 0x7e, 0x1b, 0x88, 0x64, 0x57, 0x9a, 0x17, 0x2d, 0x5c, 0xb8, 0xf6,
    0x8a, 0x7a, 0x7d, 0xc4, 0x71, 0x89, 0x26, 0x74, 0xcd, 0x6b, 0xf2, 0xfc, 0x4f, 0x3e, 0xd5, 0x87,
    0xd3, 0x85,
};

static const uint8_t sMessageEncodingTest0436_ExpectedEncoding[] =
{
    0x10, 0x2b, 0x96, 0x6e, 0x27, 0x57, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5a, 0x2b, 0x9d, 0xdf, 0x48, 0x8e, 0x0f, 0xbc, 0x3c, 0x5a,
    0xe2, 0x07, 0xb0, 0x28, 0xa2, 0x38, 0x6d, 0x63, 0x82, 0xd9, 0xb0, 0xcf, 0xb0, 0xa4, 0x6e, 0x25,
    0xaa, 0x52, 0xb8, 0xf0, 0xe6, 0x36, 0x10, 0x84, 0x11, 0x3f, 0x8b, 0xc8, 0xe6, 0xc2, 0xf8, 0x2b,
    0xaa, 0xa7, 0xe7, 0xce, 0xf7, 0x23, 0xb0, 0x53, 0xaf, 0x9d, 0x63, 0x8c, 0x84, 0x28, 0x8a, 0x3b,
    0x0c, 0x4e, 0x91, 0x76, 0x7b, 0xc9, 0x6d, 0xc6, 0xe7, 0xd4, 0x70, 0x9f, 0x30, 0xc7,
};

static const MessageEncodingTestVector sMessageEncodingTest0436 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x57276E96,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2B5A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0436_EncryptionKey,
    sMessageEncodingTest0436_Payload,
    sizeof(sMessageEncodingTest0436_Payload),
    sMessageEncodingTest0436_ExpectedEncoding,
    sizeof(sMessageEncodingTest0436_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0437_EncryptionKey =
{
    {
        0xa3, 0x25, 0x07, 0xb5, 0x4a, 0x25, 0xd4, 0xd6, 0xda, 0x9e, 0xf2, 0xe2, 0x2b, 0xa6, 0x86, 0xc8,
    }
};
static const uint8_t sMessageEncodingTest0437_Payload[] =
{
    0x4e, 0xeb, 0xe1, 0xa0, 0xda, 0xa0, 0x0a, 0x05, 0xe4, 0x1d, 0x58, 0x58, 0xb2, 0xb1, 0xfc, 0x05,
    0xb2, 0x20, 0x50, 0xce, 0xfc, 0x7e, 0x49, 0x0d, 0x65, 0xbf, 0xcc, 0x54, 0x0d, 0x1f, 0xc5, 0x4c,
    0xf1, 0x5a, 0xa9, 0xa1, 0xcd, 0x71, 0x5d, 0x45, 0xc6, 0xd3, 0xa7, 0xd6, 0x13, 0x9e, 0x47, 0x97,
    0x28, 0xff,
};

static const uint8_t sMessageEncodingTest0437_ExpectedEncoding[] =
{
    0x20, 0x2b, 0xe8, 0xad, 0xee, 0x37, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xcf, 0x28, 0x49, 0x9b, 0x6c, 0x9a, 0x04, 0xae, 0x78, 0x7d,
    0xee, 0x69, 0xe4, 0xce, 0xd8, 0x16, 0x74, 0xb8, 0x73, 0x49, 0xc9, 0x86, 0x1f, 0xe9, 0x4b, 0x20,
    0x79, 0x4f, 0x46, 0xde, 0xfb, 0x88, 0x14, 0x4e, 0x53, 0x4c, 0x79, 0x79, 0x71, 0x2e, 0xbb, 0x76,
    0xb0, 0x71, 0x95, 0x12, 0xa4, 0xab, 0xb1, 0x9a, 0xab, 0x56, 0xed, 0x16, 0x7b, 0x90, 0x1b, 0x01,
    0xb7, 0x7b,
};

static const MessageEncodingTestVector sMessageEncodingTest0437 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x37EEADE8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x28CF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0437_EncryptionKey,
    sMessageEncodingTest0437_Payload,
    sizeof(sMessageEncodingTest0437_Payload),
    sMessageEncodingTest0437_ExpectedEncoding,
    sizeof(sMessageEncodingTest0437_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0438_EncryptionKey =
{
    {
        0x5e, 0xd2, 0x2f, 0x12, 0x40, 0xd7, 0x1f, 0x86, 0xf8, 0xdc, 0x8c, 0xeb, 0xcd, 0xd0, 0x0a, 0x54,
    }
};
static const uint8_t sMessageEncodingTest0438_Payload[] =
{
    0x3e, 0x5a, 0x00, 0x68, 0x35, 0x9c, 0xb8, 0xd9, 0x0c, 0x9c, 0x49, 0x15, 0x7a, 0xd8, 0x23, 0xd2,
    0x3c, 0xef, 0x55, 0x3f, 0x87, 0xa5, 0x1a, 0x37, 0x40, 0x1a, 0x18, 0x5e, 0x5f, 0xf6, 0x9e, 0xae,
    0x13, 0xe5, 0xf0, 0x0c, 0x9e, 0x77, 0x90, 0x01, 0xbd, 0x2b, 0x39, 0xcc, 0x04, 0x20, 0xa2, 0xb6,
    0x5f, 0xb0,
};

static const uint8_t sMessageEncodingTest0438_ExpectedEncoding[] =
{
    0x30, 0x2b, 0x69, 0xa1, 0xed, 0x49, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x00, 0x20, 0xf1, 0xa9, 0x24, 0xcb, 0x89, 0xdf, 0x84, 0x1c,
    0x91, 0x84, 0x7b, 0x14, 0xa4, 0x9e, 0x13, 0x94, 0xd4, 0x9a, 0x0b, 0x8b, 0xd1, 0xe4, 0xec, 0x61,
    0xf2, 0x82, 0xa8, 0xfa, 0xd2, 0xc0, 0xa3, 0xb9, 0xe0, 0xef, 0x69, 0x6f, 0x96, 0x75, 0x04, 0x3c,
    0x77, 0x31, 0xe3, 0x39, 0x1a, 0x46, 0xa8, 0xe0, 0x15, 0xf0, 0x30, 0x80, 0x75, 0xf6, 0x3d, 0x51,
    0x24, 0x19, 0x33, 0x60, 0xd6, 0xaf, 0x7e, 0x35, 0xad, 0xb4,
};

static const MessageEncodingTestVector sMessageEncodingTest0438 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x49EDA169,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0438_EncryptionKey,
    sMessageEncodingTest0438_Payload,
    sizeof(sMessageEncodingTest0438_Payload),
    sMessageEncodingTest0438_ExpectedEncoding,
    sizeof(sMessageEncodingTest0438_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0439_Payload[] =
{
    0xc5, 0x62, 0x20, 0x47, 0xf2, 0xfe, 0xbe, 0xec, 0x31, 0xc3, 0x4b, 0x28, 0xdf, 0xe2, 0x5c, 0xd8,
    0x8c, 0xef, 0x5a, 0xc0, 0xb2, 0xd8, 0x8c, 0x88, 0x6d, 0x66, 0x00, 0x91, 0x5b, 0x32, 0x52, 0x4b,
    0x17, 0xb8, 0xd9, 0xf6, 0x50, 0x06, 0x7e, 0x55, 0x77, 0x22, 0xc9, 0xd4, 0x70, 0x34, 0xee, 0xd8,
    0x06, 0x12,
};

static const uint8_t sMessageEncodingTest0439_ExpectedEncoding[] =
{
    0x00, 0x23, 0xb4, 0xb5, 0xa9, 0xf7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc5, 0x62, 0x20, 0x47, 0xf2, 0xfe, 0xbe, 0xec, 0x31, 0xc3,
    0x4b, 0x28, 0xdf, 0xe2, 0x5c, 0xd8, 0x8c, 0xef, 0x5a, 0xc0, 0xb2, 0xd8, 0x8c, 0x88, 0x6d, 0x66,
    0x00, 0x91, 0x5b, 0x32, 0x52, 0x4b, 0x17, 0xb8, 0xd9, 0xf6, 0x50, 0x06, 0x7e, 0x55, 0x77, 0x22,
    0xc9, 0xd4, 0x70, 0x34, 0xee, 0xd8, 0x06, 0x12,
};

static const MessageEncodingTestVector sMessageEncodingTest0439 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF7A9B5B4,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0439_Payload,
    sizeof(sMessageEncodingTest0439_Payload),
    sMessageEncodingTest0439_ExpectedEncoding,
    sizeof(sMessageEncodingTest0439_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0440_EncryptionKey =
{
    {
        0x6a, 0xc1, 0x96, 0xba, 0xb5, 0xd1, 0xec, 0x09, 0x56, 0xfa, 0x2f, 0xd5, 0x67, 0xb3, 0xcb, 0xbc,
    },
    {
        0x31, 0xb0, 0xb4, 0x39, 0x6c, 0x92, 0x12, 0x61, 0x50, 0x65, 0x7b, 0x4c, 0x35, 0xc6, 0xb0, 0xd4,
        0x60, 0x2d, 0xb1, 0x11,
    }
};
static const uint8_t sMessageEncodingTest0440_Payload[] =
{
    0xf3, 0x84, 0x85, 0x12, 0x4e, 0x54, 0xe4, 0x8b, 0xfb, 0x12, 0x88, 0x48, 0x5b, 0xc0, 0xac, 0x99,
    0x48, 0x0e, 0x86, 0x09, 0x3a, 0xaf, 0x7f, 0x0e, 0x98, 0x13, 0xc5, 0x5e, 0x79, 0xda, 0x95, 0x46,
    0x96, 0x03, 0xe5, 0x9f, 0x39, 0x74, 0x15, 0xe3, 0x95, 0x1c, 0x4e, 0xe4, 0xc2, 0x7f, 0x93, 0xc4,
    0x88, 0x2c,
};

static const uint8_t sMessageEncodingTest0440_ExpectedEncoding[] =
{
    0x10, 0x23, 0xbf, 0x7b, 0x3e, 0x89, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x70, 0x2a, 0xf4, 0x6f, 0x0d, 0x4f, 0xef, 0x09, 0xfd, 0xba,
    0xa7, 0xf2, 0xd4, 0x08, 0x1b, 0x86, 0xc6, 0x71, 0x0a, 0xe0, 0xee, 0x03, 0x0c, 0x44, 0x93, 0x1c,
    0x46, 0xbe, 0xf8, 0x91, 0x1a, 0xea, 0x05, 0x20, 0xf8, 0x0b, 0x5f, 0x20, 0x80, 0x20, 0x6a, 0xb1,
    0x50, 0x10, 0x3c, 0xfa, 0xc9, 0xe0, 0xf4, 0x1a, 0x63, 0x86, 0x12, 0x74, 0x3a, 0xd6, 0x4a, 0x7d,
    0x09, 0x89, 0x1d, 0x5a, 0x88, 0x00, 0x56, 0xbf, 0x28, 0x1e, 0x22, 0x11, 0xba, 0x88,
};

static const MessageEncodingTestVector sMessageEncodingTest0440 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x893E7BBF,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2A70,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0440_EncryptionKey,
    sMessageEncodingTest0440_Payload,
    sizeof(sMessageEncodingTest0440_Payload),
    sMessageEncodingTest0440_ExpectedEncoding,
    sizeof(sMessageEncodingTest0440_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0441_EncryptionKey =
{
    {
        0x96, 0xc4, 0xb6, 0x5e, 0xce, 0xaf, 0xd4, 0xd8, 0x68, 0xef, 0x6d, 0xc8, 0x65, 0x55, 0x90, 0x04,
    }
};
static const uint8_t sMessageEncodingTest0441_Payload[] =
{
    0xc2, 0xab, 0x31, 0xdb, 0xdf, 0xe2, 0x86, 0x83, 0xbc, 0x8a, 0xfe, 0xa0, 0x13, 0x8e, 0x1f, 0x94,
    0xfe, 0x0e, 0x6c, 0xf4, 0x62, 0xef, 0x58, 0x1d, 0x18, 0x09, 0xae, 0xee, 0xc9, 0xa0, 0x9b, 0xda,
    0x82, 0xcd, 0x81, 0xc9, 0x61, 0x17, 0x00, 0x81, 0x06, 0x3c, 0x92, 0x46, 0xcb, 0x07, 0xb9, 0x75,
    0x03, 0x52,
};

static const uint8_t sMessageEncodingTest0441_ExpectedEncoding[] =
{
    0x20, 0x23, 0x73, 0xc9, 0xda, 0x93, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xd9, 0x2a, 0xb8, 0x10, 0x33, 0xa2, 0xe8, 0x72, 0x7d, 0x82,
    0x36, 0x23, 0xfc, 0x2b, 0x35, 0x12, 0xc5, 0x14, 0x57, 0x90, 0xab, 0x91, 0x56, 0xf2, 0x3a, 0x09,
    0xd0, 0xd0, 0xaa, 0x90, 0xee, 0x47, 0x41, 0x04, 0x81, 0x67, 0x8f, 0xea, 0xde, 0x5c, 0xff, 0xca,
    0xbf, 0x47, 0x2b, 0xc1, 0x0d, 0x1b, 0x93, 0xa6, 0x14, 0xd7, 0xe8, 0x7e, 0x65, 0x8a, 0x0b, 0x96,
    0x33, 0x06,
};

static const MessageEncodingTestVector sMessageEncodingTest0441 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x93DAC973,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2AD9,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0441_EncryptionKey,
    sMessageEncodingTest0441_Payload,
    sizeof(sMessageEncodingTest0441_Payload),
    sMessageEncodingTest0441_ExpectedEncoding,
    sizeof(sMessageEncodingTest0441_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0442_EncryptionKey =
{
    {
        0x0e, 0x7a, 0xd3, 0x64, 0xbb, 0xc0, 0x32, 0x8a, 0x65, 0x1f, 0x8b, 0x29, 0xe6, 0x5a, 0x32, 0x16,
    }
};
static const uint8_t sMessageEncodingTest0442_Payload[] =
{
    0x45, 0x28, 0x4f, 0x95, 0x3c, 0xc2, 0xb3, 0x47, 0x83, 0x3e, 0x87, 0xb1, 0xb8, 0x60, 0x36, 0x9c,
    0x2e, 0x3d, 0x2c, 0xf7, 0x56, 0x8d, 0xea, 0xb3, 0x27, 0xaa, 0x85, 0x1d, 0xd1, 0x7c, 0x9f, 0x61,
    0xfa, 0x91, 0xf1, 0xae, 0x14, 0x84, 0x5f, 0xcc, 0x71, 0x16, 0xc6, 0xfc, 0x9c, 0xde, 0x0a, 0x50,
    0x17, 0x00,
};

static const uint8_t sMessageEncodingTest0442_ExpectedEncoding[] =
{
    0x30, 0x23, 0x05, 0xfc, 0x26, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4d, 0x22, 0xe2, 0x40, 0x93, 0x33, 0xd9, 0xa3, 0x3b, 0xfe,
    0x2d, 0x6f, 0xa5, 0xfe, 0x9e, 0xad, 0xbd, 0x35, 0xab, 0x33, 0xa8, 0xd8, 0xb8, 0x59, 0x3f, 0x57,
    0x45, 0x41, 0x23, 0xac, 0xdf, 0x85, 0xd1, 0xec, 0x39, 0x74, 0x85, 0x71, 0x41, 0x69, 0xfb, 0x71,
    0x6c, 0x09, 0x13, 0x29, 0x81, 0x80, 0x0f, 0x6d, 0x05, 0x79, 0x55, 0x10, 0xbc, 0xe4, 0xb2, 0x5c,
    0x2c, 0x1a, 0x87, 0xd8, 0xd2, 0xb8, 0x4b, 0xc7, 0xfd, 0x93,
};

static const MessageEncodingTestVector sMessageEncodingTest0442 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x8626FC05,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x224D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0442_EncryptionKey,
    sMessageEncodingTest0442_Payload,
    sizeof(sMessageEncodingTest0442_Payload),
    sMessageEncodingTest0442_ExpectedEncoding,
    sizeof(sMessageEncodingTest0442_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0443_Payload[] =
{
    0xe6, 0x4a, 0x19, 0x2b, 0x29, 0x22, 0x0e, 0x02, 0xb0, 0xa8, 0xec, 0x86, 0xec, 0xe3, 0xe3, 0x73,
    0xb2, 0x99, 0x57, 0x2c, 0x8f, 0xa4, 0x4d, 0xee, 0x86, 0x66, 0x12, 0x53, 0xb7, 0xd3, 0xbe, 0xa9,
    0x90, 0x00, 0xa5, 0xfe, 0x6d, 0xaa, 0x8e, 0xe3, 0xa8, 0xbd, 0xcf, 0x2e, 0xa7, 0x38, 0x03, 0xa2,
    0xec, 0x07,
};

static const uint8_t sMessageEncodingTest0443_ExpectedEncoding[] =
{
    0x00, 0x25, 0x8f, 0xd4, 0x78, 0x56, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe6, 0x4a,
    0x19, 0x2b, 0x29, 0x22, 0x0e, 0x02, 0xb0, 0xa8, 0xec, 0x86, 0xec, 0xe3, 0xe3, 0x73, 0xb2, 0x99,
    0x57, 0x2c, 0x8f, 0xa4, 0x4d, 0xee, 0x86, 0x66, 0x12, 0x53, 0xb7, 0xd3, 0xbe, 0xa9, 0x90, 0x00,
    0xa5, 0xfe, 0x6d, 0xaa, 0x8e, 0xe3, 0xa8, 0xbd, 0xcf, 0x2e, 0xa7, 0x38, 0x03, 0xa2, 0xec, 0x07,
};

static const MessageEncodingTestVector sMessageEncodingTest0443 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x5678D48F,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0443_Payload,
    sizeof(sMessageEncodingTest0443_Payload),
    sMessageEncodingTest0443_ExpectedEncoding,
    sizeof(sMessageEncodingTest0443_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0444_EncryptionKey =
{
    {
        0xbf, 0x33, 0x34, 0x2c, 0x5e, 0xb6, 0x59, 0x44, 0x4e, 0xea, 0x35, 0x77, 0x18, 0x50, 0xbd, 0xb1,
    },
    {
        0x0e, 0xd5, 0x21, 0xa8, 0xad, 0xbd, 0x52, 0xba, 0x6d, 0x29, 0x2a, 0x35, 0xde, 0xe3, 0xa1, 0x64,
        0xcf, 0xf9, 0x5b, 0x33,
    }
};
static const uint8_t sMessageEncodingTest0444_Payload[] =
{
    0xfb, 0x97, 0x43, 0xdc, 0xa6, 0xa3, 0x46, 0x51, 0x1f, 0xcb, 0x18, 0x44, 0x12, 0xda, 0xec, 0xaf,
    0x57, 0xeb, 0x34, 0xea, 0x85, 0x77, 0x96, 0x77, 0xde, 0x07, 0x24, 0x89, 0xad, 0xf5, 0x0b, 0xbc,
    0x35, 0x96, 0x75, 0x01, 0x98, 0xd2, 0xbe, 0xf4, 0x09, 0xc8, 0xa1, 0xde, 0x98, 0xe7, 0x58, 0x5e,
    0xfa, 0x94,
};

static const uint8_t sMessageEncodingTest0444_ExpectedEncoding[] =
{
    0x10, 0x25, 0x5b, 0x8f, 0xe4, 0xbb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6c, 0x2c,
    0xfc, 0x0b, 0x2c, 0x2a, 0x27, 0x97, 0x55, 0x29, 0x55, 0xce, 0xaa, 0x04, 0x6d, 0x2c, 0x58, 0x63,
    0xa3, 0xdb, 0x8c, 0x06, 0x5d, 0x43, 0x7a, 0xce, 0xc5, 0xca, 0xed, 0x64, 0x00, 0x8e, 0x75, 0xfa,
    0x76, 0xd6, 0x7c, 0x6f, 0xd6, 0x75, 0xb6, 0x52, 0x30, 0x04, 0x52, 0xcc, 0x84, 0x1b, 0xba, 0x09,
    0x80, 0xcd, 0x44, 0xae, 0xdb, 0x7c, 0xbb, 0x11, 0xf6, 0x8e, 0xad, 0x98, 0x4a, 0x6f, 0xd4, 0xdf,
    0x53, 0x3b, 0x78, 0x1a, 0xff, 0x5a,
};

static const MessageEncodingTestVector sMessageEncodingTest0444 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xBBE48F5B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2C6C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0444_EncryptionKey,
    sMessageEncodingTest0444_Payload,
    sizeof(sMessageEncodingTest0444_Payload),
    sMessageEncodingTest0444_ExpectedEncoding,
    sizeof(sMessageEncodingTest0444_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0445_EncryptionKey =
{
    {
        0x52, 0xce, 0xbe, 0x76, 0x39, 0xf4, 0x2e, 0x01, 0x47, 0x50, 0xf2, 0x3a, 0xa3, 0x0e, 0x5b, 0xcd,
    }
};
static const uint8_t sMessageEncodingTest0445_Payload[] =
{
    0x46, 0x5d, 0x9b, 0x42, 0x9b, 0x22, 0x50, 0x6a, 0x8d, 0x58, 0x22, 0x37, 0x3f, 0xe7, 0x87, 0x4c,
    0x4f, 0x56, 0x66, 0x2a, 0x54, 0xdf, 0x98, 0x7e, 0x9a, 0xb6, 0x14, 0x5c, 0xe0, 0x0f, 0x13, 0x32,
    0x9d, 0x45, 0xfd, 0xa6, 0x7a, 0x54, 0xbb, 0x0e, 0xa2, 0x86, 0x0f, 0xc1, 0x6b, 0xd4, 0x79, 0x74,
    0x30, 0x38,
};

static const uint8_t sMessageEncodingTest0445_ExpectedEncoding[] =
{
    0x20, 0x25, 0xa7, 0x6e, 0x50, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x28, 0x25,
    0xd6, 0x57, 0xb5, 0xf1, 0x8e, 0x4b, 0x5f, 0x34, 0xee, 0x9f, 0xc8, 0x3f, 0x9c, 0xd6, 0xa3, 0x20,
    0xa3, 0x0d, 0x3d, 0x6d, 0x87, 0xcb, 0xe6, 0x22, 0x9d, 0x56, 0x62, 0xf9, 0x50, 0x12, 0x37, 0xb1,
    0xc3, 0x7d, 0x76, 0xfc, 0x85, 0x78, 0xdc, 0x94, 0x26, 0xc9, 0xd5, 0x13, 0x07, 0x28, 0x6b, 0xb1,
    0x52, 0xc2, 0x1f, 0x0e, 0x20, 0xbe, 0x32, 0x91, 0x96, 0xf3,
};

static const MessageEncodingTestVector sMessageEncodingTest0445 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x03506EA7,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2528,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0445_EncryptionKey,
    sMessageEncodingTest0445_Payload,
    sizeof(sMessageEncodingTest0445_Payload),
    sMessageEncodingTest0445_ExpectedEncoding,
    sizeof(sMessageEncodingTest0445_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0446_EncryptionKey =
{
    {
        0xb6, 0x8b, 0xb7, 0x2e, 0x44, 0xfa, 0xab, 0xce, 0xc9, 0x39, 0x4e, 0xeb, 0x52, 0x0b, 0x1b, 0xf2,
    }
};
static const uint8_t sMessageEncodingTest0446_Payload[] =
{
    0x54, 0x69, 0x2d, 0xfa, 0xdd, 0xb5, 0xc1, 0x80, 0x2e, 0xb1, 0xc3, 0x15, 0x1f, 0x07, 0xc3, 0x05,
    0x1f, 0x33, 0x83, 0x44, 0xb3, 0x4b, 0xb7, 0x28, 0x77, 0x0e, 0x30, 0x4d, 0x26, 0xf8, 0x44, 0xf6,
    0x7f, 0x5b, 0x90, 0xf5, 0x0b, 0x4c, 0x72, 0x56, 0x42, 0x2a, 0x01, 0x90, 0x6c, 0xcf, 0x91, 0x1a,
    0xdc, 0x2c,
};

static const uint8_t sMessageEncodingTest0446_ExpectedEncoding[] =
{
    0x30, 0x25, 0x43, 0xf1, 0x03, 0xab, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x15, 0x26,
    0x48, 0x38, 0x33, 0x14, 0x3c, 0x9f, 0x69, 0xff, 0xe8, 0xec, 0xb7, 0x03, 0xd7, 0x0d, 0xf5, 0xce,
    0xa9, 0xfe, 0xb1, 0x9d, 0x11, 0x85, 0xb5, 0x64, 0x4a, 0x61, 0x2a, 0xc7, 0xbc, 0x31, 0x91, 0xde,
    0x10, 0xfc, 0x50, 0xea, 0xb0, 0x22, 0x34, 0xfe, 0xcf, 0x60, 0x5e, 0x16, 0xd4, 0xf3, 0x0f, 0x51,
    0x4b, 0xdd, 0x31, 0xc9, 0x72, 0xb1, 0x8d, 0xe6, 0xd6, 0x32, 0xd5, 0xaf, 0x15, 0xe5, 0x07, 0x5e,
    0x47, 0xa3,
};

static const MessageEncodingTestVector sMessageEncodingTest0446 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAB03F143,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2615,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0446_EncryptionKey,
    sMessageEncodingTest0446_Payload,
    sizeof(sMessageEncodingTest0446_Payload),
    sMessageEncodingTest0446_ExpectedEncoding,
    sizeof(sMessageEncodingTest0446_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0447_Payload[] =
{
    0x69, 0xf5, 0xbe, 0xe7, 0x61, 0xf2, 0xd9, 0xad, 0x19, 0xde, 0x60, 0xdc, 0x3f, 0x92, 0xe8, 0xd9,
    0x8c, 0xc0, 0xb3, 0xc2, 0xac, 0xa4, 0x17, 0x57, 0x4c, 0x1f, 0x62, 0xc3, 0xdb, 0x15, 0x81, 0x5b,
    0x87, 0xd6, 0xc7, 0xaf, 0x1c, 0x90, 0x4f, 0xd3, 0x3a, 0x24, 0xf2, 0xe6, 0xa7, 0xbb, 0xda, 0xc3,
    0x76, 0xa6,
};

static const uint8_t sMessageEncodingTest0447_ExpectedEncoding[] =
{
    0x00, 0x29, 0x46, 0x23, 0xa7, 0xbf, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x69, 0xf5,
    0xbe, 0xe7, 0x61, 0xf2, 0xd9, 0xad, 0x19, 0xde, 0x60, 0xdc, 0x3f, 0x92, 0xe8, 0xd9, 0x8c, 0xc0,
    0xb3, 0xc2, 0xac, 0xa4, 0x17, 0x57, 0x4c, 0x1f, 0x62, 0xc3, 0xdb, 0x15, 0x81, 0x5b, 0x87, 0xd6,
    0xc7, 0xaf, 0x1c, 0x90, 0x4f, 0xd3, 0x3a, 0x24, 0xf2, 0xe6, 0xa7, 0xbb, 0xda, 0xc3, 0x76, 0xa6,
};

static const MessageEncodingTestVector sMessageEncodingTest0447 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xBFA72346,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0447_Payload,
    sizeof(sMessageEncodingTest0447_Payload),
    sMessageEncodingTest0447_ExpectedEncoding,
    sizeof(sMessageEncodingTest0447_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0448_EncryptionKey =
{
    {
        0x16, 0x5b, 0xf5, 0x35, 0xfc, 0x1a, 0x1a, 0x03, 0xf2, 0x12, 0x72, 0xec, 0x57, 0x79, 0x47, 0x26,
    },
    {
        0xc7, 0x91, 0xa9, 0x4e, 0xc1, 0x5c, 0x41, 0xbf, 0x78, 0x76, 0x51, 0xfc, 0x31, 0x07, 0x71, 0xde,
        0x0d, 0x7d, 0x68, 0x0a,
    }
};
static const uint8_t sMessageEncodingTest0448_Payload[] =
{
    0x53, 0xd3, 0x41, 0xb6, 0x45, 0xc1, 0x63, 0x68, 0x17, 0xe7, 0xf1, 0xbc, 0xa3, 0x65, 0xe7, 0x25,
    0xda, 0x8d, 0x51, 0x8a, 0xb2, 0xd8, 0x93, 0x3b, 0x30, 0x1c, 0x1d, 0x07, 0xfc, 0x8b, 0x16, 0x65,
    0xae, 0x67, 0xeb, 0x3b, 0x6a, 0xe8, 0x01, 0x7f, 0xd6, 0x0e, 0xbf, 0x1e, 0x6d, 0x51, 0x60, 0x3f,
    0x79, 0xf5,
};

static const uint8_t sMessageEncodingTest0448_ExpectedEncoding[] =
{
    0x10, 0x29, 0x82, 0xca, 0xbf, 0xf4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xda, 0x2b,
    0xd3, 0xfa, 0x93, 0xa7, 0x1a, 0x91, 0x89, 0x0e, 0x7f, 0xc9, 0xa3, 0x6b, 0xd0, 0x76, 0xee, 0x1d,
    0x1e, 0x09, 0xbd, 0xaf, 0xe8, 0xd3, 0x6c, 0x04, 0xf0, 0x7c, 0xf4, 0xf6, 0x7d, 0x5d, 0x75, 0xfa,
    0xe7, 0x07, 0xdb, 0x37, 0x81, 0x40, 0xff, 0xab, 0x7c, 0xd2, 0x1b, 0x22, 0xc5, 0x3f, 0x08, 0x96,
    0x29, 0x72, 0x9f, 0x78, 0xf4, 0xb3, 0x51, 0x6d, 0x53, 0x78, 0x25, 0x8b, 0x8c, 0x1f, 0x27, 0xe6,
    0x3d, 0xea, 0xb6, 0x83, 0x24, 0x76,
};

static const MessageEncodingTestVector sMessageEncodingTest0448 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF4BFCA82,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2BDA,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0448_EncryptionKey,
    sMessageEncodingTest0448_Payload,
    sizeof(sMessageEncodingTest0448_Payload),
    sMessageEncodingTest0448_ExpectedEncoding,
    sizeof(sMessageEncodingTest0448_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0449_EncryptionKey =
{
    {
        0x5e, 0xf5, 0xa2, 0xc8, 0x8e, 0xcf, 0x47, 0x60, 0xec, 0x14, 0x22, 0x37, 0x1e, 0xbc, 0x45, 0x96,
    }
};
static const uint8_t sMessageEncodingTest0449_Payload[] =
{
    0xde, 0x93, 0x8e, 0x69, 0x6a, 0x20, 0x76, 0xc1, 0x07, 0xe8, 0x7c, 0x9d, 0x11, 0xbe, 0xce, 0x72,
    0x68, 0x4e, 0xc1, 0x9e, 0x05, 0xf7, 0x76, 0x78, 0x9f, 0xfb, 0xee, 0x34, 0xe6, 0x76, 0x61, 0xac,
    0xc3, 0xca, 0x72, 0x1a, 0x5e, 0xbe, 0x7d, 0x27, 0x17, 0xab, 0x79, 0x2f, 0x91, 0x2f, 0x55, 0x17,
    0xea, 0x2f,
};

static const uint8_t sMessageEncodingTest0449_ExpectedEncoding[] =
{
    0x20, 0x29, 0x02, 0xda, 0x5e, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7d, 0x21,
    0x83, 0xef, 0x4c, 0xa3, 0xf0, 0x0b, 0x6f, 0xc6, 0xa8, 0x0a, 0xfc, 0x18, 0x00, 0xf9, 0x22, 0x88,
    0xb9, 0xc0, 0x34, 0x7d, 0x48, 0xb5, 0x4d, 0x82, 0xc8, 0x81, 0xac, 0x49, 0x9b, 0xbd, 0x40, 0xcb,
    0x3d, 0xf5, 0xef, 0xe2, 0x0c, 0xce, 0x41, 0xf3, 0xc1, 0x50, 0xc0, 0x54, 0x58, 0xe1, 0x23, 0xfd,
    0x5a, 0x3d, 0x00, 0xfc, 0xe4, 0x28, 0x50, 0x06, 0xe2, 0xec,
};

static const MessageEncodingTestVector sMessageEncodingTest0449 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x1F5EDA02,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x217D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0449_EncryptionKey,
    sMessageEncodingTest0449_Payload,
    sizeof(sMessageEncodingTest0449_Payload),
    sMessageEncodingTest0449_ExpectedEncoding,
    sizeof(sMessageEncodingTest0449_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0450_EncryptionKey =
{
    {
        0xaf, 0x34, 0x1f, 0xbd, 0x55, 0xed, 0xfa, 0x2a, 0x3e, 0x2a, 0xe9, 0xf2, 0x73, 0x38, 0xd7, 0x07,
    }
};
static const uint8_t sMessageEncodingTest0450_Payload[] =
{
    0x88, 0xbf, 0xfb, 0x06, 0x67, 0x6b, 0x3d, 0x08, 0x72, 0x54, 0x22, 0x34, 0x15, 0x3c, 0xf0, 0x30,
    0x58, 0xed, 0x89, 0xe6, 0x20, 0x9b, 0x37, 0xc8, 0x4f, 0x9c, 0xa7, 0xf8, 0x0d, 0x3b, 0x21, 0x68,
    0xdb, 0x2a, 0x6b, 0x4b, 0xaa, 0x74, 0x4d, 0x26, 0x9c, 0x3e, 0xc2, 0x0f, 0x23, 0xd0, 0x5a, 0xf9,
    0x1c, 0x43,
};

static const uint8_t sMessageEncodingTest0450_ExpectedEncoding[] =
{
    0x30, 0x29, 0xe8, 0x4b, 0xe1, 0x07, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb9, 0x2e,
    0xa1, 0x38, 0xc2, 0xb4, 0x4e, 0xd3, 0x10, 0x32, 0xe7, 0x94, 0xd1, 0xb6, 0x5a, 0x98, 0x95, 0x1e,
    0xdf, 0x42, 0x8f, 0x75, 0xd5, 0xf5, 0x05, 0xee, 0x11, 0x54, 0x5f, 0x18, 0x3a, 0xff, 0xda, 0x1d,
    0xcd, 0x74, 0xb7, 0xe8, 0xbf, 0x7b, 0x88, 0x2f, 0xf9, 0xba, 0xc7, 0x1e, 0xa9, 0x0f, 0xa9, 0xbf,
    0xbf, 0x74, 0xe7, 0x71, 0xb7, 0x53, 0xab, 0x0b, 0x87, 0x09, 0x32, 0x1e, 0x69, 0xd2, 0xd0, 0x33,
    0xa4, 0x4f,
};

static const MessageEncodingTestVector sMessageEncodingTest0450 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x07E14BE8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2EB9,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0450_EncryptionKey,
    sMessageEncodingTest0450_Payload,
    sizeof(sMessageEncodingTest0450_Payload),
    sMessageEncodingTest0450_ExpectedEncoding,
    sizeof(sMessageEncodingTest0450_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0451_Payload[] =
{
    0x09, 0x50, 0xc9, 0xf9, 0xe4, 0x09, 0x43, 0x3f, 0x06, 0x25, 0xd5, 0x90, 0x31, 0x9b, 0x14, 0x1e,
    0x72, 0x28, 0x24, 0x6b, 0x3a, 0x0a, 0x20, 0x39, 0x7e, 0x21, 0x23, 0xad, 0x1a, 0x2d, 0x4c, 0xb8,
    0x9b, 0x32, 0xae, 0x60, 0x7a, 0x4d, 0xb7, 0x8e, 0xb6, 0x60, 0x4e, 0x9f, 0x75, 0x14, 0x90, 0x23,
    0x6f, 0xf9,
};

static const uint8_t sMessageEncodingTest0451_ExpectedEncoding[] =
{
    0x00, 0x21, 0xdd, 0xca, 0x1a, 0xdf, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x09, 0x50,
    0xc9, 0xf9, 0xe4, 0x09, 0x43, 0x3f, 0x06, 0x25, 0xd5, 0x90, 0x31, 0x9b, 0x14, 0x1e, 0x72, 0x28,
    0x24, 0x6b, 0x3a, 0x0a, 0x20, 0x39, 0x7e, 0x21, 0x23, 0xad, 0x1a, 0x2d, 0x4c, 0xb8, 0x9b, 0x32,
    0xae, 0x60, 0x7a, 0x4d, 0xb7, 0x8e, 0xb6, 0x60, 0x4e, 0x9f, 0x75, 0x14, 0x90, 0x23, 0x6f, 0xf9,
};

static const MessageEncodingTestVector sMessageEncodingTest0451 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xDF1ACADD,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0451_Payload,
    sizeof(sMessageEncodingTest0451_Payload),
    sMessageEncodingTest0451_ExpectedEncoding,
    sizeof(sMessageEncodingTest0451_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0452_EncryptionKey =
{
    {
        0xca, 0x59, 0x34, 0x5b, 0xcb, 0x11, 0xdb, 0xff, 0x5f, 0x00, 0x11, 0x95, 0xec, 0x12, 0x9d, 0xe1,
    },
    {
        0xb8, 0xa6, 0xb9, 0x01, 0xca, 0xd7, 0x91, 0x39, 0xeb, 0xee, 0x2b, 0xd1, 0x7c, 0x35, 0x54, 0xea,
        0xe4, 0x9e, 0xf1, 0x93,
    }
};
static const uint8_t sMessageEncodingTest0452_Payload[] =
{
    0x0c, 0x57, 0xb1, 0xab, 0x28, 0x74, 0xc1, 0x74, 0xed, 0x77, 0xa6, 0x32, 0xe2, 0x61, 0x0f, 0x46,
    0x06, 0x0d, 0xc2, 0x24, 0x29, 0x1e, 0x6a, 0xaf, 0xec, 0x29, 0xad, 0x7d, 0x3c, 0xce, 0x5a, 0x25,
    0x00, 0xad, 0xa3, 0x08, 0xfc, 0x92, 0x7c, 0xd8, 0x0e, 0x1f, 0x92, 0xa4, 0xe4, 0xf5, 0x17, 0x6b,
    0x38, 0xc2,
};

static const uint8_t sMessageEncodingTest0452_ExpectedEncoding[] =
{
    0x10, 0x21, 0xa3, 0x3e, 0xd9, 0x2d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xfe, 0x29,
    0x27, 0x4f, 0x47, 0x31, 0xe4, 0xc6, 0x3c, 0xe8, 0xf6, 0x00, 0xfb, 0x7a, 0x6e, 0x0b, 0x5c, 0x61,
    0x39, 0x22, 0xc3, 0xf1, 0xfe, 0x67, 0x7b, 0x4e, 0xeb, 0xb0, 0x11, 0x80, 0x23, 0xa6, 0x72, 0x32,
    0xd5, 0x62, 0x63, 0x8e, 0x0a, 0xdd, 0xdd, 0x2e, 0x3e, 0x35, 0xde, 0xe1, 0xed, 0xf6, 0xa4, 0xd8,
    0x5c, 0xdb, 0x2e, 0x01, 0x6d, 0x55, 0xc8, 0xda, 0x2c, 0xcb, 0x30, 0x71, 0xef, 0xeb, 0x01, 0x8e,
    0x29, 0x5e, 0x92, 0x08, 0x5b, 0x0e,
};

static const MessageEncodingTestVector sMessageEncodingTest0452 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2DD93EA3,
        kWeaveHeaderFlag_DestNodeId,
        0x29FE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0452_EncryptionKey,
    sMessageEncodingTest0452_Payload,
    sizeof(sMessageEncodingTest0452_Payload),
    sMessageEncodingTest0452_ExpectedEncoding,
    sizeof(sMessageEncodingTest0452_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0453_EncryptionKey =
{
    {
        0x1d, 0xfb, 0xac, 0xdd, 0xa7, 0xe9, 0x22, 0xc8, 0xa0, 0x54, 0x5c, 0xee, 0x34, 0x4a, 0xfd, 0x03,
    }
};
static const uint8_t sMessageEncodingTest0453_Payload[] =
{
    0x51, 0xae, 0x0b, 0x30, 0x9b, 0x0e, 0xbc, 0x19, 0xe2, 0xa3, 0x3e, 0x41, 0xe2, 0x92, 0x4e, 0xb2,
    0xe0, 0xbb, 0xa1, 0xb0, 0x6e, 0x6a, 0x81, 0x9a, 0x80, 0xd8, 0x04, 0x49, 0x22, 0x3b, 0xd4, 0xb8,
    0xf3, 0x2a, 0x93, 0x96, 0x90, 0x4c, 0x6f, 0xf4, 0x8e, 0xbc, 0xb1, 0xc3, 0x21, 0xcf, 0x41, 0x3b,
    0x14, 0x94,
};

static const uint8_t sMessageEncodingTest0453_ExpectedEncoding[] =
{
    0x20, 0x21, 0xe1, 0x83, 0x5b, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5a, 0x24,
    0xa5, 0xd6, 0x15, 0x7c, 0xef, 0xfa, 0xc8, 0x55, 0x27, 0x92, 0xb6, 0xa2, 0x14, 0x86, 0x61, 0x14,
    0xfb, 0x41, 0x64, 0x6c, 0xf8, 0x6a, 0x15, 0xce, 0x7f, 0xa2, 0x96, 0x5d, 0x52, 0x28, 0x63, 0x7a,
    0x18, 0x2c, 0xfc, 0x6d, 0xb4, 0xfe, 0x03, 0x5d, 0xcf, 0x8e, 0x3a, 0xa2, 0x23, 0x65, 0x1f, 0xab,
    0x46, 0x39, 0x9a, 0xc7, 0xd0, 0x81, 0xa6, 0x56, 0xdc, 0x09,
};

static const MessageEncodingTestVector sMessageEncodingTest0453 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x6E5B83E1,
        kWeaveHeaderFlag_DestNodeId,
        0x245A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0453_EncryptionKey,
    sMessageEncodingTest0453_Payload,
    sizeof(sMessageEncodingTest0453_Payload),
    sMessageEncodingTest0453_ExpectedEncoding,
    sizeof(sMessageEncodingTest0453_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0454_EncryptionKey =
{
    {
        0xa0, 0xf1, 0xc0, 0xb4, 0xdf, 0xac, 0xd1, 0xc7, 0x1a, 0xd9, 0xcb, 0x4f, 0x8e, 0xf2, 0x6e, 0x98,
    }
};
static const uint8_t sMessageEncodingTest0454_Payload[] =
{
    0x78, 0x96, 0x07, 0x88, 0x47, 0x63, 0x1c, 0xe8, 0x00, 0x70, 0xd1, 0xdf, 0x8f, 0x2f, 0xb3, 0xd9,
    0x1d, 0x5e, 0xfc, 0xb9, 0x6e, 0x87, 0x0e, 0x69, 0xc1, 0xf9, 0xf4, 0x8e, 0x3d, 0x98, 0x9a, 0xab,
    0x4f, 0xd0, 0xe1, 0x9e, 0xb7, 0x23, 0x4e, 0x1d, 0x0e, 0x2d, 0xed, 0x9e, 0x11, 0x7f, 0x8a, 0xa9,
    0x27, 0xa6,
};

static const uint8_t sMessageEncodingTest0454_ExpectedEncoding[] =
{
    0x30, 0x21, 0xb7, 0x29, 0xa0, 0xa2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0f, 0x2a,
    0x9f, 0x33, 0x96, 0xa8, 0x67, 0x7f, 0xe4, 0xbe, 0x71, 0xe1, 0x32, 0xf3, 0x14, 0x1b, 0xa8, 0x19,
    0x37, 0x78, 0x51, 0x2a, 0x7c, 0xb1, 0x5b, 0x5f, 0x36, 0xb6, 0x8c, 0x71, 0x19, 0x9c, 0x9b, 0x4b,
    0x70, 0x6c, 0xb5, 0xd8, 0x84, 0x5c, 0x6e, 0x35, 0x76, 0xcd, 0xce, 0x34, 0xe5, 0x72, 0x8d, 0xd9,
    0x77, 0xb2, 0x1e, 0xf3, 0x0c, 0x89, 0x32, 0xad, 0x69, 0x87, 0xa1, 0x5e, 0x55, 0xf7, 0xa2, 0x63,
    0x7d, 0xdb,
};

static const MessageEncodingTestVector sMessageEncodingTest0454 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA2A029B7,
        kWeaveHeaderFlag_DestNodeId,
        0x2A0F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0454_EncryptionKey,
    sMessageEncodingTest0454_Payload,
    sizeof(sMessageEncodingTest0454_Payload),
    sMessageEncodingTest0454_ExpectedEncoding,
    sizeof(sMessageEncodingTest0454_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0455_Payload[] =
{
    0x38, 0x1e, 0x6f, 0xd8, 0x01, 0x30, 0x17, 0x0d, 0xed, 0xf4, 0x28, 0xa4, 0xf4, 0x4b, 0xcb, 0x97,
    0x83, 0xc9, 0x7e, 0x78, 0xad, 0x70, 0x3d, 0xeb, 0x3a, 0xf5, 0x08, 0x7f, 0x27, 0x99, 0xb5, 0x00,
    0x26, 0x82, 0x2a, 0xd2, 0x64, 0x1f, 0xf8, 0x46, 0xb4, 0x5f, 0xac, 0x01, 0xd6, 0x8a, 0xc1, 0x9d,
    0x52, 0x59,
};

static const uint8_t sMessageEncodingTest0455_ExpectedEncoding[] =
{
    0x00, 0x26, 0xf8, 0x71, 0x9b, 0xac, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x38, 0x1e,
    0x6f, 0xd8, 0x01, 0x30, 0x17, 0x0d, 0xed, 0xf4, 0x28, 0xa4, 0xf4, 0x4b, 0xcb, 0x97, 0x83, 0xc9,
    0x7e, 0x78, 0xad, 0x70, 0x3d, 0xeb, 0x3a, 0xf5, 0x08, 0x7f, 0x27, 0x99, 0xb5, 0x00, 0x26, 0x82,
    0x2a, 0xd2, 0x64, 0x1f, 0xf8, 0x46, 0xb4, 0x5f, 0xac, 0x01, 0xd6, 0x8a, 0xc1, 0x9d, 0x52, 0x59,
};

static const MessageEncodingTestVector sMessageEncodingTest0455 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAC9B71F8,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0455_Payload,
    sizeof(sMessageEncodingTest0455_Payload),
    sMessageEncodingTest0455_ExpectedEncoding,
    sizeof(sMessageEncodingTest0455_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0456_EncryptionKey =
{
    {
        0x38, 0x6f, 0xad, 0x2b, 0x49, 0xdc, 0xff, 0x36, 0x7b, 0xee, 0x94, 0x6d, 0x66, 0x77, 0xc1, 0x66,
    },
    {
        0x6a, 0xc4, 0x65, 0xb4, 0xd4, 0x29, 0xd9, 0xf2, 0x58, 0x9c, 0x9c, 0x76, 0x93, 0x19, 0x33, 0x2f,
        0x51, 0xee, 0x29, 0xfd,
    }
};
static const uint8_t sMessageEncodingTest0456_Payload[] =
{
    0x28, 0xde, 0xd2, 0x23, 0x74, 0x53, 0x6c, 0x93, 0x3f, 0x3c, 0xf2, 0x58, 0xd8, 0x5c, 0xe7, 0x8d,
    0x9e, 0x74, 0x7c, 0x65, 0xe5, 0x71, 0x37, 0x44, 0x2f, 0x68, 0xf9, 0xdc, 0x4d, 0x3c, 0x87, 0xda,
    0x1b, 0x8d, 0x51, 0x13, 0xa8, 0x48, 0x20, 0xd9, 0x79, 0xd8, 0x66, 0x8d, 0xcc, 0x14, 0x3c, 0xd1,
    0x45, 0x9c,
};

static const uint8_t sMessageEncodingTest0456_ExpectedEncoding[] =
{
    0x10, 0x26, 0x06, 0x6d, 0x6f, 0xe9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5a, 0x2d,
    0x44, 0x16, 0x2d, 0xd1, 0xab, 0x2c, 0x72, 0x80, 0xa1, 0x04, 0xcd, 0x21, 0x59, 0x7e, 0x5f, 0xc1,
    0x77, 0x86, 0x73, 0x8b, 0xff, 0x84, 0x75, 0x14, 0x1d, 0x2c, 0xe8, 0xc8, 0x84, 0x8f, 0x09, 0x55,
    0xed, 0xcf, 0xb9, 0x35, 0xe2, 0x7d, 0x1f, 0xd2, 0x13, 0x8e, 0xf8, 0x59, 0x42, 0xa2, 0x7e, 0xa8,
    0x53, 0x5d, 0x6a, 0xb1, 0xff, 0xae, 0x2d, 0x8c, 0xf7, 0x33, 0x89, 0x0f, 0x04, 0x7d, 0x12, 0x29,
    0x6a, 0xee, 0x9e, 0xfd, 0x68, 0xa5,
};

static const MessageEncodingTestVector sMessageEncodingTest0456 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE96F6D06,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2D5A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0456_EncryptionKey,
    sMessageEncodingTest0456_Payload,
    sizeof(sMessageEncodingTest0456_Payload),
    sMessageEncodingTest0456_ExpectedEncoding,
    sizeof(sMessageEncodingTest0456_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0457_EncryptionKey =
{
    {
        0x04, 0x45, 0x8e, 0x7c, 0xb1, 0x6d, 0xcd, 0x48, 0xa7, 0x26, 0x85, 0x22, 0x38, 0xe0, 0xb2, 0xb6,
    }
};
static const uint8_t sMessageEncodingTest0457_Payload[] =
{
    0x27, 0xf1, 0x95, 0x02, 0xaf, 0x19, 0x7b, 0x61, 0x16, 0x6e, 0x18, 0x21, 0xb0, 0x44, 0x5b, 0x37,
    0xa4, 0x71, 0xa9, 0xea, 0xb3, 0x0a, 0xbb, 0x55, 0xe1, 0x88, 0xe4, 0x81, 0x82, 0x9c, 0xfc, 0x91,
    0xca, 0x56, 0xb3, 0x17, 0x21, 0xaf, 0xa6, 0xc7, 0x6f, 0xf1, 0xe7, 0x20, 0xab, 0xc4, 0xb6, 0xa8,
    0x5d, 0xbb,
};

static const uint8_t sMessageEncodingTest0457_ExpectedEncoding[] =
{
    0x20, 0x26, 0x68, 0xfb, 0xc9, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7a, 0x28,
    0xe8, 0x2c, 0x82, 0x7d, 0x16, 0xf3, 0x82, 0xc3, 0x77, 0x0a, 0x3b, 0x87, 0x0d, 0x42, 0x7d, 0x79,
    0x6f, 0xc7, 0x3f, 0x52, 0x44, 0xd2, 0x90, 0x6f, 0xf0, 0xf7, 0x4d, 0x95, 0xc0, 0xb9, 0x16, 0xd4,
    0x7e, 0x8f, 0xb8, 0xf9, 0x94, 0x98, 0xd5, 0xfe, 0xaa, 0xf3, 0x02, 0x81, 0xac, 0x11, 0xcd, 0x56,
    0x87, 0xa1, 0x33, 0x5f, 0xe0, 0x4a, 0xd7, 0x35, 0xf1, 0x8d,
};

static const MessageEncodingTestVector sMessageEncodingTest0457 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x06C9FB68,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x287A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0457_EncryptionKey,
    sMessageEncodingTest0457_Payload,
    sizeof(sMessageEncodingTest0457_Payload),
    sMessageEncodingTest0457_ExpectedEncoding,
    sizeof(sMessageEncodingTest0457_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0458_EncryptionKey =
{
    {
        0x56, 0x2f, 0xfa, 0xef, 0xbe, 0xdc, 0x22, 0xe4, 0x01, 0x0b, 0x24, 0x0a, 0xc3, 0xaf, 0x96, 0xb5,
    }
};
static const uint8_t sMessageEncodingTest0458_Payload[] =
{
    0x82, 0x86, 0x74, 0xaf, 0x90, 0xf2, 0x9f, 0x0f, 0xcd, 0x35, 0x06, 0x4b, 0x54, 0xa3, 0x9d, 0x5b,
    0xe6, 0xae, 0x33, 0xdc, 0x11, 0x1e, 0xa0, 0xbb, 0x31, 0x6a, 0xbf, 0x09, 0x17, 0x1e, 0x5a, 0x73,
    0x21, 0xfd, 0xd8, 0xba, 0x7a, 0xda, 0x79, 0xd8, 0xf7, 0x38, 0x44, 0x0b, 0x34, 0x85, 0xe0, 0xc5,
    0xdc, 0x5f,
};

static const uint8_t sMessageEncodingTest0458_ExpectedEncoding[] =
{
    0x30, 0x26, 0xf2, 0x29, 0x4c, 0x8a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xac, 0x2a,
    0x13, 0xa6, 0xb0, 0xb3, 0x21, 0x27, 0x60, 0x62, 0xf7, 0x58, 0x8c, 0x24, 0xc4, 0xf8, 0x38, 0x2a,
    0x9f, 0xb2, 0xb2, 0x6a, 0xdf, 0x70, 0x9f, 0x6c, 0x9c, 0xbe, 0x93, 0xc5, 0xb1, 0x5f, 0xe1, 0x76,
    0xe0, 0x55, 0x36, 0x5b, 0x11, 0x1b, 0xca, 0x10, 0x1a, 0x6c, 0x4d, 0x10, 0x89, 0xd2, 0x0c, 0x0f,
    0x43, 0x95, 0x02, 0x1d, 0xcf, 0xc9, 0xd0, 0xcd, 0xb8, 0x67, 0x7f, 0x92, 0x2b, 0xc8, 0x67, 0x95,
    0xb5, 0x4e,
};

static const MessageEncodingTestVector sMessageEncodingTest0458 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x8A4C29F2,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2AAC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0458_EncryptionKey,
    sMessageEncodingTest0458_Payload,
    sizeof(sMessageEncodingTest0458_Payload),
    sMessageEncodingTest0458_ExpectedEncoding,
    sizeof(sMessageEncodingTest0458_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0459_Payload[] =
{
    0x19, 0x77, 0x1c, 0xcf, 0x8a, 0xe0, 0x81, 0xfd, 0x33, 0xa9, 0x09, 0xc4, 0x9e, 0xe2, 0xdf, 0xb2,
    0x88, 0xdb, 0xea, 0xb1, 0xbc, 0x68, 0x59, 0x7a, 0x28, 0x2c, 0x37, 0x9a, 0x2a, 0xd7, 0x7b, 0x2e,
    0x53, 0x5a, 0xc7, 0x26, 0x72, 0x61, 0x22, 0x6b, 0x20, 0x6b, 0x87, 0xb2, 0x67, 0xe6, 0x17, 0x61,
    0x8e, 0x21,
};

static const uint8_t sMessageEncodingTest0459_ExpectedEncoding[] =
{
    0x00, 0x2a, 0xdf, 0x3a, 0x8c, 0x66, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x19, 0x77,
    0x1c, 0xcf, 0x8a, 0xe0, 0x81, 0xfd, 0x33, 0xa9, 0x09, 0xc4, 0x9e, 0xe2, 0xdf, 0xb2, 0x88, 0xdb,
    0xea, 0xb1, 0xbc, 0x68, 0x59, 0x7a, 0x28, 0x2c, 0x37, 0x9a, 0x2a, 0xd7, 0x7b, 0x2e, 0x53, 0x5a,
    0xc7, 0x26, 0x72, 0x61, 0x22, 0x6b, 0x20, 0x6b, 0x87, 0xb2, 0x67, 0xe6, 0x17, 0x61, 0x8e, 0x21,
};

static const MessageEncodingTestVector sMessageEncodingTest0459 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x668C3ADF,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0459_Payload,
    sizeof(sMessageEncodingTest0459_Payload),
    sMessageEncodingTest0459_ExpectedEncoding,
    sizeof(sMessageEncodingTest0459_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0460_EncryptionKey =
{
    {
        0xb9, 0xa0, 0x9a, 0x07, 0x21, 0x39, 0xb6, 0x05, 0x3e, 0x66, 0xb9, 0x7f, 0x32, 0x97, 0xa0, 0x88,
    },
    {
        0xdf, 0x95, 0x63, 0x30, 0x2d, 0x7e, 0x5a, 0x17, 0xc0, 0xc9, 0x1f, 0xb2, 0x3c, 0xee, 0x98, 0x7f,
        0xbc, 0x6d, 0x18, 0x5b,
    }
};
static const uint8_t sMessageEncodingTest0460_Payload[] =
{
    0x5b, 0x48, 0x93, 0x22, 0x14, 0x36, 0x98, 0xb6, 0xeb, 0x97, 0x63, 0x20, 0x13, 0x8c, 0x63, 0x04,
    0x04, 0x71, 0xd9, 0x4a, 0xc6, 0x4b, 0x8a, 0xe3, 0xf5, 0x1e, 0x77, 0x49, 0x8f, 0x6d, 0x7e, 0x4d,
    0xaa, 0x25, 0x38, 0x10, 0xb3, 0x4a, 0x1d, 0x5a, 0x1b, 0x61, 0x2d, 0x16, 0xd6, 0x94, 0xac, 0x93,
    0x62, 0x6d,
};

static const uint8_t sMessageEncodingTest0460_ExpectedEncoding[] =
{
    0x10, 0x2a, 0xe5, 0x5d, 0x4c, 0xf5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x12, 0x26,
    0x85, 0x32, 0xba, 0x03, 0x1a, 0xc3, 0x72, 0x91, 0xc0, 0xbe, 0x75, 0xa2, 0x55, 0xc5, 0xb8, 0xc7,
    0xf1, 0x9b, 0xab, 0x9c, 0x48, 0x45, 0xdb, 0xb5, 0x8f, 0xac, 0x14, 0xf7, 0xfa, 0x81, 0xca, 0x7f,
    0x69, 0x69, 0xd1, 0x89, 0xc3, 0x17, 0x2a, 0x05, 0x69, 0x81, 0xb6, 0x4c, 0x3b, 0xf1, 0xb8, 0xab,
    0x5d, 0xe5, 0x16, 0x0c, 0xc3, 0x5f, 0xe0, 0x27, 0x0c, 0x10, 0xa9, 0x13, 0xef, 0x54, 0x27, 0xe9,
    0x28, 0x8f, 0xe4, 0xad, 0xe1, 0xcb,
};

static const MessageEncodingTestVector sMessageEncodingTest0460 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF54C5DE5,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2612,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0460_EncryptionKey,
    sMessageEncodingTest0460_Payload,
    sizeof(sMessageEncodingTest0460_Payload),
    sMessageEncodingTest0460_ExpectedEncoding,
    sizeof(sMessageEncodingTest0460_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0461_EncryptionKey =
{
    {
        0xbd, 0x5e, 0x92, 0x4a, 0x5d, 0xe6, 0xf1, 0x75, 0xbf, 0x37, 0x24, 0xdf, 0x84, 0xa6, 0xe1, 0x42,
    }
};
static const uint8_t sMessageEncodingTest0461_Payload[] =
{
    0x1f, 0xb5, 0x90, 0x2a, 0x53, 0xea, 0xac, 0xa8, 0x25, 0x53, 0xec, 0x67, 0x52, 0x91, 0x33, 0x14,
    0x56, 0x4e, 0x38, 0x23, 0x5e, 0xe9, 0xf0, 0x38, 0x58, 0xa2, 0x14, 0xed, 0x1d, 0x5d, 0x5d, 0x3f,
    0xe6, 0xc9, 0xee, 0xb6, 0x07, 0x60, 0xb5, 0x77, 0x28, 0x01, 0x8e, 0x54, 0xf5, 0x59, 0x79, 0x55,
    0xf8, 0x0d,
};

static const uint8_t sMessageEncodingTest0461_ExpectedEncoding[] =
{
    0x20, 0x2a, 0x4e, 0x0d, 0xc3, 0xa8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x49, 0x2b,
    0x3a, 0xeb, 0x56, 0x01, 0x00, 0x88, 0xc7, 0x3c, 0x76, 0x31, 0x2f, 0x63, 0x1f, 0xbe, 0x7a, 0x6e,
    0xdd, 0x4a, 0x31, 0x74, 0x46, 0x87, 0xf2, 0xdd, 0x50, 0x42, 0xf0, 0xa3, 0xb0, 0x04, 0x7e, 0xd9,
    0xc2, 0xb9, 0x24, 0xa5, 0x8e, 0xe8, 0x3c, 0x5f, 0x56, 0xc1, 0x2e, 0x62, 0x17, 0xe1, 0xbc, 0x31,
    0x2f, 0x56, 0x6a, 0xc0, 0xee, 0xf9, 0x1d, 0xbf, 0xfe, 0xb3,
};

static const MessageEncodingTestVector sMessageEncodingTest0461 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA8C30D4E,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2B49,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0461_EncryptionKey,
    sMessageEncodingTest0461_Payload,
    sizeof(sMessageEncodingTest0461_Payload),
    sMessageEncodingTest0461_ExpectedEncoding,
    sizeof(sMessageEncodingTest0461_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0462_EncryptionKey =
{
    {
        0x0e, 0x3a, 0x3a, 0x0b, 0x93, 0xf4, 0xe8, 0x74, 0x43, 0x23, 0x3b, 0x60, 0xa6, 0xb1, 0x08, 0x39,
    }
};
static const uint8_t sMessageEncodingTest0462_Payload[] =
{
    0x03, 0x34, 0xd6, 0x86, 0x14, 0x1c, 0x2c, 0x57, 0xc2, 0x2e, 0x05, 0xc8, 0xdc, 0xc9, 0xfa, 0x8d,
    0x8f, 0xe6, 0x9a, 0xdc, 0xa4, 0x86, 0xf6, 0x88, 0x71, 0x79, 0xf8, 0xb9, 0x0f, 0x78, 0xf0, 0x71,
    0x10, 0xa4, 0xb9, 0xde, 0x9c, 0x58, 0xd5, 0x7b, 0x09, 0xbc, 0xc6, 0x9f, 0xf4, 0x78, 0xa9, 0x89,
    0x72, 0xc7,
};

static const uint8_t sMessageEncodingTest0462_ExpectedEncoding[] =
{
    0x30, 0x2a, 0x1a, 0xea, 0x27, 0x2b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x28, 0x2d,
    0x5c, 0x3c, 0x51, 0xcf, 0x9c, 0x8c, 0xcf, 0x50, 0x40, 0xa6, 0xe1, 0xcb, 0x42, 0xdf, 0xd1, 0x2f,
    0x49, 0x3b, 0x09, 0xad, 0x4d, 0x8e, 0x1a, 0x26, 0xf9, 0xcc, 0x94, 0x8f, 0xc7, 0x6e, 0x35, 0xa2,
    0xe4, 0xe8, 0x5d, 0xbe, 0xa4, 0x51, 0x61, 0x31, 0xd1, 0xe5, 0xac, 0x16, 0x9e, 0xa1, 0x28, 0x4b,
    0x01, 0x3c, 0xd6, 0x56, 0xc3, 0x81, 0x36, 0x1d, 0x1e, 0x12, 0x61, 0x25, 0x22, 0xc4, 0xb0, 0xaa,
    0x0e, 0x50,
};

static const MessageEncodingTestVector sMessageEncodingTest0462 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2B27EA1A,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2D28,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0462_EncryptionKey,
    sMessageEncodingTest0462_Payload,
    sizeof(sMessageEncodingTest0462_Payload),
    sMessageEncodingTest0462_ExpectedEncoding,
    sizeof(sMessageEncodingTest0462_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0463_Payload[] =
{
    0xa6, 0xe6, 0xb9, 0x46, 0x87, 0x1e, 0x5b, 0x07, 0x3e, 0xd5, 0x72, 0xe2, 0x6c, 0x27, 0xf0, 0x8d,
    0x13, 0x2b, 0x73, 0x8c, 0xba, 0xb4, 0x08, 0x45, 0x8f, 0xb3, 0x08, 0x71, 0x17, 0xdc, 0xb9, 0x25,
    0x5b, 0xd1, 0xab, 0xf0, 0x4c, 0x4b, 0x25, 0xf5, 0xbb, 0x0d, 0x29, 0xe3, 0x0b, 0x7d, 0xe6, 0x07,
    0x81, 0x67,
};

static const uint8_t sMessageEncodingTest0463_ExpectedEncoding[] =
{
    0x00, 0x22, 0x72, 0x10, 0xcc, 0xea, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa6, 0xe6,
    0xb9, 0x46, 0x87, 0x1e, 0x5b, 0x07, 0x3e, 0xd5, 0x72, 0xe2, 0x6c, 0x27, 0xf0, 0x8d, 0x13, 0x2b,
    0x73, 0x8c, 0xba, 0xb4, 0x08, 0x45, 0x8f, 0xb3, 0x08, 0x71, 0x17, 0xdc, 0xb9, 0x25, 0x5b, 0xd1,
    0xab, 0xf0, 0x4c, 0x4b, 0x25, 0xf5, 0xbb, 0x0d, 0x29, 0xe3, 0x0b, 0x7d, 0xe6, 0x07, 0x81, 0x67,
};

static const MessageEncodingTestVector sMessageEncodingTest0463 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xEACC1072,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0463_Payload,
    sizeof(sMessageEncodingTest0463_Payload),
    sMessageEncodingTest0463_ExpectedEncoding,
    sizeof(sMessageEncodingTest0463_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0464_EncryptionKey =
{
    {
        0x3c, 0x02, 0xf7, 0x9e, 0xbc, 0x1f, 0xcc, 0x9a, 0xe8, 0x80, 0xab, 0x07, 0x09, 0xe9, 0xbb, 0x87,
    },
    {
        0x87, 0x3b, 0x63, 0x41, 0xa4, 0x5c, 0xaf, 0x2a, 0x9e, 0x79, 0xbf, 0xe8, 0xbf, 0xa7, 0x45, 0xa5,
        0x43, 0x40, 0xbd, 0xad,
    }
};
static const uint8_t sMessageEncodingTest0464_Payload[] =
{
    0x15, 0xba, 0xdd, 0xc3, 0x5e, 0xfe, 0x2f, 0xb2, 0x29, 0x36, 0x5f, 0xf8, 0x2a, 0x47, 0x89, 0x1c,
    0x80, 0x35, 0x76, 0x08, 0xc9, 0x68, 0x74, 0xdc, 0xac, 0x8f, 0xcd, 0x37, 0xb3, 0xce, 0x3f, 0x0b,
    0x5f, 0x59, 0xd4, 0x76, 0x38, 0xeb, 0xeb, 0xf1, 0xa9, 0x00, 0xbb, 0x5a, 0x48, 0x2f, 0xdc, 0x9c,
    0x51, 0x4b,
};

static const uint8_t sMessageEncodingTest0464_ExpectedEncoding[] =
{
    0x10, 0x22, 0xfc, 0xc7, 0x6b, 0x54, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdc, 0x29,
    0xa7, 0xa1, 0x95, 0xe8, 0x9d, 0x72, 0xd9, 0xfc, 0xeb, 0x1e, 0x2c, 0xe7, 0x1d, 0x81, 0xc6, 0xc5,
    0x7b, 0xa4, 0x89, 0xfb, 0xd8, 0xbc, 0xeb, 0x05, 0xc0, 0xc6, 0xb7, 0x69, 0x00, 0xa7, 0xe7, 0x2e,
    0x82, 0xfe, 0x0b, 0x05, 0x1c, 0xea, 0xfd, 0xc2, 0x2d, 0xda, 0x5e, 0x9b, 0xf2, 0xad, 0x73, 0x9c,
    0x3e, 0xcb, 0xbd, 0x69, 0xf7, 0x8e, 0x56, 0x9d, 0xe1, 0x04, 0x44, 0x09, 0x21, 0xf1, 0x47, 0x7d,
    0x1d, 0x16, 0x7a, 0x5e, 0x68, 0x65,
};

static const MessageEncodingTestVector sMessageEncodingTest0464 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x546BC7FC,
        kWeaveHeaderFlag_SourceNodeId,
        0x29DC,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0464_EncryptionKey,
    sMessageEncodingTest0464_Payload,
    sizeof(sMessageEncodingTest0464_Payload),
    sMessageEncodingTest0464_ExpectedEncoding,
    sizeof(sMessageEncodingTest0464_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0465_EncryptionKey =
{
    {
        0x0d, 0xd6, 0xb8, 0x6f, 0x94, 0xfb, 0x43, 0x1c, 0x3f, 0x04, 0x1c, 0x7d, 0x79, 0x85, 0x5c, 0xd4,
    }
};
static const uint8_t sMessageEncodingTest0465_Payload[] =
{
    0xb1, 0xb7, 0x26, 0xb2, 0xf2, 0xe3, 0x56, 0xf5, 0xf8, 0xb2, 0x60, 0x93, 0xb9, 0x2d, 0xca, 0x85,
    0xb1, 0xe7, 0x99, 0x87, 0x12, 0x93, 0xd4, 0x2b, 0x20, 0x90, 0xc6, 0x3e, 0x8c, 0xd9, 0x95, 0x5b,
    0xf7, 0x62, 0x62, 0x28, 0x07, 0x48, 0x63, 0x08, 0x38, 0x35, 0x9c, 0xcc, 0x2c, 0xe3, 0xe0, 0x87,
    0x1d, 0x95,
};

static const uint8_t sMessageEncodingTest0465_ExpectedEncoding[] =
{
    0x20, 0x22, 0x08, 0xb6, 0xd5, 0xaf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x44, 0x2c,
    0xf9, 0x4c, 0x38, 0x5a, 0x99, 0xb7, 0x71, 0xe6, 0x64, 0xf2, 0x26, 0x58, 0xb7, 0x1c, 0x89, 0xaf,
    0x72, 0x6b, 0x3b, 0xf2, 0x05, 0x4c, 0x3b, 0x70, 0x00, 0xb3, 0xf5, 0x2f, 0x8d, 0x2f, 0xf8, 0xfc,
    0x3f, 0xd8, 0x48, 0x5c, 0x55, 0xe9, 0xf4, 0xfc, 0x10, 0x6e, 0x84, 0x7b, 0x8a, 0x16, 0x4e, 0x43,
    0x42, 0x4d, 0xb9, 0x84, 0xd5, 0x9b, 0x7e, 0x62, 0x2d, 0x9e,
};

static const MessageEncodingTestVector sMessageEncodingTest0465 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAFD5B608,
        kWeaveHeaderFlag_SourceNodeId,
        0x2C44,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0465_EncryptionKey,
    sMessageEncodingTest0465_Payload,
    sizeof(sMessageEncodingTest0465_Payload),
    sMessageEncodingTest0465_ExpectedEncoding,
    sizeof(sMessageEncodingTest0465_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0466_EncryptionKey =
{
    {
        0xe7, 0xc3, 0x83, 0x0d, 0xab, 0x8c, 0xe1, 0x16, 0x40, 0x32, 0xa0, 0xdb, 0xce, 0x51, 0xb5, 0xd4,
    }
};
static const uint8_t sMessageEncodingTest0466_Payload[] =
{
    0xb6, 0x59, 0x80, 0x8d, 0x24, 0xab, 0x89, 0x9f, 0xcb, 0x92, 0x65, 0x11, 0xd1, 0x78, 0x76, 0x8f,
    0x2f, 0x14, 0x85, 0x0a, 0x3a, 0x96, 0x7d, 0x78, 0xae, 0xa8, 0xa3, 0xcf, 0xad, 0x6b, 0x28, 0x73,
    0xb7, 0x59, 0x68, 0xbc, 0x5f, 0xeb, 0x39, 0x2c, 0x36, 0x61, 0x18, 0xc0, 0x78, 0x7e, 0x8a, 0x6b,
    0xc5, 0x9e,
};

static const uint8_t sMessageEncodingTest0466_ExpectedEncoding[] =
{
    0x30, 0x22, 0xe2, 0xf1, 0xdd, 0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xb4, 0x24,
    0x2d, 0x62, 0xe1, 0x5c, 0xdd, 0x71, 0xbc, 0x69, 0x1a, 0x39, 0xf9, 0x32, 0xf2, 0x2f, 0x69, 0xa8,
    0x97, 0x25, 0xb6, 0x4f, 0x79, 0xdf, 0x5e, 0x7c, 0xbf, 0x4e, 0x3d, 0xeb, 0xc0, 0x04, 0x25, 0x0b,
    0xd7, 0xac, 0xda, 0xeb, 0x3c, 0x7d, 0xb8, 0x44, 0x9f, 0x2b, 0x6c, 0x94, 0x02, 0x79, 0xa6, 0x83,
    0x9e, 0xb0, 0x2e, 0x95, 0xcf, 0x5c, 0xb4, 0xb6, 0x78, 0x24, 0x2d, 0xd7, 0x8d, 0x60, 0x41, 0x3b,
    0xa4, 0xe8,
};

static const MessageEncodingTestVector sMessageEncodingTest0466 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA6DDF1E2,
        kWeaveHeaderFlag_SourceNodeId,
        0x24B4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0466_EncryptionKey,
    sMessageEncodingTest0466_Payload,
    sizeof(sMessageEncodingTest0466_Payload),
    sMessageEncodingTest0466_ExpectedEncoding,
    sizeof(sMessageEncodingTest0466_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0467_Payload[] =
{
    0xff, 0x87, 0x36, 0x33, 0xab, 0xff, 0x72, 0xe9, 0x99, 0xab, 0x2d, 0x4d, 0x2f, 0xe2, 0xaf, 0xb3,
    0xfa, 0x83, 0x00, 0x45, 0xf2, 0xa1, 0x77, 0x28, 0xbe, 0xe6, 0xdf, 0xf7, 0xb4, 0xd4, 0xbd, 0x57,
    0x3d, 0x09, 0x9e, 0x1d, 0xbc, 0x92, 0x10, 0xe5, 0x79, 0xfd, 0xbb, 0xf5, 0x7e, 0xb7, 0x9f, 0xe6,
    0x0a, 0x5f,
};

static const uint8_t sMessageEncodingTest0467_ExpectedEncoding[] =
{
    0x00, 0x24, 0xf6, 0x44, 0xf5, 0xbd, 0xff, 0x87, 0x36, 0x33, 0xab, 0xff, 0x72, 0xe9, 0x99, 0xab,
    0x2d, 0x4d, 0x2f, 0xe2, 0xaf, 0xb3, 0xfa, 0x83, 0x00, 0x45, 0xf2, 0xa1, 0x77, 0x28, 0xbe, 0xe6,
    0xdf, 0xf7, 0xb4, 0xd4, 0xbd, 0x57, 0x3d, 0x09, 0x9e, 0x1d, 0xbc, 0x92, 0x10, 0xe5, 0x79, 0xfd,
    0xbb, 0xf5, 0x7e, 0xb7, 0x9f, 0xe6, 0x0a, 0x5f,
};

static const MessageEncodingTestVector sMessageEncodingTest0467 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xBDF544F6,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0467_Payload,
    sizeof(sMessageEncodingTest0467_Payload),
    sMessageEncodingTest0467_ExpectedEncoding,
    sizeof(sMessageEncodingTest0467_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0468_EncryptionKey =
{
    {
        0xb0, 0x57, 0x4b, 0x93, 0x40, 0xf4, 0x0f, 0xe1, 0xfa, 0x0d, 0x1e, 0xc2, 0x95, 0xd5, 0x70, 0x63,
    },
    {
        0x30, 0x21, 0xfe, 0xe2, 0xbb, 0x29, 0x5e, 0x05, 0x11, 0x96, 0x23, 0x32, 0x82, 0x15, 0xf8, 0xee,
        0xa6, 0xa9, 0xfe, 0xdc,
    }
};
static const uint8_t sMessageEncodingTest0468_Payload[] =
{
    0xbc, 0xe6, 0xdd, 0xac, 0x1e, 0xc3, 0x84, 0x04, 0xb5, 0x4c, 0xc1, 0x5e, 0x3d, 0x06, 0xcb, 0x00,
    0x83, 0x70, 0x0e, 0xd7, 0xce, 0x33, 0x1a, 0x26, 0x83, 0x54, 0xd1, 0x2e, 0x73, 0x3c, 0x77, 0x43,
    0x6b, 0x44, 0x72, 0xb1, 0xba, 0x73, 0x4b, 0x4d, 0x39, 0x44, 0x53, 0x92, 0xd4, 0x6d, 0x15, 0x56,
    0x04, 0xfa,
};

static const uint8_t sMessageEncodingTest0468_ExpectedEncoding[] =
{
    0x10, 0x24, 0x4b, 0xc2, 0x31, 0xaa, 0xb1, 0x25, 0x25, 0x53, 0xa6, 0xd8, 0xb0, 0x20, 0xca, 0x62,
    0x0e, 0x73, 0x0a, 0x52, 0x6a, 0x2e, 0x1e, 0x47, 0x94, 0x45, 0xb4, 0x32, 0xdc, 0x6b, 0x2b, 0x1d,
    0x73, 0x0e, 0xb5, 0x5b, 0x2b, 0xf7, 0xb0, 0x3f, 0x67, 0x48, 0x61, 0xf6, 0x15, 0x02, 0xc8, 0xc7,
    0x2f, 0x17, 0x27, 0x8d, 0x85, 0x6f, 0x86, 0x4e, 0x48, 0x0a, 0x99, 0xd2, 0xba, 0xaf, 0x0e, 0x15,
    0x5b, 0x1b, 0xc2, 0x6d, 0xba, 0xa9, 0x8f, 0xc7, 0x6f, 0x47, 0x82, 0x07, 0xe2, 0x2d,
};

static const MessageEncodingTestVector sMessageEncodingTest0468 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAA31C24B,
        kWeaveHeaderFlag_TunneledData,
        0x25B1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0468_EncryptionKey,
    sMessageEncodingTest0468_Payload,
    sizeof(sMessageEncodingTest0468_Payload),
    sMessageEncodingTest0468_ExpectedEncoding,
    sizeof(sMessageEncodingTest0468_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0469_EncryptionKey =
{
    {
        0x60, 0xb0, 0x0d, 0x78, 0x2d, 0xcf, 0x37, 0xec, 0xe1, 0x31, 0xf9, 0xee, 0x64, 0x48, 0x9b, 0x80,
    }
};
static const uint8_t sMessageEncodingTest0469_Payload[] =
{
    0x52, 0x1e, 0x0b, 0xef, 0x8e, 0x5c, 0xad, 0x3f, 0xa6, 0x21, 0x6a, 0xbb, 0xe5, 0x86, 0xb1, 0x57,
    0xe0, 0x57, 0x70, 0x2b, 0xfb, 0x8a, 0x21, 0xa0, 0xa8, 0x42, 0x4d, 0x07, 0x1d, 0x13, 0xda, 0xec,
    0x91, 0x9b, 0xf4, 0xab, 0x04, 0x60, 0x13, 0x62, 0xeb, 0x1a, 0xf7, 0x9f, 0x0d, 0xa0, 0xc7, 0x67,
    0xb3, 0x62,
};

static const uint8_t sMessageEncodingTest0469_ExpectedEncoding[] =
{
    0x20, 0x24, 0x63, 0x3b, 0x0a, 0xcc, 0x93, 0x28, 0x7a, 0x98, 0x09, 0x55, 0xb7, 0x95, 0x50, 0x86,
    0x43, 0x0b, 0xac, 0x4b, 0xd1, 0x1b, 0x13, 0xf2, 0xf0, 0x5c, 0x5b, 0x67, 0x69, 0x9d, 0x78, 0x8f,
    0x0c, 0x5c, 0x81, 0xe3, 0xea, 0x16, 0x29, 0x87, 0x81, 0xab, 0x76, 0xa4, 0x0a, 0x7e, 0x8f, 0x6e,
    0x79, 0x5e, 0x20, 0x21, 0xe2, 0xc8, 0x42, 0x10, 0x07, 0x6a, 0xfa, 0xdd, 0x26, 0x59, 0x66, 0x7f,
    0x9a, 0x5e,
};

static const MessageEncodingTestVector sMessageEncodingTest0469 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xCC0A3B63,
        kWeaveHeaderFlag_TunneledData,
        0x2893,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0469_EncryptionKey,
    sMessageEncodingTest0469_Payload,
    sizeof(sMessageEncodingTest0469_Payload),
    sMessageEncodingTest0469_ExpectedEncoding,
    sizeof(sMessageEncodingTest0469_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0470_EncryptionKey =
{
    {
        0xbc, 0xc9, 0x9b, 0xe6, 0xe8, 0x79, 0x8a, 0x12, 0x36, 0xd5, 0x1b, 0xf5, 0x4d, 0xd1, 0x7f, 0xb9,
    }
};
static const uint8_t sMessageEncodingTest0470_Payload[] =
{
    0xfd, 0x3c, 0xbe, 0x63, 0x86, 0x36, 0xcc, 0x15, 0xa1, 0xe7, 0xa4, 0x3f, 0x99, 0x74, 0xfa, 0x70,
    0x88, 0x47, 0xb1, 0xae, 0x36, 0x29, 0x0a, 0xcb, 0xb7, 0xab, 0x8d, 0xe2, 0x0e, 0x9a, 0xf4, 0xbb,
    0x2a, 0x2e, 0x32, 0xd8, 0x69, 0x86, 0x7e, 0x8f, 0x09, 0x49, 0x02, 0xab, 0x84, 0x42, 0x5e, 0x68,
    0xb1, 0x69,
};

static const uint8_t sMessageEncodingTest0470_ExpectedEncoding[] =
{
    0x30, 0x24, 0xcb, 0xf9, 0xb1, 0x71, 0xc6, 0x2e, 0x4c, 0x8f, 0x87, 0x2b, 0xad, 0x3f, 0xe0, 0x58,
    0x63, 0x88, 0x90, 0x35, 0xe0, 0x9c, 0x6a, 0xa3, 0xe9, 0x8e, 0x78, 0x62, 0xdd, 0xcd, 0x09, 0x8c,
    0x09, 0xb6, 0xbf, 0x56, 0xf9, 0x27, 0x87, 0x6b, 0xa7, 0x99, 0x83, 0x18, 0x15, 0x1f, 0x57, 0xfa,
    0x2c, 0xf2, 0xa3, 0x19, 0xd0, 0x38, 0xdd, 0x61, 0x91, 0x16, 0xad, 0x64, 0x2e, 0x9c, 0xde, 0x3b,
    0x7a, 0x48, 0xf8, 0x1b, 0x57, 0x80, 0x78, 0xb1, 0x54, 0xec,
};

static const MessageEncodingTestVector sMessageEncodingTest0470 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x71B1F9CB,
        kWeaveHeaderFlag_TunneledData,
        0x2EC6,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0470_EncryptionKey,
    sMessageEncodingTest0470_Payload,
    sizeof(sMessageEncodingTest0470_Payload),
    sMessageEncodingTest0470_ExpectedEncoding,
    sizeof(sMessageEncodingTest0470_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0471_Payload[] =
{
    0x89, 0x5d, 0x7d, 0x26, 0x5e, 0x53, 0x09, 0x1e, 0xd1, 0x3d, 0xb6, 0x1f, 0x47, 0x21, 0x16, 0xc1,
    0x4b, 0xf8, 0xbb, 0x51, 0x7e, 0x8f, 0xc4, 0x07, 0x2b, 0xf5, 0xcb, 0xa2, 0x6f, 0x45, 0x9b, 0x64,
    0x11, 0xa8, 0xb8, 0x31, 0xf3, 0x18, 0xf9, 0xcf, 0x6e, 0x6c, 0x7b, 0xd0, 0xd8, 0xf3, 0xe6, 0x21,
    0x91, 0x8a,
};

static const uint8_t sMessageEncodingTest0471_ExpectedEncoding[] =
{
    0x00, 0x28, 0x18, 0xf8, 0x33, 0x0a, 0x89, 0x5d, 0x7d, 0x26, 0x5e, 0x53, 0x09, 0x1e, 0xd1, 0x3d,
    0xb6, 0x1f, 0x47, 0x21, 0x16, 0xc1, 0x4b, 0xf8, 0xbb, 0x51, 0x7e, 0x8f, 0xc4, 0x07, 0x2b, 0xf5,
    0xcb, 0xa2, 0x6f, 0x45, 0x9b, 0x64, 0x11, 0xa8, 0xb8, 0x31, 0xf3, 0x18, 0xf9, 0xcf, 0x6e, 0x6c,
    0x7b, 0xd0, 0xd8, 0xf3, 0xe6, 0x21, 0x91, 0x8a,
};

static const MessageEncodingTestVector sMessageEncodingTest0471 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0A33F818,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0471_Payload,
    sizeof(sMessageEncodingTest0471_Payload),
    sMessageEncodingTest0471_ExpectedEncoding,
    sizeof(sMessageEncodingTest0471_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0472_EncryptionKey =
{
    {
        0xf1, 0x68, 0x1b, 0xa5, 0x96, 0x2a, 0x19, 0xf8, 0xad, 0xfc, 0x1b, 0xf4, 0x95, 0x80, 0xc0, 0x92,
    },
    {
        0x17, 0x0a, 0x3d, 0xf2, 0x4d, 0xec, 0x88, 0x30, 0x45, 0x0e, 0x61, 0x5a, 0x7d, 0xc7, 0xca, 0xae,
        0xab, 0xb8, 0x2e, 0xc1,
    }
};
static const uint8_t sMessageEncodingTest0472_Payload[] =
{
    0x86, 0x18, 0xe6, 0x49, 0x8d, 0x0d, 0x4f, 0x66, 0x2b, 0x6f, 0xbe, 0xe8, 0x3f, 0x5b, 0xfd, 0xd6,
    0x46, 0x04, 0x4d, 0x45, 0x59, 0xef, 0x27, 0x00, 0x16, 0x18, 0xb1, 0xf5, 0x54, 0x3c, 0x29, 0x5e,
    0x83, 0x4f, 0x85, 0x85, 0xfe, 0xec, 0x3d, 0x0a, 0x87, 0xb6, 0x12, 0x3b, 0x70, 0x34, 0xe9, 0x95,
    0xcf, 0x5e,
};

static const uint8_t sMessageEncodingTest0472_ExpectedEncoding[] =
{
    0x10, 0x28, 0x7e, 0x6f, 0x54, 0xad, 0x18, 0x22, 0xc1, 0xb9, 0xff, 0x10, 0x24, 0xb3, 0xbd, 0x94,
    0x7d, 0x76, 0x2d, 0xc2, 0x50, 0x5c, 0x1e, 0x36, 0x66, 0xd1, 0x4d, 0xf5, 0x07, 0x56, 0xe1, 0x1e,
    0xc7, 0x76, 0x9d, 0x46, 0xbd, 0x80, 0x6b, 0xed, 0x2c, 0x1e, 0x55, 0x8f, 0x55, 0xde, 0xe8, 0xea,
    0x6f, 0x3a, 0x6d, 0xd8, 0xcf, 0x98, 0x2b, 0x63, 0x93, 0x61, 0x86, 0xfc, 0x2b, 0x46, 0x9d, 0x7f,
    0xc2, 0x75, 0x20, 0x3d, 0x7b, 0x2c, 0x97, 0x20, 0xb6, 0x88, 0x59, 0x08, 0xe7, 0x58,
};

static const MessageEncodingTestVector sMessageEncodingTest0472 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAD546F7E,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2218,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0472_EncryptionKey,
    sMessageEncodingTest0472_Payload,
    sizeof(sMessageEncodingTest0472_Payload),
    sMessageEncodingTest0472_ExpectedEncoding,
    sizeof(sMessageEncodingTest0472_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0473_EncryptionKey =
{
    {
        0xf8, 0x26, 0x3d, 0xd0, 0xd7, 0x43, 0xb2, 0xa9, 0x07, 0x4c, 0x8b, 0x66, 0x0d, 0x01, 0xe2, 0xaf,
    }
};
static const uint8_t sMessageEncodingTest0473_Payload[] =
{
    0x7f, 0x4e, 0x2e, 0x61, 0x9b, 0xaa, 0xe3, 0x7e, 0x8f, 0xfb, 0xaa, 0x72, 0xb6, 0xb5, 0x5e, 0xb0,
    0x86, 0x35, 0x52, 0xb3, 0x0b, 0x06, 0xd0, 0xe4, 0x51, 0x09, 0x20, 0x2f, 0x13, 0x45, 0x63, 0x1b,
    0x9a, 0x0d, 0x75, 0xb4, 0x1c, 0x04, 0xf9, 0x8d, 0x54, 0xe3, 0x6d, 0x18, 0x42, 0x76, 0x62, 0xc1,
    0x99, 0x16,
};

static const uint8_t sMessageEncodingTest0473_ExpectedEncoding[] =
{
    0x20, 0x28, 0x97, 0x0f, 0xbf, 0x40, 0xf1, 0x2a, 0x58, 0xd2, 0x3b, 0xb2, 0xd5, 0x23, 0x4e, 0x00,
    0xfa, 0xdd, 0x43, 0x03, 0x3e, 0x04, 0x45, 0x7c, 0x35, 0x7b, 0x08, 0x38, 0x99, 0x93, 0x46, 0x96,
    0x23, 0xcc, 0x76, 0xde, 0x2a, 0x50, 0xb9, 0x2c, 0x8d, 0xb7, 0xf8, 0x1e, 0x8e, 0xb5, 0xf4, 0x2c,
    0xe1, 0xbe, 0x37, 0x1f, 0x6f, 0xb0, 0xbe, 0x61, 0xda, 0xd8, 0xbe, 0x11, 0x21, 0x84, 0xeb, 0xf6,
    0xd1, 0x90,
};

static const MessageEncodingTestVector sMessageEncodingTest0473 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x40BF0F97,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2AF1,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0473_EncryptionKey,
    sMessageEncodingTest0473_Payload,
    sizeof(sMessageEncodingTest0473_Payload),
    sMessageEncodingTest0473_ExpectedEncoding,
    sizeof(sMessageEncodingTest0473_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0474_EncryptionKey =
{
    {
        0x72, 0x6f, 0x01, 0x37, 0xa1, 0x66, 0x12, 0x1f, 0xb8, 0x44, 0xbf, 0x64, 0x7b, 0x43, 0xa6, 0x2e,
    }
};
static const uint8_t sMessageEncodingTest0474_Payload[] =
{
    0xb0, 0x47, 0xae, 0x1e, 0x99, 0x7e, 0xc8, 0x56, 0xdd, 0x3e, 0x86, 0xe8, 0xf1, 0x5c, 0xaf, 0x6b,
    0x00, 0x72, 0x01, 0x47, 0x42, 0x14, 0x8a, 0x9d, 0x96, 0x20, 0xca, 0x44, 0xa6, 0x2e, 0x5d, 0x17,
    0xdd, 0x83, 0x3d, 0xb6, 0x6e, 0x08, 0xc2, 0x24, 0xd9, 0xa7, 0x5f, 0x8a, 0x78, 0xa1, 0x44, 0x2c,
    0x46, 0x72,
};

static const uint8_t sMessageEncodingTest0474_ExpectedEncoding[] =
{
    0x30, 0x28, 0xbe, 0xcb, 0x37, 0xc4, 0x42, 0x2a, 0x9a, 0x94, 0x10, 0x5f, 0xf7, 0xb6, 0x77, 0x0b,
    0xb4, 0x05, 0x56, 0xd5, 0x3d, 0x6e, 0x6b, 0x46, 0xf3, 0x01, 0x60, 0x77, 0x09, 0xde, 0x1e, 0x89,
    0x01, 0x5e, 0x23, 0x80, 0xc4, 0x8b, 0x82, 0x9a, 0xfe, 0x61, 0xea, 0x76, 0x4b, 0xb0, 0xbc, 0x83,
    0x51, 0x0d, 0x16, 0x49, 0x76, 0x4c, 0xb0, 0x46, 0x43, 0xb6, 0x8f, 0x65, 0xa8, 0x50, 0x0c, 0xcd,
    0x25, 0xcf, 0x40, 0x2b, 0xe6, 0xc7, 0xad, 0x66, 0x74, 0x1d,
};

static const MessageEncodingTestVector sMessageEncodingTest0474 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xC437CBBE,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A42,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0474_EncryptionKey,
    sMessageEncodingTest0474_Payload,
    sizeof(sMessageEncodingTest0474_Payload),
    sMessageEncodingTest0474_ExpectedEncoding,
    sizeof(sMessageEncodingTest0474_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0475_Payload[] =
{
    0xf6, 0xff, 0x77, 0x8a, 0xc6, 0x08, 0xe3, 0xc9, 0xdc, 0x31, 0x61, 0x72, 0xa6, 0xda, 0x6d, 0x51,
    0xa4, 0x72, 0x59, 0x03, 0x17, 0x05, 0xa0, 0x6e, 0x82, 0x1d, 0x95, 0x41, 0x47, 0xdb, 0xd0, 0x26,
    0x22, 0x88, 0xf1, 0xad, 0x36, 0x7e, 0x0d, 0xae, 0x75, 0xe4, 0x22, 0xb5, 0xdf, 0x42, 0xc3, 0x9c,
    0x05, 0x4f,
};

static const uint8_t sMessageEncodingTest0475_ExpectedEncoding[] =
{
    0x00, 0x20, 0xb1, 0xb5, 0x11, 0x6a, 0xf6, 0xff, 0x77, 0x8a, 0xc6, 0x08, 0xe3, 0xc9, 0xdc, 0x31,
    0x61, 0x72, 0xa6, 0xda, 0x6d, 0x51, 0xa4, 0x72, 0x59, 0x03, 0x17, 0x05, 0xa0, 0x6e, 0x82, 0x1d,
    0x95, 0x41, 0x47, 0xdb, 0xd0, 0x26, 0x22, 0x88, 0xf1, 0xad, 0x36, 0x7e, 0x0d, 0xae, 0x75, 0xe4,
    0x22, 0xb5, 0xdf, 0x42, 0xc3, 0x9c, 0x05, 0x4f,
};

static const MessageEncodingTestVector sMessageEncodingTest0475 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x6A11B5B1,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0475_Payload,
    sizeof(sMessageEncodingTest0475_Payload),
    sMessageEncodingTest0475_ExpectedEncoding,
    sizeof(sMessageEncodingTest0475_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0476_EncryptionKey =
{
    {
        0xa2, 0x21, 0x99, 0xfd, 0xa9, 0xb9, 0x69, 0x29, 0x7d, 0x72, 0xe8, 0x02, 0x0a, 0x46, 0x6a, 0x19,
    },
    {
        0xac, 0x1f, 0xe4, 0x9c, 0xee, 0xf0, 0xf1, 0xd6, 0x12, 0x7b, 0xb1, 0x93, 0x3a, 0x30, 0x60, 0x26,
        0xa4, 0x18, 0xc2, 0x7b,
    }
};
static const uint8_t sMessageEncodingTest0476_Payload[] =
{
    0x6d, 0xed, 0xca, 0xc8, 0x21, 0x81, 0xf0, 0x1c, 0x92, 0x53, 0xb9, 0xe3, 0x92, 0xb8, 0x78, 0x29,
    0xb7, 0xfe, 0xce, 0xf7, 0x8f, 0xa4, 0x45, 0xa8, 0x64, 0x3d, 0xb7, 0x3b, 0xe6, 0x61, 0x97, 0xba,
    0xe2, 0x8b, 0x47, 0xd6, 0x62, 0x47, 0x45, 0xe6, 0xa3, 0x75, 0x65, 0xa1, 0xbc, 0x8d, 0x48, 0x77,
    0x17, 0xc7,
};

static const uint8_t sMessageEncodingTest0476_ExpectedEncoding[] =
{
    0x10, 0x20, 0x79, 0x29, 0xe0, 0xfd, 0x47, 0x26, 0x0a, 0x01, 0x4a, 0x63, 0x5a, 0x93, 0x80, 0xff,
    0xce, 0x3e, 0x80, 0x49, 0x6c, 0x3f, 0xbe, 0x59, 0xa3, 0x92, 0x6b, 0x8b, 0x4c, 0x6d, 0xee, 0x57,
    0xa2, 0x57, 0x11, 0xb8, 0xac, 0x67, 0xd2, 0x99, 0x93, 0xed, 0xfa, 0xbd, 0x42, 0x98, 0x83, 0x7d,
    0xfa, 0x12, 0x37, 0x64, 0x29, 0x0f, 0x1b, 0xb0, 0x6b, 0x60, 0xd2, 0xe0, 0xcb, 0x33, 0x4b, 0x80,
    0xc0, 0x29, 0xb8, 0xd4, 0x19, 0xbe, 0xe1, 0x69, 0xcb, 0x52, 0x35, 0xa0, 0xf6, 0xef,
};

static const MessageEncodingTestVector sMessageEncodingTest0476 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xFDE02979,
        0,
        0x2647,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0476_EncryptionKey,
    sMessageEncodingTest0476_Payload,
    sizeof(sMessageEncodingTest0476_Payload),
    sMessageEncodingTest0476_ExpectedEncoding,
    sizeof(sMessageEncodingTest0476_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0477_EncryptionKey =
{
    {
        0xf2, 0xe0, 0x0f, 0x15, 0x37, 0xd7, 0x7c, 0xdd, 0xa1, 0xa0, 0x4f, 0xcd, 0x6e, 0x29, 0xc5, 0xc0,
    }
};
static const uint8_t sMessageEncodingTest0477_Payload[] =
{
    0x26, 0x73, 0x93, 0x9d, 0x3f, 0x7c, 0x91, 0x50, 0x5e, 0x83, 0x6c, 0xc7, 0x36, 0xb3, 0xef, 0xad,
    0x2a, 0x72, 0x94, 0x1c, 0x3c, 0x28, 0x88, 0x29, 0x03, 0xa6, 0xc7, 0xa0, 0x67, 0xd0, 0x34, 0xea,
    0x6d, 0xb1, 0xd9, 0x4b, 0x66, 0xe7, 0xb1, 0x74, 0xbf, 0x3e, 0xd9, 0x0a, 0x3c, 0x8c, 0x04, 0xd0,
    0x01, 0x1b,
};

static const uint8_t sMessageEncodingTest0477_ExpectedEncoding[] =
{
    0x20, 0x20, 0x8a, 0x1f, 0x0d, 0x81, 0xe2, 0x2d, 0xd1, 0x32, 0xea, 0xb1, 0x73, 0x6f, 0x14, 0x9f,
    0x53, 0x80, 0xb4, 0xe4, 0xfb, 0x5e, 0xe0, 0x4c, 0x28, 0x22, 0x41, 0x66, 0x7c, 0x1d, 0x2a, 0xbd,
    0x53, 0x79, 0x56, 0x39, 0x92, 0xc7, 0xf7, 0x65, 0xa2, 0x41, 0x26, 0x86, 0x5c, 0x97, 0x7c, 0x29,
    0x04, 0x4f, 0xeb, 0x76, 0xb4, 0xf8, 0x7a, 0x00, 0xe9, 0x9a, 0xe9, 0xea, 0xb4, 0x57, 0x02, 0x51,
    0x8c, 0x43,
};

static const MessageEncodingTestVector sMessageEncodingTest0477 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x810D1F8A,
        0,
        0x2DE2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0477_EncryptionKey,
    sMessageEncodingTest0477_Payload,
    sizeof(sMessageEncodingTest0477_Payload),
    sMessageEncodingTest0477_ExpectedEncoding,
    sizeof(sMessageEncodingTest0477_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0478_EncryptionKey =
{
    {
        0x46, 0x48, 0x59, 0x04, 0x25, 0x85, 0x2e, 0x64, 0xd9, 0xd7, 0x93, 0xd6, 0x37, 0x44, 0x81, 0xdc,
    }
};
static const uint8_t sMessageEncodingTest0478_Payload[] =
{
    0x05, 0x3f, 0xcf, 0x51, 0x82, 0x5e, 0x8a, 0x4e, 0x52, 0x34, 0xcb, 0x57, 0x2f, 0x3e, 0x18, 0x66,
    0x20, 0x94, 0xfe, 0x7d, 0x7e, 0x68, 0x94, 0x9e, 0x4b, 0xfe, 0xbb, 0x54, 0x71, 0x4a, 0xcb, 0x8d,
    0xbe, 0xc0, 0x49, 0x9b, 0x9c, 0x28, 0x08, 0x1b, 0x99, 0xa2, 0x50, 0x7e, 0x4e, 0x14, 0x8c, 0x32,
    0xd5, 0xd5,
};

static const uint8_t sMessageEncodingTest0478_ExpectedEncoding[] =
{
    0x30, 0x20, 0x17, 0xf8, 0x5a, 0x30, 0xd3, 0x2c, 0x1f, 0xf6, 0x0f, 0xf0, 0x3a, 0x8a, 0x4d, 0xcc,
    0x33, 0x95, 0x65, 0x70, 0xa8, 0xaa, 0xb2, 0xd6, 0xb8, 0xdd, 0xfa, 0xc1, 0x26, 0x3e, 0x2c, 0xa7,
    0x00, 0xdf, 0xb2, 0x1c, 0x37, 0xb1, 0xb2, 0x4e, 0xf9, 0x35, 0x3b, 0x4e, 0x64, 0xf9, 0xa1, 0x6a,
    0xc2, 0x98, 0x01, 0x7b, 0xc7, 0x5a, 0xdf, 0x26, 0x39, 0xa4, 0x56, 0xdd, 0x70, 0x68, 0xe8, 0xd4,
    0x41, 0xe9, 0xb2, 0xae, 0x89, 0x54, 0x87, 0xf0, 0x6a, 0x7e,
};

static const MessageEncodingTestVector sMessageEncodingTest0478 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x305AF817,
        0,
        0x2CD3,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0478_EncryptionKey,
    sMessageEncodingTest0478_Payload,
    sizeof(sMessageEncodingTest0478_Payload),
    sMessageEncodingTest0478_ExpectedEncoding,
    sizeof(sMessageEncodingTest0478_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0479_Payload[] =
{
    0x9f, 0x75, 0x7c, 0x8b, 0xb9, 0x5f, 0x0b, 0xa0, 0x75, 0xa6, 0xcd, 0xb1, 0x82, 0x95, 0x8f, 0x55,
    0x31, 0x51, 0xc4, 0x85, 0xe6, 0xa1, 0x5c, 0x98, 0xab, 0xd1, 0x1e, 0xc8, 0x8d, 0xc4, 0x14, 0xdc,
    0x83, 0x20, 0x8e, 0x64, 0xd8, 0xda, 0xf8, 0x81, 0xf7, 0xe3, 0x0a, 0x84, 0x21, 0x47, 0x97, 0xe5,
    0x92, 0x2d, 0x1d, 0x8d, 0xf1, 0x03, 0x54, 0x12, 0xd2, 0xa9, 0xd2, 0xae, 0x93, 0x02, 0xb2, 0x94,
    0x1b, 0x16, 0xdb, 0x51, 0x08, 0x04, 0x47, 0xa4, 0x52, 0xed, 0x7f, 0x7b, 0xf6, 0xd4, 0xad, 0xcc,
    0xb1, 0x59, 0xf9, 0x9c, 0x02, 0xa0, 0x62, 0x5c, 0x71, 0x2e, 0x7c, 0xda, 0x70, 0x78, 0xd5, 0xd6,
    0xc7, 0x8c, 0x4f, 0x82, 0x58, 0x28, 0xbd, 0xe5, 0xaa, 0x77, 0x00, 0xde, 0x1d, 0x23, 0x8e, 0x2b,
    0xb5, 0x7a, 0xb8, 0x50, 0x97, 0x0a, 0x25, 0x39, 0x65, 0x3f, 0x6b, 0x8b, 0x15, 0xaa, 0x85, 0xa0,
};

static const uint8_t sMessageEncodingTest0479_ExpectedEncoding[] =
{
    0x00, 0x27, 0x5b, 0x9b, 0x02, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x9f, 0x75, 0x7c, 0x8b, 0xb9, 0x5f, 0x0b, 0xa0, 0x75, 0xa6,
    0xcd, 0xb1, 0x82, 0x95, 0x8f, 0x55, 0x31, 0x51, 0xc4, 0x85, 0xe6, 0xa1, 0x5c, 0x98, 0xab, 0xd1,
    0x1e, 0xc8, 0x8d, 0xc4, 0x14, 0xdc, 0x83, 0x20, 0x8e, 0x64, 0xd8, 0xda, 0xf8, 0x81, 0xf7, 0xe3,
    0x0a, 0x84, 0x21, 0x47, 0x97, 0xe5, 0x92, 0x2d, 0x1d, 0x8d, 0xf1, 0x03, 0x54, 0x12, 0xd2, 0xa9,
    0xd2, 0xae, 0x93, 0x02, 0xb2, 0x94, 0x1b, 0x16, 0xdb, 0x51, 0x08, 0x04, 0x47, 0xa4, 0x52, 0xed,
    0x7f, 0x7b, 0xf6, 0xd4, 0xad, 0xcc, 0xb1, 0x59, 0xf9, 0x9c, 0x02, 0xa0, 0x62, 0x5c, 0x71, 0x2e,
    0x7c, 0xda, 0x70, 0x78, 0xd5, 0xd6, 0xc7, 0x8c, 0x4f, 0x82, 0x58, 0x28, 0xbd, 0xe5, 0xaa, 0x77,
    0x00, 0xde, 0x1d, 0x23, 0x8e, 0x2b, 0xb5, 0x7a, 0xb8, 0x50, 0x97, 0x0a, 0x25, 0x39, 0x65, 0x3f,
    0x6b, 0x8b, 0x15, 0xaa, 0x85, 0xa0,
};

static const MessageEncodingTestVector sMessageEncodingTest0479 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x21029B5B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0479_Payload,
    sizeof(sMessageEncodingTest0479_Payload),
    sMessageEncodingTest0479_ExpectedEncoding,
    sizeof(sMessageEncodingTest0479_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0480_EncryptionKey =
{
    {
        0x0b, 0x97, 0xed, 0x98, 0x16, 0xdc, 0xa3, 0x1e, 0x18, 0x23, 0xff, 0xd0, 0x40, 0xcd, 0x69, 0x14,
    },
    {
        0xcd, 0x08, 0x5d, 0x22, 0xe5, 0xd4, 0xf2, 0xea, 0xea, 0x50, 0xab, 0x31, 0xb5, 0x42, 0xb6, 0xe0,
        0x32, 0x19, 0xdb, 0x55,
    }
};
static const uint8_t sMessageEncodingTest0480_Payload[] =
{
    0x63, 0x72, 0x26, 0x83, 0x37, 0x4e, 0xd8, 0x5e, 0xa3, 0xc8, 0x8f, 0xf5, 0x12, 0x87, 0xfc, 0x92,
    0x90, 0x2b, 0x89, 0x27, 0x08, 0x36, 0xb6, 0x41, 0x57, 0xec, 0x40, 0x84, 0x80, 0x71, 0x6c, 0x0b,
    0x71, 0xad, 0xbe, 0x79, 0xe1, 0xdd, 0x8d, 0x63, 0xd3, 0x8e, 0x01, 0x83, 0x3e, 0xab, 0xf5, 0xd1,
    0xdc, 0x0d, 0xfa, 0xca, 0x88, 0xe2, 0x32, 0xb0, 0x14, 0xd5, 0x52, 0xe0, 0xf1, 0x87, 0x65, 0x70,
    0xd3, 0x91, 0x8b, 0x70, 0xd8, 0x5a, 0x81, 0xdc, 0xfd, 0xba, 0x73, 0x6e, 0x33, 0x4a, 0x70, 0x9f,
    0x3e, 0xaa, 0x18, 0x28, 0x78, 0x45, 0xc8, 0xbc, 0xd5, 0xda, 0x23, 0xdd, 0x15, 0xff, 0x63, 0x00,
    0x91, 0x7b, 0x28, 0x1a, 0x3b, 0x99, 0x14, 0xf8, 0xfd, 0x8c, 0xb0, 0xc8, 0x65, 0xf1, 0xc4, 0x5f,
    0xf9, 0xf3, 0x17, 0xd1, 0xfe, 0x83, 0x68, 0x43, 0xb0, 0xa8, 0x6a, 0x64, 0x47, 0x18, 0x1e, 0xda,
};

static const uint8_t sMessageEncodingTest0480_ExpectedEncoding[] =
{
    0x10, 0x27, 0x1a, 0x4f, 0x8f, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xed, 0x23, 0x22, 0xf1, 0x2f, 0x39, 0xe3, 0x68, 0xe9, 0x2e,
    0x23, 0x16, 0x5d, 0x3b, 0x7d, 0xa6, 0x29, 0x08, 0x2a, 0xb6, 0x09, 0x0c, 0x76, 0xc9, 0x1a, 0xcb,
    0xdb, 0x9b, 0x90, 0x92, 0x70, 0xcd, 0x70, 0x81, 0xdb, 0x9f, 0xad, 0x5d, 0xd6, 0xa6, 0xc5, 0xd1,
    0xbd, 0x2d, 0x1d, 0xbd, 0xed, 0xbb, 0x5b, 0x8a, 0x61, 0x99, 0xce, 0xbc, 0x5d, 0x23, 0x49, 0xc5,
    0x28, 0xb5, 0x48, 0x49, 0xd3, 0xa3, 0xc4, 0xa1, 0xd2, 0x48, 0x4c, 0xc8, 0x1c, 0xa0, 0x75, 0x47,
    0x9a, 0x29, 0xb5, 0xc4, 0xc2, 0xf3, 0x7b, 0xe5, 0x2b, 0xf0, 0x7c, 0x21, 0xd7, 0x57, 0xd8, 0x85,
    0xba, 0xdf, 0x92, 0xa1, 0x5a, 0x03, 0xb7, 0x24, 0xc6, 0xc6, 0x19, 0x71, 0x05, 0x55, 0x76, 0x85,
    0xcb, 0xa1, 0x9b, 0x8f, 0x5a, 0x0a, 0x61, 0x4d, 0x03, 0xf1, 0x4f, 0xb5, 0xb4, 0xe1, 0xf7, 0x46,
    0x32, 0x6e, 0x70, 0xd7, 0x5e, 0x8b, 0xa6, 0xf1, 0xac, 0xd4, 0x4c, 0x24, 0x33, 0x47, 0x1a, 0x7d,
    0xb6, 0x36, 0x82, 0x45, 0x55, 0x28, 0x84, 0xc7, 0xcd, 0x8d, 0x52, 0x09,
};

static const MessageEncodingTestVector sMessageEncodingTest0480 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x518F4F1A,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x23ED,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0480_EncryptionKey,
    sMessageEncodingTest0480_Payload,
    sizeof(sMessageEncodingTest0480_Payload),
    sMessageEncodingTest0480_ExpectedEncoding,
    sizeof(sMessageEncodingTest0480_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0481_EncryptionKey =
{
    {
        0x99, 0x73, 0xa5, 0xe2, 0x64, 0x06, 0xb8, 0x62, 0xe8, 0x10, 0x33, 0x2d, 0xd2, 0xa1, 0x42, 0xe3,
    }
};
static const uint8_t sMessageEncodingTest0481_Payload[] =
{
    0xdf, 0x2e, 0xb9, 0x69, 0xd1, 0xec, 0x9b, 0x57, 0x49, 0x0a, 0x3b, 0x8e, 0x49, 0xc1, 0x61, 0x07,
    0x24, 0x7a, 0x1a, 0xb0, 0x4e, 0x1a, 0x7a, 0xe1, 0x36, 0x99, 0xac, 0x7e, 0xd6, 0x4f, 0x87, 0x92,
    0x77, 0x40, 0x03, 0xc2, 0xdd, 0xe0, 0xe7, 0x3a, 0xfd, 0x0a, 0xdf, 0x41, 0x3c, 0x2d, 0x73, 0x93,
    0x3a, 0xf5, 0x76, 0xa7, 0xf7, 0xbc, 0x38, 0x27, 0xf8, 0xd4, 0x99, 0x79, 0x93, 0x87, 0xdf, 0xfc,
    0xcb, 0x4a, 0x28, 0xd8, 0x91, 0x91, 0x8e, 0x0f, 0x56, 0x91, 0x74, 0x35, 0x0a, 0x4d, 0x6c, 0xbd,
    0x98, 0x2a, 0xf0, 0xfa, 0x3f, 0x1f, 0x12, 0x05, 0x97, 0x7e, 0x33, 0x23, 0x09, 0x30, 0x1f, 0x00,
    0xe7, 0x42, 0x4a, 0x50, 0xb3, 0x96, 0x72, 0x2d, 0x51, 0x2d, 0x8c, 0x8e, 0x1d, 0xf2, 0x52, 0x0e,
    0xa2, 0xa9, 0x0c, 0xee, 0x11, 0xec, 0xd2, 0x8e, 0xdf, 0xa4, 0x74, 0xdb, 0x1c, 0x53, 0x39, 0x41,
};

static const uint8_t sMessageEncodingTest0481_ExpectedEncoding[] =
{
    0x20, 0x27, 0xa5, 0x1a, 0x8d, 0x82, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x10, 0x2a, 0x77, 0xef, 0x0a, 0xb1, 0x11, 0xd0, 0x57, 0xf4,
    0x0b, 0xd2, 0x4a, 0xc6, 0x0f, 0x67, 0x17, 0x38, 0xe2, 0xa3, 0x5e, 0xae, 0x30, 0x5e, 0xf4, 0x1a,
    0x3a, 0xec, 0x64, 0x45, 0x97, 0x9e, 0x05, 0xc7, 0xba, 0x3e, 0x6b, 0x89, 0xe5, 0x9c, 0xd6, 0x67,
    0x62, 0x67, 0x5b, 0xb2, 0x8d, 0xda, 0xb0, 0x03, 0x70, 0x18, 0xef, 0x5c, 0xf4, 0x5e, 0xed, 0x48,
    0x48, 0x69, 0x5a, 0x3d, 0x0b, 0xf5, 0xe9, 0x1f, 0xee, 0x94, 0x43, 0x5c, 0xeb, 0x06, 0x74, 0xe4,
    0xba, 0x5c, 0x3b, 0x08, 0xd1, 0xca, 0x5d, 0x47, 0xd6, 0x08, 0xd9, 0x2e, 0xdb, 0x54, 0x05, 0xcc,
    0xe5, 0x07, 0x20, 0xe4, 0xa1, 0x7e, 0x51, 0x93, 0x49, 0xd2, 0x28, 0xf6, 0x33, 0x4e, 0xf7, 0xb3,
    0x3d, 0x47, 0x1b, 0x0e, 0xdf, 0xeb, 0xc3, 0x2f, 0xa8, 0x41, 0x24, 0xaf, 0x91, 0xee, 0xdc, 0xb0,
    0xd5, 0xe9, 0x1b, 0xda, 0xd8, 0xd9, 0xb5, 0x7d, 0x40, 0xe4, 0x76, 0x1e, 0x05, 0xc0, 0xc3, 0x22,
};

static const MessageEncodingTestVector sMessageEncodingTest0481 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x828D1AA5,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2A10,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0481_EncryptionKey,
    sMessageEncodingTest0481_Payload,
    sizeof(sMessageEncodingTest0481_Payload),
    sMessageEncodingTest0481_ExpectedEncoding,
    sizeof(sMessageEncodingTest0481_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0482_EncryptionKey =
{
    {
        0x3f, 0x75, 0xbc, 0xe1, 0x51, 0x96, 0x3a, 0x91, 0xcc, 0xea, 0x2b, 0xe8, 0x76, 0xcc, 0x7d, 0x1f,
    }
};
static const uint8_t sMessageEncodingTest0482_Payload[] =
{
    0xda, 0x2b, 0xa4, 0xf6, 0x4b, 0xe7, 0xf3, 0xee, 0xd1, 0x6a, 0xe0, 0xbd, 0x96, 0xe8, 0x79, 0x37,
    0xbd, 0x8b, 0x44, 0x81, 0xfb, 0xa6, 0x47, 0x1b, 0x45, 0x4b, 0xc4, 0xbd, 0x8b, 0xb9, 0xcd, 0x61,
    0x62, 0xbc, 0x6a, 0x07, 0xe9, 0x80, 0x38, 0x87, 0x8e, 0x29, 0x18, 0x22, 0xf1, 0xdc, 0xcb, 0xc4,
    0x72, 0x9a, 0x54, 0xdb, 0xcf, 0x18, 0xd1, 0x32, 0xd4, 0xca, 0x8c, 0x4b, 0x69, 0x20, 0xfa, 0x58,
    0x50, 0x19, 0x84, 0x58, 0x31, 0xfb, 0x63, 0x9e, 0xb8, 0xfc, 0xd7, 0xf5, 0xab, 0x02, 0x89, 0xc4,
    0x81, 0x14, 0xd1, 0x1e, 0x57, 0x04, 0xf0, 0xda, 0x1b, 0xec, 0x74, 0xaf, 0x6e, 0x8d, 0x5d, 0x8b,
    0xf2, 0x26, 0xd2, 0xeb, 0xa1, 0xe3, 0xd9, 0x3d, 0xb3, 0x40, 0x40, 0x0a, 0xe4, 0x23, 0xc9, 0x93,
    0xf6, 0x55, 0x15, 0xa3, 0xdc, 0x83, 0x53, 0x32, 0xe9, 0x50, 0x20, 0x61, 0x94, 0x10, 0xaf, 0x00,
};

static const uint8_t sMessageEncodingTest0482_ExpectedEncoding[] =
{
    0x30, 0x27, 0x7d, 0x16, 0xbc, 0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf8, 0x2b, 0x83, 0x25, 0x5f, 0x32, 0xa9, 0x7d, 0x7a, 0xf0,
    0x85, 0x7b, 0x8a, 0x3e, 0xc2, 0xb2, 0xe0, 0x8b, 0x78, 0x9b, 0xd0, 0xb6, 0x57, 0xa2, 0x69, 0xdd,
    0x70, 0x0d, 0x9d, 0x0f, 0x76, 0x85, 0xc5, 0x85, 0xb1, 0x42, 0xc7, 0x68, 0xd8, 0xd6, 0x0b, 0x7c,
    0x6a, 0x66, 0x18, 0x83, 0xa1, 0x02, 0xb9, 0x78, 0xf6, 0xc6, 0x1f, 0x97, 0x29, 0xd1, 0xe4, 0x5d,
    0x53, 0x1a, 0x68, 0x47, 0x78, 0x41, 0xe1, 0xff, 0x2a, 0x24, 0xc1, 0xfd, 0x84, 0x1a, 0x53, 0xdd,
    0xf9, 0x97, 0x3b, 0x06, 0x98, 0xd2, 0x09, 0x26, 0xd4, 0xaf, 0x29, 0x30, 0xad, 0x0b, 0x81, 0xf8,
    0x24, 0xd3, 0x82, 0x47, 0xe0, 0x5f, 0xb8, 0xe6, 0xd3, 0x58, 0xc7, 0x47, 0xcf, 0x16, 0x89, 0x9c,
    0x35, 0xce, 0x23, 0x86, 0x00, 0xa1, 0x74, 0x5b, 0x4b, 0x65, 0x16, 0xa6, 0x56, 0x31, 0x85, 0xca,
    0x2e, 0x02, 0xae, 0xbd, 0xa0, 0xa5, 0x9b, 0x2c, 0xa7, 0xa0, 0x73, 0xb8, 0xda, 0x21, 0x8a, 0x47,
    0x30, 0x21, 0xea, 0x81, 0x28, 0xa2, 0x84, 0x7d,
};

static const MessageEncodingTestVector sMessageEncodingTest0482 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x8CBC167D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2BF8,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0482_EncryptionKey,
    sMessageEncodingTest0482_Payload,
    sizeof(sMessageEncodingTest0482_Payload),
    sMessageEncodingTest0482_ExpectedEncoding,
    sizeof(sMessageEncodingTest0482_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0483_Payload[] =
{
    0x4a, 0xc5, 0x76, 0xc2, 0x56, 0x9a, 0xc4, 0x5a, 0xd6, 0x96, 0x70, 0x56, 0xfd, 0xdb, 0x3b, 0xe4,
    0x86, 0x54, 0x7f, 0x57, 0x93, 0x09, 0x0e, 0x3b, 0x14, 0xc1, 0xdf, 0x25, 0xa6, 0xc0, 0x7f, 0xe0,
    0xa1, 0x6d, 0xc8, 0xd2, 0x06, 0x5e, 0xd7, 0x38, 0xd6, 0xb1, 0x19, 0x35, 0x61, 0xbf, 0x5f, 0x99,
    0x22, 0x50, 0x52, 0x88, 0x07, 0xb4, 0xc4, 0x0d, 0x55, 0x09, 0xa2, 0x4c, 0x28, 0xb1, 0x62, 0x06,
    0x12, 0x61, 0x71, 0x14, 0x0d, 0xf5, 0x91, 0x4f, 0x56, 0xf9, 0x9e, 0x13, 0x78, 0x3f, 0x9a, 0x87,
    0xdb, 0xaf, 0x29, 0x65, 0x8d, 0xa7, 0x69, 0xcd, 0xf7, 0xc6, 0x9a, 0x65, 0xca, 0xbb, 0xae, 0x12,
    0xff, 0x43, 0x20, 0xee, 0x26, 0x55, 0x26, 0x70, 0x30, 0xf4, 0x81, 0xb0, 0x59, 0xce, 0x89, 0x4a,
    0x3c, 0x66, 0xf0, 0x65, 0xc8, 0x6b, 0x15, 0xa7, 0x5c, 0x36, 0x27, 0x2c, 0x94, 0xb7, 0x4c, 0x70,
};

static const uint8_t sMessageEncodingTest0483_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x36, 0x1a, 0x34, 0x61, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4a, 0xc5, 0x76, 0xc2, 0x56, 0x9a, 0xc4, 0x5a, 0xd6, 0x96,
    0x70, 0x56, 0xfd, 0xdb, 0x3b, 0xe4, 0x86, 0x54, 0x7f, 0x57, 0x93, 0x09, 0x0e, 0x3b, 0x14, 0xc1,
    0xdf, 0x25, 0xa6, 0xc0, 0x7f, 0xe0, 0xa1, 0x6d, 0xc8, 0xd2, 0x06, 0x5e, 0xd7, 0x38, 0xd6, 0xb1,
    0x19, 0x35, 0x61, 0xbf, 0x5f, 0x99, 0x22, 0x50, 0x52, 0x88, 0x07, 0xb4, 0xc4, 0x0d, 0x55, 0x09,
    0xa2, 0x4c, 0x28, 0xb1, 0x62, 0x06, 0x12, 0x61, 0x71, 0x14, 0x0d, 0xf5, 0x91, 0x4f, 0x56, 0xf9,
    0x9e, 0x13, 0x78, 0x3f, 0x9a, 0x87, 0xdb, 0xaf, 0x29, 0x65, 0x8d, 0xa7, 0x69, 0xcd, 0xf7, 0xc6,
    0x9a, 0x65, 0xca, 0xbb, 0xae, 0x12, 0xff, 0x43, 0x20, 0xee, 0x26, 0x55, 0x26, 0x70, 0x30, 0xf4,
    0x81, 0xb0, 0x59, 0xce, 0x89, 0x4a, 0x3c, 0x66, 0xf0, 0x65, 0xc8, 0x6b, 0x15, 0xa7, 0x5c, 0x36,
    0x27, 0x2c, 0x94, 0xb7, 0x4c, 0x70,
};

static const MessageEncodingTestVector sMessageEncodingTest0483 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x61341A36,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0483_Payload,
    sizeof(sMessageEncodingTest0483_Payload),
    sMessageEncodingTest0483_ExpectedEncoding,
    sizeof(sMessageEncodingTest0483_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0484_EncryptionKey =
{
    {
        0x8f, 0x30, 0x15, 0x55, 0xac, 0x3f, 0x9b, 0x05, 0x1a, 0xaf, 0xea, 0xac, 0x8a, 0x7e, 0xca, 0xce,
    },
    {
        0xdc, 0x97, 0xd8, 0x2a, 0xee, 0x87, 0x86, 0xf4, 0x4f, 0x35, 0x72, 0xb2, 0xd5, 0x68, 0xe9, 0x88,
        0x96, 0x42, 0x65, 0x36,
    }
};
static const uint8_t sMessageEncodingTest0484_Payload[] =
{
    0xc7, 0xd0, 0xa5, 0x02, 0x7c, 0x61, 0x73, 0x8a, 0xae, 0xc1, 0x26, 0xc3, 0x8f, 0xb7, 0xf8, 0x27,
    0x3d, 0xbd, 0x0e, 0x14, 0x9f, 0xf3, 0xb4, 0x00, 0x36, 0x33, 0x70, 0xa2, 0x54, 0x23, 0x2e, 0x5e,
    0x9c, 0xa6, 0x9d, 0x7a, 0xe8, 0x60, 0x1e, 0x3d, 0x43, 0xd4, 0x2d, 0x04, 0x7e, 0x31, 0x80, 0xac,
    0xff, 0xb6, 0x62, 0xc3, 0x14, 0x4d, 0x21, 0xf1, 0x23, 0x9c, 0xd8, 0x3b, 0xe1, 0x66, 0xea, 0x3a,
    0xd4, 0x20, 0xf8, 0x37, 0x22, 0xd6, 0xd4, 0x12, 0xf3, 0xd7, 0x47, 0xdf, 0x38, 0xae, 0x22, 0x17,
    0x04, 0xfb, 0x83, 0x60, 0x20, 0x5f, 0x95, 0xaf, 0x9b, 0x28, 0x24, 0xdc, 0xc5, 0x53, 0x2c, 0x95,
    0xb0, 0x48, 0xb5, 0x67, 0x6c, 0xa4, 0x35, 0xf5, 0x2f, 0xb8, 0x6e, 0xbc, 0x35, 0x9d, 0xa4, 0x0d,
    0x28, 0xfc, 0xa3, 0xf8, 0xd4, 0xe9, 0xb9, 0xb7, 0xf6, 0xb9, 0x98, 0xdb, 0xb3, 0x79, 0xc8, 0x79,
};

static const uint8_t sMessageEncodingTest0484_ExpectedEncoding[] =
{
    0x10, 0x2b, 0xd6, 0x58, 0xf1, 0xe1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x10, 0x2f, 0x0f, 0x74, 0x0b, 0x66, 0x13, 0x15, 0xba, 0xd9,
    0x93, 0x2b, 0xc0, 0xa1, 0x79, 0xb5, 0x81, 0x5b, 0x04, 0x2d, 0x87, 0xa3, 0xc6, 0x26, 0xc2, 0xa1,
    0x48, 0xa4, 0x3e, 0x26, 0x03, 0x25, 0x33, 0x32, 0x3a, 0x94, 0xdc, 0x9e, 0x78, 0xea, 0x25, 0x8a,
    0x9f, 0x83, 0x28, 0xa5, 0xd1, 0x6a, 0x29, 0xe8, 0x0c, 0x9a, 0xa1, 0x34, 0x12, 0x66, 0x70, 0x3e,
    0x42, 0xb4, 0xc3, 0x86, 0x9a, 0xb0, 0x37, 0xe3, 0xe2, 0x17, 0x6f, 0xb0, 0xd4, 0x89, 0x49, 0x81,
    0xd6, 0x0e, 0x7e, 0x92, 0x14, 0x8c, 0x76, 0x7a, 0xb0, 0x78, 0x47, 0x59, 0xac, 0xd2, 0x58, 0x98,
    0x7b, 0x62, 0x7c, 0x77, 0x6a, 0xb1, 0x98, 0xde, 0x9e, 0x25, 0x40, 0xf4, 0x6d, 0xb8, 0x30, 0xc2,
    0x03, 0x5a, 0x38, 0x94, 0xb5, 0x2f, 0xa4, 0xf4, 0xd9, 0xd7, 0xf6, 0xbb, 0xf1, 0xbe, 0xea, 0x43,
    0xf3, 0xaf, 0x4e, 0x94, 0x05, 0x03, 0x75, 0x04, 0xeb, 0xe7, 0x00, 0x13, 0x26, 0x36, 0x3c, 0xd9,
    0xe1, 0x9e, 0x97, 0x50, 0xae, 0xab, 0xcb, 0xa4, 0xce, 0xdd, 0x12, 0x15,
};

static const MessageEncodingTestVector sMessageEncodingTest0484 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE1F158D6,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2F10,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0484_EncryptionKey,
    sMessageEncodingTest0484_Payload,
    sizeof(sMessageEncodingTest0484_Payload),
    sMessageEncodingTest0484_ExpectedEncoding,
    sizeof(sMessageEncodingTest0484_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0485_EncryptionKey =
{
    {
        0xdd, 0x19, 0x57, 0xe4, 0xd4, 0x9c, 0x7b, 0x2d, 0xe9, 0x72, 0x42, 0x45, 0xa5, 0xf5, 0x5a, 0x19,
    }
};
static const uint8_t sMessageEncodingTest0485_Payload[] =
{
    0x40, 0xf3, 0x1a, 0x4e, 0x9e, 0xd8, 0xcc, 0xbb, 0x07, 0xb5, 0x0c, 0x80, 0x58, 0xe2, 0x71, 0x44,
    0xb7, 0xa8, 0xb7, 0x62, 0x9b, 0xf4, 0xd9, 0x15, 0xa3, 0xfd, 0x79, 0x75, 0xad, 0xdd, 0x9b, 0x79,
    0xf7, 0xf6, 0xc5, 0xf0, 0xa8, 0x9a, 0xb2, 0x15, 0x04, 0xbc, 0x6b, 0xe6, 0x66, 0x8b, 0x06, 0x98,
    0x90, 0x21, 0x24, 0x06, 0x2f, 0xe2, 0xc6, 0xb7, 0xc4, 0xa9, 0x9a, 0x15, 0xb4, 0x50, 0xeb, 0xc4,
    0xc9, 0xb8, 0xa5, 0x1b, 0x9d, 0x9f, 0x5d, 0x1f, 0x35, 0x74, 0x61, 0xde, 0x7a, 0x7d, 0xb2, 0xb3,
    0x22, 0xd1, 0xeb, 0x54, 0x25, 0xd9, 0x11, 0x36, 0xa8, 0x06, 0x17, 0xa5, 0x6f, 0x95, 0x95, 0xe9,
    0x2e, 0xa0, 0xc0, 0xd3, 0x86, 0x62, 0xc4, 0x63, 0xf7, 0x65, 0x6b, 0xcb, 0x36, 0xd9, 0xcb, 0xb6,
    0xe5, 0x24, 0x33, 0xff, 0xaf, 0xc9, 0xd8, 0x00, 0x01, 0x1e, 0x9d, 0xff, 0x84, 0x21, 0x1e, 0xa7,
};

static const uint8_t sMessageEncodingTest0485_ExpectedEncoding[] =
{
    0x20, 0x2b, 0x37, 0x39, 0xfc, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x95, 0x28, 0x2d, 0x05, 0xe3, 0x5c, 0x32, 0xd8, 0xf7, 0x37,
    0x1f, 0xd8, 0x07, 0x09, 0x13, 0x7d, 0xcd, 0xa7, 0x10, 0xb2, 0x9d, 0xfc, 0xdf, 0x3e, 0x75, 0x0e,
    0x99, 0x1b, 0xdb, 0x1a, 0x0c, 0x12, 0xc0, 0x0e, 0xe6, 0xf7, 0xcc, 0xfb, 0x5b, 0x5e, 0xc0, 0x9e,
    0x30, 0xcb, 0x3a, 0xfd, 0x78, 0xd3, 0xa7, 0x6c, 0x04, 0x66, 0x48, 0xd3, 0x52, 0xfa, 0x60, 0x5a,
    0xf9, 0x6c, 0x2b, 0x6f, 0x90, 0xd8, 0x6a, 0xfa, 0x16, 0xef, 0x43, 0x98, 0x68, 0x64, 0x10, 0x67,
    0x34, 0x67, 0xe5, 0xaf, 0x57, 0x4c, 0x10, 0xdf, 0x28, 0x80, 0x75, 0xa3, 0x23, 0x9d, 0xc7, 0xc4,
    0x63, 0x0e, 0xba, 0xb1, 0x46, 0xa3, 0x7a, 0x21, 0x15, 0x13, 0x04, 0xda, 0x3e, 0xc9, 0x39, 0x93,
    0x8e, 0xf7, 0xb0, 0x37, 0x6b, 0x27, 0xf2, 0xc2, 0x08, 0x32, 0x76, 0x41, 0x43, 0x5f, 0x36, 0x93,
    0x16, 0x32, 0x02, 0x0d, 0xc9, 0xdf, 0x9f, 0x71, 0x8a, 0x3c, 0xa9, 0x9f, 0xee, 0x43, 0x69, 0x46,
};

static const MessageEncodingTestVector sMessageEncodingTest0485 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x70FC3937,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2895,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0485_EncryptionKey,
    sMessageEncodingTest0485_Payload,
    sizeof(sMessageEncodingTest0485_Payload),
    sMessageEncodingTest0485_ExpectedEncoding,
    sizeof(sMessageEncodingTest0485_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0486_EncryptionKey =
{
    {
        0x3e, 0x81, 0x9d, 0x29, 0xdf, 0x0d, 0x5c, 0x90, 0xcb, 0x41, 0x0f, 0xae, 0xbb, 0xe6, 0x63, 0x92,
    }
};
static const uint8_t sMessageEncodingTest0486_Payload[] =
{
    0xbc, 0x2d, 0x8e, 0x9a, 0x86, 0xdc, 0x34, 0xcf, 0x82, 0x07, 0x4a, 0x3f, 0x39, 0x7d, 0x31, 0xf2,
    0xd9, 0x4a, 0xdb, 0x88, 0x53, 0x8c, 0x68, 0x52, 0x97, 0x46, 0x7f, 0x16, 0x3e, 0x31, 0xcc, 0x37,
    0x75, 0xa1, 0xd6, 0xc2, 0x07, 0x78, 0x3c, 0xb0, 0xf6, 0xc3, 0x8f, 0x5f, 0xcb, 0x31, 0x4b, 0x33,
    0x7d, 0x06, 0x55, 0x72, 0x8b, 0x68, 0x97, 0x58, 0xb0, 0xc7, 0x4e, 0x4b, 0xe8, 0x86, 0x57, 0xed,
    0x33, 0xa8, 0x21, 0x78, 0xfc, 0xf2, 0x34, 0x1a, 0x77, 0xdd, 0x73, 0x06, 0x31, 0x29, 0xe7, 0x9b,
    0xa4, 0x1c, 0xfc, 0x0a, 0xa3, 0x00, 0xc1, 0x2f, 0x75, 0xbc, 0xd2, 0xfb, 0x39, 0x28, 0xe1, 0x21,
    0x63, 0x3f, 0xe5, 0x18, 0xfc, 0xc3, 0xfe, 0x92, 0x29, 0xe2, 0xa1, 0x82, 0xa5, 0x98, 0xa3, 0x4e,
    0xf0, 0xc5, 0x8d, 0x85, 0x44, 0xd0, 0x31, 0x0f, 0xbb, 0x38, 0xb6, 0xac, 0x11, 0x10, 0x41, 0x5e,
};

static const uint8_t sMessageEncodingTest0486_ExpectedEncoding[] =
{
    0x30, 0x2b, 0xf0, 0xa6, 0x26, 0xa4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x15, 0x28, 0x80, 0xcf, 0xf9, 0xf6, 0x1c, 0x88, 0x77, 0x29,
    0xad, 0x28, 0x91, 0x92, 0xc8, 0x6e, 0x6a, 0x64, 0xd1, 0xdc, 0x79, 0xac, 0xe6, 0x1e, 0x00, 0xd1,
    0xfe, 0xe5, 0x86, 0x9e, 0x6f, 0x9a, 0x32, 0x14, 0x11, 0x33, 0xba, 0x60, 0x38, 0x4d, 0x1e, 0xb3,
    0x95, 0xd4, 0xa9, 0xcc, 0xc2, 0x3c, 0xd3, 0x60, 0x2b, 0x99, 0xe5, 0x91, 0x0f, 0x9a, 0x92, 0xb2,
    0x02, 0x82, 0x99, 0x52, 0x4b, 0xe1, 0x8a, 0x8a, 0x19, 0xda, 0x6e, 0x9b, 0xff, 0x50, 0x2f, 0x60,
    0x10, 0x60, 0xea, 0x07, 0x7e, 0x02, 0x93, 0x21, 0x98, 0xc2, 0x2a, 0x6e, 0x1f, 0xf1, 0x59, 0xff,
    0xde, 0x0d, 0x2b, 0xf3, 0xe9, 0x39, 0x5b, 0xcc, 0xff, 0x8d, 0x37, 0xfa, 0x97, 0x14, 0x76, 0x3f,
    0xb3, 0x61, 0xc9, 0x33, 0x75, 0x5c, 0x16, 0xd7, 0xd6, 0x9d, 0x86, 0x90, 0xa3, 0x9c, 0x7a, 0xc9,
    0x81, 0x07, 0xb9, 0x2a, 0x41, 0x27, 0x91, 0x44, 0x9f, 0x49, 0x92, 0x66, 0x5f, 0x49, 0x0d, 0x7d,
    0x0d, 0x47, 0xc4, 0x8d, 0x7c, 0xa0, 0x52, 0xbb,
};

static const MessageEncodingTestVector sMessageEncodingTest0486 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA426A6F0,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2815,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0486_EncryptionKey,
    sMessageEncodingTest0486_Payload,
    sizeof(sMessageEncodingTest0486_Payload),
    sMessageEncodingTest0486_ExpectedEncoding,
    sizeof(sMessageEncodingTest0486_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0487_Payload[] =
{
    0x5f, 0x8b, 0x7d, 0x53, 0x95, 0x77, 0x63, 0xd3, 0xc6, 0x51, 0xe4, 0xa9, 0x35, 0xf3, 0x09, 0xc3,
    0xfd, 0x4b, 0x35, 0x58, 0x57, 0x8c, 0x7d, 0x0b, 0x3b, 0x5a, 0x53, 0x4e, 0x63, 0x08, 0x7d, 0xcb,
    0xd9, 0x4c, 0x55, 0xc1, 0xa2, 0xb8, 0xa9, 0xf4, 0x0c, 0x4e, 0x57, 0x08, 0x4d, 0x27, 0x0a, 0xa2,
    0x3b, 0x10, 0xc7, 0x0f, 0xb2, 0xa9, 0x59, 0x71, 0xaf, 0x7c, 0x8f, 0xef, 0x7e, 0x97, 0xf0, 0xa8,
    0x97, 0x4f, 0x91, 0x80, 0x17, 0x32, 0x7f, 0xf4, 0xa6, 0xc1, 0x3b, 0x18, 0xa9, 0xf7, 0x15, 0x5e,
    0xc3, 0xa3, 0xea, 0xff, 0xf2, 0xbb, 0x2e, 0x54, 0xa0, 0x80, 0xd5, 0x58, 0x31, 0x57, 0x7c, 0x5e,
    0xac, 0x0a, 0xd2, 0xbb, 0x93, 0x84, 0xaf, 0xda, 0x30, 0x26, 0xaf, 0x0c, 0xbe, 0x41, 0xc3, 0x79,
    0x25, 0x7c, 0x55, 0x5b, 0x6b, 0x57, 0xb9, 0x57, 0x94, 0xd4, 0x6f, 0x4f, 0xee, 0xa6, 0x87, 0x25,
};

static const uint8_t sMessageEncodingTest0487_ExpectedEncoding[] =
{
    0x00, 0x23, 0xf3, 0x42, 0x46, 0x15, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5f, 0x8b, 0x7d, 0x53, 0x95, 0x77, 0x63, 0xd3, 0xc6, 0x51,
    0xe4, 0xa9, 0x35, 0xf3, 0x09, 0xc3, 0xfd, 0x4b, 0x35, 0x58, 0x57, 0x8c, 0x7d, 0x0b, 0x3b, 0x5a,
    0x53, 0x4e, 0x63, 0x08, 0x7d, 0xcb, 0xd9, 0x4c, 0x55, 0xc1, 0xa2, 0xb8, 0xa9, 0xf4, 0x0c, 0x4e,
    0x57, 0x08, 0x4d, 0x27, 0x0a, 0xa2, 0x3b, 0x10, 0xc7, 0x0f, 0xb2, 0xa9, 0x59, 0x71, 0xaf, 0x7c,
    0x8f, 0xef, 0x7e, 0x97, 0xf0, 0xa8, 0x97, 0x4f, 0x91, 0x80, 0x17, 0x32, 0x7f, 0xf4, 0xa6, 0xc1,
    0x3b, 0x18, 0xa9, 0xf7, 0x15, 0x5e, 0xc3, 0xa3, 0xea, 0xff, 0xf2, 0xbb, 0x2e, 0x54, 0xa0, 0x80,
    0xd5, 0x58, 0x31, 0x57, 0x7c, 0x5e, 0xac, 0x0a, 0xd2, 0xbb, 0x93, 0x84, 0xaf, 0xda, 0x30, 0x26,
    0xaf, 0x0c, 0xbe, 0x41, 0xc3, 0x79, 0x25, 0x7c, 0x55, 0x5b, 0x6b, 0x57, 0xb9, 0x57, 0x94, 0xd4,
    0x6f, 0x4f, 0xee, 0xa6, 0x87, 0x25,
};

static const MessageEncodingTestVector sMessageEncodingTest0487 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x154642F3,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0487_Payload,
    sizeof(sMessageEncodingTest0487_Payload),
    sMessageEncodingTest0487_ExpectedEncoding,
    sizeof(sMessageEncodingTest0487_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0488_EncryptionKey =
{
    {
        0xaf, 0xf5, 0xe3, 0x2b, 0xe0, 0xcb, 0x9b, 0x07, 0x3f, 0x79, 0x11, 0x42, 0xb0, 0x64, 0xb4, 0x87,
    },
    {
        0x93, 0xcf, 0x0f, 0x0c, 0x5c, 0x37, 0x5a, 0xdb, 0x28, 0x88, 0x4e, 0x77, 0x48, 0x22, 0x4f, 0x2f,
        0xab, 0x24, 0x3c, 0x2f,
    }
};
static const uint8_t sMessageEncodingTest0488_Payload[] =
{
    0xf8, 0x03, 0x48, 0xf1, 0x65, 0xd6, 0x84, 0xf8, 0xc6, 0xc5, 0xe8, 0x7a, 0xa1, 0x22, 0x05, 0x28,
    0x24, 0xb7, 0x42, 0x9f, 0x07, 0x42, 0x04, 0x67, 0xaa, 0x93, 0xc8, 0xff, 0xcb, 0x7f, 0x55, 0x6d,
    0x68, 0x75, 0x28, 0xf7, 0xba, 0x8e, 0x2f, 0xa5, 0x93, 0x52, 0xcf, 0x4f, 0x6f, 0xe0, 0x8d, 0x99,
    0xe4, 0x94, 0xec, 0xac, 0x87, 0x64, 0x00, 0x78, 0xa5, 0x8e, 0x6b, 0x63, 0x98, 0xce, 0x3b, 0x96,
    0xae, 0xf8, 0x32, 0xef, 0x13, 0x38, 0x22, 0xbe, 0x2a, 0x78, 0x18, 0x1c, 0xb2, 0x6b, 0xa8, 0xa4,
    0x91, 0x6b, 0xfe, 0x84, 0x57, 0xcf, 0x14, 0x7e, 0x23, 0xdd, 0xcc, 0xc8, 0x75, 0x8f, 0xe4, 0x61,
    0x96, 0x0e, 0x5f, 0x23, 0xfc, 0xd2, 0xc7, 0x2c, 0x88, 0x21, 0x10, 0x79, 0x6c, 0x6c, 0x15, 0x48,
    0x19, 0x95, 0x90, 0x80, 0x49, 0x35, 0xce, 0x02, 0xc8, 0x65, 0x51, 0xd4, 0x0b, 0x42, 0x54, 0xe0,
};

static const uint8_t sMessageEncodingTest0488_ExpectedEncoding[] =
{
    0x10, 0x23, 0xc4, 0x6b, 0x72, 0xbc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x1b, 0x2b, 0x72, 0x38, 0x79, 0x32, 0x9a, 0x4a, 0x7b, 0x49,
    0x2a, 0x67, 0x09, 0x2d, 0xe8, 0x55, 0x8e, 0xc3, 0x44, 0x1a, 0xc1, 0xa5, 0x63, 0xf1, 0x50, 0xab,
    0xf0, 0xf8, 0x11, 0x5f, 0xfb, 0x6b, 0x28, 0x0e, 0x45, 0xc9, 0x93, 0x90, 0x24, 0xde, 0x93, 0x09,
    0x10, 0xa0, 0x9d, 0x73, 0x01, 0x67, 0x74, 0x64, 0xa9, 0x17, 0xfb, 0xdc, 0xb3, 0xeb, 0xc7, 0x70,
    0x71, 0xa1, 0x40, 0xff, 0xb2, 0x79, 0x14, 0x3a, 0xfe, 0x89, 0x20, 0xa9, 0x91, 0xc2, 0x26, 0x4f,
    0x39, 0xbf, 0x5f, 0x81, 0x2e, 0xc2, 0x4f, 0x8f, 0xcb, 0x3f, 0xc3, 0x2c, 0xd2, 0x22, 0xcf, 0x9d,
    0x6d, 0x9a, 0xd8, 0x19, 0xb8, 0x3b, 0xdd, 0x76, 0x9d, 0x86, 0x23, 0x28, 0xb9, 0xd6, 0x36, 0x70,
    0x3a, 0xde, 0xa3, 0x41, 0x2e, 0x3c, 0x49, 0xf4, 0x2b, 0x4c, 0x4d, 0xaa, 0x73, 0xcb, 0x96, 0x2f,
    0xf6, 0x92, 0xed, 0x1d, 0xec, 0x85, 0xd8, 0x48, 0xe9, 0x53, 0x7f, 0x5a, 0xa6, 0xdf, 0x90, 0xdd,
    0xa8, 0xa1, 0xc4, 0x11, 0xe5, 0x1f, 0x3e, 0xeb, 0xbd, 0x8c, 0xbd, 0x34,
};

static const MessageEncodingTestVector sMessageEncodingTest0488 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xBC726BC4,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2B1B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0488_EncryptionKey,
    sMessageEncodingTest0488_Payload,
    sizeof(sMessageEncodingTest0488_Payload),
    sMessageEncodingTest0488_ExpectedEncoding,
    sizeof(sMessageEncodingTest0488_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0489_EncryptionKey =
{
    {
        0x08, 0xec, 0x83, 0x44, 0xc2, 0xfb, 0x76, 0x21, 0xff, 0xff, 0x17, 0x8b, 0x88, 0x56, 0x4d, 0x4f,
    }
};
static const uint8_t sMessageEncodingTest0489_Payload[] =
{
    0x8f, 0xad, 0x91, 0x79, 0x1f, 0x41, 0x00, 0x90, 0xf3, 0x62, 0xbe, 0x31, 0xe9, 0xbd, 0xb5, 0x6a,
    0x23, 0x05, 0xdb, 0xd2, 0xc1, 0xad, 0x35, 0x65, 0xed, 0xc9, 0x2f, 0x48, 0x75, 0x63, 0xe4, 0x00,
    0xf1, 0xef, 0xa1, 0xcd, 0xf3, 0x23, 0x5e, 0xce, 0x46, 0x06, 0x77, 0x5e, 0x40, 0x40, 0xc2, 0xd5,
    0x31, 0x81, 0x7f, 0x44, 0x6d, 0xe6, 0xd1, 0x62, 0x8f, 0x30, 0x60, 0x53, 0x21, 0x5a, 0x37, 0xd1,
    0xd2, 0x96, 0xc8, 0xf9, 0xb6, 0xc1, 0x93, 0x37, 0x2d, 0xeb, 0xb2, 0x84, 0x57, 0x7e, 0xd5, 0x40,
    0x19, 0xd8, 0x56, 0xe3, 0x10, 0x17, 0x76, 0x54, 0x8a, 0x24, 0x4e, 0x3b, 0x9b, 0xae, 0xc3, 0x3e,
    0x66, 0xee, 0x1c, 0xc6, 0xaa, 0x85, 0x5a, 0xbc, 0x4b, 0x47, 0x29, 0xe8, 0x61, 0xb7, 0x07, 0xb8,
    0x6c, 0xa6, 0xf0, 0x91, 0xc3, 0xf3, 0xe1, 0x5a, 0xbb, 0xfa, 0xdf, 0xf6, 0xd0, 0xf2, 0x8a, 0x39,
};

static const uint8_t sMessageEncodingTest0489_ExpectedEncoding[] =
{
    0x20, 0x23, 0x61, 0x93, 0xd6, 0x36, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x52, 0x2c, 0x16, 0x77, 0xad, 0x3b, 0x62, 0x62, 0x79, 0x60,
    0x8a, 0x04, 0x7f, 0x43, 0xd6, 0xd2, 0x77, 0x76, 0xa8, 0x6f, 0x65, 0xd7, 0x94, 0xa5, 0xdd, 0x4e,
    0x57, 0x76, 0xd9, 0x9a, 0x2e, 0x87, 0x6d, 0xbb, 0x6d, 0xe9, 0xb9, 0x1a, 0xb7, 0xb2, 0xd9, 0x85,
    0xb3, 0xab, 0xbd, 0xa6, 0x32, 0xc3, 0xe9, 0x3c, 0x3e, 0xae, 0xf4, 0x0a, 0x0e, 0x80, 0x43, 0x88,
    0x38, 0x6d, 0x6a, 0x93, 0x0d, 0x80, 0x0e, 0x3d, 0x45, 0x72, 0x04, 0xad, 0xfb, 0x5d, 0xb2, 0x84,
    0x66, 0xc6, 0xc7, 0xb7, 0xf3, 0xb9, 0x2f, 0x42, 0xbd, 0xab, 0xd5, 0xa0, 0xf4, 0x4f, 0x40, 0x36,
    0x1a, 0x86, 0xe6, 0x97, 0x5b, 0x21, 0xff, 0xca, 0xac, 0x33, 0xcd, 0xb4, 0xd4, 0xc6, 0x94, 0x73,
    0x7c, 0x7d, 0xac, 0x52, 0x45, 0xea, 0x15, 0x4b, 0xbc, 0xdc, 0x6d, 0x70, 0x73, 0x4d, 0x58, 0x8b,
    0x2d, 0x0b, 0xa2, 0xc6, 0xdc, 0xdc, 0x10, 0x49, 0xac, 0x4c, 0x12, 0x43, 0x09, 0x33, 0xe5, 0x73,
};

static const MessageEncodingTestVector sMessageEncodingTest0489 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x36D69361,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2C52,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0489_EncryptionKey,
    sMessageEncodingTest0489_Payload,
    sizeof(sMessageEncodingTest0489_Payload),
    sMessageEncodingTest0489_ExpectedEncoding,
    sizeof(sMessageEncodingTest0489_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0490_EncryptionKey =
{
    {
        0xc0, 0x48, 0x02, 0x37, 0xe9, 0xe4, 0xa9, 0x57, 0xca, 0x60, 0x0e, 0xd8, 0x46, 0x63, 0xf0, 0x54,
    }
};
static const uint8_t sMessageEncodingTest0490_Payload[] =
{
    0xee, 0xe7, 0xa6, 0xd7, 0xf1, 0x9c, 0x91, 0x98, 0x63, 0x06, 0x1d, 0x19, 0x09, 0xb9, 0x2a, 0x11,
    0xc1, 0x6e, 0xde, 0xfb, 0xe9, 0x1e, 0xb4, 0xd6, 0x1a, 0x08, 0x7f, 0xfa, 0xcf, 0x78, 0x85, 0x06,
    0x49, 0x89, 0x1e, 0x8d, 0xf5, 0x26, 0xe5, 0x69, 0x9e, 0x42, 0xa8, 0xf9, 0xda, 0xd7, 0xdf, 0xf1,
    0xe7, 0xdb, 0x8c, 0x74, 0x96, 0x2c, 0x28, 0x04, 0xc8, 0xf5, 0xa3, 0x24, 0x91, 0xb9, 0x4a, 0x1e,
    0x88, 0x62, 0xb3, 0xab, 0xad, 0x3a, 0xf8, 0x65, 0x3d, 0x49, 0xa5, 0x07, 0xdb, 0xac, 0x31, 0xe6,
    0x49, 0xfc, 0xe1, 0x5f, 0x03, 0xdf, 0x86, 0x6b, 0x7e, 0xeb, 0xfb, 0xda, 0x9a, 0x25, 0x96, 0xe6,
    0x0e, 0x4a, 0x9c, 0xf8, 0x7e, 0xbd, 0x82, 0x1d, 0xf3, 0x40, 0xc5, 0x6f, 0xbd, 0x69, 0xff, 0x1f,
    0xe2, 0x4a, 0x4f, 0x6c, 0xfb, 0xc9, 0x15, 0xf9, 0xc5, 0x85, 0x1f, 0x46, 0x29, 0x6c, 0xf8, 0xde,
};

static const uint8_t sMessageEncodingTest0490_ExpectedEncoding[] =
{
    0x30, 0x23, 0x0e, 0x09, 0x2e, 0x4c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xee, 0x27, 0x3a, 0x16, 0x9f, 0x11, 0x37, 0x1f, 0xb6, 0x44,
    0xda, 0x43, 0x1f, 0xd9, 0xff, 0x6b, 0x9d, 0x8f, 0x20, 0x80, 0xfd, 0x20, 0x4c, 0x3c, 0xc1, 0x98,
    0x18, 0xb4, 0x5b, 0x65, 0x00, 0xb1, 0xc6, 0x38, 0x66, 0xe1, 0x5a, 0x73, 0x9c, 0xc1, 0xb1, 0x88,
    0x61, 0x3a, 0xb6, 0xec, 0x91, 0x6e, 0x2e, 0x34, 0xe8, 0xc8, 0xc2, 0x29, 0x17, 0x3d, 0x91, 0xb0,
    0x98, 0xab, 0xe0, 0x3b, 0x28, 0xe0, 0x7c, 0x5e, 0xa9, 0x0d, 0x9e, 0x5f, 0x4c, 0x6f, 0x08, 0x06,
    0xd6, 0x0f, 0x7c, 0xc2, 0xfc, 0xd6, 0x7f, 0xae, 0xc4, 0xe2, 0x34, 0x0c, 0x7e, 0xc7, 0xd8, 0x39,
    0xfa, 0x4a, 0xd5, 0x4d, 0xc0, 0xf6, 0x43, 0x7e, 0xce, 0xa3, 0x96, 0x77, 0xd8, 0x60, 0x09, 0x4b,
    0x51, 0xa8, 0xfc, 0xe6, 0x03, 0x80, 0x66, 0x57, 0x28, 0x7c, 0x89, 0x64, 0xd4, 0x81, 0x37, 0x68,
    0x5b, 0x97, 0xbc, 0x8e, 0xc4, 0xa6, 0x9e, 0xee, 0x15, 0x0e, 0x6c, 0xc3, 0xab, 0x96, 0xb9, 0x87,
    0xd5, 0x94, 0x6f, 0x02, 0xb9, 0x70, 0x20, 0x91,
};

static const MessageEncodingTestVector sMessageEncodingTest0490 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4C2E090E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x27EE,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0490_EncryptionKey,
    sMessageEncodingTest0490_Payload,
    sizeof(sMessageEncodingTest0490_Payload),
    sMessageEncodingTest0490_ExpectedEncoding,
    sizeof(sMessageEncodingTest0490_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0491_Payload[] =
{
    0x7d, 0x69, 0x32, 0xda, 0x46, 0xad, 0xce, 0xbf, 0xbb, 0x3f, 0x2a, 0x44, 0xc5, 0x26, 0xcc, 0x75,
    0xb8, 0x6c, 0xfe, 0xd4, 0x7e, 0x39, 0x54, 0x3e, 0x82, 0x30, 0x20, 0x40, 0x70, 0xac, 0x47, 0x87,
    0xf6, 0x39, 0x1e, 0x9f, 0x2f, 0x86, 0xe3, 0xcb, 0xaa, 0xfd, 0x90, 0x45, 0x5f, 0x10, 0x63, 0xbf,
    0xc4, 0xae, 0xd5, 0x93, 0x5b, 0x58, 0xc1, 0x71, 0x80, 0xd7, 0xfe, 0x63, 0x17, 0x2d, 0xb7, 0x79,
    0x6d, 0xc4, 0x88, 0x83, 0x0c, 0x9a, 0xdc, 0x76, 0x54, 0xa8, 0x19, 0x98, 0x4d, 0x6c, 0xf6, 0x0e,
    0x6f, 0x64, 0x50, 0x2a, 0xea, 0x55, 0xa6, 0x14, 0x30, 0xf4, 0x31, 0x64, 0x40, 0x6c, 0x4e, 0x7c,
    0x33, 0xa3, 0x6f, 0x3e, 0xc1, 0xcd, 0xd9, 0x47, 0xf9, 0xce, 0x6e, 0x39, 0x01, 0xef, 0xa3, 0xf0,
    0x5a, 0x16, 0x9b, 0x37, 0xc3, 0x88, 0xc0, 0x79, 0x30, 0x86, 0x0e, 0xca, 0x20, 0x9c, 0xe6, 0xd4,
};

static const uint8_t sMessageEncodingTest0491_ExpectedEncoding[] =
{
    0x00, 0x25, 0x4b, 0x3e, 0x8f, 0x2e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7d, 0x69,
    0x32, 0xda, 0x46, 0xad, 0xce, 0xbf, 0xbb, 0x3f, 0x2a, 0x44, 0xc5, 0x26, 0xcc, 0x75, 0xb8, 0x6c,
    0xfe, 0xd4, 0x7e, 0x39, 0x54, 0x3e, 0x82, 0x30, 0x20, 0x40, 0x70, 0xac, 0x47, 0x87, 0xf6, 0x39,
    0x1e, 0x9f, 0x2f, 0x86, 0xe3, 0xcb, 0xaa, 0xfd, 0x90, 0x45, 0x5f, 0x10, 0x63, 0xbf, 0xc4, 0xae,
    0xd5, 0x93, 0x5b, 0x58, 0xc1, 0x71, 0x80, 0xd7, 0xfe, 0x63, 0x17, 0x2d, 0xb7, 0x79, 0x6d, 0xc4,
    0x88, 0x83, 0x0c, 0x9a, 0xdc, 0x76, 0x54, 0xa8, 0x19, 0x98, 0x4d, 0x6c, 0xf6, 0x0e, 0x6f, 0x64,
    0x50, 0x2a, 0xea, 0x55, 0xa6, 0x14, 0x30, 0xf4, 0x31, 0x64, 0x40, 0x6c, 0x4e, 0x7c, 0x33, 0xa3,
    0x6f, 0x3e, 0xc1, 0xcd, 0xd9, 0x47, 0xf9, 0xce, 0x6e, 0x39, 0x01, 0xef, 0xa3, 0xf0, 0x5a, 0x16,
    0x9b, 0x37, 0xc3, 0x88, 0xc0, 0x79, 0x30, 0x86, 0x0e, 0xca, 0x20, 0x9c, 0xe6, 0xd4,
};

static const MessageEncodingTestVector sMessageEncodingTest0491 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x2E8F3E4B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0491_Payload,
    sizeof(sMessageEncodingTest0491_Payload),
    sMessageEncodingTest0491_ExpectedEncoding,
    sizeof(sMessageEncodingTest0491_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0492_EncryptionKey =
{
    {
        0xcf, 0xe5, 0x6c, 0x75, 0x82, 0xb1, 0x84, 0x3c, 0x6e, 0x49, 0xd5, 0x05, 0xf9, 0xab, 0x29, 0x0e,
    },
    {
        0xaa, 0x39, 0x84, 0xbf, 0x1d, 0xf0, 0x3a, 0x61, 0xf8, 0xbb, 0x54, 0x68, 0x2b, 0x55, 0xc6, 0x3f,
        0x09, 0x8c, 0x10, 0xe9,
    }
};
static const uint8_t sMessageEncodingTest0492_Payload[] =
{
    0x75, 0x90, 0x4b, 0xfe, 0xf1, 0x27, 0x63, 0xe2, 0x11, 0x48, 0x86, 0x24, 0x63, 0xd8, 0x77, 0xc6,
    0xe9, 0xaa, 0x34, 0x9e, 0xef, 0x5f, 0x6d, 0xbb, 0xb9, 0x25, 0xb7, 0x05, 0x9e, 0x58, 0xe7, 0x23,
    0x77, 0x8e, 0xce, 0xe4, 0x38, 0xbd, 0x97, 0xb7, 0x71, 0xb3, 0x04, 0xa8, 0xd0, 0x8a, 0x2c, 0xa8,
    0xbe, 0x93, 0xc5, 0x71, 0x25, 0x62, 0xd0, 0x1f, 0x8e, 0x6d, 0x50, 0x2a, 0x39, 0x54, 0x3c, 0xb4,
    0x9d, 0xca, 0xad, 0x14, 0xc1, 0x21, 0x11, 0xab, 0xd2, 0xfb, 0x3f, 0x62, 0xcb, 0x7f, 0x2e, 0xaf,
    0xe4, 0xec, 0x76, 0x6d, 0x7e, 0x88, 0x14, 0xe2, 0xa9, 0xad, 0xa1, 0xf2, 0xa3, 0x04, 0x63, 0xb9,
    0x29, 0xf0, 0xa1, 0xcd, 0x9e, 0x2d, 0xc3, 0x87, 0xdb, 0xc5, 0x54, 0xa4, 0x4d, 0x27, 0xe4, 0xaa,
    0x13, 0x33, 0x03, 0x5d, 0x3f, 0xfb, 0xaa, 0xd7, 0x95, 0x18, 0x59, 0x5a, 0xeb, 0xb6, 0x8b, 0x82,
};

static const uint8_t sMessageEncodingTest0492_ExpectedEncoding[] =
{
    0x10, 0x25, 0x4a, 0xe7, 0x9a, 0x56, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x58, 0x26,
    0xde, 0x7d, 0xbf, 0xfc, 0xd1, 0x86, 0x1f, 0x6c, 0xf0, 0x66, 0xa7, 0x99, 0x43, 0x9f, 0x99, 0x77,
    0x76, 0xcb, 0x60, 0xcc, 0x21, 0xee, 0x6a, 0x7a, 0x63, 0xdc, 0x87, 0xd8, 0x57, 0xe1, 0xf1, 0xc3,
    0x4c, 0x3c, 0xc0, 0x3a, 0xb3, 0xbc, 0x63, 0xe2, 0xc4, 0xba, 0xf1, 0xd6, 0xfa, 0x72, 0x7e, 0x82,
    0x82, 0x35, 0x72, 0x29, 0xa6, 0x5f, 0x59, 0xa6, 0xfd, 0x3d, 0x73, 0x9a, 0x07, 0x49, 0xb5, 0x4d,
    0x75, 0x03, 0x33, 0x60, 0x57, 0x80, 0x99, 0x7c, 0x99, 0xa5, 0xb9, 0xeb, 0xb8, 0xdf, 0x1c, 0x13,
    0xdb, 0x87, 0x5e, 0xd0, 0x41, 0x1c, 0xec, 0x6c, 0xcc, 0xff, 0x01, 0x65, 0x8e, 0xce, 0xeb, 0x38,
    0x78, 0x97, 0xf8, 0xb7, 0x11, 0x30, 0xa0, 0x49, 0xf9, 0xb5, 0xcd, 0x25, 0x93, 0xcd, 0x78, 0x03,
    0x31, 0x5d, 0xb3, 0xd3, 0xd4, 0xc4, 0x2d, 0x9d, 0x6b, 0x86, 0x59, 0x91, 0xf3, 0xab, 0xb0, 0x85,
    0x0d, 0x05, 0x27, 0x68, 0xab, 0x44, 0xe2, 0x70, 0x76, 0x90, 0x3a, 0x14, 0x7d, 0xaa, 0x5e, 0xae,
    0xbb, 0x8c, 0xca, 0xcb,
};

static const MessageEncodingTestVector sMessageEncodingTest0492 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x569AE74A,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2658,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0492_EncryptionKey,
    sMessageEncodingTest0492_Payload,
    sizeof(sMessageEncodingTest0492_Payload),
    sMessageEncodingTest0492_ExpectedEncoding,
    sizeof(sMessageEncodingTest0492_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0493_EncryptionKey =
{
    {
        0x6b, 0x46, 0x57, 0x37, 0xc0, 0x31, 0x36, 0x9a, 0x97, 0xc3, 0x78, 0x05, 0x11, 0x98, 0x07, 0x0c,
    }
};
static const uint8_t sMessageEncodingTest0493_Payload[] =
{
    0x20, 0x33, 0x83, 0x64, 0x4a, 0x18, 0xf1, 0x42, 0x1a, 0x4d, 0xf5, 0x3e, 0x9d, 0xa1, 0x35, 0x88,
    0x3b, 0x75, 0x43, 0xcb, 0x23, 0xe3, 0xcf, 0xfb, 0x77, 0xfc, 0x2a, 0xa9, 0x1b, 0x87, 0x40, 0x77,
    0x63, 0xed, 0x57, 0x74, 0xf7, 0x02, 0x48, 0x68, 0x1a, 0x2f, 0xb3, 0xaf, 0x1c, 0x15, 0x2f, 0x1d,
    0x7a, 0x6b, 0xd1, 0x17, 0x98, 0x85, 0x5e, 0x4e, 0x3b, 0x5a, 0x4e, 0x89, 0x03, 0x59, 0x5f, 0x17,
    0x67, 0x83, 0x33, 0x6d, 0x25, 0x89, 0x7f, 0xbb, 0x56, 0x41, 0xf0, 0x00, 0x2e, 0xcc, 0xeb, 0x45,
    0x59, 0xcf, 0x0a, 0xea, 0x2c, 0x09, 0xa5, 0x1f, 0x55, 0x32, 0x66, 0x76, 0x4a, 0x60, 0x70, 0x50,
    0xf7, 0x4c, 0x85, 0x46, 0xc5, 0x13, 0xa3, 0xf9, 0xa4, 0xb9, 0x91, 0xe2, 0xd8, 0x3d, 0xca, 0x73,
    0x28, 0x48, 0xa6, 0x7a, 0xc5, 0x4e, 0x11, 0xd4, 0x35, 0x3c, 0xf8, 0xa7, 0x80, 0xd2, 0x05, 0x64,
};

static const uint8_t sMessageEncodingTest0493_ExpectedEncoding[] =
{
    0x20, 0x25, 0x70, 0x50, 0x72, 0x3f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6b, 0x21,
    0x79, 0xdb, 0x15, 0xeb, 0xae, 0xd5, 0x0a, 0xb8, 0x3f, 0xb0, 0x74, 0x99, 0xae, 0xf0, 0x00, 0x9a,
    0xee, 0x86, 0x1f, 0x90, 0xbc, 0x88, 0xe2, 0x63, 0xc2, 0xbb, 0xe0, 0x7f, 0xf1, 0x42, 0x13, 0x86,
    0x40, 0xac, 0x34, 0x50, 0x25, 0x00, 0xfb, 0x77, 0x79, 0x08, 0x9a, 0x84, 0x0d, 0x44, 0x31, 0x34,
    0x9c, 0xb7, 0x29, 0x0d, 0xac, 0x21, 0x3e, 0xde, 0xd5, 0xd8, 0x1e, 0xa9, 0xf2, 0xd3, 0xc2, 0x0a,
    0xb1, 0xd5, 0x87, 0xa6, 0x1d, 0xad, 0xf1, 0xf2, 0x5a, 0xd1, 0xd0, 0x32, 0x08, 0xd7, 0xb9, 0xfa,
    0xb0, 0x2d, 0x3d, 0x5d, 0x4d, 0xaa, 0xbf, 0xe7, 0x60, 0xae, 0x4e, 0xe7, 0x2c, 0xd5, 0xcc, 0xd1,
    0x15, 0xbe, 0xe1, 0x8b, 0x6b, 0x39, 0x00, 0xa1, 0x8c, 0x8d, 0xa9, 0x06, 0x46, 0x5a, 0xb5, 0x64,
    0x6e, 0x88, 0x04, 0x28, 0x5d, 0xf1, 0x84, 0xaf, 0x0d, 0x78, 0xfc, 0x58, 0xa2, 0x93, 0xda, 0x5a,
    0xa9, 0xe5, 0x8e, 0xfc, 0xc1, 0x99, 0x87, 0xea,
};

static const MessageEncodingTestVector sMessageEncodingTest0493 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x3F725070,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x216B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0493_EncryptionKey,
    sMessageEncodingTest0493_Payload,
    sizeof(sMessageEncodingTest0493_Payload),
    sMessageEncodingTest0493_ExpectedEncoding,
    sizeof(sMessageEncodingTest0493_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0494_EncryptionKey =
{
    {
        0x2d, 0xb0, 0x8f, 0x7d, 0x66, 0x38, 0x82, 0x87, 0x07, 0x06, 0x53, 0xe3, 0x51, 0xb6, 0x9c, 0x23,
    }
};
static const uint8_t sMessageEncodingTest0494_Payload[] =
{
    0x3a, 0x1a, 0x94, 0x5d, 0x92, 0x29, 0x34, 0xbc, 0x94, 0x21, 0x55, 0xe4, 0xf7, 0xe9, 0xe5, 0x06,
    0x9b, 0x1d, 0xa1, 0x3a, 0xcc, 0x03, 0x7b, 0xfc, 0x24, 0x57, 0x0e, 0x91, 0x7c, 0x03, 0x9d, 0x91,
    0x02, 0x10, 0x93, 0x55, 0x44, 0x97, 0x79, 0x8e, 0xc3, 0x0e, 0x84, 0x78, 0x14, 0x5f, 0x2a, 0x6b,
    0x68, 0x52, 0xbb, 0xae, 0x0d, 0x3e, 0x5e, 0xab, 0x58, 0x22, 0xc2, 0xa0, 0x5d, 0x37, 0x95, 0x8b,
    0x4a, 0xa6, 0xc4, 0xaa, 0x76, 0x17, 0x4e, 0x7e, 0x5a, 0xc0, 0xdc, 0xd2, 0xd7, 0xa2, 0x2b, 0xbf,
    0xc2, 0xfa, 0x71, 0xca, 0x18, 0x2c, 0xbf, 0x4e, 0xe8, 0xbf, 0x74, 0xb6, 0xa7, 0xaa, 0x90, 0x77,
    0xce, 0x9b, 0x97, 0xb4, 0x2e, 0xd3, 0x1a, 0x46, 0xbf, 0x62, 0xd7, 0x12, 0xf9, 0x0a, 0x1a, 0x18,
    0xf7, 0x8c, 0x80, 0x7f, 0x84, 0x97, 0x3b, 0x73, 0x60, 0x9f, 0xf9, 0x48, 0xf7, 0x6a, 0x33, 0xf2,
};

static const uint8_t sMessageEncodingTest0494_ExpectedEncoding[] =
{
    0x30, 0x25, 0x27, 0x93, 0x20, 0x24, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0a, 0x26,
    0x73, 0xdf, 0xd5, 0x7f, 0x33, 0xf7, 0x34, 0x3f, 0x4b, 0xca, 0xbe, 0xe6, 0xbf, 0x5b, 0x80, 0x0c,
    0x50, 0x68, 0xd4, 0xe1, 0x4c, 0xb7, 0x4d, 0x7b, 0x21, 0xc5, 0xd2, 0xe4, 0x89, 0x48, 0xe8, 0x93,
    0x5a, 0xa2, 0x04, 0xbd, 0xbc, 0x9c, 0x87, 0xb7, 0x9b, 0xfc, 0x69, 0x98, 0xbd, 0x0a, 0x16, 0x1c,
    0x3e, 0x4b, 0x8e, 0x63, 0x5e, 0x90, 0x6e, 0x59, 0xf4, 0x47, 0x1a, 0x87, 0x18, 0x9c, 0xc4, 0xef,
    0xf6, 0x05, 0x28, 0xab, 0x94, 0x18, 0xe7, 0xd6, 0x12, 0x1c, 0x31, 0xb5, 0xc8, 0x24, 0x2f, 0x38,
    0x82, 0x7d, 0xea, 0xd2, 0x9f, 0xd4, 0x0f, 0xfe, 0x17, 0xa0, 0x96, 0x9d, 0xb0, 0xe8, 0x5d, 0x20,
    0x22, 0x74, 0x0c, 0x15, 0xb4, 0xc6, 0xa9, 0xf2, 0x5f, 0x00, 0xee, 0x29, 0xe0, 0x78, 0xd4, 0x02,
    0xe3, 0x46, 0xf6, 0xec, 0xb1, 0x6b, 0xdf, 0x20, 0xc4, 0xa6, 0x7c, 0x21, 0x0f, 0xb4, 0xfe, 0xb2,
    0xfc, 0xbb, 0x1d, 0x82, 0x28, 0xba, 0x92, 0xe8, 0xda, 0xbb, 0xee, 0x06, 0x8f, 0x5f, 0x7a, 0xef,
};

static const MessageEncodingTestVector sMessageEncodingTest0494 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x24209327,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x260A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0494_EncryptionKey,
    sMessageEncodingTest0494_Payload,
    sizeof(sMessageEncodingTest0494_Payload),
    sMessageEncodingTest0494_ExpectedEncoding,
    sizeof(sMessageEncodingTest0494_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0495_Payload[] =
{
    0x16, 0xc8, 0x26, 0x93, 0x4a, 0x99, 0xd4, 0xb1, 0x14, 0x32, 0x07, 0xe1, 0x11, 0xc6, 0xed, 0x9d,
    0xbb, 0x80, 0xd4, 0xf1, 0xc4, 0xfc, 0x0e, 0xcc, 0x1d, 0xe6, 0x38, 0xb9, 0x80, 0x25, 0xc3, 0x16,
    0x35, 0x4c, 0xd6, 0xed, 0xa0, 0x91, 0xa5, 0xe9, 0xab, 0xc5, 0x0d, 0x1b, 0x66, 0x47, 0xe5, 0x94,
    0xa7, 0x64, 0xd7, 0xbb, 0x0e, 0xca, 0x9c, 0x2a, 0x9c, 0x12, 0x4c, 0x01, 0x42, 0x0a, 0x11, 0x53,
    0xf7, 0xec, 0x58, 0xa9, 0xf2, 0x0a, 0xcd, 0x69, 0x07, 0x04, 0x84, 0x3e, 0x35, 0xa8, 0x5e, 0xf0,
    0x1a, 0x81, 0x05, 0x95, 0x9d, 0x69, 0xa4, 0x27, 0x32, 0xaa, 0xc5, 0x28, 0xac, 0xf7, 0xdd, 0xce,
    0x76, 0xc3, 0xf8, 0xe6, 0x3a, 0x1e, 0xf6, 0xe6, 0x88, 0xd2, 0x4b, 0xec, 0x7a, 0x61, 0x7a, 0x50,
    0xb4, 0x77, 0x87, 0xf5, 0xde, 0xcd, 0x6c, 0x26, 0x86, 0xee, 0xd3, 0x9c, 0xad, 0xc6, 0xe1, 0x74,
};

static const uint8_t sMessageEncodingTest0495_ExpectedEncoding[] =
{
    0x00, 0x29, 0x88, 0x0e, 0x29, 0x39, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x16, 0xc8,
    0x26, 0x93, 0x4a, 0x99, 0xd4, 0xb1, 0x14, 0x32, 0x07, 0xe1, 0x11, 0xc6, 0xed, 0x9d, 0xbb, 0x80,
    0xd4, 0xf1, 0xc4, 0xfc, 0x0e, 0xcc, 0x1d, 0xe6, 0x38, 0xb9, 0x80, 0x25, 0xc3, 0x16, 0x35, 0x4c,
    0xd6, 0xed, 0xa0, 0x91, 0xa5, 0xe9, 0xab, 0xc5, 0x0d, 0x1b, 0x66, 0x47, 0xe5, 0x94, 0xa7, 0x64,
    0xd7, 0xbb, 0x0e, 0xca, 0x9c, 0x2a, 0x9c, 0x12, 0x4c, 0x01, 0x42, 0x0a, 0x11, 0x53, 0xf7, 0xec,
    0x58, 0xa9, 0xf2, 0x0a, 0xcd, 0x69, 0x07, 0x04, 0x84, 0x3e, 0x35, 0xa8, 0x5e, 0xf0, 0x1a, 0x81,
    0x05, 0x95, 0x9d, 0x69, 0xa4, 0x27, 0x32, 0xaa, 0xc5, 0x28, 0xac, 0xf7, 0xdd, 0xce, 0x76, 0xc3,
    0xf8, 0xe6, 0x3a, 0x1e, 0xf6, 0xe6, 0x88, 0xd2, 0x4b, 0xec, 0x7a, 0x61, 0x7a, 0x50, 0xb4, 0x77,
    0x87, 0xf5, 0xde, 0xcd, 0x6c, 0x26, 0x86, 0xee, 0xd3, 0x9c, 0xad, 0xc6, 0xe1, 0x74,
};

static const MessageEncodingTestVector sMessageEncodingTest0495 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x39290E88,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0495_Payload,
    sizeof(sMessageEncodingTest0495_Payload),
    sMessageEncodingTest0495_ExpectedEncoding,
    sizeof(sMessageEncodingTest0495_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0496_EncryptionKey =
{
    {
        0xe6, 0x5e, 0xbe, 0xb0, 0x46, 0x70, 0x3a, 0x2e, 0x88, 0x15, 0x29, 0x2b, 0x20, 0x5a, 0x92, 0xe7,
    },
    {
        0x32, 0x23, 0xa6, 0x73, 0x0c, 0xbb, 0xc9, 0x75, 0x4b, 0xc2, 0x4c, 0x0b, 0x4a, 0x3f, 0xd5, 0x2a,
        0x85, 0x51, 0x41, 0x53,
    }
};
static const uint8_t sMessageEncodingTest0496_Payload[] =
{
    0x60, 0x2a, 0x07, 0x8b, 0xc6, 0x28, 0x2d, 0x5d, 0x5b, 0xe6, 0x08, 0x8c, 0xcd, 0x66, 0x6e, 0xe8,
    0x8e, 0x5a, 0xe5, 0x81, 0xc0, 0x6c, 0x73, 0xb8, 0x88, 0x5b, 0x9b, 0xc0, 0x85, 0xfc, 0x29, 0x28,
    0x8e, 0x7e, 0x5d, 0x51, 0x2d, 0x4f, 0x49, 0xe8, 0x0e, 0x97, 0x64, 0xb4, 0xcb, 0x22, 0x38, 0x2d,
    0xe5, 0x65, 0x7f, 0xb4, 0x5f, 0xf3, 0x48, 0x21, 0x88, 0x31, 0xaa, 0x0c, 0x73, 0xc9, 0xd7, 0xe0,
    0xa8, 0xac, 0x7b, 0xdf, 0xa0, 0x09, 0xb0, 0x1d, 0x40, 0x5a, 0x31, 0x26, 0x26, 0x41, 0x32, 0xad,
    0x8c, 0x68, 0x96, 0x0b, 0xeb, 0x6a, 0xa8, 0xbf, 0x89, 0x1b, 0x12, 0xc4, 0xcf, 0xfb, 0x5a, 0x7a,
    0x24, 0xd8, 0x95, 0xf3, 0x6d, 0xe2, 0x12, 0x9d, 0x49, 0x0d, 0xcb, 0xa6, 0xf5, 0x91, 0xc5, 0x17,
    0xcc, 0x88, 0xf5, 0x3c, 0x9e, 0x52, 0x70, 0x08, 0xb5, 0x4a, 0xa0, 0xaa, 0x2c, 0xd5, 0x73, 0x1a,
};

static const uint8_t sMessageEncodingTest0496_ExpectedEncoding[] =
{
    0x10, 0x29, 0x4d, 0x71, 0x4e, 0x69, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x93, 0x21,
    0x9b, 0xcf, 0x0a, 0x3d, 0x8b, 0x6d, 0xb2, 0x0b, 0x84, 0xf6, 0x34, 0x12, 0xdb, 0xe1, 0xd6, 0x64,
    0x67, 0x9e, 0xda, 0x35, 0xd9, 0x0e, 0x62, 0xb4, 0x39, 0xe6, 0xfe, 0x3c, 0x49, 0x1b, 0x57, 0x28,
    0xe5, 0xa1, 0xce, 0xf8, 0xb6, 0xf4, 0x27, 0x8c, 0xe4, 0xd2, 0xbc, 0x63, 0x8d, 0x5c, 0x20, 0xdb,
    0x54, 0xa2, 0xbc, 0xa0, 0x0d, 0x72, 0x07, 0xcb, 0x83, 0x54, 0xb0, 0xd8, 0x51, 0x4f, 0x9b, 0xe1,
    0x81, 0x4e, 0xa8, 0x80, 0x1f, 0xc7, 0xfa, 0xaf, 0xfb, 0x84, 0xc9, 0x2b, 0xf4, 0xbb, 0x47, 0x67,
    0xbd, 0xc0, 0xf2, 0x4e, 0x2a, 0x81, 0x9d, 0xa7, 0x04, 0xf8, 0x15, 0x24, 0xf3, 0x5d, 0x12, 0x32,
    0xaf, 0x0c, 0xba, 0x32, 0x2f, 0x05, 0xdd, 0x2e, 0xeb, 0xb1, 0xfb, 0x70, 0x4e, 0x97, 0x2c, 0xfc,
    0x12, 0x9a, 0x8b, 0x1d, 0xcd, 0x5c, 0x04, 0x0e, 0xea, 0x3b, 0x89, 0xd9, 0xf0, 0xf3, 0x12, 0x93,
    0xf4, 0x53, 0xf1, 0x08, 0xc4, 0x2c, 0x95, 0x61, 0x79, 0x18, 0x52, 0x3f, 0xfc, 0xee, 0xbc, 0x7d,
    0x68, 0x75, 0x59, 0xb5,
};

static const MessageEncodingTestVector sMessageEncodingTest0496 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x694E714D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2193,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0496_EncryptionKey,
    sMessageEncodingTest0496_Payload,
    sizeof(sMessageEncodingTest0496_Payload),
    sMessageEncodingTest0496_ExpectedEncoding,
    sizeof(sMessageEncodingTest0496_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0497_EncryptionKey =
{
    {
        0x8d, 0x03, 0x41, 0xf1, 0x86, 0x16, 0xff, 0xb8, 0xc4, 0x1b, 0x76, 0xb2, 0x4c, 0x05, 0x98, 0x13,
    }
};
static const uint8_t sMessageEncodingTest0497_Payload[] =
{
    0xf1, 0x85, 0xc0, 0x1c, 0xbd, 0x57, 0x03, 0x9b, 0x6b, 0xbe, 0x25, 0x4d, 0xd0, 0x5b, 0xb1, 0x06,
    0xbe, 0x24, 0x6e, 0xfc, 0xa8, 0x5b, 0x9d, 0x1e, 0xa6, 0x3a, 0x54, 0x10, 0x9b, 0x42, 0xf8, 0x2c,
    0x1b, 0xa1, 0xdc, 0x6d, 0x4e, 0x2d, 0x70, 0xbe, 0xd0, 0x70, 0x1a, 0x1f, 0x2a, 0x74, 0xa2, 0xdb,
    0x5e, 0xa8, 0x0f, 0x2a, 0x34, 0xba, 0x4d, 0x88, 0x40, 0x65, 0x5e, 0x67, 0xda, 0xb4, 0xc1, 0xb2,
    0x4c, 0x05, 0xb9, 0xfb, 0x10, 0x46, 0x2c, 0xe1, 0x34, 0xb3, 0xb7, 0xc7, 0xac, 0xc8, 0xcf, 0x3a,
    0x87, 0xf8, 0xa1, 0x59, 0xf7, 0x84, 0x48, 0xc0, 0xe4, 0x4f, 0x63, 0xef, 0x54, 0xdf, 0xa9, 0xb2,
    0x39, 0xb8, 0x52, 0x75, 0x7a, 0xb0, 0xac, 0xbc, 0x98, 0xf5, 0xa2, 0xfd, 0x44, 0x1f, 0x20, 0x4f,
    0xde, 0x78, 0xe1, 0xc9, 0xc8, 0x81, 0x88, 0xe1, 0xf4, 0xdc, 0x1b, 0xc5, 0x57, 0xaa, 0x21, 0xfd,
};

static const uint8_t sMessageEncodingTest0497_ExpectedEncoding[] =
{
    0x20, 0x29, 0x44, 0xc2, 0xbb, 0x6b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdf, 0x27,
    0x09, 0xef, 0xb1, 0x93, 0x04, 0x6c, 0x36, 0xb1, 0x24, 0xd2, 0x1a, 0x2a, 0x9d, 0x45, 0x9b, 0xd9,
    0x65, 0xa1, 0xe7, 0x94, 0x90, 0xb9, 0xd4, 0x4b, 0xdb, 0x44, 0x71, 0xca, 0x8b, 0xe7, 0xa9, 0x9e,
    0x55, 0x24, 0x71, 0x4d, 0x4d, 0x95, 0xbe, 0xb4, 0x19, 0x3b, 0xda, 0x3c, 0x46, 0xaa, 0xab, 0x65,
    0xc7, 0xd4, 0xde, 0x01, 0x47, 0x4e, 0x20, 0xdf, 0x41, 0x53, 0x5a, 0xff, 0x00, 0xdd, 0x76, 0x1e,
    0x37, 0x68, 0x0c, 0xea, 0xa9, 0x3d, 0xbe, 0x51, 0x80, 0xdf, 0x3f, 0x82, 0x4e, 0xf1, 0xfd, 0xaf,
    0xac, 0xab, 0xd6, 0x0b, 0x40, 0x2f, 0x6c, 0xb0, 0x10, 0x1e, 0x4f, 0x50, 0x89, 0x1a, 0xb6, 0xd6,
    0x8d, 0xac, 0xf5, 0x84, 0x1d, 0x5f, 0xb8, 0x28, 0x3b, 0xd7, 0x4c, 0xd9, 0xe8, 0x04, 0x16, 0xa6,
    0x0c, 0x11, 0xe0, 0x1d, 0x7e, 0x9b, 0x2c, 0x26, 0xbb, 0x99, 0x95, 0x1b, 0x37, 0xed, 0xc8, 0xc5,
    0x18, 0xac, 0x11, 0x18, 0xc0, 0x22, 0xe2, 0x6e,
};

static const MessageEncodingTestVector sMessageEncodingTest0497 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x6BBBC244,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x27DF,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0497_EncryptionKey,
    sMessageEncodingTest0497_Payload,
    sizeof(sMessageEncodingTest0497_Payload),
    sMessageEncodingTest0497_ExpectedEncoding,
    sizeof(sMessageEncodingTest0497_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0498_EncryptionKey =
{
    {
        0x72, 0xfb, 0xc6, 0x13, 0xdd, 0xb3, 0xb6, 0xf2, 0x61, 0xe7, 0x8a, 0x99, 0x88, 0x1e, 0xca, 0xf7,
    }
};
static const uint8_t sMessageEncodingTest0498_Payload[] =
{
    0x0f, 0x21, 0xc0, 0xed, 0x57, 0x14, 0xb5, 0xad, 0x4c, 0x5d, 0x67, 0x65, 0x80, 0x34, 0xf6, 0xcf,
    0x07, 0xc1, 0xd3, 0x5d, 0x28, 0x77, 0x3b, 0xcb, 0x51, 0xcb, 0xc1, 0x5b, 0x70, 0xd4, 0xbb, 0x5e,
    0xcd, 0x3f, 0xdc, 0xac, 0x90, 0x0d, 0x60, 0x7a, 0x11, 0x51, 0x91, 0x5e, 0x01, 0x14, 0x8e, 0x59,
    0xaa, 0xa2, 0xfc, 0x07, 0x42, 0x6f, 0x38, 0x07, 0x33, 0x4e, 0x27, 0x5d, 0x09, 0xb5, 0x97, 0x04,
    0x6d, 0x3a, 0x64, 0x66, 0x9d, 0x17, 0x13, 0xf6, 0x76, 0x30, 0xdb, 0x20, 0xe4, 0xac, 0x8a, 0x33,
    0x13, 0xca, 0x21, 0x38, 0xf8, 0xbe, 0xa7, 0x16, 0x0e, 0xd5, 0xc5, 0x67, 0x9f, 0x4e, 0x29, 0x21,
    0xbb, 0xe9, 0x20, 0x9a, 0xc2, 0xb0, 0xb1, 0x87, 0x2d, 0x8a, 0x4c, 0x79, 0x96, 0x37, 0x06, 0x9d,
    0xd9, 0xea, 0xd7, 0xb7, 0xd4, 0x9a, 0xfd, 0xd6, 0x0a, 0x61, 0xe2, 0x87, 0xa3, 0xa5, 0xaa, 0x58,
};

static const uint8_t sMessageEncodingTest0498_ExpectedEncoding[] =
{
    0x30, 0x29, 0x1e, 0x07, 0xe1, 0x6f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8d, 0x26,
    0xf2, 0x29, 0x21, 0x0c, 0x44, 0x1f, 0x34, 0x2c, 0x49, 0xa2, 0xb4, 0xa6, 0x06, 0xed, 0x81, 0x98,
    0x16, 0x0f, 0x2f, 0x2f, 0x84, 0xb5, 0x44, 0x44, 0x90, 0x64, 0x74, 0x89, 0x0b, 0xe9, 0xe5, 0xf0,
    0x42, 0x2a, 0xf3, 0x22, 0x35, 0x51, 0xad, 0xac, 0x53, 0x23, 0x01, 0x05, 0xa5, 0x76, 0x75, 0xf8,
    0xc2, 0x91, 0x76, 0x24, 0xbb, 0xa0, 0x7f, 0x94, 0x5d, 0xf9, 0xd0, 0x4b, 0x1f, 0xd3, 0x15, 0xed,
    0x6f, 0x22, 0xbd, 0x2e, 0xdd, 0x17, 0x1e, 0x54, 0x27, 0xfb, 0x67, 0x89, 0x19, 0xa0, 0xb5, 0xba,
    0x94, 0x86, 0x09, 0xc9, 0x45, 0x0a, 0xa9, 0xa3, 0xe0, 0xd9, 0xf5, 0x4f, 0xe8, 0xaa, 0x2e, 0x7c,
    0x68, 0x1f, 0xef, 0xa9, 0x1a, 0x62, 0xa0, 0xb1, 0xd9, 0xce, 0xe6, 0x93, 0x8b, 0x2f, 0xd9, 0x92,
    0x76, 0xa3, 0x41, 0xf0, 0x37, 0xf2, 0xba, 0x12, 0x22, 0x63, 0x8e, 0xc8, 0xb0, 0x8f, 0xb4, 0x08,
    0xee, 0x96, 0x0e, 0x0b, 0xc4, 0x72, 0xdf, 0x9f, 0x21, 0xa7, 0x83, 0x95, 0xcf, 0x34, 0x1f, 0xfa,
};

static const MessageEncodingTestVector sMessageEncodingTest0498 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x6FE1071E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x268D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0498_EncryptionKey,
    sMessageEncodingTest0498_Payload,
    sizeof(sMessageEncodingTest0498_Payload),
    sMessageEncodingTest0498_ExpectedEncoding,
    sizeof(sMessageEncodingTest0498_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0499_Payload[] =
{
    0x4e, 0x9e, 0x1a, 0xed, 0x68, 0x10, 0x27, 0x14, 0x2f, 0x16, 0xc4, 0x26, 0xd1, 0x99, 0x57, 0xda,
    0x9f, 0x8d, 0xad, 0x00, 0xf7, 0x8c, 0xb1, 0x60, 0xa4, 0x0b, 0xb8, 0xe7, 0xc0, 0x52, 0x40, 0xd3,
    0x30, 0x3b, 0x8f, 0xa9, 0xe2, 0x7e, 0x52, 0x00, 0xf8, 0xa5, 0x48, 0x62, 0xcd, 0xe6, 0x92, 0xd2,
    0x31, 0x96, 0x0f, 0xef, 0xc3, 0x21, 0x5e, 0xbb, 0x93, 0x51, 0x2f, 0x4c, 0x20, 0xba, 0xed, 0xca,
    0x05, 0xc9, 0x6d, 0x6c, 0xd5, 0x48, 0xad, 0x9d, 0x63, 0xe2, 0xc9, 0x67, 0x14, 0x96, 0x01, 0xfd,
    0x4e, 0xfe, 0x1b, 0x9b, 0x2d, 0x00, 0x32, 0xfe, 0x93, 0x29, 0xda, 0x53, 0x3a, 0x40, 0x2e, 0xa7,
    0xd4, 0x94, 0xc7, 0x67, 0x48, 0xd8, 0x96, 0x59, 0xbd, 0xff, 0xfb, 0x63, 0x50, 0x85, 0xd5, 0xa6,
    0xe4, 0x36, 0x91, 0xcf, 0x57, 0x3f, 0xa7, 0x20, 0x97, 0x25, 0xcf, 0xcd, 0x5f, 0x9b, 0xe7, 0x36,
};

static const uint8_t sMessageEncodingTest0499_ExpectedEncoding[] =
{
    0x00, 0x21, 0x35, 0xb9, 0x78, 0xe5, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4e, 0x9e,
    0x1a, 0xed, 0x68, 0x10, 0x27, 0x14, 0x2f, 0x16, 0xc4, 0x26, 0xd1, 0x99, 0x57, 0xda, 0x9f, 0x8d,
    0xad, 0x00, 0xf7, 0x8c, 0xb1, 0x60, 0xa4, 0x0b, 0xb8, 0xe7, 0xc0, 0x52, 0x40, 0xd3, 0x30, 0x3b,
    0x8f, 0xa9, 0xe2, 0x7e, 0x52, 0x00, 0xf8, 0xa5, 0x48, 0x62, 0xcd, 0xe6, 0x92, 0xd2, 0x31, 0x96,
    0x0f, 0xef, 0xc3, 0x21, 0x5e, 0xbb, 0x93, 0x51, 0x2f, 0x4c, 0x20, 0xba, 0xed, 0xca, 0x05, 0xc9,
    0x6d, 0x6c, 0xd5, 0x48, 0xad, 0x9d, 0x63, 0xe2, 0xc9, 0x67, 0x14, 0x96, 0x01, 0xfd, 0x4e, 0xfe,
    0x1b, 0x9b, 0x2d, 0x00, 0x32, 0xfe, 0x93, 0x29, 0xda, 0x53, 0x3a, 0x40, 0x2e, 0xa7, 0xd4, 0x94,
    0xc7, 0x67, 0x48, 0xd8, 0x96, 0x59, 0xbd, 0xff, 0xfb, 0x63, 0x50, 0x85, 0xd5, 0xa6, 0xe4, 0x36,
    0x91, 0xcf, 0x57, 0x3f, 0xa7, 0x20, 0x97, 0x25, 0xcf, 0xcd, 0x5f, 0x9b, 0xe7, 0x36,
};

static const MessageEncodingTestVector sMessageEncodingTest0499 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE578B935,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0499_Payload,
    sizeof(sMessageEncodingTest0499_Payload),
    sMessageEncodingTest0499_ExpectedEncoding,
    sizeof(sMessageEncodingTest0499_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0500_EncryptionKey =
{
    {
        0x84, 0x14, 0x71, 0xe5, 0x29, 0x44, 0x34, 0xf8, 0xe0, 0xc7, 0xaf, 0x85, 0xec, 0xd8, 0x40, 0xfd,
    },
    {
        0xf7, 0xaa, 0xbf, 0x6e, 0x7c, 0x1e, 0xe1, 0x8c, 0x65, 0x56, 0xb7, 0x86, 0x6d, 0x20, 0xd9, 0x52,
        0x37, 0xc7, 0x8b, 0x3e,
    }
};
static const uint8_t sMessageEncodingTest0500_Payload[] =
{
    0xde, 0xd4, 0xea, 0xc7, 0xee, 0xe7, 0xb6, 0x09, 0xe7, 0xac, 0x73, 0x7d, 0xcb, 0xa8, 0x87, 0x28,
    0x0e, 0x93, 0xcb, 0x7b, 0x7a, 0x3a, 0xed, 0x16, 0x62, 0xb7, 0xa5, 0x00, 0x13, 0x2e, 0x9b, 0x7e,
    0x35, 0x60, 0x02, 0xa0, 0x44, 0x67, 0x85, 0x34, 0xc6, 0x91, 0xa9, 0xd9, 0xff, 0x02, 0xd0, 0x87,
    0xb4, 0x9c, 0x9a, 0x37, 0xf5, 0x19, 0xc2, 0x57, 0xa9, 0x4b, 0x46, 0x7c, 0xea, 0x42, 0x3a, 0x72,
    0x4e, 0xc7, 0x90, 0xf2, 0x90, 0x4b, 0xcc, 0x47, 0xf4, 0x51, 0x83, 0x48, 0xf1, 0x11, 0x42, 0x25,
    0x79, 0x23, 0xa5, 0xe2, 0x18, 0xf4, 0x13, 0xc0, 0xaa, 0x7a, 0x31, 0xe1, 0x2a, 0xc8, 0x02, 0xdb,
    0xe7, 0x6e, 0xa3, 0xa3, 0xc0, 0xf9, 0x9b, 0x1e, 0xed, 0x40, 0xc4, 0x0a, 0xf0, 0x26, 0xcb, 0xa6,
    0xc7, 0x72, 0x97, 0x69, 0xf1, 0xb6, 0x77, 0xa9, 0x70, 0xf7, 0xe5, 0x4c, 0xd4, 0x88, 0xa2, 0x8c,
};

static const uint8_t sMessageEncodingTest0500_ExpectedEncoding[] =
{
    0x10, 0x21, 0xb7, 0xea, 0x50, 0x52, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x4f, 0x27,
    0x76, 0xf9, 0x08, 0x5e, 0x9d, 0xaa, 0x41, 0xb9, 0x14, 0x89, 0xa8, 0x25, 0xee, 0xed, 0x8d, 0xff,
    0x1f, 0x20, 0x6c, 0x70, 0x83, 0xc2, 0x91, 0x7e, 0x1c, 0xba, 0x34, 0xf3, 0xf6, 0x51, 0x4c, 0x3f,
    0xdc, 0x53, 0x01, 0x94, 0x6a, 0xa2, 0xd7, 0x28, 0x19, 0xa4, 0x68, 0xd5, 0x21, 0x5f, 0x7b, 0xe1,
    0x3a, 0x6d, 0x4d, 0x52, 0xcd, 0x29, 0xb9, 0x58, 0x00, 0x3b, 0xb1, 0xad, 0xa0, 0x6e, 0xfc, 0x34,
    0x93, 0xeb, 0x18, 0x0d, 0x74, 0xd0, 0x33, 0x3d, 0x37, 0xc5, 0xc7, 0x66, 0x58, 0xd1, 0xfc, 0x74,
    0x9c, 0xb1, 0x62, 0xf5, 0x2c, 0xdc, 0x12, 0xf9, 0xaa, 0x20, 0xc2, 0x8b, 0x8d, 0x8d, 0x3b, 0x80,
    0x19, 0x0b, 0x73, 0x6a, 0x75, 0xfa, 0xd1, 0x74, 0x35, 0x0b, 0xd6, 0xe7, 0x56, 0x6f, 0x4c, 0x6e,
    0x6f, 0x47, 0xb0, 0x6e, 0xb7, 0xe3, 0x0e, 0xae, 0x68, 0x8a, 0xbe, 0x77, 0x06, 0x01, 0xf0, 0xe8,
    0xd6, 0xd6, 0x6e, 0xad, 0xbf, 0x8b, 0x86, 0x98, 0x5f, 0xfd, 0x86, 0xf3, 0x64, 0x8f, 0xb5, 0xdd,
    0xc9, 0x2d, 0x2e, 0x4a,
};

static const MessageEncodingTestVector sMessageEncodingTest0500 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x5250EAB7,
        kWeaveHeaderFlag_DestNodeId,
        0x274F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0500_EncryptionKey,
    sMessageEncodingTest0500_Payload,
    sizeof(sMessageEncodingTest0500_Payload),
    sMessageEncodingTest0500_ExpectedEncoding,
    sizeof(sMessageEncodingTest0500_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0501_EncryptionKey =
{
    {
        0x39, 0xb0, 0x0a, 0x5d, 0x98, 0xc8, 0xf0, 0x20, 0x67, 0x13, 0x64, 0xb9, 0x59, 0x36, 0x54, 0xd1,
    }
};
static const uint8_t sMessageEncodingTest0501_Payload[] =
{
    0x45, 0xfe, 0x62, 0xce, 0x0c, 0xa7, 0xf9, 0xb5, 0xbc, 0x22, 0x00, 0x33, 0x21, 0x98, 0xf1, 0xd0,
    0x25, 0x05, 0xd3, 0xf7, 0xc9, 0x2a, 0x7e, 0xac, 0x86, 0x8c, 0xe0, 0xf2, 0x6b, 0xea, 0xc1, 0xdd,
    0x71, 0xb1, 0x81, 0x56, 0xd5, 0x3a, 0x0e, 0xcc, 0x20, 0x43, 0x5a, 0xd5, 0xbf, 0xa7, 0x0d, 0xc8,
    0xd1, 0xf2, 0x2a, 0x97, 0xa4, 0x71, 0x3c, 0x97, 0x92, 0xed, 0xa7, 0x96, 0x45, 0x62, 0xdc, 0x5a,
    0xe2, 0x65, 0x59, 0x17, 0xc0, 0x81, 0x85, 0x6a, 0xa4, 0xe3, 0x77, 0x05, 0x6e, 0x29, 0x99, 0xd9,
    0x96, 0xfa, 0x2c, 0xe4, 0xba, 0xbd, 0xaa, 0x32, 0xb7, 0x4e, 0x5d, 0xab, 0x38, 0xfc, 0x7f, 0xdc,
    0xb6, 0x3a, 0x12, 0x8d, 0xe5, 0x61, 0xf5, 0x17, 0xb3, 0xe7, 0x01, 0x38, 0x1b, 0xe3, 0x15, 0x0f,
    0x6f, 0x61, 0xd4, 0xa7, 0xd7, 0x1e, 0xc7, 0x33, 0x87, 0x71, 0xef, 0xb1, 0x3e, 0x3d, 0xdd, 0x86,
};

static const uint8_t sMessageEncodingTest0501_ExpectedEncoding[] =
{
    0x20, 0x21, 0xc4, 0x31, 0xb1, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf4, 0x2b,
    0xb5, 0xb7, 0x5a, 0x0a, 0x85, 0x4e, 0xf5, 0x69, 0x99, 0x2f, 0x64, 0x24, 0x0e, 0x69, 0xa2, 0x32,
    0x70, 0x02, 0xfd, 0x9a, 0x80, 0x09, 0x7a, 0xbc, 0xec, 0xb6, 0xcd, 0x19, 0x67, 0xd7, 0x12, 0xb2,
    0x21, 0xef, 0x5f, 0xf0, 0x09, 0x79, 0xf7, 0x90, 0x24, 0x6c, 0xdc, 0x71, 0x21, 0x16, 0x10, 0xb6,
    0xbb, 0x42, 0xc2, 0xd1, 0x13, 0xa5, 0x1d, 0xe2, 0x4b, 0x47, 0xfc, 0x49, 0x45, 0xef, 0x5a, 0x59,
    0x6c, 0x66, 0xbd, 0x02, 0xe6, 0x7f, 0x55, 0x2b, 0x29, 0x94, 0x30, 0x63, 0x74, 0x54, 0x28, 0xbf,
    0xf5, 0x96, 0xbf, 0xa1, 0x04, 0x84, 0xa0, 0x88, 0x86, 0x28, 0x33, 0x0b, 0xee, 0xd2, 0x6c, 0x13,
    0xf3, 0xb9, 0xc1, 0xbc, 0x03, 0x5c, 0x52, 0xdf, 0x59, 0x11, 0xac, 0x5f, 0x3a, 0xfc, 0xc4, 0xe3,
    0xb0, 0x58, 0xc6, 0x29, 0x51, 0xc5, 0x12, 0xf0, 0x3b, 0x2f, 0xda, 0x5b, 0xd0, 0x82, 0x38, 0xe1,
    0x2a, 0xce, 0xb0, 0xd7, 0xb0, 0xf3, 0x06, 0xe3,
};

static const MessageEncodingTestVector sMessageEncodingTest0501 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0EB131C4,
        kWeaveHeaderFlag_DestNodeId,
        0x2BF4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0501_EncryptionKey,
    sMessageEncodingTest0501_Payload,
    sizeof(sMessageEncodingTest0501_Payload),
    sMessageEncodingTest0501_ExpectedEncoding,
    sizeof(sMessageEncodingTest0501_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0502_EncryptionKey =
{
    {
        0xc9, 0xc3, 0x96, 0xe1, 0x91, 0xcf, 0xc4, 0x4f, 0x47, 0xcb, 0x4c, 0x42, 0x71, 0x18, 0xff, 0xec,
    }
};
static const uint8_t sMessageEncodingTest0502_Payload[] =
{
    0xeb, 0x0d, 0x2b, 0xb6, 0x9e, 0x70, 0x46, 0x61, 0x46, 0x61, 0xf5, 0x0c, 0x6e, 0x65, 0xe2, 0x99,
    0x6d, 0x92, 0x45, 0x1d, 0x17, 0x1e, 0x4d, 0x4c, 0xfc, 0x2c, 0x48, 0x1e, 0x7b, 0x6e, 0xa2, 0x07,
    0x5e, 0xc1, 0xcc, 0x62, 0x59, 0x50, 0x89, 0x94, 0x68, 0xc2, 0x44, 0xdd, 0x26, 0x9b, 0xc1, 0x44,
    0xec, 0x1f, 0xbf, 0x68, 0x78, 0x6b, 0x8e, 0x71, 0xcd, 0x88, 0xb8, 0x04, 0x15, 0x2e, 0xa6, 0x06,
    0x37, 0x85, 0x8a, 0xb4, 0x59, 0xf6, 0x2e, 0xba, 0x84, 0xb7, 0x8a, 0xfd, 0x26, 0x4c, 0xd3, 0x36,
    0x9a, 0x76, 0x9b, 0x89, 0x0e, 0xe9, 0xaf, 0xef, 0x36, 0x13, 0x92, 0x13, 0xf6, 0xf0, 0x88, 0xc3,
    0x3f, 0x3a, 0xda, 0xbd, 0x6b, 0xaf, 0x54, 0xe8, 0xeb, 0x12, 0xc1, 0xf8, 0xd9, 0x2e, 0x34, 0xeb,
    0x3d, 0xdb, 0x98, 0x8f, 0xac, 0x6e, 0x68, 0x3f, 0x8a, 0x68, 0xc5, 0xb5, 0x52, 0x80, 0x25, 0xaa,
};

static const uint8_t sMessageEncodingTest0502_ExpectedEncoding[] =
{
    0x30, 0x21, 0x03, 0x91, 0x25, 0x8f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x36, 0x2d,
    0xfd, 0xd8, 0x41, 0x3e, 0xfe, 0x00, 0x8b, 0x31, 0x57, 0xcf, 0x51, 0x8a, 0xe5, 0x6b, 0x7b, 0xf1,
    0x14, 0xcb, 0x0b, 0x94, 0x92, 0x2e, 0x16, 0xac, 0xb3, 0x6e, 0xa9, 0x14, 0xd7, 0xf3, 0xa3, 0x64,
    0x20, 0xac, 0x56, 0x9f, 0x2d, 0x54, 0xc3, 0x5f, 0x7f, 0x9b, 0xeb, 0x52, 0x48, 0xda, 0x68, 0xa8,
    0x8c, 0xd6, 0xc6, 0x9f, 0x73, 0xcc, 0xf3, 0xba, 0x2f, 0xc2, 0xaf, 0xd0, 0x5c, 0x5b, 0x75, 0xe3,
    0x4c, 0x1f, 0x61, 0xc5, 0x8b, 0x7d, 0x84, 0x73, 0x79, 0xda, 0x85, 0xce, 0x6e, 0x23, 0x8c, 0x09,
    0x73, 0x13, 0xd3, 0xee, 0x94, 0xca, 0xac, 0x7a, 0xcb, 0xfe, 0xf0, 0xc0, 0xde, 0xf3, 0x76, 0x17,
    0x7e, 0xa8, 0x74, 0x29, 0x04, 0x77, 0x07, 0x3b, 0x2b, 0x02, 0xc3, 0x76, 0x98, 0xe6, 0xc5, 0x73,
    0x73, 0x0e, 0x5f, 0xb1, 0xac, 0x6e, 0x16, 0x2a, 0x8e, 0xad, 0x3a, 0xc2, 0xca, 0x13, 0xf2, 0x2b,
    0xe1, 0xf5, 0x0b, 0x7d, 0xc9, 0xbf, 0x57, 0x32, 0xc9, 0x4b, 0x99, 0x3b, 0xad, 0xe4, 0xe8, 0x8b,
};

static const MessageEncodingTestVector sMessageEncodingTest0502 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x8F259103,
        kWeaveHeaderFlag_DestNodeId,
        0x2D36,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0502_EncryptionKey,
    sMessageEncodingTest0502_Payload,
    sizeof(sMessageEncodingTest0502_Payload),
    sMessageEncodingTest0502_ExpectedEncoding,
    sizeof(sMessageEncodingTest0502_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0503_Payload[] =
{
    0x1a, 0x31, 0x4e, 0xa7, 0x56, 0x2e, 0x4a, 0x79, 0xd9, 0xd9, 0xea, 0x8f, 0x5c, 0x7e, 0xa6, 0x6e,
    0x14, 0x37, 0xfd, 0x04, 0x27, 0x09, 0xcc, 0xf9, 0xdf, 0xd8, 0xd5, 0xc7, 0xef, 0x89, 0xb0, 0x44,
    0x69, 0xd5, 0x50, 0xc9, 0x6e, 0x23, 0x7e, 0x91, 0xf1, 0xbe, 0xf0, 0xf0, 0xb7, 0xc9, 0xfa, 0x58,
    0xdd, 0xde, 0xcf, 0x66, 0xb2, 0xcd, 0xd7, 0x55, 0xe0, 0xd9, 0xf7, 0x56, 0x42, 0x71, 0x43, 0xf4,
    0xd1, 0x40, 0x19, 0x48, 0xe9, 0xac, 0xaa, 0xe6, 0x74, 0x13, 0xbe, 0x98, 0xe7, 0x69, 0xa4, 0xf0,
    0x58, 0x7d, 0x44, 0x88, 0x89, 0x4a, 0x05, 0x59, 0x8c, 0x4c, 0x53, 0x5a, 0x71, 0xe2, 0x14, 0xa4,
    0xfc, 0xf8, 0x7e, 0xd0, 0x01, 0xd6, 0xeb, 0x68, 0xe2, 0x5d, 0x67, 0x59, 0x4c, 0x99, 0x66, 0xdf,
    0xed, 0x5e, 0xa1, 0xa9, 0xc1, 0xb5, 0x60, 0x70, 0xc0, 0xda, 0x9d, 0xea, 0xd7, 0xbc, 0x4f, 0xc4,
};

static const uint8_t sMessageEncodingTest0503_ExpectedEncoding[] =
{
    0x00, 0x26, 0xc3, 0x3c, 0x1a, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x1a, 0x31,
    0x4e, 0xa7, 0x56, 0x2e, 0x4a, 0x79, 0xd9, 0xd9, 0xea, 0x8f, 0x5c, 0x7e, 0xa6, 0x6e, 0x14, 0x37,
    0xfd, 0x04, 0x27, 0x09, 0xcc, 0xf9, 0xdf, 0xd8, 0xd5, 0xc7, 0xef, 0x89, 0xb0, 0x44, 0x69, 0xd5,
    0x50, 0xc9, 0x6e, 0x23, 0x7e, 0x91, 0xf1, 0xbe, 0xf0, 0xf0, 0xb7, 0xc9, 0xfa, 0x58, 0xdd, 0xde,
    0xcf, 0x66, 0xb2, 0xcd, 0xd7, 0x55, 0xe0, 0xd9, 0xf7, 0x56, 0x42, 0x71, 0x43, 0xf4, 0xd1, 0x40,
    0x19, 0x48, 0xe9, 0xac, 0xaa, 0xe6, 0x74, 0x13, 0xbe, 0x98, 0xe7, 0x69, 0xa4, 0xf0, 0x58, 0x7d,
    0x44, 0x88, 0x89, 0x4a, 0x05, 0x59, 0x8c, 0x4c, 0x53, 0x5a, 0x71, 0xe2, 0x14, 0xa4, 0xfc, 0xf8,
    0x7e, 0xd0, 0x01, 0xd6, 0xeb, 0x68, 0xe2, 0x5d, 0x67, 0x59, 0x4c, 0x99, 0x66, 0xdf, 0xed, 0x5e,
    0xa1, 0xa9, 0xc1, 0xb5, 0x60, 0x70, 0xc0, 0xda, 0x9d, 0xea, 0xd7, 0xbc, 0x4f, 0xc4,
};

static const MessageEncodingTestVector sMessageEncodingTest0503 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x121A3CC3,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0503_Payload,
    sizeof(sMessageEncodingTest0503_Payload),
    sMessageEncodingTest0503_ExpectedEncoding,
    sizeof(sMessageEncodingTest0503_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0504_EncryptionKey =
{
    {
        0x71, 0x91, 0xb9, 0xa0, 0x9a, 0x71, 0xfe, 0x25, 0xdb, 0x00, 0x9c, 0xf0, 0x6d, 0x81, 0x3d, 0x60,
    },
    {
        0x17, 0xa8, 0xe2, 0xbf, 0x40, 0xdf, 0xbb, 0xee, 0xdd, 0x7c, 0xad, 0xdb, 0xea, 0xef, 0x07, 0xd5,
        0x80, 0xd0, 0x5e, 0xf4,
    }
};
static const uint8_t sMessageEncodingTest0504_Payload[] =
{
    0x44, 0x5e, 0xc1, 0x60, 0x9f, 0x18, 0x1a, 0x5b, 0x15, 0x58, 0x53, 0x6f, 0x82, 0xce, 0xa7, 0xe0,
    0x82, 0xf6, 0x5b, 0x7f, 0x02, 0x3d, 0xb5, 0x0d, 0x09, 0x50, 0x7f, 0x6c, 0x0c, 0x37, 0xab, 0x5e,
    0x0c, 0xd1, 0x05, 0xbb, 0xca, 0x23, 0xc6, 0x09, 0x70, 0x48, 0x17, 0x34, 0xe3, 0x10, 0x0f, 0x1c,
    0x00, 0x58, 0xda, 0x08, 0x15, 0x36, 0x8c, 0xd4, 0x06, 0x6a, 0xeb, 0x94, 0x42, 0xa7, 0x90, 0xd0,
    0xbb, 0xbc, 0xe0, 0xe2, 0xd6, 0x4a, 0x7f, 0x56, 0x2f, 0x84, 0xed, 0xab, 0x44, 0x3d, 0xc2, 0xc3,
    0x40, 0xe7, 0xc0, 0x72, 0x58, 0x46, 0xe4, 0xf1, 0xb2, 0x9b, 0x07, 0x80, 0x44, 0x62, 0x28, 0x33,
    0x9f, 0x68, 0xa6, 0x6c, 0x5a, 0x9d, 0xa1, 0x6a, 0xea, 0xa5, 0x49, 0x59, 0xd7, 0x08, 0xc7, 0x06,
    0xc1, 0x0d, 0x0e, 0xd1, 0xbc, 0xa4, 0xa7, 0x7b, 0x05, 0x53, 0x2a, 0xe7, 0xb6, 0x7c, 0xfc, 0x2f,
};

static const uint8_t sMessageEncodingTest0504_ExpectedEncoding[] =
{
    0x10, 0x26, 0x20, 0x67, 0x95, 0x53, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x72, 0x25,
    0xba, 0xa3, 0x48, 0x7b, 0xbd, 0xd4, 0x34, 0xec, 0xfd, 0x1a, 0x73, 0xd6, 0x39, 0x55, 0x8b, 0xce,
    0x8b, 0x73, 0x6d, 0x0b, 0x9e, 0xbc, 0xd3, 0x61, 0x3a, 0x0e, 0xa8, 0x81, 0xc3, 0x07, 0xe3, 0x07,
    0xc0, 0x79, 0x2f, 0xd4, 0x90, 0x6f, 0x14, 0x24, 0x6c, 0x48, 0xdf, 0x8d, 0x45, 0x69, 0x2d, 0x21,
    0x6d, 0x33, 0x62, 0x63, 0xb7, 0xc0, 0x23, 0x51, 0xf5, 0x2b, 0x95, 0x74, 0xd6, 0x18, 0xe7, 0x00,
    0xd1, 0x76, 0x94, 0xc2, 0x2e, 0x12, 0xa8, 0xc7, 0xa2, 0xdb, 0x9b, 0x2c, 0xb9, 0xdb, 0x4e, 0xd3,
    0xc2, 0x63, 0xb0, 0xd8, 0x06, 0x27, 0x07, 0xb6, 0x1e, 0x65, 0xd3, 0xab, 0xc9, 0x33, 0xb7, 0xf9,
    0x61, 0x7f, 0xa9, 0x14, 0xeb, 0xb1, 0xac, 0x63, 0xa6, 0xf1, 0xca, 0xc5, 0x85, 0xed, 0xa4, 0x70,
    0xe8, 0x95, 0x0a, 0xf9, 0xfb, 0xcd, 0xbb, 0x7d, 0xd7, 0xa0, 0x51, 0x7c, 0xca, 0x94, 0x46, 0xf8,
    0xed, 0x69, 0x71, 0x36, 0x0a, 0x21, 0x8f, 0x56, 0x1f, 0x67, 0xbc, 0xda, 0xb2, 0x99, 0xe0, 0xc2,
    0x18, 0x26, 0xea, 0x19,
};

static const MessageEncodingTestVector sMessageEncodingTest0504 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x53956720,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2572,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0504_EncryptionKey,
    sMessageEncodingTest0504_Payload,
    sizeof(sMessageEncodingTest0504_Payload),
    sMessageEncodingTest0504_ExpectedEncoding,
    sizeof(sMessageEncodingTest0504_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0505_EncryptionKey =
{
    {
        0x17, 0x5d, 0x4e, 0x3d, 0xf5, 0xdf, 0x44, 0xff, 0xd8, 0xbd, 0x07, 0xbe, 0x62, 0xbd, 0x64, 0x24,
    }
};
static const uint8_t sMessageEncodingTest0505_Payload[] =
{
    0x40, 0x01, 0x2f, 0xa0, 0xd8, 0x76, 0xf2, 0xc6, 0x6a, 0x7d, 0x51, 0x63, 0x2d, 0xae, 0x02, 0xa7,
    0x9c, 0xfc, 0x35, 0xe4, 0xa3, 0x98, 0x33, 0x50, 0xd1, 0x1d, 0x87, 0x20, 0xc3, 0x2f, 0x1d, 0x4b,
    0xe2, 0x4f, 0x35, 0x49, 0x68, 0x7c, 0x69, 0x08, 0x06, 0x1e, 0xbb, 0x23, 0x23, 0x92, 0x90, 0x5c,
    0x90, 0xe3, 0xb8, 0x12, 0xfa, 0x70, 0x3f, 0x51, 0xfe, 0x77, 0x45, 0x41, 0x18, 0x3d, 0x75, 0x38,
    0x54, 0x54, 0x19, 0x87, 0xcb, 0x05, 0x30, 0x3b, 0x53, 0x4c, 0x17, 0x94, 0xac, 0x7f, 0xc7, 0x08,
    0x17, 0x25, 0xfa, 0x5e, 0xd8, 0x59, 0x6b, 0x05, 0x20, 0x61, 0x91, 0x28, 0xd7, 0x21, 0x26, 0xd0,
    0x25, 0xb8, 0x62, 0x56, 0xb9, 0x72, 0xe9, 0xb5, 0xa4, 0xc5, 0x1d, 0x6b, 0x23, 0xd9, 0x1a, 0x28,
    0x3b, 0x7e, 0xb7, 0x9e, 0x40, 0xd1, 0xd6, 0x7b, 0x2c, 0x17, 0x19, 0x15, 0x61, 0x08, 0x5f, 0xc1,
};

static const uint8_t sMessageEncodingTest0505_ExpectedEncoding[] =
{
    0x20, 0x26, 0x1a, 0x9f, 0x26, 0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8d, 0x29,
    0xf6, 0xba, 0x75, 0x74, 0x33, 0xea, 0x97, 0x89, 0x06, 0xf9, 0x41, 0x35, 0x84, 0xb8, 0xab, 0xe8,
    0x92, 0x27, 0xad, 0x9f, 0xf4, 0x6f, 0x2f, 0xa9, 0xd4, 0x54, 0x07, 0x43, 0x03, 0x80, 0xc5, 0xf5,
    0x23, 0xe1, 0xe5, 0xcc, 0x33, 0x50, 0xe4, 0x30, 0x62, 0xbe, 0x24, 0xaa, 0x92, 0xd5, 0xf8, 0x2b,
    0xb6, 0xd8, 0x9e, 0xe9, 0x32, 0x49, 0xf0, 0x0b, 0x86, 0xab, 0x58, 0x34, 0xc4, 0x6b, 0x62, 0xe1,
    0x66, 0x1d, 0xe7, 0x25, 0x07, 0xb6, 0x5b, 0x6b, 0x35, 0xb8, 0xbc, 0x82, 0xe3, 0xad, 0x29, 0xae,
    0x32, 0xd8, 0xf5, 0x13, 0x13, 0xf6, 0xaa, 0xa5, 0x1e, 0xa1, 0xce, 0xbe, 0x77, 0x5d, 0xe5, 0xa7,
    0x8d, 0xd3, 0x5a, 0xad, 0x31, 0xd3, 0x8b, 0x52, 0x87, 0xe9, 0x52, 0xe7, 0x6b, 0x6d, 0x5b, 0xdb,
    0xde, 0x7a, 0x3e, 0x57, 0x49, 0xdf, 0xc7, 0x6e, 0x49, 0x41, 0xff, 0x64, 0xa8, 0xe6, 0x37, 0x5f,
    0xce, 0xd5, 0x14, 0x1c, 0x63, 0xfc, 0xfb, 0xd5,
};

static const MessageEncodingTestVector sMessageEncodingTest0505 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x19269F1A,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x298D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0505_EncryptionKey,
    sMessageEncodingTest0505_Payload,
    sizeof(sMessageEncodingTest0505_Payload),
    sMessageEncodingTest0505_ExpectedEncoding,
    sizeof(sMessageEncodingTest0505_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0506_EncryptionKey =
{
    {
        0x74, 0x8f, 0x61, 0x5a, 0x08, 0x39, 0xee, 0x96, 0xb3, 0xf9, 0xac, 0x15, 0xb8, 0xc7, 0x8a, 0x40,
    }
};
static const uint8_t sMessageEncodingTest0506_Payload[] =
{
    0xb1, 0x3c, 0x4d, 0x93, 0x13, 0x78, 0x8a, 0x2a, 0x76, 0x9e, 0xdc, 0x92, 0x55, 0x39, 0x5e, 0x5f,
    0x79, 0xe7, 0xb2, 0x24, 0x1c, 0x40, 0x8a, 0x45, 0xe3, 0x8a, 0x1d, 0x24, 0x60, 0x35, 0x13, 0xe0,
    0x96, 0x77, 0xca, 0x73, 0x56, 0x39, 0xe7, 0xc3, 0xe8, 0x74, 0xcf, 0xf6, 0xde, 0x22, 0x4d, 0x50,
    0x74, 0x0a, 0x0c, 0xdd, 0x88, 0xaa, 0x70, 0x5c, 0xf1, 0xcf, 0xfb, 0x41, 0x2d, 0xab, 0x8e, 0xd2,
    0xba, 0xdb, 0xad, 0x31, 0x40, 0xba, 0x94, 0xb9, 0x14, 0xc8, 0xfc, 0x61, 0xba, 0x3b, 0x4f, 0x72,
    0x18, 0xde, 0x42, 0x8a, 0x6c, 0x64, 0x29, 0x7b, 0x4d, 0xab, 0xf1, 0xfa, 0x5d, 0x24, 0x8b, 0xdc,
    0xb8, 0xdb, 0x03, 0x6f, 0x37, 0xaa, 0x7b, 0x6b, 0x8e, 0xa9, 0xe5, 0xd3, 0xef, 0x6c, 0x2e, 0x2f,
    0xf9, 0x64, 0x5a, 0xcc, 0xcf, 0x3a, 0x10, 0xf0, 0xb2, 0x0d, 0x1e, 0xd7, 0xb0, 0x79, 0xf4, 0x8b,
};

static const uint8_t sMessageEncodingTest0506_ExpectedEncoding[] =
{
    0x30, 0x26, 0xb6, 0x79, 0x58, 0xf5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc2, 0x24,
    0x0a, 0x8e, 0xeb, 0x71, 0x29, 0xa7, 0xfe, 0x86, 0x6f, 0x0f, 0x39, 0xcc, 0x04, 0x65, 0x02, 0x2d,
    0x5e, 0x7e, 0x2c, 0xbb, 0x8b, 0xc6, 0x90, 0xd0, 0xfb, 0x50, 0x95, 0x42, 0x5a, 0x6a, 0x07, 0xbf,
    0xd0, 0x7e, 0x42, 0x4a, 0x21, 0x25, 0x35, 0xc9, 0x99, 0x93, 0x7a, 0x77, 0x53, 0x48, 0x42, 0xcf,
    0x96, 0xf1, 0x86, 0x8c, 0x74, 0x50, 0xfd, 0xc7, 0x7d, 0x3b, 0x95, 0x6e, 0x0a, 0x18, 0xa8, 0xc5,
    0xd4, 0x96, 0xc9, 0x02, 0x93, 0x01, 0xac, 0x4c, 0xc6, 0x2a, 0x1f, 0x59, 0xbe, 0xca, 0x5d, 0x48,
    0x07, 0x75, 0xaf, 0xce, 0xbb, 0xa3, 0x6a, 0xb2, 0x2e, 0x80, 0x99, 0xff, 0xa3, 0x1d, 0x90, 0x12,
    0x4e, 0xbb, 0xf1, 0x7e, 0x12, 0x96, 0x1f, 0x1b, 0x91, 0x34, 0x65, 0xb7, 0x69, 0x31, 0xce, 0x23,
    0x58, 0x1f, 0x00, 0xf0, 0xf6, 0xcf, 0xea, 0x83, 0x6f, 0xd7, 0x88, 0x86, 0xcb, 0x30, 0x9a, 0xea,
    0xf8, 0x61, 0x0f, 0x52, 0x89, 0xb8, 0x54, 0x10, 0xab, 0xa5, 0x75, 0x48, 0xd7, 0xfa, 0xb3, 0x1e,
};

static const MessageEncodingTestVector sMessageEncodingTest0506 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF55879B6,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x24C2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0506_EncryptionKey,
    sMessageEncodingTest0506_Payload,
    sizeof(sMessageEncodingTest0506_Payload),
    sMessageEncodingTest0506_ExpectedEncoding,
    sizeof(sMessageEncodingTest0506_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0507_Payload[] =
{
    0x6b, 0x97, 0x01, 0x99, 0x89, 0x82, 0xa1, 0x68, 0x2b, 0x8d, 0x31, 0x6f, 0xce, 0x9b, 0x11, 0x62,
    0x2a, 0x2a, 0x55, 0xc9, 0x10, 0xa5, 0x41, 0xf6, 0xa5, 0x51, 0x2b, 0xd6, 0x99, 0x9c, 0xad, 0x7d,
    0xe1, 0x8b, 0x11, 0x56, 0x74, 0x54, 0xad, 0xb2, 0xda, 0x09, 0x82, 0x23, 0x93, 0xef, 0xba, 0x78,
    0x87, 0xd6, 0xfa, 0xca, 0x65, 0xfb, 0x50, 0x77, 0xb6, 0x14, 0x04, 0xb5, 0x59, 0xf5, 0x42, 0xd3,
    0xde, 0x6b, 0x50, 0x6a, 0x7b, 0x22, 0x30, 0xfc, 0x58, 0x44, 0x87, 0x65, 0x49, 0xf1, 0xb6, 0xb0,
    0x9a, 0x37, 0xf4, 0xa3, 0x55, 0x30, 0x96, 0xbf, 0xb5, 0x9a, 0x5a, 0xc0, 0x2e, 0xd8, 0x03, 0xa4,
    0xe2, 0x11, 0x09, 0xa5, 0x3c, 0xf9, 0xcb, 0x4b, 0x3a, 0x16, 0xc5, 0x75, 0x44, 0xbb, 0xca, 0xa6,
    0x01, 0x73, 0x62, 0xb9, 0x21, 0x56, 0x35, 0x65, 0x11, 0xe1, 0x7d, 0xfa, 0x8e, 0x5f, 0x73, 0xd4,
};

static const uint8_t sMessageEncodingTest0507_ExpectedEncoding[] =
{
    0x00, 0x2a, 0x5b, 0x5e, 0x73, 0xa1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x6b, 0x97,
    0x01, 0x99, 0x89, 0x82, 0xa1, 0x68, 0x2b, 0x8d, 0x31, 0x6f, 0xce, 0x9b, 0x11, 0x62, 0x2a, 0x2a,
    0x55, 0xc9, 0x10, 0xa5, 0x41, 0xf6, 0xa5, 0x51, 0x2b, 0xd6, 0x99, 0x9c, 0xad, 0x7d, 0xe1, 0x8b,
    0x11, 0x56, 0x74, 0x54, 0xad, 0xb2, 0xda, 0x09, 0x82, 0x23, 0x93, 0xef, 0xba, 0x78, 0x87, 0xd6,
    0xfa, 0xca, 0x65, 0xfb, 0x50, 0x77, 0xb6, 0x14, 0x04, 0xb5, 0x59, 0xf5, 0x42, 0xd3, 0xde, 0x6b,
    0x50, 0x6a, 0x7b, 0x22, 0x30, 0xfc, 0x58, 0x44, 0x87, 0x65, 0x49, 0xf1, 0xb6, 0xb0, 0x9a, 0x37,
    0xf4, 0xa3, 0x55, 0x30, 0x96, 0xbf, 0xb5, 0x9a, 0x5a, 0xc0, 0x2e, 0xd8, 0x03, 0xa4, 0xe2, 0x11,
    0x09, 0xa5, 0x3c, 0xf9, 0xcb, 0x4b, 0x3a, 0x16, 0xc5, 0x75, 0x44, 0xbb, 0xca, 0xa6, 0x01, 0x73,
    0x62, 0xb9, 0x21, 0x56, 0x35, 0x65, 0x11, 0xe1, 0x7d, 0xfa, 0x8e, 0x5f, 0x73, 0xd4,
};

static const MessageEncodingTestVector sMessageEncodingTest0507 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA1735E5B,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0507_Payload,
    sizeof(sMessageEncodingTest0507_Payload),
    sMessageEncodingTest0507_ExpectedEncoding,
    sizeof(sMessageEncodingTest0507_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0508_EncryptionKey =
{
    {
        0xb7, 0x7e, 0x82, 0xdd, 0x13, 0x11, 0x21, 0x17, 0x44, 0x08, 0xfa, 0xe2, 0x6a, 0x1e, 0x35, 0x59,
    },
    {
        0xbf, 0xc0, 0x50, 0xe7, 0x92, 0x5e, 0xf8, 0xaa, 0xe5, 0x80, 0x3c, 0x47, 0xaa, 0x1a, 0xb2, 0x76,
        0xf0, 0x8d, 0x4c, 0xbe,
    }
};
static const uint8_t sMessageEncodingTest0508_Payload[] =
{
    0xdc, 0xfa, 0xa5, 0xdc, 0x42, 0x1c, 0x41, 0x55, 0x30, 0xde, 0xbd, 0x2d, 0xde, 0xc0, 0x51, 0x52,
    0xae, 0xdf, 0x87, 0xf8, 0x58, 0x60, 0x36, 0x82, 0xac, 0x77, 0xee, 0x21, 0xfc, 0xb8, 0x27, 0x7a,
    0xe2, 0x91, 0xc2, 0x0e, 0xa4, 0x9a, 0xc1, 0xa4, 0x4e, 0x96, 0xd6, 0xa1, 0xfb, 0xf2, 0x6f, 0xdb,
    0x02, 0xc4, 0x2d, 0x60, 0x81, 0x68, 0xe7, 0x67, 0xd5, 0xfe, 0x5c, 0x55, 0x17, 0xac, 0xd4, 0x3a,
    0xe4, 0x58, 0x37, 0x64, 0xcd, 0x36, 0x46, 0xed, 0xc6, 0xfc, 0x0b, 0xb0, 0x0e, 0x3c, 0x99, 0x8e,
    0x5f, 0xaf, 0x6b, 0x49, 0x89, 0x9e, 0xf1, 0xa9, 0xf7, 0x01, 0x9a, 0xd3, 0x25, 0xfa, 0xbf, 0x09,
    0xb1, 0x3c, 0xed, 0xc2, 0x8e, 0x53, 0xad, 0x00, 0x2a, 0x51, 0x28, 0xe2, 0x9e, 0x9d, 0xf9, 0xbb,
    0x9b, 0x9c, 0x9c, 0xce, 0x8c, 0xe8, 0x62, 0x34, 0xf8, 0xa0, 0x31, 0x64, 0x03, 0x59, 0x2f, 0x32,
};

static const uint8_t sMessageEncodingTest0508_ExpectedEncoding[] =
{
    0x10, 0x2a, 0x1d, 0xbd, 0x8e, 0x8b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x11, 0x2a,
    0xf1, 0xd4, 0xea, 0xc7, 0xb9, 0x93, 0x9d, 0xba, 0x8c, 0x4a, 0xf4, 0x9a, 0xee, 0xa2, 0x20, 0xe4,
    0x6f, 0x66, 0x94, 0x47, 0x59, 0x26, 0xe2, 0xb5, 0x2b, 0x11, 0x77, 0x88, 0xed, 0x54, 0x69, 0x5c,
    0x1f, 0x57, 0x47, 0x9b, 0x0d, 0xae, 0x18, 0xf9, 0x24, 0x05, 0x26, 0x4c, 0x17, 0xb8, 0x7d, 0x6d,
    0x1a, 0x6d, 0x5c, 0xa0, 0xea, 0x5f, 0xd3, 0x1b, 0x9f, 0xbc, 0x07, 0x94, 0x3d, 0xf6, 0x2c, 0x75,
    0x96, 0xb7, 0xf6, 0x04, 0x8d, 0x09, 0x59, 0x46, 0xc8, 0x13, 0xb4, 0x3a, 0xf3, 0x8a, 0xee, 0xf0,
    0x14, 0x7c, 0x8e, 0xd1, 0x03, 0x00, 0xbf, 0x2e, 0x0f, 0xe2, 0xc9, 0x47, 0x5b, 0x65, 0x1f, 0x9f,
    0x60, 0xc2, 0x6d, 0x30, 0xdd, 0x3d, 0xf6, 0x5d, 0x37, 0xde, 0x2e, 0x46, 0x1d, 0xce, 0xf6, 0x40,
    0x0e, 0xd8, 0xff, 0x7f, 0x67, 0x68, 0xa3, 0x3c, 0xdc, 0x24, 0xf4, 0x3f, 0xbd, 0xd8, 0x6a, 0xb9,
    0x1d, 0x5e, 0x85, 0x79, 0xaf, 0x9c, 0x66, 0x1a, 0x04, 0x52, 0xa1, 0xc6, 0xa4, 0x91, 0xb5, 0x46,
    0x08, 0x91, 0xe8, 0x13,
};

static const MessageEncodingTestVector sMessageEncodingTest0508 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x8B8EBD1D,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A11,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0508_EncryptionKey,
    sMessageEncodingTest0508_Payload,
    sizeof(sMessageEncodingTest0508_Payload),
    sMessageEncodingTest0508_ExpectedEncoding,
    sizeof(sMessageEncodingTest0508_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0509_EncryptionKey =
{
    {
        0x86, 0x34, 0x91, 0x4b, 0x25, 0x89, 0xc8, 0xbe, 0x83, 0x92, 0x19, 0x12, 0xa0, 0xb6, 0x02, 0x06,
    }
};
static const uint8_t sMessageEncodingTest0509_Payload[] =
{
    0xa5, 0x1c, 0x04, 0x38, 0xa2, 0x4d, 0x2e, 0xab, 0x57, 0xa8, 0x57, 0x97, 0x5d, 0x35, 0x0f, 0x51,
    0x7a, 0x3a, 0xf5, 0x6f, 0x4f, 0x0e, 0x39, 0x23, 0xbf, 0x47, 0x74, 0xa1, 0x0e, 0x5e, 0x90, 0x96,
    0xaf, 0xf6, 0x77, 0xfc, 0x17, 0x7d, 0xa3, 0x33, 0x5b, 0xd9, 0x50, 0x7b, 0xbe, 0xfe, 0xcb, 0xe3,
    0xfa, 0xee, 0x5a, 0x43, 0x0f, 0x43, 0x54, 0xf7, 0x18, 0x6e, 0x0e, 0x27, 0x4c, 0x3e, 0x64, 0x75,
    0x62, 0xed, 0xa6, 0x64, 0x79, 0xe0, 0x44, 0xa2, 0xbb, 0xbc, 0xc3, 0xc3, 0x56, 0x34, 0xf9, 0xe7,
    0xc1, 0xa6, 0xeb, 0xa8, 0x90, 0xd5, 0x66, 0x9b, 0x57, 0x83, 0xad, 0x18, 0xf1, 0x31, 0x67, 0xb3,
    0x0d, 0x80, 0x42, 0x3f, 0xda, 0xfb, 0xfe, 0x7b, 0x1f, 0xf0, 0x18, 0xba, 0xa4, 0x3c, 0x20, 0x5c,
    0x39, 0x49, 0xf1, 0xdd, 0xd0, 0xf0, 0x02, 0x4d, 0x00, 0x6f, 0x92, 0xcd, 0xcc, 0x6e, 0x62, 0x61,
};

static const uint8_t sMessageEncodingTest0509_ExpectedEncoding[] =
{
    0x20, 0x2a, 0x03, 0x91, 0xe3, 0x62, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x61, 0x24,
    0xe6, 0x77, 0xb2, 0x7a, 0xa3, 0x7e, 0x27, 0x31, 0x4c, 0xcd, 0x61, 0x25, 0xa9, 0x47, 0x94, 0xee,
    0x74, 0xa1, 0xca, 0x5b, 0x15, 0x19, 0xd7, 0x62, 0xe5, 0x7c, 0x31, 0x78, 0x83, 0x21, 0xe0, 0x2c,
    0xf0, 0x80, 0x3c, 0x2a, 0x2e, 0x9c, 0x77, 0xb7, 0xc6, 0xc6, 0x51, 0x2b, 0x82, 0x25, 0x67, 0x20,
    0xef, 0x5f, 0x6b, 0xba, 0xf3, 0xf6, 0x0a, 0x41, 0x74, 0x30, 0x4d, 0x44, 0xa8, 0x94, 0xf9, 0x2c,
    0x97, 0xfe, 0x04, 0xeb, 0x30, 0x69, 0x2e, 0x49, 0x65, 0x8e, 0xa2, 0xc6, 0x1c, 0x0c, 0xdc, 0x9c,
    0x71, 0x29, 0x5c, 0x90, 0xe8, 0xc5, 0x3d, 0xfa, 0x69, 0x75, 0xbe, 0xb1, 0x51, 0x0e, 0x59, 0x0a,
    0xe3, 0x6d, 0x9a, 0x47, 0x9d, 0x5e, 0x5f, 0x02, 0x19, 0xcc, 0x1a, 0xdd, 0xe3, 0x80, 0xe2, 0xaa,
    0x84, 0xb5, 0x55, 0xb9, 0xcd, 0x8d, 0x1e, 0x08, 0x7d, 0x5f, 0x7b, 0x72, 0xd4, 0xf8, 0x94, 0xca,
    0x98, 0xa7, 0x9d, 0xab, 0xf4, 0x93, 0xde, 0xc9,
};

static const MessageEncodingTestVector sMessageEncodingTest0509 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x62E39103,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2461,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0509_EncryptionKey,
    sMessageEncodingTest0509_Payload,
    sizeof(sMessageEncodingTest0509_Payload),
    sMessageEncodingTest0509_ExpectedEncoding,
    sizeof(sMessageEncodingTest0509_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0510_EncryptionKey =
{
    {
        0xf1, 0xc1, 0xcd, 0x6b, 0x02, 0xec, 0x37, 0xf4, 0x99, 0xac, 0x4e, 0xab, 0xd3, 0x4b, 0x5b, 0x0c,
    }
};
static const uint8_t sMessageEncodingTest0510_Payload[] =
{
    0x3d, 0xad, 0x4c, 0x70, 0x83, 0xcb, 0x34, 0x64, 0x48, 0xfa, 0xcf, 0x7a, 0xb2, 0xc6, 0xf4, 0x0f,
    0x7e, 0xcc, 0xfb, 0x2e, 0x49, 0xa4, 0x32, 0x39, 0x65, 0x3a, 0x4f, 0xbf, 0xa2, 0x2b, 0x99, 0x18,
    0xb6, 0xdc, 0x61, 0xad, 0xc8, 0xb5, 0xbf, 0x6d, 0x29, 0x28, 0x17, 0x7b, 0xbe, 0xda, 0xc4, 0xb1,
    0x71, 0x5b, 0xa3, 0x88, 0xab, 0xd9, 0x03, 0x6a, 0xf9, 0x79, 0x77, 0xb0, 0x8a, 0xfa, 0x29, 0xd7,
    0x57, 0xa1, 0xdb, 0x51, 0xb5, 0x0b, 0x95, 0xe0, 0x4b, 0x69, 0x6c, 0xda, 0x07, 0x04, 0x97, 0x2d,
    0xcd, 0x36, 0x81, 0x5f, 0x39, 0x33, 0xac, 0xc6, 0x19, 0x24, 0x42, 0x21, 0xff, 0x70, 0xe3, 0x19,
    0x99, 0x33, 0xfd, 0x9e, 0x09, 0x2b, 0xe2, 0x72, 0xd2, 0xc0, 0xd3, 0xcd, 0x79, 0x58, 0x25, 0xf5,
    0xd0, 0xb2, 0xa6, 0xa0, 0xe3, 0xff, 0xef, 0x07, 0x45, 0x4e, 0x0d, 0x72, 0xe7, 0x3e, 0x24, 0xfe,
};

static const uint8_t sMessageEncodingTest0510_ExpectedEncoding[] =
{
    0x30, 0x2a, 0x02, 0x13, 0x56, 0x59, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xd2, 0x29,
    0x1b, 0xdd, 0xee, 0xcd, 0xce, 0x8a, 0xb4, 0xd3, 0x81, 0x5f, 0x6c, 0xfd, 0x39, 0x16, 0x74, 0x00,
    0xf4, 0x29, 0x45, 0x8a, 0xb6, 0x87, 0x43, 0xd3, 0xbe, 0x14, 0xa9, 0xe1, 0x44, 0xd6, 0x5b, 0x94,
    0x20, 0xa4, 0x7e, 0xd0, 0x32, 0x78, 0x6c, 0x7a, 0x36, 0x77, 0xb2, 0xb9, 0x7f, 0x13, 0x9d, 0x0b,
    0xda, 0xd9, 0xdd, 0x7f, 0x8b, 0x11, 0x90, 0x6d, 0xf9, 0xa0, 0xe3, 0x06, 0x99, 0x94, 0x1e, 0x13,
    0x7d, 0x47, 0x03, 0x49, 0x15, 0x1e, 0x63, 0xc2, 0xd3, 0xce, 0x9b, 0x3b, 0x3b, 0x56, 0x0c, 0x71,
    0xc4, 0x54, 0x34, 0x09, 0x4c, 0xae, 0x5c, 0x63, 0x42, 0xe8, 0x0c, 0x71, 0x35, 0xf4, 0xdd, 0xcc,
    0x5a, 0xff, 0xc0, 0x69, 0x68, 0x7b, 0x31, 0x7b, 0xb5, 0xe8, 0x08, 0xa9, 0xad, 0xf3, 0x7a, 0x95,
    0x91, 0x64, 0x28, 0x45, 0x57, 0xc0, 0x4c, 0x40, 0x8e, 0x23, 0x77, 0x19, 0x15, 0x8e, 0x13, 0x93,
    0xa5, 0x08, 0x46, 0xa6, 0x23, 0x02, 0xd4, 0x9a, 0x50, 0x7d, 0x80, 0x8d, 0xbf, 0x34, 0xe8, 0xde,
};

static const MessageEncodingTestVector sMessageEncodingTest0510 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x59561302,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x29D2,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0510_EncryptionKey,
    sMessageEncodingTest0510_Payload,
    sizeof(sMessageEncodingTest0510_Payload),
    sMessageEncodingTest0510_ExpectedEncoding,
    sizeof(sMessageEncodingTest0510_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0511_Payload[] =
{
    0xdc, 0x26, 0x69, 0xae, 0xc2, 0x6a, 0xfb, 0x76, 0x72, 0x7f, 0x16, 0xeb, 0x67, 0x0b, 0x92, 0x8e,
    0x50, 0x07, 0xd1, 0x74, 0x8d, 0xda, 0xf4, 0xa2, 0xcd, 0x77, 0x8f, 0x0d, 0xfd, 0x03, 0x37, 0xef,
    0x9c, 0x50, 0xd4, 0x9d, 0x0b, 0x1c, 0x8f, 0xb7, 0x60, 0xa8, 0xd4, 0xab, 0x63, 0x56, 0x99, 0x18,
    0x25, 0x07, 0x5c, 0xa6, 0x1a, 0x22, 0xeb, 0x9f, 0x18, 0xb1, 0xb4, 0x65, 0xf7, 0x74, 0x8c, 0x67,
    0xe1, 0xa4, 0xb1, 0x58, 0x23, 0xba, 0x0e, 0xfd, 0xcb, 0x69, 0x38, 0xcb, 0xc9, 0x95, 0xa8, 0xdb,
    0x8f, 0xe7, 0xba, 0xf7, 0x6b, 0x65, 0xef, 0x7a, 0x7b, 0xf8, 0xde, 0x76, 0x55, 0x09, 0x4d, 0xae,
    0xbd, 0x8e, 0x30, 0xe1, 0x37, 0xd1, 0x47, 0xeb, 0x02, 0x30, 0xc7, 0x4b, 0xb5, 0xff, 0x5e, 0x4c,
    0x03, 0x64, 0x1e, 0xc2, 0x47, 0x9d, 0x79, 0xe3, 0x4e, 0x2a, 0x1e, 0xf3, 0x0d, 0xe9, 0xd4, 0x11,
};

static const uint8_t sMessageEncodingTest0511_ExpectedEncoding[] =
{
    0x00, 0x22, 0xbd, 0x91, 0x03, 0xb1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xdc, 0x26,
    0x69, 0xae, 0xc2, 0x6a, 0xfb, 0x76, 0x72, 0x7f, 0x16, 0xeb, 0x67, 0x0b, 0x92, 0x8e, 0x50, 0x07,
    0xd1, 0x74, 0x8d, 0xda, 0xf4, 0xa2, 0xcd, 0x77, 0x8f, 0x0d, 0xfd, 0x03, 0x37, 0xef, 0x9c, 0x50,
    0xd4, 0x9d, 0x0b, 0x1c, 0x8f, 0xb7, 0x60, 0xa8, 0xd4, 0xab, 0x63, 0x56, 0x99, 0x18, 0x25, 0x07,
    0x5c, 0xa6, 0x1a, 0x22, 0xeb, 0x9f, 0x18, 0xb1, 0xb4, 0x65, 0xf7, 0x74, 0x8c, 0x67, 0xe1, 0xa4,
    0xb1, 0x58, 0x23, 0xba, 0x0e, 0xfd, 0xcb, 0x69, 0x38, 0xcb, 0xc9, 0x95, 0xa8, 0xdb, 0x8f, 0xe7,
    0xba, 0xf7, 0x6b, 0x65, 0xef, 0x7a, 0x7b, 0xf8, 0xde, 0x76, 0x55, 0x09, 0x4d, 0xae, 0xbd, 0x8e,
    0x30, 0xe1, 0x37, 0xd1, 0x47, 0xeb, 0x02, 0x30, 0xc7, 0x4b, 0xb5, 0xff, 0x5e, 0x4c, 0x03, 0x64,
    0x1e, 0xc2, 0x47, 0x9d, 0x79, 0xe3, 0x4e, 0x2a, 0x1e, 0xf3, 0x0d, 0xe9, 0xd4, 0x11,
};

static const MessageEncodingTestVector sMessageEncodingTest0511 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB10391BD,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0511_Payload,
    sizeof(sMessageEncodingTest0511_Payload),
    sMessageEncodingTest0511_ExpectedEncoding,
    sizeof(sMessageEncodingTest0511_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0512_EncryptionKey =
{
    {
        0x34, 0x0a, 0x38, 0xea, 0x30, 0x3f, 0x83, 0x95, 0x01, 0x57, 0x81, 0xaf, 0x9d, 0x04, 0xca, 0xae,
    },
    {
        0xec, 0xd6, 0xb0, 0x05, 0x54, 0xa2, 0x45, 0x76, 0x07, 0x35, 0xfe, 0xe5, 0xc5, 0xab, 0x4b, 0x2b,
        0x7f, 0x83, 0x59, 0xd1,
    }
};
static const uint8_t sMessageEncodingTest0512_Payload[] =
{
    0xc4, 0x07, 0x3c, 0x77, 0xec, 0x2b, 0x8c, 0x31, 0x1f, 0x67, 0x4f, 0x55, 0x64, 0xbf, 0x3e, 0x7b,
    0x60, 0x85, 0xf4, 0x0f, 0x20, 0x23, 0xe7, 0x91, 0x09, 0x7e, 0x35, 0xb2, 0x9c, 0x37, 0xb4, 0x5d,
    0x8c, 0xbc, 0xe7, 0x15, 0xd7, 0x9a, 0x58, 0x07, 0xb9, 0xc7, 0xad, 0xa0, 0x41, 0x32, 0x61, 0x48,
    0x29, 0x72, 0x81, 0xf9, 0xb1, 0xb4, 0x51, 0x31, 0x52, 0x69, 0xd4, 0x02, 0xfc, 0xf8, 0x44, 0x30,
    0xed, 0x1e, 0xd2, 0xed, 0xbc, 0xf3, 0x96, 0xe0, 0xb9, 0x07, 0x7b, 0x77, 0x40, 0xb8, 0xf0, 0x60,
    0x95, 0xc7, 0x11, 0xb9, 0x83, 0x5c, 0x65, 0xe4, 0x81, 0x6d, 0xb5, 0x8c, 0x9f, 0xb4, 0x14, 0x0b,
    0x8c, 0x0b, 0x6b, 0x9b, 0x7d, 0x66, 0x09, 0xf2, 0x8b, 0x19, 0x5e, 0x9e, 0x9b, 0xce, 0xa7, 0x02,
    0xe9, 0xff, 0x1c, 0xc6, 0xe6, 0xdd, 0xff, 0x6f, 0xf6, 0x2f, 0xf9, 0x77, 0x32, 0xbd, 0x24, 0x59,
};

static const uint8_t sMessageEncodingTest0512_ExpectedEncoding[] =
{
    0x10, 0x22, 0xe2, 0xde, 0x56, 0x49, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7a, 0x27,
    0x34, 0xe2, 0x8b, 0x2d, 0x08, 0x0d, 0x82, 0x34, 0x58, 0x5e, 0xdd, 0x10, 0x27, 0xbb, 0xd7, 0x08,
    0xdd, 0x84, 0xbb, 0x75, 0x09, 0x08, 0xaa, 0x52, 0x1a, 0xe1, 0x21, 0xed, 0x7d, 0x22, 0xaa, 0x24,
    0x2f, 0x87, 0xa7, 0xf8, 0xec, 0x76, 0xa3, 0x0f, 0x9b, 0xed, 0xe1, 0xbf, 0x00, 0xd5, 0xc0, 0x7e,
    0xf0, 0x14, 0xb1, 0xe9, 0x1c, 0xd6, 0x89, 0x6a, 0xf3, 0x62, 0x59, 0x9e, 0x29, 0x93, 0xc8, 0x2d,
    0x90, 0xf6, 0x10, 0x70, 0x3b, 0x8a, 0x0c, 0x2c, 0x44, 0x16, 0x97, 0x75, 0x68, 0x7b, 0x4b, 0xe1,
    0x1a, 0xa8, 0x62, 0xd9, 0x08, 0x71, 0xd5, 0xc1, 0x05, 0x23, 0xd6, 0xe2, 0x63, 0x1f, 0x9d, 0xe6,
    0xd3, 0x1c, 0x7f, 0xc7, 0x23, 0xe2, 0x19, 0x3d, 0x25, 0x62, 0x1b, 0x39, 0x53, 0xe8, 0x42, 0x13,
    0x2e, 0x1e, 0x9e, 0x90, 0x8f, 0x5f, 0x88, 0x88, 0x1f, 0x98, 0x55, 0x55, 0x2b, 0x26, 0x9c, 0x1d,
    0xe7, 0xfa, 0xb9, 0xac, 0x48, 0x40, 0x1b, 0x96, 0x77, 0x43, 0x8b, 0x67, 0x3b, 0xa7, 0xaa, 0x51,
    0x1c, 0x98, 0xf9, 0x87,
};

static const MessageEncodingTestVector sMessageEncodingTest0512 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4956DEE2,
        kWeaveHeaderFlag_SourceNodeId,
        0x277A,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0512_EncryptionKey,
    sMessageEncodingTest0512_Payload,
    sizeof(sMessageEncodingTest0512_Payload),
    sMessageEncodingTest0512_ExpectedEncoding,
    sizeof(sMessageEncodingTest0512_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0513_EncryptionKey =
{
    {
        0xf3, 0x70, 0xb1, 0x1c, 0x8b, 0xa1, 0xea, 0xbb, 0x77, 0x17, 0xb0, 0x20, 0x71, 0xfa, 0x59, 0x38,
    }
};
static const uint8_t sMessageEncodingTest0513_Payload[] =
{
    0xcc, 0xa1, 0x7a, 0x4c, 0x5b, 0xde, 0x38, 0x16, 0x33, 0x56, 0x76, 0x44, 0x31, 0xd3, 0x3a, 0x50,
    0xf9, 0x2a, 0x54, 0xe7, 0x32, 0xdd, 0x70, 0xb8, 0xc5, 0xe5, 0xb9, 0x67, 0x45, 0x06, 0xf8, 0x6a,
    0x8d, 0x3d, 0x5f, 0x97, 0xc1, 0x0e, 0xcd, 0x78, 0x17, 0xa2, 0x75, 0x93, 0x63, 0x5f, 0x4a, 0xed,
    0x6c, 0xb6, 0x42, 0x09, 0xa4, 0xd2, 0xda, 0x25, 0x58, 0x0d, 0x86, 0xf9, 0xe4, 0xfc, 0x28, 0x31,
    0x61, 0x42, 0xe9, 0x71, 0x46, 0xbc, 0x98, 0xfc, 0x08, 0x54, 0x81, 0x3c, 0x69, 0x7a, 0x64, 0x2b,
    0x89, 0xe1, 0x01, 0x60, 0x9d, 0xea, 0x4e, 0x97, 0xfd, 0x13, 0x38, 0xa8, 0x5d, 0x64, 0x4e, 0x84,
    0x09, 0xf3, 0x8f, 0x89, 0x04, 0x65, 0x0f, 0x35, 0x1a, 0x6e, 0x8b, 0x86, 0xaa, 0xf9, 0x47, 0xf4,
    0xdd, 0xec, 0x7a, 0x3c, 0xad, 0x63, 0x4e, 0x90, 0x37, 0x6a, 0x56, 0xcc, 0xad, 0x49, 0x48, 0xf5,
};

static const uint8_t sMessageEncodingTest0513_ExpectedEncoding[] =
{
    0x20, 0x22, 0x43, 0xa0, 0x04, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2e, 0x20,
    0xbf, 0x93, 0xec, 0x84, 0xdd, 0x39, 0x33, 0x9e, 0x42, 0x35, 0x1d, 0x85, 0x4a, 0x5f, 0xa8, 0x0b,
    0x07, 0x16, 0xd0, 0x23, 0xe5, 0x5d, 0x0c, 0x74, 0xfa, 0xe1, 0x90, 0xb1, 0xf5, 0x56, 0x22, 0xa8,
    0xf7, 0xc8, 0x5c, 0x9e, 0x73, 0xb1, 0x84, 0x5e, 0xc6, 0x94, 0xfb, 0x62, 0x65, 0xd1, 0xf9, 0x24,
    0x3e, 0x6f, 0x15, 0xda, 0x1c, 0xb6, 0xbc, 0x25, 0x9b, 0x22, 0xa1, 0x95, 0x71, 0xfc, 0x72, 0xa7,
    0xdd, 0x71, 0x6d, 0xb5, 0xc8, 0x0c, 0x3a, 0x79, 0x99, 0xa7, 0x6b, 0xee, 0x00, 0x5f, 0xa4, 0x39,
    0xc3, 0x96, 0x41, 0xb1, 0x9f, 0x35, 0xa4, 0xab, 0x81, 0x17, 0xfd, 0xc4, 0x49, 0x54, 0x44, 0x98,
    0x0e, 0xdd, 0x4d, 0x76, 0xcb, 0x09, 0x37, 0xbc, 0xd5, 0xe7, 0xf2, 0x55, 0x11, 0x76, 0xc3, 0x13,
    0x1e, 0xd3, 0x84, 0xae, 0x7c, 0x1b, 0x94, 0x1a, 0xa7, 0x99, 0x17, 0xd3, 0xe8, 0x59, 0x8b, 0x2a,
    0x94, 0x39, 0x28, 0x1e, 0x89, 0xcf, 0x81, 0x1b,
};

static const MessageEncodingTestVector sMessageEncodingTest0513 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0D04A043,
        kWeaveHeaderFlag_SourceNodeId,
        0x202E,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0513_EncryptionKey,
    sMessageEncodingTest0513_Payload,
    sizeof(sMessageEncodingTest0513_Payload),
    sMessageEncodingTest0513_ExpectedEncoding,
    sizeof(sMessageEncodingTest0513_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0514_EncryptionKey =
{
    {
        0x01, 0x3e, 0xe2, 0xaf, 0x27, 0x36, 0xdb, 0x3e, 0x58, 0xda, 0x27, 0x96, 0xb4, 0x0d, 0x0f, 0xb2,
    }
};
static const uint8_t sMessageEncodingTest0514_Payload[] =
{
    0xcf, 0xa5, 0x90, 0x56, 0x41, 0x62, 0x55, 0x81, 0x4a, 0x22, 0xb0, 0xe4, 0x2e, 0x83, 0x30, 0xfe,
    0x86, 0x55, 0xbf, 0xdb, 0xbf, 0x98, 0x8d, 0x31, 0x52, 0xb0, 0xbf, 0xe7, 0xe2, 0xd5, 0x2c, 0x25,
    0x18, 0x47, 0xc6, 0xcd, 0xf2, 0x9b, 0x89, 0x0c, 0xe0, 0x71, 0xb1, 0x96, 0xca, 0x80, 0xbf, 0xb5,
    0x6a, 0x02, 0xc8, 0xb6, 0x09, 0xdb, 0x2a, 0xe6, 0x76, 0x87, 0xa8, 0x28, 0x3f, 0x26, 0x1b, 0x81,
    0x21, 0xd1, 0xc1, 0x7a, 0x42, 0x92, 0x6a, 0x64, 0x08, 0xce, 0xb2, 0x40, 0xe8, 0x30, 0xaa, 0x46,
    0x3a, 0xf2, 0x20, 0x68, 0xa0, 0x2e, 0x20, 0x89, 0x60, 0x85, 0x11, 0xd1, 0xad, 0xc6, 0x77, 0x32,
    0x61, 0xc2, 0x7d, 0x35, 0xa8, 0xd7, 0x77, 0x06, 0xe0, 0xf2, 0x4c, 0x4f, 0xb9, 0x5f, 0x40, 0x21,
    0x31, 0x05, 0x8f, 0x2c, 0xd5, 0xe9, 0x54, 0xd1, 0x77, 0xf3, 0x04, 0x21, 0x66, 0xb6, 0x33, 0xbf,
};

static const uint8_t sMessageEncodingTest0514_ExpectedEncoding[] =
{
    0x30, 0x22, 0x65, 0xe2, 0x3a, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x35, 0x26,
    0xc4, 0x56, 0xcb, 0xff, 0xe9, 0x61, 0xe1, 0xc6, 0x75, 0xc1, 0x49, 0xdc, 0x38, 0xac, 0x1b, 0x8b,
    0xb3, 0xdf, 0x80, 0xed, 0x9c, 0xb9, 0x14, 0x1e, 0x5e, 0xb5, 0x69, 0x45, 0x2d, 0xc8, 0xc3, 0x3b,
    0xbe, 0x04, 0x22, 0x12, 0xbc, 0x9b, 0xa0, 0xf8, 0x09, 0x68, 0xdd, 0x6b, 0x16, 0x1d, 0x13, 0x04,
    0x01, 0xc1, 0xcf, 0x3b, 0x70, 0x94, 0x1f, 0xcb, 0xe1, 0x86, 0x87, 0xbd, 0x56, 0xd8, 0xb8, 0x75,
    0x39, 0xd3, 0x01, 0xd4, 0x4e, 0x56, 0xaf, 0xad, 0xff, 0xf2, 0xb8, 0x2f, 0x63, 0x0e, 0xe3, 0xbb,
    0x57, 0x5a, 0xca, 0xc8, 0x80, 0x3f, 0xe5, 0xad, 0x72, 0x7e, 0x03, 0xc7, 0x21, 0x41, 0xc2, 0xfb,
    0x2f, 0xe2, 0xd2, 0xe7, 0xa3, 0xd7, 0xac, 0x6a, 0x70, 0x09, 0xa0, 0x82, 0xd8, 0x12, 0x58, 0x45,
    0xf1, 0xe0, 0x82, 0xef, 0x65, 0x08, 0x60, 0xdf, 0x22, 0x86, 0xf4, 0xf6, 0xa1, 0x41, 0x03, 0x88,
    0xf3, 0x99, 0x8c, 0x4c, 0x18, 0xdd, 0x75, 0x62, 0xfb, 0x36, 0xe6, 0xbc, 0x31, 0x8a, 0x35, 0xf0,
};

static const MessageEncodingTestVector sMessageEncodingTest0514 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0D3AE265,
        kWeaveHeaderFlag_SourceNodeId,
        0x2635,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0514_EncryptionKey,
    sMessageEncodingTest0514_Payload,
    sizeof(sMessageEncodingTest0514_Payload),
    sMessageEncodingTest0514_ExpectedEncoding,
    sizeof(sMessageEncodingTest0514_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0515_Payload[] =
{
    0x77, 0x6f, 0x49, 0x43, 0xba, 0x25, 0x52, 0x9f, 0x8e, 0x1d, 0x81, 0x21, 0xc1, 0x7a, 0xc8, 0x53,
    0x94, 0x23, 0xb1, 0xd9, 0xc0, 0x76, 0x26, 0x1e, 0x14, 0x30, 0x0f, 0xd1, 0x5f, 0x0d, 0x2c, 0x8e,
    0x44, 0xae, 0x5e, 0x65, 0x87, 0xf6, 0xd8, 0x7c, 0x7b, 0x37, 0xaa, 0xa3, 0xbf, 0xb5, 0xe1, 0x6b,
    0x04, 0xd9, 0x73, 0x0a, 0x7e, 0xa0, 0x8c, 0xa3, 0xb7, 0x42, 0xb8, 0x1e, 0xfd, 0xf7, 0xef, 0xc9,
    0xae, 0x37, 0xdc, 0xb9, 0x99, 0x37, 0xd6, 0x11, 0xe4, 0x69, 0x31, 0x85, 0x8f, 0x3b, 0xcd, 0xb4,
    0xf0, 0x38, 0x3e, 0xa7, 0x0e, 0x95, 0x69, 0x00, 0x36, 0xcb, 0xfc, 0x3c, 0x55, 0x75, 0xe2, 0x1b,
    0xdd, 0x44, 0xb3, 0xc7, 0x30, 0x3d, 0x6a, 0x5b, 0x37, 0xdd, 0xd8, 0x25, 0x3e, 0x3f, 0x9a, 0x99,
    0xc2, 0xcf, 0x70, 0xd0, 0xb0, 0x3b, 0x9b, 0xdb, 0x85, 0x9c, 0x95, 0xde, 0x4a, 0x57, 0xe5, 0x2d,
};

static const uint8_t sMessageEncodingTest0515_ExpectedEncoding[] =
{
    0x00, 0x24, 0xf1, 0xf2, 0xac, 0x1f, 0x77, 0x6f, 0x49, 0x43, 0xba, 0x25, 0x52, 0x9f, 0x8e, 0x1d,
    0x81, 0x21, 0xc1, 0x7a, 0xc8, 0x53, 0x94, 0x23, 0xb1, 0xd9, 0xc0, 0x76, 0x26, 0x1e, 0x14, 0x30,
    0x0f, 0xd1, 0x5f, 0x0d, 0x2c, 0x8e, 0x44, 0xae, 0x5e, 0x65, 0x87, 0xf6, 0xd8, 0x7c, 0x7b, 0x37,
    0xaa, 0xa3, 0xbf, 0xb5, 0xe1, 0x6b, 0x04, 0xd9, 0x73, 0x0a, 0x7e, 0xa0, 0x8c, 0xa3, 0xb7, 0x42,
    0xb8, 0x1e, 0xfd, 0xf7, 0xef, 0xc9, 0xae, 0x37, 0xdc, 0xb9, 0x99, 0x37, 0xd6, 0x11, 0xe4, 0x69,
    0x31, 0x85, 0x8f, 0x3b, 0xcd, 0xb4, 0xf0, 0x38, 0x3e, 0xa7, 0x0e, 0x95, 0x69, 0x00, 0x36, 0xcb,
    0xfc, 0x3c, 0x55, 0x75, 0xe2, 0x1b, 0xdd, 0x44, 0xb3, 0xc7, 0x30, 0x3d, 0x6a, 0x5b, 0x37, 0xdd,
    0xd8, 0x25, 0x3e, 0x3f, 0x9a, 0x99, 0xc2, 0xcf, 0x70, 0xd0, 0xb0, 0x3b, 0x9b, 0xdb, 0x85, 0x9c,
    0x95, 0xde, 0x4a, 0x57, 0xe5, 0x2d,
};

static const MessageEncodingTestVector sMessageEncodingTest0515 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x1FACF2F1,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0515_Payload,
    sizeof(sMessageEncodingTest0515_Payload),
    sMessageEncodingTest0515_ExpectedEncoding,
    sizeof(sMessageEncodingTest0515_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0516_EncryptionKey =
{
    {
        0xa0, 0x27, 0x12, 0x66, 0x93, 0xc3, 0xfb, 0x4b, 0x37, 0x3e, 0xac, 0xbc, 0x5e, 0xec, 0x3b, 0x91,
    },
    {
        0xa2, 0x6a, 0x67, 0xaf, 0x22, 0xed, 0xec, 0x8e, 0x97, 0x3b, 0xf1, 0xf1, 0xd4, 0x92, 0x92, 0x7f,
        0xbc, 0x51, 0xe8, 0xf6,
    }
};
static const uint8_t sMessageEncodingTest0516_Payload[] =
{
    0xdf, 0x2a, 0xe6, 0xee, 0xfb, 0x68, 0x11, 0x33, 0xbf, 0x23, 0xc7, 0x02, 0x25, 0xad, 0x2d, 0x9e,
    0x51, 0xdf, 0x91, 0x97, 0x3e, 0x9c, 0x10, 0x55, 0x76, 0xca, 0x27, 0x9b, 0x97, 0xda, 0x9c, 0x0a,
    0x80, 0xc4, 0x78, 0x97, 0x8b, 0x90, 0xf4, 0x82, 0xa2, 0xe5, 0x4e, 0x40, 0x5f, 0x98, 0xbb, 0x02,
    0x67, 0x34, 0xba, 0x3e, 0x19, 0x24, 0xbe, 0xf5, 0x2e, 0xa9, 0x7f, 0x6c, 0xef, 0xc7, 0x5d, 0x60,
    0x7b, 0x69, 0x56, 0xfb, 0xc2, 0xab, 0x39, 0x73, 0xd0, 0x1c, 0xef, 0x9f, 0x56, 0xcb, 0xd9, 0xe9,
    0x23, 0xc3, 0xf4, 0xd6, 0x79, 0x75, 0x76, 0x1e, 0x95, 0x63, 0xa9, 0x2e, 0x9c, 0x0b, 0xea, 0xd1,
    0x7c, 0x90, 0x3b, 0x9c, 0x7f, 0x4f, 0x99, 0x3d, 0xb0, 0x3b, 0x00, 0x2f, 0x1f, 0xa9, 0x96, 0x5d,
    0x11, 0x03, 0xb6, 0xa4, 0x77, 0x2a, 0x4c, 0x06, 0x1c, 0x94, 0xf5, 0x86, 0x62, 0x95, 0x82, 0x9b,
};

static const uint8_t sMessageEncodingTest0516_ExpectedEncoding[] =
{
    0x10, 0x24, 0x57, 0xb8, 0x89, 0x4e, 0x62, 0x23, 0x7b, 0x55, 0x88, 0xc0, 0xa2, 0xd2, 0xe7, 0x38,
    0x1e, 0xa4, 0x04, 0x82, 0xa5, 0xb5, 0xef, 0x87, 0xf6, 0xab, 0xe4, 0x23, 0x09, 0x7e, 0xca, 0xe2,
    0xd8, 0x20, 0xc6, 0x72, 0x61, 0x3a, 0xd7, 0xe5, 0x19, 0xcb, 0xb3, 0x3e, 0x4f, 0x5c, 0x0b, 0x67,
    0x4f, 0x5d, 0x6b, 0x2f, 0xfe, 0x79, 0x24, 0x4d, 0x91, 0x73, 0xbd, 0x75, 0x6d, 0x13, 0x2c, 0x65,
    0x9d, 0x1b, 0x47, 0xc1, 0xbe, 0x6c, 0xb6, 0xdd, 0xac, 0x1a, 0x4d, 0x05, 0xf2, 0xe6, 0x96, 0x68,
    0x62, 0x90, 0x27, 0x99, 0x76, 0x7f, 0x7e, 0xf5, 0x45, 0xdd, 0x4d, 0x7d, 0x9e, 0x29, 0x5a, 0x88,
    0xae, 0x04, 0x38, 0x0b, 0xb0, 0xa8, 0x79, 0x26, 0xe7, 0x6b, 0xa0, 0xff, 0x83, 0x47, 0x2e, 0x86,
    0x14, 0xf9, 0x2f, 0xe4, 0xb5, 0x27, 0x20, 0x53, 0x70, 0xb2, 0xc7, 0x0b, 0xb8, 0x94, 0x92, 0xd7,
    0x96, 0xe4, 0xb4, 0x09, 0xff, 0xd5, 0xa7, 0x0c, 0x96, 0xb3, 0x64, 0x1d, 0xb0, 0x49, 0x81, 0x0c,
    0x74, 0x5c, 0xf1, 0x75, 0x6e, 0x61, 0x23, 0x39, 0x0a, 0xe7, 0xbb, 0x8a,
};

static const MessageEncodingTestVector sMessageEncodingTest0516 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4E89B857,
        kWeaveHeaderFlag_TunneledData,
        0x2362,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0516_EncryptionKey,
    sMessageEncodingTest0516_Payload,
    sizeof(sMessageEncodingTest0516_Payload),
    sMessageEncodingTest0516_ExpectedEncoding,
    sizeof(sMessageEncodingTest0516_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0517_EncryptionKey =
{
    {
        0xf6, 0xe6, 0xe2, 0xe7, 0x22, 0xd5, 0x50, 0x41, 0x16, 0x70, 0xc5, 0xbf, 0x60, 0x5a, 0xa0, 0x0f,
    }
};
static const uint8_t sMessageEncodingTest0517_Payload[] =
{
    0x98, 0x0f, 0xcd, 0x1c, 0xfa, 0x22, 0xc6, 0x98, 0x3d, 0x11, 0xfa, 0x0f, 0x6d, 0x7e, 0xaf, 0xdf,
    0x85, 0xab, 0xbf, 0x7d, 0x01, 0x6b, 0x42, 0xcd, 0x57, 0x91, 0x26, 0x12, 0x2c, 0xab, 0x5a, 0x1c,
    0xd5, 0x15, 0x99, 0xa7, 0xd0, 0x69, 0xee, 0xe1, 0x6e, 0x74, 0xc4, 0xf6, 0x5f, 0xf4, 0x23, 0x7b,
    0xc1, 0x2d, 0x3c, 0x64, 0x5a, 0x33, 0xff, 0x50, 0xcd, 0x53, 0xfe, 0x6c, 0xd2, 0x7d, 0xb3, 0x6c,
    0xdd, 0x09, 0xf9, 0xc2, 0x99, 0xe5, 0x5f, 0x9a, 0xfd, 0xb8, 0x8d, 0x36, 0xe0, 0x14, 0x2a, 0x24,
    0x39, 0xf0, 0xc1, 0x64, 0xee, 0xf5, 0x76, 0x36, 0x73, 0x51, 0x08, 0xd6, 0x97, 0xa0, 0x74, 0x4a,
    0xc1, 0x77, 0xbc, 0xf8, 0xb4, 0xd5, 0x52, 0x65, 0x58, 0x70, 0x2c, 0xff, 0xeb, 0xe1, 0x0f, 0x34,
    0x63, 0x5b, 0x2e, 0xd9, 0x18, 0x81, 0x0a, 0x61, 0xd7, 0x76, 0xd0, 0x11, 0x8a, 0x35, 0x3d, 0xe5,
};

static const uint8_t sMessageEncodingTest0517_ExpectedEncoding[] =
{
    0x20, 0x24, 0xc9, 0x87, 0xc9, 0xf6, 0x2f, 0x28, 0x95, 0x0a, 0xd9, 0xf1, 0xcd, 0x32, 0xc6, 0x41,
    0x6e, 0xfc, 0xb6, 0xad, 0x9d, 0xf7, 0x15, 0xdf, 0x9b, 0x5b, 0xe4, 0x4f, 0xa0, 0x79, 0xee, 0x15,
    0xf5, 0x7f, 0x96, 0x5b, 0x98, 0xcc, 0xe5, 0xce, 0xf7, 0xcc, 0x4a, 0xfd, 0x0d, 0x34, 0x91, 0x0d,
    0x19, 0x51, 0x9d, 0x63, 0x7c, 0xf8, 0x39, 0x09, 0x5c, 0x22, 0x49, 0x2d, 0xba, 0x6a, 0xbf, 0x14,
    0xc0, 0x6c, 0x09, 0x99, 0x9b, 0x3c, 0x41, 0x5c, 0x91, 0xd3, 0xc9, 0x8e, 0x94, 0xee, 0x3c, 0x26,
    0xc9, 0x7f, 0x4f, 0xea, 0x7d, 0x09, 0xf7, 0xbd, 0x4f, 0x78, 0x15, 0x58, 0x9d, 0x71, 0xf5, 0xab,
    0xff, 0x78, 0x77, 0x80, 0x02, 0x09, 0x56, 0x58, 0x8b, 0x84, 0xf8, 0x0d, 0x5f, 0xfa, 0x3b, 0xe7,
    0xd8, 0x7e, 0x96, 0x29, 0x52, 0x1c, 0x93, 0x2e, 0x0f, 0xbe, 0xee, 0x2d, 0x20, 0x5a, 0xdf, 0xa9,
    0xbf, 0xd3, 0x21, 0x72, 0x9f, 0x4b, 0x3f, 0x13, 0x56, 0x9a, 0x1c, 0x0b, 0x8f, 0x50, 0x31, 0xef,
};

static const MessageEncodingTestVector sMessageEncodingTest0517 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF6C987C9,
        kWeaveHeaderFlag_TunneledData,
        0x282F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0517_EncryptionKey,
    sMessageEncodingTest0517_Payload,
    sizeof(sMessageEncodingTest0517_Payload),
    sMessageEncodingTest0517_ExpectedEncoding,
    sizeof(sMessageEncodingTest0517_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0518_EncryptionKey =
{
    {
        0x1d, 0x32, 0x48, 0x4a, 0x4e, 0xea, 0x17, 0xda, 0xc1, 0x45, 0xd9, 0x94, 0x14, 0x8c, 0x6b, 0x7d,
    }
};
static const uint8_t sMessageEncodingTest0518_Payload[] =
{
    0x88, 0x32, 0xce, 0x7b, 0x82, 0x64, 0xe1, 0x30, 0x8e, 0x46, 0x2f, 0x0e, 0x12, 0x3b, 0x95, 0x50,
    0x68, 0x98, 0x3a, 0x04, 0x99, 0xcb, 0xaa, 0x64, 0x32, 0x0e, 0x2d, 0xd6, 0x1e, 0x49, 0x8d, 0x96,
    0xd8, 0x4c, 0x8a, 0xc6, 0x85, 0x9b, 0xdd, 0x9d, 0x80, 0x3b, 0xba, 0x9e, 0x76, 0x2f, 0x53, 0x7f,
    0xdf, 0x4a, 0x65, 0xc4, 0x8a, 0xd1, 0x07, 0xd9, 0x89, 0xc9, 0x40, 0x7d, 0xdd, 0xb2, 0x1d, 0x90,
    0x8e, 0x68, 0xfa, 0x6b, 0xe9, 0x8e, 0x03, 0x80, 0xac, 0x47, 0xea, 0xe3, 0x25, 0xf2, 0xae, 0x24,
    0x61, 0x49, 0xa0, 0x75, 0x16, 0x70, 0xee, 0xf1, 0xaf, 0xac, 0x1f, 0x52, 0xc4, 0x70, 0xd5, 0x3a,
    0x06, 0x3b, 0x83, 0xfe, 0xf0, 0x05, 0xf8, 0xc5, 0x63, 0xab, 0xa8, 0x5d, 0x21, 0x51, 0x11, 0xc5,
    0x55, 0xfa, 0xc9, 0xad, 0xc2, 0x5e, 0x60, 0x58, 0x0d, 0xd3, 0x55, 0x43, 0x5f, 0xaa, 0x1b, 0x23,
};

static const uint8_t sMessageEncodingTest0518_ExpectedEncoding[] =
{
    0x30, 0x24, 0xf8, 0x40, 0x31, 0x0f, 0x1b, 0x21, 0x1f, 0x0a, 0x16, 0xce, 0x8e, 0x7a, 0x17, 0x63,
    0x77, 0xa7, 0x6a, 0x00, 0x59, 0x4b, 0x12, 0xb5, 0x76, 0xb7, 0x0a, 0x7a, 0x3f, 0x01, 0x5c, 0x25,
    0x1d, 0x57, 0xd2, 0xfa, 0x66, 0x75, 0x79, 0xb5, 0xc1, 0xe3, 0x4e, 0x7c, 0x9f, 0xdd, 0x29, 0x98,
    0x05, 0x09, 0x2a, 0x1f, 0xf4, 0x2c, 0x7f, 0xed, 0xe4, 0x16, 0x4f, 0xc2, 0x4c, 0x11, 0xc4, 0xe2,
    0xbc, 0x24, 0xfe, 0xbd, 0x93, 0x85, 0x31, 0x6d, 0x03, 0x38, 0x58, 0xc7, 0x06, 0x86, 0xda, 0x12,
    0x38, 0x18, 0x08, 0xce, 0x98, 0xf3, 0x29, 0x9b, 0xb3, 0x94, 0xd7, 0xd2, 0x66, 0x9f, 0x5d, 0xd4,
    0xf5, 0x8e, 0x6a, 0xf4, 0x9f, 0x38, 0x5a, 0xc3, 0xab, 0x0b, 0x26, 0x02, 0xcf, 0x24, 0x32, 0xd0,
    0xe2, 0x21, 0xab, 0xfa, 0xd9, 0xec, 0x9e, 0x38, 0xda, 0x1d, 0x24, 0xe4, 0x51, 0x8f, 0x4c, 0x87,
    0x59, 0xaf, 0x0d, 0xee, 0x91, 0xb1, 0xbb, 0x68, 0xee, 0x8a, 0xd0, 0x20, 0x6b, 0x06, 0xc2, 0xb4,
    0xb1, 0xb0, 0xc0, 0xb8, 0x06, 0xe8, 0x52, 0x86,
};

static const MessageEncodingTestVector sMessageEncodingTest0518 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0F3140F8,
        kWeaveHeaderFlag_TunneledData,
        0x211B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0518_EncryptionKey,
    sMessageEncodingTest0518_Payload,
    sizeof(sMessageEncodingTest0518_Payload),
    sMessageEncodingTest0518_ExpectedEncoding,
    sizeof(sMessageEncodingTest0518_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0519_Payload[] =
{
    0x2e, 0x18, 0x88, 0xe1, 0x8f, 0xcd, 0xc5, 0x6a, 0x20, 0xba, 0x5e, 0xaf, 0x7d, 0x59, 0xd0, 0x6b,
    0x9e, 0x1a, 0xfb, 0xcc, 0xd5, 0x55, 0x1c, 0x5f, 0x73, 0x19, 0xde, 0xf5, 0x9e, 0xaf, 0x35, 0x38,
    0x2c, 0xa9, 0x44, 0x25, 0x4d, 0x61, 0x22, 0xc0, 0x94, 0xb2, 0x6a, 0xed, 0x9e, 0xc4, 0x2b, 0x7b,
    0x81, 0x90, 0xfb, 0x25, 0xa1, 0x32, 0x28, 0xd4, 0xed, 0xc7, 0x50, 0xc3, 0xcd, 0x15, 0x9c, 0xef,
    0x6c, 0xa1, 0xe2, 0xce, 0x10, 0x3a, 0xf9, 0xff, 0x22, 0x48, 0x55, 0x33, 0xc8, 0x75, 0x72, 0x84,
    0xbc, 0xaf, 0x2e, 0x6f, 0x72, 0x8e, 0xb0, 0x18, 0xf7, 0x47, 0xa8, 0x6a, 0x6d, 0xc7, 0x3b, 0x85,
    0x54, 0x84, 0x65, 0x95, 0x0d, 0x25, 0x7a, 0x6e, 0x5b, 0x8a, 0x12, 0xe6, 0x09, 0x88, 0x26, 0x54,
    0x24, 0xc1, 0x36, 0x8d, 0xde, 0x21, 0x9e, 0x9d, 0x04, 0x3d, 0x0e, 0xe9, 0x91, 0x6c, 0x0d, 0x55,
};

static const uint8_t sMessageEncodingTest0519_ExpectedEncoding[] =
{
    0x00, 0x28, 0x2d, 0x51, 0x1d, 0xd5, 0x2e, 0x18, 0x88, 0xe1, 0x8f, 0xcd, 0xc5, 0x6a, 0x20, 0xba,
    0x5e, 0xaf, 0x7d, 0x59, 0xd0, 0x6b, 0x9e, 0x1a, 0xfb, 0xcc, 0xd5, 0x55, 0x1c, 0x5f, 0x73, 0x19,
    0xde, 0xf5, 0x9e, 0xaf, 0x35, 0x38, 0x2c, 0xa9, 0x44, 0x25, 0x4d, 0x61, 0x22, 0xc0, 0x94, 0xb2,
    0x6a, 0xed, 0x9e, 0xc4, 0x2b, 0x7b, 0x81, 0x90, 0xfb, 0x25, 0xa1, 0x32, 0x28, 0xd4, 0xed, 0xc7,
    0x50, 0xc3, 0xcd, 0x15, 0x9c, 0xef, 0x6c, 0xa1, 0xe2, 0xce, 0x10, 0x3a, 0xf9, 0xff, 0x22, 0x48,
    0x55, 0x33, 0xc8, 0x75, 0x72, 0x84, 0xbc, 0xaf, 0x2e, 0x6f, 0x72, 0x8e, 0xb0, 0x18, 0xf7, 0x47,
    0xa8, 0x6a, 0x6d, 0xc7, 0x3b, 0x85, 0x54, 0x84, 0x65, 0x95, 0x0d, 0x25, 0x7a, 0x6e, 0x5b, 0x8a,
    0x12, 0xe6, 0x09, 0x88, 0x26, 0x54, 0x24, 0xc1, 0x36, 0x8d, 0xde, 0x21, 0x9e, 0x9d, 0x04, 0x3d,
    0x0e, 0xe9, 0x91, 0x6c, 0x0d, 0x55,
};

static const MessageEncodingTestVector sMessageEncodingTest0519 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xD51D512D,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0519_Payload,
    sizeof(sMessageEncodingTest0519_Payload),
    sMessageEncodingTest0519_ExpectedEncoding,
    sizeof(sMessageEncodingTest0519_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0520_EncryptionKey =
{
    {
        0x7c, 0x75, 0x6b, 0xe5, 0xc8, 0xe2, 0xe2, 0x73, 0x41, 0x10, 0x74, 0x1a, 0x85, 0xc3, 0x7a, 0x48,
    },
    {
        0x9c, 0x97, 0xb2, 0x37, 0x21, 0xaa, 0xb9, 0x82, 0x09, 0xc5, 0x00, 0x8a, 0xfb, 0x4e, 0x4e, 0xc4,
        0x10, 0x0d, 0x75, 0x88,
    }
};
static const uint8_t sMessageEncodingTest0520_Payload[] =
{
    0x4e, 0x64, 0x26, 0xee, 0x0f, 0x37, 0x8e, 0xad, 0x5e, 0xf9, 0x61, 0x03, 0x28, 0xa0, 0x36, 0xee,
    0x54, 0x82, 0x5c, 0xbd, 0xd9, 0xe3, 0x11, 0xee, 0xfa, 0x35, 0x90, 0xd3, 0x5a, 0x28, 0x99, 0xc9,
    0xc5, 0xe8, 0x0b, 0x88, 0xfd, 0xc8, 0x58, 0x68, 0x45, 0xd4, 0xc0, 0xa9, 0xe3, 0x2b, 0x13, 0xe8,
    0xd4, 0x35, 0x26, 0x50, 0x48, 0xf6, 0xa4, 0xff, 0x0d, 0x7f, 0x8e, 0xdb, 0x95, 0x91, 0x82, 0x21,
    0x1b, 0xc0, 0xaa, 0xd6, 0xcd, 0x48, 0x25, 0xec, 0xc8, 0x20, 0xf2, 0x15, 0xfc, 0x6f, 0xc2, 0x44,
    0x89, 0xd1, 0x7f, 0x8e, 0x1f, 0x75, 0x33, 0xba, 0x70, 0x67, 0xc6, 0xef, 0x6e, 0xe9, 0x7e, 0xa3,
    0x13, 0x00, 0xf7, 0xbd, 0x3c, 0x4f, 0x4f, 0x12, 0x94, 0x8d, 0xf1, 0xe6, 0x66, 0xb5, 0x2d, 0xf4,
    0x15, 0xb8, 0xc4, 0xcc, 0xf4, 0xf9, 0x0b, 0xf7, 0x70, 0xc2, 0x48, 0x79, 0x86, 0x84, 0xb9, 0x9d,
};

static const uint8_t sMessageEncodingTest0520_ExpectedEncoding[] =
{
    0x10, 0x28, 0xb4, 0xcd, 0xa2, 0x40, 0x65, 0x25, 0xa0, 0xa4, 0xac, 0xcf, 0x91, 0xf2, 0x0d, 0x0f,
    0x38, 0x60, 0xa5, 0xcf, 0xaa, 0x01, 0x0c, 0xa8, 0xfc, 0xbf, 0x6e, 0xd4, 0xe7, 0xc6, 0xc5, 0xf9,
    0x8f, 0x4e, 0x3f, 0x29, 0x19, 0xf5, 0x54, 0xca, 0x7b, 0xff, 0xb8, 0x20, 0x2b, 0x40, 0x8b, 0x52,
    0x54, 0x46, 0x28, 0xc7, 0xa3, 0x93, 0x23, 0xa5, 0xd2, 0x3e, 0x0d, 0x4f, 0xb5, 0x0f, 0x83, 0x2f,
    0x55, 0x15, 0x37, 0xa2, 0xb2, 0xf3, 0xe1, 0x0a, 0x64, 0x9c, 0x76, 0x76, 0xad, 0x58, 0x1b, 0x5c,
    0xff, 0xfb, 0xf3, 0xbf, 0xeb, 0x96, 0x12, 0xca, 0x7b, 0x4b, 0x52, 0xb7, 0x22, 0x52, 0x32, 0x4f,
    0xa3, 0x45, 0x29, 0xc7, 0x1e, 0x70, 0xd6, 0x5e, 0x69, 0xc7, 0x9a, 0x82, 0x3a, 0xc5, 0xb3, 0xfc,
    0x11, 0x14, 0xbd, 0x89, 0xa7, 0xba, 0x2a, 0x81, 0x81, 0x99, 0x95, 0x9e, 0x3e, 0xc3, 0x34, 0x61,
    0x92, 0x64, 0x72, 0x89, 0x32, 0xb0, 0xa4, 0x86, 0x5f, 0xf8, 0x4f, 0xc6, 0x36, 0xc4, 0xc4, 0x13,
    0x8c, 0xce, 0x29, 0x5c, 0x8b, 0xde, 0xb4, 0x48, 0x0b, 0x12, 0xc8, 0xd3,
};

static const MessageEncodingTestVector sMessageEncodingTest0520 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x40A2CDB4,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2565,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0520_EncryptionKey,
    sMessageEncodingTest0520_Payload,
    sizeof(sMessageEncodingTest0520_Payload),
    sMessageEncodingTest0520_ExpectedEncoding,
    sizeof(sMessageEncodingTest0520_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0521_EncryptionKey =
{
    {
        0x4d, 0xca, 0x48, 0x7e, 0xa9, 0x31, 0x53, 0x3e, 0x51, 0xff, 0xf3, 0x64, 0x22, 0xda, 0x9b, 0x56,
    }
};
static const uint8_t sMessageEncodingTest0521_Payload[] =
{
    0x93, 0x4f, 0xb0, 0xe5, 0x12, 0x27, 0x39, 0x25, 0x02, 0x07, 0xc7, 0x48, 0x1f, 0xc1, 0xaf, 0x53,
    0xe6, 0xa7, 0x96, 0xe9, 0x0f, 0xce, 0x51, 0x16, 0x6a, 0x56, 0x36, 0xf8, 0x69, 0x36, 0x6d, 0xc3,
    0x4b, 0xe8, 0x6a, 0x4b, 0x61, 0x80, 0x6a, 0x9d, 0x06, 0x50, 0xbd, 0xc7, 0xb7, 0x89, 0x2e, 0x28,
    0xfb, 0x6b, 0x12, 0x5e, 0xe0, 0xc9, 0x95, 0x1f, 0xc1, 0xf1, 0xc5, 0xfe, 0x23, 0xb3, 0xa5, 0xe4,
    0x9f, 0xf0, 0x88, 0x0e, 0x8e, 0xe6, 0x7b, 0x68, 0x40, 0xbb, 0x7e, 0xf9, 0xd4, 0xc5, 0xf6, 0xb4,
    0xcd, 0xce, 0xf8, 0x62, 0x86, 0x16, 0x48, 0x42, 0x0d, 0xc1, 0x96, 0xa4, 0x0e, 0x1c, 0x4a, 0x46,
    0xda, 0xe9, 0xcd, 0x16, 0x09, 0x95, 0x87, 0x80, 0x0e, 0xe2, 0xa4, 0xef, 0x65, 0xd5, 0x5c, 0xb0,
    0x5c, 0xf7, 0x89, 0xd6, 0x75, 0x39, 0xb3, 0x77, 0x4d, 0x64, 0x19, 0x98, 0xa2, 0x4b, 0xbf, 0xd1,
};

static const uint8_t sMessageEncodingTest0521_ExpectedEncoding[] =
{
    0x20, 0x28, 0x7f, 0xbf, 0x5d, 0x67, 0xd7, 0x21, 0xe3, 0xd9, 0x6f, 0xcc, 0xcb, 0xe2, 0x3e, 0x3c,
    0x5a, 0x53, 0xe9, 0xc6, 0x57, 0xbd, 0x3e, 0x7c, 0xbe, 0x1e, 0x91, 0x33, 0xdb, 0xf8, 0x0b, 0xf8,
    0x70, 0x28, 0x22, 0x74, 0x78, 0xa8, 0x72, 0x0b, 0xfd, 0xe0, 0x1f, 0xcb, 0x36, 0xf5, 0xed, 0x14,
    0xab, 0xcf, 0x3c, 0x83, 0xe3, 0x7d, 0xe4, 0x3d, 0xbd, 0xda, 0x41, 0x5b, 0x6a, 0x61, 0x63, 0x08,
    0xd7, 0x5f, 0x7a, 0xab, 0x52, 0xfc, 0x70, 0x03, 0x2f, 0x5c, 0xd5, 0x37, 0x27, 0x49, 0xc7, 0x08,
    0x5a, 0x20, 0xd3, 0xde, 0x11, 0x2a, 0xeb, 0x25, 0xdb, 0x5a, 0x23, 0xee, 0xc1, 0xfc, 0x68, 0x00,
    0xf2, 0x9b, 0xa2, 0x5f, 0x5d, 0xeb, 0xfb, 0xdc, 0x37, 0x3b, 0xf5, 0xc9, 0x0c, 0x49, 0x46, 0xc3,
    0x44, 0x32, 0x0d, 0x33, 0xd4, 0x06, 0x17, 0xfc, 0x0a, 0x52, 0xd8, 0x25, 0xce, 0xbf, 0x0f, 0x9d,
    0x7e, 0x79, 0x4e, 0x88, 0x14, 0xf6, 0x49, 0x52, 0xbd, 0x75, 0x66, 0xf3, 0xdd, 0xc0, 0x73, 0x85,
};

static const MessageEncodingTestVector sMessageEncodingTest0521 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x675DBF7F,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x21D7,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0521_EncryptionKey,
    sMessageEncodingTest0521_Payload,
    sizeof(sMessageEncodingTest0521_Payload),
    sMessageEncodingTest0521_ExpectedEncoding,
    sizeof(sMessageEncodingTest0521_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0522_EncryptionKey =
{
    {
        0xb5, 0x2e, 0x06, 0xbe, 0x78, 0xf9, 0x82, 0x20, 0x34, 0x03, 0xdb, 0xce, 0x4b, 0x8b, 0xc1, 0x55,
    }
};
static const uint8_t sMessageEncodingTest0522_Payload[] =
{
    0x1d, 0x2e, 0x15, 0x52, 0x3a, 0xe5, 0x96, 0xb1, 0x10, 0xdf, 0xd1, 0xdd, 0xdd, 0x13, 0xba, 0x00,
    0xc6, 0xdf, 0xa7, 0x0a, 0x6a, 0xc3, 0xb7, 0x3c, 0x84, 0x7a, 0x0d, 0x9d, 0x85, 0xda, 0xee, 0x1e,
    0x6d, 0x01, 0x29, 0x2b, 0x93, 0x25, 0xb9, 0xf5, 0xf3, 0xe3, 0xd7, 0xdb, 0xf9, 0x30, 0xf3, 0x06,
    0x33, 0x08, 0x00, 0x7b, 0x0f, 0x84, 0x51, 0xbe, 0x4a, 0xf1, 0x8b, 0x9b, 0x34, 0x47, 0xbd, 0x5e,
    0x2a, 0x81, 0x4f, 0xe7, 0x08, 0x2d, 0x24, 0x9b, 0x56, 0x2c, 0x48, 0x45, 0x0b, 0x17, 0x96, 0x2d,
    0x82, 0xc2, 0xea, 0x61, 0xfe, 0x5c, 0x74, 0xd0, 0x43, 0x08, 0xab, 0x05, 0x65, 0x81, 0x89, 0x37,
    0x09, 0x57, 0x59, 0xf4, 0x41, 0x0c, 0x89, 0x7f, 0x84, 0x94, 0xbd, 0xc6, 0x7a, 0x03, 0xf6, 0xc2,
    0x82, 0x9d, 0xf7, 0x42, 0x0a, 0x2b, 0xe8, 0x81, 0x42, 0xf5, 0x48, 0xe4, 0x75, 0x25, 0xe6, 0x39,
};

static const uint8_t sMessageEncodingTest0522_ExpectedEncoding[] =
{
    0x30, 0x28, 0xc1, 0xf4, 0xb5, 0xe3, 0xe7, 0x23, 0x55, 0xe9, 0x04, 0xa7, 0x72, 0x19, 0xc4, 0x39,
    0x88, 0x9e, 0xee, 0xf5, 0x19, 0xba, 0x92, 0x08, 0xfe, 0xf5, 0x3a, 0xa6, 0xbe, 0x8b, 0x8b, 0x03,
    0x0f, 0xd4, 0x53, 0xc9, 0xc7, 0xcb, 0x81, 0x34, 0xf0, 0x52, 0xe9, 0xaf, 0x0c, 0xbf, 0xc7, 0x8a,
    0x8a, 0x49, 0x9c, 0x04, 0xb2, 0x99, 0x98, 0x9f, 0x4d, 0x1d, 0xfc, 0x09, 0xca, 0xb7, 0x31, 0x2f,
    0x13, 0xb3, 0x58, 0x54, 0x8b, 0xbe, 0x1b, 0xe8, 0x85, 0xc3, 0x73, 0x23, 0x88, 0xb2, 0x5f, 0x16,
    0xe4, 0x22, 0xc6, 0xbe, 0xa1, 0x88, 0x67, 0x64, 0x27, 0xec, 0x9c, 0x4a, 0x26, 0x6b, 0xab, 0x3b,
    0x0a, 0x4d, 0xab, 0xe3, 0x4b, 0x8f, 0x4f, 0x04, 0x5d, 0xc1, 0x17, 0x83, 0xfa, 0x5b, 0xbc, 0x6c,
    0x24, 0xf6, 0x64, 0x56, 0xe0, 0xcc, 0x69, 0x4b, 0x46, 0x9c, 0x6a, 0x1b, 0xe4, 0xf6, 0x2e, 0xf2,
    0x31, 0x55, 0x25, 0x59, 0xe4, 0x6c, 0xed, 0x89, 0xec, 0xb5, 0x77, 0xa3, 0x15, 0xad, 0xd1, 0x14,
    0x2c, 0x4b, 0x92, 0x85, 0x9f, 0x35, 0x47, 0x19,
};

static const MessageEncodingTestVector sMessageEncodingTest0522 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xE3B5F4C1,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x23E7,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0522_EncryptionKey,
    sMessageEncodingTest0522_Payload,
    sizeof(sMessageEncodingTest0522_Payload),
    sMessageEncodingTest0522_ExpectedEncoding,
    sizeof(sMessageEncodingTest0522_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0523_Payload[] =
{
    0x35, 0xc6, 0xaf, 0x73, 0x9c, 0x2b, 0xa9, 0x2e, 0x64, 0x8d, 0xab, 0x62, 0x42, 0x5f, 0xd7, 0x0f,
    0x00, 0x04, 0x31, 0xf1, 0x74, 0x75, 0x14, 0x4e, 0x06, 0xc6, 0xf5, 0x60, 0xc1, 0x51, 0x02, 0xe0,
    0xf1, 0x75, 0xf9, 0xa1, 0x48, 0x4d, 0x56, 0x51, 0xae, 0x26, 0x7b, 0xd8, 0x0e, 0x70, 0x72, 0x69,
    0x6a, 0x7b, 0xd2, 0xf9, 0xfa, 0x8f, 0x81, 0x10, 0x25, 0x3f, 0x4c, 0xa5, 0xc7, 0x8c, 0x03, 0x9c,
    0x1e, 0x97, 0x9d, 0x36, 0x37, 0x78, 0x75, 0xac, 0xe0, 0x4e, 0x4c, 0xf6, 0xd4, 0x50, 0xeb, 0x16,
    0x3d, 0x7e, 0xd2, 0xce, 0xd7, 0x45, 0xe7, 0x07, 0xb3, 0x25, 0x60, 0x3d, 0xcc, 0xec, 0x06, 0x6c,
    0x98, 0x10, 0xaf, 0x80, 0x79, 0x85, 0x62, 0x7d, 0xe7, 0x76, 0xd7, 0x2d, 0xbe, 0x17, 0x84, 0x22,
    0xdd, 0x2a, 0x53, 0xf8, 0x48, 0x89, 0x93, 0x49, 0xa0, 0xb3, 0x78, 0xd3, 0xe2, 0x56, 0x38, 0xb0,
};

static const uint8_t sMessageEncodingTest0523_ExpectedEncoding[] =
{
    0x00, 0x20, 0x87, 0xb2, 0x52, 0x58, 0x35, 0xc6, 0xaf, 0x73, 0x9c, 0x2b, 0xa9, 0x2e, 0x64, 0x8d,
    0xab, 0x62, 0x42, 0x5f, 0xd7, 0x0f, 0x00, 0x04, 0x31, 0xf1, 0x74, 0x75, 0x14, 0x4e, 0x06, 0xc6,
    0xf5, 0x60, 0xc1, 0x51, 0x02, 0xe0, 0xf1, 0x75, 0xf9, 0xa1, 0x48, 0x4d, 0x56, 0x51, 0xae, 0x26,
    0x7b, 0xd8, 0x0e, 0x70, 0x72, 0x69, 0x6a, 0x7b, 0xd2, 0xf9, 0xfa, 0x8f, 0x81, 0x10, 0x25, 0x3f,
    0x4c, 0xa5, 0xc7, 0x8c, 0x03, 0x9c, 0x1e, 0x97, 0x9d, 0x36, 0x37, 0x78, 0x75, 0xac, 0xe0, 0x4e,
    0x4c, 0xf6, 0xd4, 0x50, 0xeb, 0x16, 0x3d, 0x7e, 0xd2, 0xce, 0xd7, 0x45, 0xe7, 0x07, 0xb3, 0x25,
    0x60, 0x3d, 0xcc, 0xec, 0x06, 0x6c, 0x98, 0x10, 0xaf, 0x80, 0x79, 0x85, 0x62, 0x7d, 0xe7, 0x76,
    0xd7, 0x2d, 0xbe, 0x17, 0x84, 0x22, 0xdd, 0x2a, 0x53, 0xf8, 0x48, 0x89, 0x93, 0x49, 0xa0, 0xb3,
    0x78, 0xd3, 0xe2, 0x56, 0x38, 0xb0,
};

static const MessageEncodingTestVector sMessageEncodingTest0523 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x5852B287,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0523_Payload,
    sizeof(sMessageEncodingTest0523_Payload),
    sMessageEncodingTest0523_ExpectedEncoding,
    sizeof(sMessageEncodingTest0523_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0524_EncryptionKey =
{
    {
        0x9c, 0x0c, 0x7b, 0x6b, 0x86, 0x0a, 0x1d, 0x9b, 0x49, 0xc4, 0xdc, 0x35, 0x7b, 0x22, 0xe3, 0x1d,
    },
    {
        0x6a, 0x6d, 0xe3, 0xab, 0x27, 0xde, 0xbc, 0x13, 0x12, 0xd9, 0xfe, 0x9f, 0x44, 0xa3, 0x31, 0xb1,
        0xbc, 0xb8, 0xed, 0x64,
    }
};
static const uint8_t sMessageEncodingTest0524_Payload[] =
{
    0xb4, 0x27, 0x46, 0x39, 0x9c, 0xf4, 0xc3, 0x88, 0xec, 0x3b, 0xbf, 0xe9, 0xcc, 0x38, 0xca, 0x2d,
    0xd5, 0x7a, 0x16, 0x15, 0xef, 0xa2, 0x71, 0xf9, 0xd4, 0x60, 0x43, 0x82, 0x29, 0x8f, 0xef, 0xe2,
    0xfc, 0x5e, 0x22, 0x03, 0xf1, 0x20, 0x63, 0xf9, 0xc4, 0xba, 0x51, 0x33, 0x6f, 0x90, 0x6f, 0xb0,
    0xb4, 0x7d, 0xe2, 0x4c, 0x7b, 0x47, 0xa7, 0x44, 0xfc, 0x6b, 0x4e, 0xe7, 0x73, 0x04, 0xc3, 0x22,
    0x63, 0xc3, 0xbc, 0x63, 0x43, 0x9e, 0xc3, 0xd5, 0x9a, 0x36, 0x53, 0x0f, 0x2f, 0x79, 0x05, 0xa9,
    0x6a, 0x61, 0x3f, 0x18, 0xf2, 0x48, 0x78, 0x42, 0x4e, 0xf7, 0xd2, 0x8c, 0x4d, 0xe6, 0xae, 0x97,
    0xdc, 0xae, 0x62, 0xc8, 0xa3, 0x07, 0xe1, 0xd7, 0xc3, 0x01, 0x9f, 0x88, 0xd7, 0x67, 0x32, 0x23,
    0x9a, 0x26, 0x41, 0x47, 0xad, 0x5d, 0xaf, 0xd2, 0x47, 0x52, 0x8d, 0xb9, 0x5b, 0x19, 0xef, 0xc8,
};

static const uint8_t sMessageEncodingTest0524_ExpectedEncoding[] =
{
    0x10, 0x20, 0x26, 0x9a, 0x57, 0xb0, 0x83, 0x29, 0xf8, 0xff, 0x78, 0xf4, 0x0e, 0x50, 0xde, 0x6f,
    0x01, 0x83, 0x59, 0x69, 0x33, 0xe2, 0xa1, 0xd8, 0x00, 0x35, 0x04, 0x42, 0xb2, 0xcd, 0x26, 0xa6,
    0x38, 0x6e, 0xec, 0x4d, 0xa3, 0x39, 0x50, 0x6d, 0xf2, 0x4c, 0xd2, 0x71, 0xb1, 0x01, 0x53, 0xa5,
    0x7e, 0x75, 0xe4, 0x3b, 0xb4, 0x7e, 0xd2, 0x3b, 0x1a, 0x49, 0xbf, 0x17, 0x17, 0x7d, 0x63, 0xa2,
    0x46, 0x41, 0xa9, 0x02, 0x17, 0xf1, 0x69, 0x16, 0xfc, 0x75, 0xf4, 0xb4, 0xe2, 0xb4, 0x45, 0x38,
    0xb6, 0x75, 0x2c, 0x10, 0xf1, 0x87, 0xc3, 0xea, 0x9a, 0xd3, 0x7a, 0x89, 0x56, 0x0b, 0x97, 0x3e,
    0x4a, 0xd1, 0x58, 0x29, 0xf9, 0x1f, 0x51, 0x28, 0x35, 0x20, 0xe1, 0x69, 0x81, 0x69, 0xc4, 0x17,
    0x4a, 0x36, 0xeb, 0xd6, 0x11, 0xc3, 0xee, 0xd7, 0x30, 0xdb, 0x7f, 0x2e, 0xc6, 0xac, 0xb4, 0xd4,
    0xfb, 0xc0, 0xf2, 0x12, 0xb9, 0x21, 0x97, 0x74, 0x81, 0xa7, 0x60, 0x61, 0x58, 0x1e, 0x17, 0x25,
    0x6a, 0x3b, 0xf2, 0x02, 0x67, 0x35, 0xca, 0x7a, 0x3b, 0xea, 0x82, 0xba,
};

static const MessageEncodingTestVector sMessageEncodingTest0524 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB0579A26,
        0,
        0x2983,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0524_EncryptionKey,
    sMessageEncodingTest0524_Payload,
    sizeof(sMessageEncodingTest0524_Payload),
    sMessageEncodingTest0524_ExpectedEncoding,
    sizeof(sMessageEncodingTest0524_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0525_EncryptionKey =
{
    {
        0xf1, 0x23, 0x16, 0xca, 0x1f, 0xae, 0x44, 0x10, 0x4b, 0xf7, 0x27, 0x3b, 0x81, 0xed, 0xe2, 0xaa,
    }
};
static const uint8_t sMessageEncodingTest0525_Payload[] =
{
    0x4e, 0x95, 0x52, 0xe9, 0x0d, 0xf4, 0x55, 0x83, 0xdb, 0x89, 0xda, 0x6b, 0xad, 0x45, 0x34, 0x78,
    0x29, 0x55, 0x22, 0x2e, 0xc2, 0x00, 0x59, 0x28, 0x2c, 0x1c, 0x97, 0xc6, 0xeb, 0x5f, 0xbb, 0x0d,
    0x5c, 0xa5, 0xb9, 0xa6, 0xc0, 0x1a, 0x1b, 0xf6, 0x24, 0xa0, 0x7c, 0x25, 0x69, 0xb3, 0xa8, 0xde,
    0x7b, 0xc2, 0x49, 0xf2, 0xd1, 0x74, 0x4f, 0xc7, 0xab, 0xd0, 0x84, 0x0c, 0x0c, 0x25, 0x11, 0x31,
    0x8e, 0x5c, 0x50, 0xa2, 0xfb, 0xb6, 0xdc, 0x45, 0xdb, 0x2b, 0x59, 0xf2, 0x67, 0x36, 0xaf, 0xc9,
    0x09, 0x94, 0x35, 0x64, 0xd5, 0xf2, 0x81, 0xce, 0x6f, 0xa5, 0xfa, 0xd0, 0x8f, 0x44, 0x50, 0x01,
    0x4c, 0x75, 0x97, 0x00, 0x8d, 0x19, 0x92, 0x22, 0xc4, 0xf4, 0x01, 0x87, 0x98, 0x38, 0xd8, 0x57,
    0x70, 0xf4, 0x83, 0x94, 0xa9, 0xea, 0xe2, 0x2d, 0x9d, 0x0c, 0x69, 0x46, 0x1f, 0x56, 0x98, 0x38,
};

static const uint8_t sMessageEncodingTest0525_ExpectedEncoding[] =
{
    0x20, 0x20, 0x7d, 0x47, 0xb7, 0x12, 0x5f, 0x2d, 0xdb, 0x79, 0xbe, 0x91, 0xf4, 0x15, 0xe3, 0x95,
    0x13, 0xb3, 0x0a, 0xad, 0x84, 0x86, 0x14, 0x04, 0x45, 0xbf, 0x3c, 0x63, 0x1c, 0x8d, 0xbd, 0x4a,
    0x3c, 0x36, 0x1a, 0x7e, 0xcf, 0x81, 0x5b, 0x04, 0x67, 0xe1, 0x5e, 0x79, 0xb4, 0x96, 0xac, 0xfa,
    0xc1, 0x7d, 0x41, 0x80, 0xfd, 0x51, 0xad, 0xe7, 0x3a, 0xce, 0x96, 0x24, 0x9a, 0x37, 0x93, 0x1c,
    0x26, 0x90, 0xd0, 0x22, 0xe9, 0x68, 0x23, 0x5f, 0x58, 0xf5, 0xb6, 0x44, 0x6c, 0xb6, 0x04, 0xff,
    0x46, 0x48, 0xe7, 0xb9, 0xb2, 0x0c, 0x78, 0x35, 0xcd, 0x1f, 0xde, 0x96, 0xbf, 0x41, 0x12, 0x35,
    0xe2, 0x0a, 0xfa, 0x73, 0xf5, 0xe1, 0x29, 0x3f, 0x73, 0x9a, 0x36, 0x9b, 0x35, 0x90, 0xbe, 0x7d,
    0x9d, 0xe3, 0xc0, 0x0d, 0x61, 0x7c, 0x23, 0xfa, 0x54, 0xe4, 0xa6, 0x85, 0x84, 0x53, 0x9b, 0x5e,
    0xb4, 0xc6, 0x3d, 0x23, 0x3f, 0xd1, 0xc3, 0xdb, 0x7c, 0xa7, 0xf2, 0x2c, 0xd1, 0x70, 0x9a, 0x47,
};

static const MessageEncodingTestVector sMessageEncodingTest0525 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x12B7477D,
        0,
        0x2D5F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0525_EncryptionKey,
    sMessageEncodingTest0525_Payload,
    sizeof(sMessageEncodingTest0525_Payload),
    sMessageEncodingTest0525_ExpectedEncoding,
    sizeof(sMessageEncodingTest0525_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0526_EncryptionKey =
{
    {
        0xd5, 0xb2, 0x0f, 0xc2, 0x42, 0x8c, 0xf3, 0xfb, 0x3a, 0xf8, 0x67, 0x4f, 0x4e, 0x68, 0xb8, 0x74,
    }
};
static const uint8_t sMessageEncodingTest0526_Payload[] =
{
    0xad, 0x72, 0x36, 0x11, 0x0b, 0x7b, 0x27, 0x01, 0xfa, 0x23, 0x40, 0xa2, 0x7a, 0x8a, 0x03, 0x28,
    0x86, 0xaf, 0xc2, 0x00, 0xe2, 0xb9, 0xfc, 0xa7, 0x5d, 0x7c, 0x0a, 0x82, 0x8d, 0xc0, 0xa7, 0x1d,
    0x45, 0x93, 0x23, 0x6a, 0x61, 0x83, 0xd2, 0x83, 0x76, 0x40, 0xa3, 0x17, 0x34, 0xe1, 0xb0, 0xbd,
    0x80, 0x8e, 0x6b, 0xcb, 0x80, 0x6e, 0x04, 0x8c, 0x3f, 0x74, 0x2d, 0x1d, 0x81, 0xd7, 0xf0, 0x8a,
    0x09, 0x10, 0x35, 0x25, 0xb4, 0xe0, 0x9b, 0xf6, 0x44, 0x2a, 0xea, 0x24, 0x49, 0xc7, 0xd8, 0x2a,
    0x48, 0xd5, 0xc4, 0x55, 0x0b, 0xe0, 0x16, 0x19, 0x80, 0xfb, 0xf5, 0xde, 0xa8, 0x2e, 0x59, 0xa6,
    0x88, 0x70, 0x93, 0x13, 0xf8, 0x99, 0x75, 0x17, 0x59, 0x8e, 0x8e, 0xd5, 0xe5, 0x1a, 0xec, 0x45,
    0x54, 0xbb, 0x43, 0x5a, 0xfe, 0x34, 0x32, 0x25, 0xa8, 0x19, 0x0b, 0x2a, 0xa8, 0x28, 0x36, 0x82,
};

static const uint8_t sMessageEncodingTest0526_ExpectedEncoding[] =
{
    0x30, 0x20, 0x57, 0xf2, 0x88, 0x13, 0x38, 0x25, 0xe5, 0x5b, 0xa5, 0x36, 0x0a, 0x5d, 0x0f, 0x7a,
    0x2c, 0x21, 0x0c, 0x1a, 0xc9, 0x70, 0xd5, 0x3a, 0x80, 0xbb, 0x14, 0x17, 0x6e, 0x17, 0xca, 0x98,
    0x7a, 0x13, 0x94, 0xe6, 0xbb, 0xdd, 0x7b, 0x2b, 0x5f, 0xab, 0x94, 0x74, 0xe5, 0x66, 0xdc, 0x3b,
    0xfe, 0x60, 0x5e, 0x30, 0x29, 0xb4, 0x41, 0x5f, 0x1e, 0xa9, 0x42, 0x34, 0xd6, 0x29, 0x2d, 0xca,
    0x0c, 0x28, 0x5f, 0xaa, 0xd0, 0xfe, 0x3c, 0xd6, 0x73, 0xfc, 0xf1, 0x26, 0xc8, 0x94, 0xd3, 0x06,
    0x4e, 0xd9, 0x2e, 0x8f, 0x1f, 0xc5, 0xb2, 0xee, 0xa1, 0xac, 0x0c, 0xda, 0x44, 0x21, 0xda, 0xf9,
    0xa7, 0xa7, 0x64, 0x40, 0x59, 0x7a, 0xf6, 0x76, 0xec, 0x95, 0xd0, 0x18, 0x55, 0x29, 0xe9, 0xc7,
    0x52, 0xc5, 0x16, 0x5d, 0x4c, 0x09, 0xf3, 0x58, 0x56, 0xfe, 0xb7, 0x46, 0x12, 0xcd, 0xfc, 0x70,
    0xbd, 0x92, 0x5d, 0x40, 0x15, 0xa3, 0xde, 0xf7, 0x7e, 0x10, 0x8e, 0xcc, 0xe0, 0x94, 0x75, 0x18,
    0x57, 0xc9, 0xde, 0x75, 0x14, 0x75, 0x24, 0x93,
};

static const MessageEncodingTestVector sMessageEncodingTest0526 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x1388F257,
        0,
        0x2538,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0526_EncryptionKey,
    sMessageEncodingTest0526_Payload,
    sizeof(sMessageEncodingTest0526_Payload),
    sMessageEncodingTest0526_ExpectedEncoding,
    sizeof(sMessageEncodingTest0526_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0527_Payload[] =
{
    0xe4, 0x2e, 0xf4, 0x03, 0xf2, 0xfa, 0x12, 0x9b, 0x43, 0x5d, 0xa5, 0xf3, 0x2d, 0xc1, 0x43, 0xf0,
    0x0e, 0xcb, 0xa1, 0xc2, 0x48, 0x71, 0x21, 0x4f, 0x9e, 0x26, 0xca, 0xc9, 0x51, 0xfb, 0xb3, 0xb7,
    0xda, 0xfa, 0xb3, 0x3e, 0xa1, 0x77, 0xfa, 0x4e, 0xce, 0x32, 0x16, 0xfd, 0xcc, 0x8d, 0x45, 0xd1,
    0x54, 0x7a, 0x76, 0xbd, 0xd5, 0x9f, 0x92, 0xd1, 0x68, 0xd5, 0xc0, 0x01, 0x3a, 0xd6, 0x7a, 0x7d,
    0x87, 0x98, 0x15, 0x6f, 0xd9, 0x3e, 0xb7, 0xaf, 0x2c, 0x17, 0x52, 0x4b, 0xa0, 0x2e, 0x9e, 0x55,
    0xd1, 0xbd, 0xe4, 0x09, 0x23, 0xe4, 0x67, 0x0f, 0x1f, 0x69, 0x6d, 0x94, 0x47, 0x51, 0x13, 0x1d,
    0xbf, 0x0d, 0x6f, 0xdb, 0x21, 0xfa, 0xba, 0x7c, 0xac, 0x12, 0x6b, 0x59, 0x02, 0x45, 0xc2, 0x1c,
    0x77, 0xa5, 0x19, 0x3d, 0xd4, 0x6e, 0xcc, 0x94, 0x39, 0x65, 0x65, 0xfe, 0xfc, 0xee, 0x5e, 0x78,
    0x5c, 0x83, 0xb4, 0xb3, 0x8c, 0xb2, 0x7b, 0xff, 0x24, 0xb1, 0x74, 0x52, 0xef, 0x00, 0x65, 0x6a,
    0x24, 0x6e, 0x07, 0x81, 0x68, 0xf0, 0x44, 0xdc, 0x52, 0xf2, 0x9d, 0x3e, 0xff, 0xff, 0x67, 0x2f,
    0x8f, 0x5d, 0x25, 0x45, 0x28, 0x53, 0xf3, 0xdc, 0x22, 0x25, 0x84, 0xd7, 0xd0, 0xa3, 0xbd, 0xb5,
    0x78, 0x76, 0xb2, 0xd1, 0x66, 0x02, 0x56, 0x43, 0xe6, 0xa1, 0x7c, 0x8e, 0x33, 0xdb, 0xab, 0x4c,
    0x35, 0xaa, 0x00, 0x00, 0xb4, 0xf1, 0x19, 0x56, 0xa7, 0xc8, 0x64, 0x6c, 0x04, 0x72, 0xa8, 0xbe,
    0x1e, 0xaf, 0x2a, 0x94, 0x64, 0xfb, 0xbd, 0x00, 0xa0, 0x34, 0xd7, 0x85, 0x57, 0x82, 0x9d, 0x40,
    0xf1, 0xd6, 0x53, 0x89, 0x76, 0xe8, 0xe7, 0xad, 0xcb, 0xc9, 0x45, 0x00, 0x11, 0xce, 0x87, 0xfc,
    0xe1, 0x49, 0x56, 0xca, 0x34, 0xd1, 0x03, 0xd1, 0x63, 0xc8, 0xe5, 0x0d, 0x67, 0x51, 0xe7, 0xde,
    0x93, 0xe9, 0x49, 0x4f, 0x44, 0xdf, 0xb5, 0xba, 0x1b, 0xb8, 0x74, 0x7d, 0x3c, 0x66, 0x19, 0xf6,
    0xd3, 0x1a, 0x5b, 0x6f, 0x7a, 0xd4, 0x24, 0x99, 0x83, 0xff, 0xcc, 0xa7, 0x0e, 0xc1, 0x38, 0xbf,
    0x61, 0x73, 0x57, 0xe0, 0x56, 0xb4, 0xeb, 0x0a, 0x8b, 0xa6, 0x74, 0x2a, 0xc6, 0x2c, 0x05, 0x79,
    0xd2, 0x08, 0x8a, 0x8d, 0x61, 0x63, 0x62, 0x02, 0xfe, 0x62, 0x62, 0x7a, 0xba, 0xab, 0xc4, 0x9d,
    0x2c, 0xd9, 0x2d, 0x0b, 0xc8, 0xcf, 0xbb, 0xfa, 0x35, 0xcc, 0xc6, 0x09, 0x4a, 0x0b, 0xdd, 0xc6,
    0xdb, 0x74, 0x53, 0x83, 0x40, 0xd6, 0xb1, 0x8b, 0xbf, 0x94, 0x14, 0x56, 0xb2, 0xf9, 0x4b, 0x0b,
    0xf6, 0x9b, 0xfe, 0x1a, 0x1f, 0xdf, 0x57, 0xc4, 0x11, 0xb6, 0xb6, 0x9f, 0x95, 0x40, 0xb0, 0xcf,
    0x56, 0xea, 0x49, 0x7f, 0x36, 0xc3, 0x66, 0xb4, 0x6e, 0x15, 0xf8, 0xca, 0x2a, 0x54, 0xe1, 0xc0,
    0x35, 0x72, 0xaa, 0x3e, 0x6a, 0x2f, 0x4f, 0x3d, 0xb3, 0x0c, 0xe7, 0x55, 0xac, 0x7a, 0x76, 0xff,
    0x63, 0x9d, 0x57, 0xcf, 0xbc, 0xf6, 0x5d, 0x8b, 0xd0, 0x08, 0x57, 0x42, 0x97, 0x8a, 0x93, 0x2e,
    0x24, 0xd6, 0xb2, 0xda, 0x0c, 0xf9, 0x65, 0x9d, 0xdf, 0xf1, 0x32, 0xbf, 0xfd, 0x52, 0x2f, 0xb4,
    0x60, 0x76, 0xc6, 0x21, 0x59, 0xe3, 0xc3, 0x64, 0xad, 0xc1, 0xa9, 0x92, 0xe0, 0x8a, 0x9f, 0xe2,
    0x4b, 0x0b, 0x15, 0x79, 0x4f, 0xe0, 0xa5, 0x67, 0x89, 0xf9, 0x1c, 0x59, 0xce, 0x77, 0x81, 0xac,
    0x6e, 0x29, 0x19, 0x0c, 0xcc, 0xcd, 0x6e, 0x88, 0x18, 0x57, 0xaf, 0xde, 0xf3, 0x0e, 0x94, 0xd2,
    0x44, 0xee, 0xfc, 0xc9, 0xd1, 0xd9, 0xaf, 0x5d, 0x42, 0x25, 0xa6, 0x9d, 0x1f, 0x4b, 0x64, 0x2c,
    0xc1, 0x53, 0x5d, 0x7e, 0x1c, 0xe2, 0xbb, 0x84, 0x3c, 0xbd, 0x81, 0x47, 0xf8, 0x58, 0x3f, 0xe2,
    0xc6, 0x07, 0x42, 0xa0, 0x22, 0xc6, 0x76, 0x50, 0x48, 0xe7, 0xbe, 0xa0, 0x31, 0xa8, 0x76, 0xe0,
    0x58, 0x6d, 0x97, 0x84, 0xe7, 0xc0, 0xdc, 0xd6, 0xde, 0xed, 0x2a, 0x5b, 0x67, 0x64, 0x85, 0xab,
    0x3c, 0x6d, 0x25, 0x7b, 0x1a, 0x28, 0x21, 0x59, 0x8a, 0x88, 0x60, 0xae, 0x41, 0xea, 0x9b, 0x36,
    0x80, 0x37, 0x6e, 0xba, 0x60, 0x5c, 0x08, 0x51, 0x71, 0xd7, 0x0f, 0x99, 0xdf, 0x55, 0x3b, 0x49,
    0x30, 0x41, 0xeb, 0x08, 0xce, 0x49, 0xbe, 0xb3, 0xba, 0x4c, 0xd3, 0xd0, 0x6f, 0x59, 0x39, 0xc9,
    0x0d, 0xb8, 0x53, 0x73, 0x20, 0x50, 0xdf, 0x5b, 0x63, 0xc5, 0x02, 0x85, 0x11, 0x93, 0xfb, 0xe6,
    0x6b, 0xdf, 0x83, 0x60, 0x13, 0xef, 0xda, 0x3c, 0x78, 0x88, 0x8e, 0x24, 0x90, 0xb7, 0x8f, 0xfd,
    0x74, 0x75, 0xe1, 0x91, 0x3b, 0xd2, 0x89, 0x9f, 0x9b, 0x32, 0x2b, 0x68, 0xde, 0x79, 0x78, 0x45,
    0x35, 0x9d, 0xab, 0xc4, 0xdc, 0x32, 0xa9, 0xdd, 0xc7, 0x53, 0x90, 0x20, 0xd7, 0x11, 0x62, 0xd3,
    0xe9, 0x9f, 0x48, 0x63, 0x51, 0x6c, 0x49, 0x1e, 0x9b, 0x2c, 0xed, 0x3d, 0xc3, 0x44, 0x85, 0xf4,
    0x8c, 0x63, 0xf7, 0x15, 0xf7, 0x7a, 0xa4, 0x9d, 0xbb, 0x4e, 0x59, 0x5c, 0xa5, 0x6e, 0xac, 0x5b,
    0xe1, 0xe5, 0x5e, 0xcf, 0xb7, 0xdf, 0xc1, 0x14, 0x6e, 0x97, 0xe1, 0x2e, 0x33, 0x47, 0xc7, 0xbe,
    0xb1, 0xb9, 0x4a, 0x3f, 0xf4, 0x7c, 0xfe, 0x7f, 0xd2, 0x48, 0x08, 0xf9, 0x47, 0x9c, 0x63, 0xad,
    0x24, 0xeb, 0x9e, 0x11, 0xfa, 0x70, 0xa3, 0x3a, 0x02, 0x4f, 0xa9, 0xc8, 0xff, 0xed, 0x1e, 0xcf,
    0x3f, 0xd8, 0xe1, 0x04, 0x37, 0x0f, 0xc9, 0x27, 0x35, 0xb5, 0xed, 0x3e, 0x00, 0xf8, 0xfb, 0xf5,
    0x65, 0x45, 0xa7, 0x3b, 0x2b, 0x35, 0x72, 0xf2, 0x93, 0xd6, 0x5d, 0x06, 0x35, 0xd9, 0xc2, 0xe9,
    0xd9, 0x7b, 0xaa, 0xda, 0x56, 0x67, 0x73, 0xfd, 0x73, 0xde, 0xe9, 0xc0, 0xa8, 0x52, 0x6a, 0x8f,
    0xec, 0x3c, 0x58, 0x9f, 0x82, 0x43, 0x99, 0xde, 0x6f, 0x1c, 0xb5, 0xa9, 0x83, 0x09, 0xf2, 0xe6,
    0x38, 0x61, 0x13, 0xd6, 0xae, 0xf1, 0x52, 0x4b, 0xab, 0xf3, 0x26, 0xb8, 0x47, 0xca, 0x87, 0x4e,
    0xd7, 0x7b, 0xc2, 0xa0, 0x8c, 0x64, 0xf9, 0x90, 0x90, 0x5b, 0x04, 0xc9, 0x16, 0x36, 0x64, 0x5c,
    0x02, 0x2b, 0x9e, 0x47, 0x7a, 0xdc, 0x4d, 0x2d, 0x9a, 0x67, 0xe2, 0x69, 0x60, 0x94, 0xf8, 0x60,
    0x91, 0x52, 0xd7, 0x7e, 0x0b, 0xe3, 0x0d, 0x9c, 0x9b, 0x40, 0xd7, 0xc7, 0x3b, 0xef, 0x59, 0x76,
    0x86, 0x08, 0xcb, 0x6d, 0xec, 0x31, 0xdf, 0xa2, 0xa7, 0x2a, 0xa2, 0xb7, 0x82, 0x0c, 0x7c, 0xe3,
    0x98, 0x48, 0xf8, 0xba, 0x74, 0xc7, 0x0b, 0x96, 0x56, 0xa6, 0x32, 0x0d, 0x7e, 0x8e, 0x8d, 0x4e,
    0x9d, 0x53, 0xe5, 0x8f, 0xe6, 0xb8, 0xbf, 0x13, 0x96, 0x7b, 0xbc, 0xa0, 0xab, 0x0b, 0xed, 0x82,
    0x91, 0x14, 0x5b, 0x40, 0x6d, 0xdd, 0x83, 0x87, 0x64, 0x12, 0xa9, 0xe2, 0xbe, 0xaf, 0x86, 0x3b,
    0x58, 0x30, 0x50, 0xd5, 0xf4, 0x86, 0xde, 0x38, 0x8a, 0x4c, 0xe0, 0x93, 0xee, 0x04, 0x58, 0xda,
    0xe4, 0x35, 0x3b, 0x71, 0x6a, 0x1a, 0x21, 0xfb, 0x7c, 0x01, 0xce, 0x1c, 0xc2, 0x4e, 0x13, 0x21,
    0x25, 0x0b, 0x85, 0x73, 0xba, 0xb1, 0x63, 0xbb, 0x91, 0xb9, 0x77, 0x60, 0x8b, 0xa2, 0xb7, 0x75,
    0xf1, 0x9a, 0x92, 0x60, 0x57, 0x01, 0xff, 0x08, 0x7a, 0x12, 0xd3, 0xb8, 0xf9, 0x76, 0xe8, 0x8e,
    0x17, 0xb0, 0x14, 0x02, 0x39, 0x7d, 0x0d, 0xa1, 0x07, 0x0c, 0x6c, 0x16, 0x81, 0xc2, 0x9d, 0xff,
    0xb5, 0xc2, 0x6d, 0xfd, 0x37, 0xc7, 0x5f, 0x5e, 0x11, 0x14, 0x81, 0x2d, 0xa1, 0x01, 0x46, 0x41,
};

static const uint8_t sMessageEncodingTest0527_ExpectedEncoding[] =
{
    0x00, 0x27, 0xea, 0xd0, 0x9a, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe4, 0x2e, 0xf4, 0x03, 0xf2, 0xfa, 0x12, 0x9b, 0x43, 0x5d,
    0xa5, 0xf3, 0x2d, 0xc1, 0x43, 0xf0, 0x0e, 0xcb, 0xa1, 0xc2, 0x48, 0x71, 0x21, 0x4f, 0x9e, 0x26,
    0xca, 0xc9, 0x51, 0xfb, 0xb3, 0xb7, 0xda, 0xfa, 0xb3, 0x3e, 0xa1, 0x77, 0xfa, 0x4e, 0xce, 0x32,
    0x16, 0xfd, 0xcc, 0x8d, 0x45, 0xd1, 0x54, 0x7a, 0x76, 0xbd, 0xd5, 0x9f, 0x92, 0xd1, 0x68, 0xd5,
    0xc0, 0x01, 0x3a, 0xd6, 0x7a, 0x7d, 0x87, 0x98, 0x15, 0x6f, 0xd9, 0x3e, 0xb7, 0xaf, 0x2c, 0x17,
    0x52, 0x4b, 0xa0, 0x2e, 0x9e, 0x55, 0xd1, 0xbd, 0xe4, 0x09, 0x23, 0xe4, 0x67, 0x0f, 0x1f, 0x69,
    0x6d, 0x94, 0x47, 0x51, 0x13, 0x1d, 0xbf, 0x0d, 0x6f, 0xdb, 0x21, 0xfa, 0xba, 0x7c, 0xac, 0x12,
    0x6b, 0x59, 0x02, 0x45, 0xc2, 0x1c, 0x77, 0xa5, 0x19, 0x3d, 0xd4, 0x6e, 0xcc, 0x94, 0x39, 0x65,
    0x65, 0xfe, 0xfc, 0xee, 0x5e, 0x78, 0x5c, 0x83, 0xb4, 0xb3, 0x8c, 0xb2, 0x7b, 0xff, 0x24, 0xb1,
    0x74, 0x52, 0xef, 0x00, 0x65, 0x6a, 0x24, 0x6e, 0x07, 0x81, 0x68, 0xf0, 0x44, 0xdc, 0x52, 0xf2,
    0x9d, 0x3e, 0xff, 0xff, 0x67, 0x2f, 0x8f, 0x5d, 0x25, 0x45, 0x28, 0x53, 0xf3, 0xdc, 0x22, 0x25,
    0x84, 0xd7, 0xd0, 0xa3, 0xbd, 0xb5, 0x78, 0x76, 0xb2, 0xd1, 0x66, 0x02, 0x56, 0x43, 0xe6, 0xa1,
    0x7c, 0x8e, 0x33, 0xdb, 0xab, 0x4c, 0x35, 0xaa, 0x00, 0x00, 0xb4, 0xf1, 0x19, 0x56, 0xa7, 0xc8,
    0x64, 0x6c, 0x04, 0x72, 0xa8, 0xbe, 0x1e, 0xaf, 0x2a, 0x94, 0x64, 0xfb, 0xbd, 0x00, 0xa0, 0x34,
    0xd7, 0x85, 0x57, 0x82, 0x9d, 0x40, 0xf1, 0xd6, 0x53, 0x89, 0x76, 0xe8, 0xe7, 0xad, 0xcb, 0xc9,
    0x45, 0x00, 0x11, 0xce, 0x87, 0xfc, 0xe1, 0x49, 0x56, 0xca, 0x34, 0xd1, 0x03, 0xd1, 0x63, 0xc8,
    0xe5, 0x0d, 0x67, 0x51, 0xe7, 0xde, 0x93, 0xe9, 0x49, 0x4f, 0x44, 0xdf, 0xb5, 0xba, 0x1b, 0xb8,
    0x74, 0x7d, 0x3c, 0x66, 0x19, 0xf6, 0xd3, 0x1a, 0x5b, 0x6f, 0x7a, 0xd4, 0x24, 0x99, 0x83, 0xff,
    0xcc, 0xa7, 0x0e, 0xc1, 0x38, 0xbf, 0x61, 0x73, 0x57, 0xe0, 0x56, 0xb4, 0xeb, 0x0a, 0x8b, 0xa6,
    0x74, 0x2a, 0xc6, 0x2c, 0x05, 0x79, 0xd2, 0x08, 0x8a, 0x8d, 0x61, 0x63, 0x62, 0x02, 0xfe, 0x62,
    0x62, 0x7a, 0xba, 0xab, 0xc4, 0x9d, 0x2c, 0xd9, 0x2d, 0x0b, 0xc8, 0xcf, 0xbb, 0xfa, 0x35, 0xcc,
    0xc6, 0x09, 0x4a, 0x0b, 0xdd, 0xc6, 0xdb, 0x74, 0x53, 0x83, 0x40, 0xd6, 0xb1, 0x8b, 0xbf, 0x94,
    0x14, 0x56, 0xb2, 0xf9, 0x4b, 0x0b, 0xf6, 0x9b, 0xfe, 0x1a, 0x1f, 0xdf, 0x57, 0xc4, 0x11, 0xb6,
    0xb6, 0x9f, 0x95, 0x40, 0xb0, 0xcf, 0x56, 0xea, 0x49, 0x7f, 0x36, 0xc3, 0x66, 0xb4, 0x6e, 0x15,
    0xf8, 0xca, 0x2a, 0x54, 0xe1, 0xc0, 0x35, 0x72, 0xaa, 0x3e, 0x6a, 0x2f, 0x4f, 0x3d, 0xb3, 0x0c,
    0xe7, 0x55, 0xac, 0x7a, 0x76, 0xff, 0x63, 0x9d, 0x57, 0xcf, 0xbc, 0xf6, 0x5d, 0x8b, 0xd0, 0x08,
    0x57, 0x42, 0x97, 0x8a, 0x93, 0x2e, 0x24, 0xd6, 0xb2, 0xda, 0x0c, 0xf9, 0x65, 0x9d, 0xdf, 0xf1,
    0x32, 0xbf, 0xfd, 0x52, 0x2f, 0xb4, 0x60, 0x76, 0xc6, 0x21, 0x59, 0xe3, 0xc3, 0x64, 0xad, 0xc1,
    0xa9, 0x92, 0xe0, 0x8a, 0x9f, 0xe2, 0x4b, 0x0b, 0x15, 0x79, 0x4f, 0xe0, 0xa5, 0x67, 0x89, 0xf9,
    0x1c, 0x59, 0xce, 0x77, 0x81, 0xac, 0x6e, 0x29, 0x19, 0x0c, 0xcc, 0xcd, 0x6e, 0x88, 0x18, 0x57,
    0xaf, 0xde, 0xf3, 0x0e, 0x94, 0xd2, 0x44, 0xee, 0xfc, 0xc9, 0xd1, 0xd9, 0xaf, 0x5d, 0x42, 0x25,
    0xa6, 0x9d, 0x1f, 0x4b, 0x64, 0x2c, 0xc1, 0x53, 0x5d, 0x7e, 0x1c, 0xe2, 0xbb, 0x84, 0x3c, 0xbd,
    0x81, 0x47, 0xf8, 0x58, 0x3f, 0xe2, 0xc6, 0x07, 0x42, 0xa0, 0x22, 0xc6, 0x76, 0x50, 0x48, 0xe7,
    0xbe, 0xa0, 0x31, 0xa8, 0x76, 0xe0, 0x58, 0x6d, 0x97, 0x84, 0xe7, 0xc0, 0xdc, 0xd6, 0xde, 0xed,
    0x2a, 0x5b, 0x67, 0x64, 0x85, 0xab, 0x3c, 0x6d, 0x25, 0x7b, 0x1a, 0x28, 0x21, 0x59, 0x8a, 0x88,
    0x60, 0xae, 0x41, 0xea, 0x9b, 0x36, 0x80, 0x37, 0x6e, 0xba, 0x60, 0x5c, 0x08, 0x51, 0x71, 0xd7,
    0x0f, 0x99, 0xdf, 0x55, 0x3b, 0x49, 0x30, 0x41, 0xeb, 0x08, 0xce, 0x49, 0xbe, 0xb3, 0xba, 0x4c,
    0xd3, 0xd0, 0x6f, 0x59, 0x39, 0xc9, 0x0d, 0xb8, 0x53, 0x73, 0x20, 0x50, 0xdf, 0x5b, 0x63, 0xc5,
    0x02, 0x85, 0x11, 0x93, 0xfb, 0xe6, 0x6b, 0xdf, 0x83, 0x60, 0x13, 0xef, 0xda, 0x3c, 0x78, 0x88,
    0x8e, 0x24, 0x90, 0xb7, 0x8f, 0xfd, 0x74, 0x75, 0xe1, 0x91, 0x3b, 0xd2, 0x89, 0x9f, 0x9b, 0x32,
    0x2b, 0x68, 0xde, 0x79, 0x78, 0x45, 0x35, 0x9d, 0xab, 0xc4, 0xdc, 0x32, 0xa9, 0xdd, 0xc7, 0x53,
    0x90, 0x20, 0xd7, 0x11, 0x62, 0xd3, 0xe9, 0x9f, 0x48, 0x63, 0x51, 0x6c, 0x49, 0x1e, 0x9b, 0x2c,
    0xed, 0x3d, 0xc3, 0x44, 0x85, 0xf4, 0x8c, 0x63, 0xf7, 0x15, 0xf7, 0x7a, 0xa4, 0x9d, 0xbb, 0x4e,
    0x59, 0x5c, 0xa5, 0x6e, 0xac, 0x5b, 0xe1, 0xe5, 0x5e, 0xcf, 0xb7, 0xdf, 0xc1, 0x14, 0x6e, 0x97,
    0xe1, 0x2e, 0x33, 0x47, 0xc7, 0xbe, 0xb1, 0xb9, 0x4a, 0x3f, 0xf4, 0x7c, 0xfe, 0x7f, 0xd2, 0x48,
    0x08, 0xf9, 0x47, 0x9c, 0x63, 0xad, 0x24, 0xeb, 0x9e, 0x11, 0xfa, 0x70, 0xa3, 0x3a, 0x02, 0x4f,
    0xa9, 0xc8, 0xff, 0xed, 0x1e, 0xcf, 0x3f, 0xd8, 0xe1, 0x04, 0x37, 0x0f, 0xc9, 0x27, 0x35, 0xb5,
    0xed, 0x3e, 0x00, 0xf8, 0xfb, 0xf5, 0x65, 0x45, 0xa7, 0x3b, 0x2b, 0x35, 0x72, 0xf2, 0x93, 0xd6,
    0x5d, 0x06, 0x35, 0xd9, 0xc2, 0xe9, 0xd9, 0x7b, 0xaa, 0xda, 0x56, 0x67, 0x73, 0xfd, 0x73, 0xde,
    0xe9, 0xc0, 0xa8, 0x52, 0x6a, 0x8f, 0xec, 0x3c, 0x58, 0x9f, 0x82, 0x43, 0x99, 0xde, 0x6f, 0x1c,
    0xb5, 0xa9, 0x83, 0x09, 0xf2, 0xe6, 0x38, 0x61, 0x13, 0xd6, 0xae, 0xf1, 0x52, 0x4b, 0xab, 0xf3,
    0x26, 0xb8, 0x47, 0xca, 0x87, 0x4e, 0xd7, 0x7b, 0xc2, 0xa0, 0x8c, 0x64, 0xf9, 0x90, 0x90, 0x5b,
    0x04, 0xc9, 0x16, 0x36, 0x64, 0x5c, 0x02, 0x2b, 0x9e, 0x47, 0x7a, 0xdc, 0x4d, 0x2d, 0x9a, 0x67,
    0xe2, 0x69, 0x60, 0x94, 0xf8, 0x60, 0x91, 0x52, 0xd7, 0x7e, 0x0b, 0xe3, 0x0d, 0x9c, 0x9b, 0x40,
    0xd7, 0xc7, 0x3b, 0xef, 0x59, 0x76, 0x86, 0x08, 0xcb, 0x6d, 0xec, 0x31, 0xdf, 0xa2, 0xa7, 0x2a,
    0xa2, 0xb7, 0x82, 0x0c, 0x7c, 0xe3, 0x98, 0x48, 0xf8, 0xba, 0x74, 0xc7, 0x0b, 0x96, 0x56, 0xa6,
    0x32, 0x0d, 0x7e, 0x8e, 0x8d, 0x4e, 0x9d, 0x53, 0xe5, 0x8f, 0xe6, 0xb8, 0xbf, 0x13, 0x96, 0x7b,
    0xbc, 0xa0, 0xab, 0x0b, 0xed, 0x82, 0x91, 0x14, 0x5b, 0x40, 0x6d, 0xdd, 0x83, 0x87, 0x64, 0x12,
    0xa9, 0xe2, 0xbe, 0xaf, 0x86, 0x3b, 0x58, 0x30, 0x50, 0xd5, 0xf4, 0x86, 0xde, 0x38, 0x8a, 0x4c,
    0xe0, 0x93, 0xee, 0x04, 0x58, 0xda, 0xe4, 0x35, 0x3b, 0x71, 0x6a, 0x1a, 0x21, 0xfb, 0x7c, 0x01,
    0xce, 0x1c, 0xc2, 0x4e, 0x13, 0x21, 0x25, 0x0b, 0x85, 0x73, 0xba, 0xb1, 0x63, 0xbb, 0x91, 0xb9,
    0x77, 0x60, 0x8b, 0xa2, 0xb7, 0x75, 0xf1, 0x9a, 0x92, 0x60, 0x57, 0x01, 0xff, 0x08, 0x7a, 0x12,
    0xd3, 0xb8, 0xf9, 0x76, 0xe8, 0x8e, 0x17, 0xb0, 0x14, 0x02, 0x39, 0x7d, 0x0d, 0xa1, 0x07, 0x0c,
    0x6c, 0x16, 0x81, 0xc2, 0x9d, 0xff, 0xb5, 0xc2, 0x6d, 0xfd, 0x37, 0xc7, 0x5f, 0x5e, 0x11, 0x14,
    0x81, 0x2d, 0xa1, 0x01, 0x46, 0x41,
};

static const MessageEncodingTestVector sMessageEncodingTest0527 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF89AD0EA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0527_Payload,
    sizeof(sMessageEncodingTest0527_Payload),
    sMessageEncodingTest0527_ExpectedEncoding,
    sizeof(sMessageEncodingTest0527_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0528_EncryptionKey =
{
    {
        0x14, 0x8d, 0x4b, 0x79, 0x06, 0x19, 0xe0, 0xed, 0x7b, 0xfb, 0x12, 0x77, 0x35, 0xa2, 0x6b, 0x12,
    },
    {
        0xfa, 0x62, 0x72, 0xf2, 0x4e, 0x09, 0x59, 0x27, 0x6f, 0xde, 0x4c, 0x3d, 0x70, 0xb2, 0xf8, 0xc3,
        0xe3, 0xa0, 0x62, 0x81,
    }
};
static const uint8_t sMessageEncodingTest0528_Payload[] =
{
    0xe8, 0x8d, 0xcb, 0x01, 0xf0, 0x0d, 0xc6, 0x71, 0x7c, 0xc7, 0xfb, 0x6d, 0x05, 0x45, 0xcf, 0x62,
    0x33, 0x43, 0xee, 0x15, 0xc3, 0xd6, 0xb3, 0x58, 0x85, 0xe9, 0xe1, 0x4a, 0xe5, 0xa0, 0xc8, 0x67,
    0x71, 0x69, 0x36, 0x8b, 0x28, 0x6d, 0x8b, 0xf4, 0x2a, 0xb0, 0x92, 0xe0, 0x1f, 0x01, 0x60, 0xb3,
    0xd7, 0x33, 0x9c, 0x90, 0x16, 0xb8, 0x80, 0x77, 0x26, 0xd0, 0xb7, 0x76, 0x7f, 0x6c, 0xd7, 0xff,
    0xd8, 0x43, 0xb9, 0xc7, 0x52, 0x16, 0x8a, 0x60, 0x7b, 0xb1, 0x82, 0x3c, 0xb5, 0x13, 0xc2, 0x6d,
    0x75, 0xfd, 0xa3, 0x9b, 0x67, 0x91, 0x24, 0xb6, 0xbf, 0x4b, 0xb6, 0xa0, 0x12, 0x7b, 0x7d, 0x0a,
    0xbf, 0x0a, 0x61, 0x25, 0xac, 0x63, 0x5d, 0xe4, 0x0e, 0x3e, 0x80, 0xaa, 0x4f, 0xe6, 0x2e, 0xe9,
    0x46, 0xf9, 0x4f, 0xa5, 0xdc, 0x07, 0xdb, 0x41, 0x81, 0x9c, 0x3e, 0xe5, 0x58, 0x0a, 0xa4, 0xfd,
    0xe2, 0xac, 0xc9, 0xdc, 0x15, 0x6e, 0x93, 0x34, 0x3f, 0x44, 0x1c, 0xe1, 0xcd, 0x6d, 0x46, 0x09,
    0xb5, 0xd1, 0x8a, 0x7d, 0xd7, 0x9e, 0x4b, 0x8c, 0x15, 0x94, 0x3f, 0x21, 0xb7, 0x1c, 0x3b, 0xbd,
    0xe8, 0x43, 0x47, 0xee, 0xf3, 0x02, 0x69, 0x2f, 0x8f, 0xe2, 0x63, 0x78, 0xa0, 0x29, 0x6b, 0x2b,
    0x84, 0xda, 0x5b, 0x1f, 0x3b, 0xde, 0xd9, 0xde, 0xd3, 0x68, 0x62, 0xe6, 0xaf, 0x7d, 0xb9, 0x0f,
    0xe0, 0xb6, 0xd2, 0x53, 0xfc, 0x72, 0x7f, 0x59, 0x0f, 0x7e, 0xc0, 0xc8, 0xbb, 0xb1, 0x68, 0x17,
    0x54, 0x04, 0x8b, 0xbf, 0x50, 0x02, 0xf4, 0x05, 0x2e, 0x3c, 0xbd, 0x53, 0x73, 0x22, 0x30, 0xbc,
    0x05, 0xcc, 0x60, 0xce, 0x8f, 0xa6, 0x7d, 0xe9, 0xb6, 0x67, 0xba, 0x2d, 0xdd, 0xb1, 0xdd, 0xb8,
    0x15, 0x06, 0xb6, 0x7c, 0x3e, 0x3f, 0x69, 0x36, 0x10, 0xc8, 0xb7, 0x0a, 0xb7, 0x1b, 0x5d, 0x4f,
    0x32, 0xc9, 0xd6, 0x27, 0xb3, 0xb8, 0xbf, 0x91, 0xbd, 0xa6, 0x59, 0x93, 0x2e, 0x5b, 0x2a, 0x83,
    0x64, 0x55, 0x6b, 0x2c, 0x01, 0xe6, 0x27, 0x22, 0x68, 0xd8, 0xd7, 0xa7, 0x58, 0xab, 0x92, 0x6d,
    0x53, 0x72, 0x74, 0x94, 0x95, 0x56, 0xcd, 0x13, 0x69, 0x93, 0x39, 0x20, 0xef, 0xa2, 0xef, 0xf6,
    0x74, 0xf3, 0x85, 0x52, 0xd7, 0xf3, 0xc0, 0x2e, 0xb9, 0x6b, 0x53, 0x97, 0xb6, 0x68, 0x1a, 0xd0,
    0x57, 0x8f, 0xab, 0x07, 0x55, 0xcd, 0x22, 0x21, 0xb3, 0xe5, 0xdd, 0x08, 0x82, 0x8f, 0x65, 0x88,
    0xc3, 0x44, 0x7b, 0xa4, 0x99, 0xf2, 0x72, 0xd5, 0xf3, 0x4f, 0x56, 0x54, 0x93, 0xd1, 0xc0, 0x07,
    0xee, 0x85, 0xea, 0x9d, 0xbb, 0xa5, 0x32, 0x69, 0xb1, 0x81, 0x8d, 0xc2, 0xef, 0x7a, 0x95, 0xcf,
    0xac, 0x35, 0x15, 0x8d, 0xd7, 0xe0, 0x88, 0x2a, 0x34, 0xbd, 0xfe, 0x19, 0x39, 0xa0, 0x4c, 0x61,
    0x2e, 0xb3, 0x20, 0x91, 0x6e, 0x87, 0xf6, 0x60, 0x2c, 0xb0, 0x0e, 0xd5, 0x23, 0x38, 0xf2, 0x95,
    0x67, 0x9e, 0x3a, 0xab, 0xdf, 0x85, 0xbe, 0x0d, 0x08, 0xc7, 0xaf, 0xd9, 0x56, 0x7b, 0xab, 0x2b,
    0x60, 0x3e, 0x06, 0x06, 0x06, 0xfb, 0x39, 0x83, 0xd7, 0x63, 0xc7, 0x00, 0xf7, 0x20, 0xa9, 0xbe,
    0xaf, 0x94, 0xb9, 0x4d, 0xe4, 0xbd, 0x63, 0xad, 0x9b, 0x05, 0x6d, 0x82, 0xa3, 0x30, 0x57, 0x30,
    0xb3, 0x43, 0xa9, 0x61, 0xb3, 0x93, 0x30, 0x51, 0xd4, 0x27, 0xf0, 0xe3, 0x5e, 0xcf, 0x86, 0xfb,
    0x0c, 0xc6, 0x4e, 0x33, 0x20, 0xfc, 0x3c, 0xaf, 0x20, 0x68, 0x16, 0x7e, 0x61, 0xcd, 0x93, 0xd5,
    0xb4, 0xb2, 0xa4, 0x6d, 0x38, 0x03, 0xc4, 0xac, 0x06, 0x19, 0x12, 0xf6, 0xe8, 0xe1, 0xb1, 0xf5,
    0xc9, 0x90, 0xb1, 0x1d, 0xf9, 0x08, 0x05, 0x90, 0x5f, 0xd7, 0xf5, 0x24, 0xb1, 0x32, 0x39, 0x68,
    0x29, 0x08, 0xf5, 0x3b, 0x4f, 0x0b, 0xfe, 0x1b, 0x88, 0x81, 0xdd, 0x22, 0x0c, 0xf9, 0x8d, 0x15,
    0xcb, 0x2d, 0x9d, 0x09, 0xc0, 0xb2, 0xb1, 0xa3, 0x2b, 0x84, 0x72, 0xfa, 0xa3, 0x1f, 0x5c, 0x21,
    0x61, 0x07, 0xac, 0xaa, 0x09, 0xca, 0x0b, 0xa3, 0xd0, 0x06, 0x3a, 0x0e, 0xe9, 0x1c, 0x6b, 0xb9,
    0x99, 0xdd, 0x48, 0x86, 0xe3, 0x98, 0x0a, 0x5d, 0x97, 0x13, 0x4c, 0x0f, 0x3f, 0xf0, 0xf9, 0xe1,
    0xa0, 0x61, 0x67, 0x0a, 0x71, 0xcb, 0x41, 0x28, 0xf0, 0x4c, 0x66, 0x7b, 0x5a, 0x8a, 0x64, 0x8c,
    0x3a, 0x03, 0x46, 0x88, 0x9f, 0xf3, 0x54, 0xbd, 0xd5, 0xc3, 0xfc, 0x69, 0x86, 0xd8, 0x50, 0x7c,
    0x31, 0x9e, 0x45, 0x58, 0x85, 0xa4, 0xd2, 0xee, 0xf2, 0xa3, 0x34, 0x99, 0x9c, 0x00, 0x2c, 0xdd,
    0x93, 0x05, 0x45, 0xf2, 0x4e, 0xa6, 0x95, 0x5a, 0xe2, 0x39, 0xd8, 0x47, 0x14, 0x44, 0x53, 0x88,
    0x52, 0xb3, 0x5f, 0x14, 0x4b, 0xb0, 0x52, 0xe6, 0xae, 0x7c, 0x63, 0x9e, 0xe8, 0xca, 0x53, 0x3f,
    0x17, 0x71, 0x92, 0x7a, 0x56, 0x6d, 0xcb, 0xe2, 0x9b, 0xf6, 0x20, 0xca, 0x55, 0xc4, 0xf7, 0x5a,
    0xe9, 0x8f, 0x3a, 0x51, 0x53, 0xa2, 0x74, 0xd3, 0x2c, 0xc1, 0x9d, 0xa6, 0x39, 0x42, 0xc5, 0x8c,
    0x75, 0xa3, 0xc4, 0x0b, 0x4a, 0x28, 0x02, 0x7f, 0x75, 0xce, 0xbc, 0x78, 0x2c, 0xb0, 0x09, 0xa6,
    0xc7, 0xc8, 0x8c, 0xb8, 0xdd, 0x1c, 0xe3, 0x1b, 0x09, 0x7f, 0xd7, 0x71, 0xdd, 0xd2, 0x77, 0x4a,
    0xf5, 0xbb, 0x7b, 0x1d, 0x6b, 0xd8, 0x03, 0xe6, 0x22, 0xdd, 0x63, 0x00, 0xd2, 0x68, 0x89, 0xb4,
    0x95, 0x02, 0x24, 0x55, 0x2f, 0x84, 0x53, 0xf5, 0x50, 0x42, 0x98, 0x95, 0x74, 0x92, 0xda, 0x54,
    0x5f, 0xe5, 0xd8, 0xee, 0x4a, 0x37, 0xdb, 0xb9, 0xf8, 0xbf, 0x92, 0x78, 0x27, 0x94, 0xc4, 0xb0,
    0x51, 0xc2, 0xbd, 0x29, 0x4c, 0x1b, 0xcf, 0x0d, 0x27, 0x9c, 0x5e, 0x58, 0x42, 0x94, 0xa1, 0x37,
    0x4e, 0xb0, 0x32, 0x25, 0x51, 0x26, 0x48, 0xf3, 0x3e, 0x46, 0xcb, 0xcb, 0xfd, 0x13, 0x18, 0xc0,
    0x2a, 0xc7, 0x52, 0xa3, 0x69, 0x64, 0x24, 0xdf, 0x32, 0xf9, 0x12, 0xbf, 0x5c, 0x96, 0x19, 0x40,
    0x04, 0xb6, 0x10, 0x9c, 0xbf, 0xa8, 0x76, 0x76, 0x11, 0xcc, 0xe6, 0xf9, 0x44, 0xbd, 0x46, 0xc4,
    0xf1, 0x96, 0x04, 0x57, 0xa0, 0xad, 0x04, 0x30, 0x30, 0x5a, 0x62, 0x12, 0x58, 0x41, 0x4c, 0xc2,
    0x89, 0xf7, 0x93, 0xc3, 0x39, 0xb2, 0x8c, 0x09, 0x83, 0xd7, 0x41, 0xf6, 0xca, 0x7c, 0x14, 0xc9,
    0x13, 0xa6, 0x50, 0xf4, 0xdf, 0x6d, 0x40, 0xba, 0xc1, 0xfc, 0x9a, 0x24, 0x01, 0xd2, 0x83, 0x3b,
    0x15, 0x83, 0x86, 0x87, 0x9b, 0x04, 0x53, 0x40, 0x4d, 0x16, 0xe8, 0xfc, 0xfa, 0xb6, 0x89, 0xfc,
    0x82, 0x7f, 0x36, 0x74, 0xe8, 0x71, 0x8d, 0x3c, 0xd8, 0x7a, 0x10, 0xc1, 0x8e, 0x05, 0x8e, 0x3a,
    0xf9, 0x79, 0xeb, 0xfd, 0xd4, 0x2c, 0x2e, 0x76, 0x3e, 0x0c, 0x00, 0xb6, 0xa0, 0xa3, 0x5f, 0xa2,
    0x47, 0xb9, 0xcc, 0xee, 0xa2, 0x0f, 0x46, 0xd4, 0x37, 0x20, 0x8c, 0x55, 0xcb, 0xb0, 0x30, 0x0f,
    0x16, 0x19, 0xab, 0xd5, 0x16, 0xba, 0x4f, 0xd0, 0x9b, 0xb4, 0x91, 0x1a, 0xf2, 0x03, 0x5f, 0xbf,
    0xf7, 0xae, 0xbd, 0xeb, 0x0d, 0x47, 0xce, 0xfd, 0x83, 0x6a, 0x9e, 0xa7, 0xf8, 0x38, 0x7a, 0x55,
    0x2a, 0x48, 0x07, 0x3c, 0x33, 0xe2, 0x74, 0xf1, 0xe7, 0x4a, 0x41, 0x5c, 0x5e, 0x70, 0x21, 0x84,
    0x50, 0x7c, 0x1e, 0x69, 0x6e, 0xa7, 0x2d, 0x39, 0xa6, 0x42, 0x81, 0x51, 0xbf, 0x9d, 0x4b, 0x1e,
    0x90, 0x3f, 0x33, 0x86, 0x8f, 0xec, 0x82, 0x1e, 0x57, 0x4d, 0x17, 0x58, 0xa6, 0x18, 0xcc, 0x01,
};

static const uint8_t sMessageEncodingTest0528_ExpectedEncoding[] =
{
    0x10, 0x27, 0xf8, 0x85, 0x9e, 0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf9, 0x23, 0x9f, 0x4a, 0xe3, 0x55, 0xac, 0xee, 0xfa, 0xd7,
    0x9e, 0xe4, 0xbd, 0x7e, 0x90, 0xec, 0x5e, 0xff, 0xbd, 0x32, 0xab, 0x12, 0x58, 0xaf, 0x17, 0x52,
    0x6d, 0xf9, 0xbd, 0x80, 0x65, 0x62, 0xda, 0x27, 0xbc, 0xa9, 0x3a, 0x02, 0x14, 0x13, 0xad, 0xf7,
    0xa0, 0x53, 0xd1, 0x1a, 0xa5, 0x8b, 0xc4, 0x0d, 0xee, 0x64, 0x43, 0x72, 0xb2, 0xd9, 0x01, 0x80,
    0xc9, 0xda, 0x76, 0xc1, 0x71, 0xe5, 0x34, 0x19, 0x14, 0x50, 0x66, 0xc3, 0xd9, 0x22, 0xa4, 0x47,
    0x7b, 0x11, 0xe3, 0xdd, 0x45, 0xbf, 0x19, 0x64, 0x5e, 0xe0, 0xec, 0xa9, 0x45, 0x83, 0xe5, 0x4b,
    0x8f, 0xff, 0x1a, 0x37, 0x56, 0x5b, 0x2b, 0x34, 0xde, 0xa4, 0xdb, 0xad, 0x5b, 0xeb, 0xa5, 0x63,
    0x2e, 0xfc, 0xc4, 0x18, 0x2d, 0xf7, 0xb7, 0xd1, 0x30, 0x02, 0x7f, 0xff, 0x2f, 0x3b, 0x75, 0x60,
    0xe0, 0x9b, 0x3b, 0x0c, 0xa1, 0x9a, 0x48, 0xde, 0x67, 0xd0, 0xeb, 0xba, 0xad, 0xbc, 0x2d, 0xf8,
    0x58, 0x51, 0x78, 0xe6, 0xc5, 0x51, 0xd2, 0xc8, 0xe2, 0x30, 0x95, 0x29, 0x75, 0x33, 0x4b, 0xf5,
    0xb3, 0xea, 0x28, 0x82, 0x06, 0xd1, 0x64, 0x45, 0x08, 0xd6, 0x3e, 0xba, 0x42, 0x23, 0xf7, 0xd2,
    0x98, 0xc7, 0x7a, 0xce, 0xfa, 0x30, 0x60, 0x29, 0x41, 0x35, 0x0e, 0xca, 0x1f, 0x43, 0x2f, 0x83,
    0xb5, 0x66, 0x6b, 0x84, 0x8a, 0x13, 0x92, 0x00, 0x09, 0x54, 0x7e, 0x4e, 0xcb, 0xde, 0x28, 0x8b,
    0xd2, 0xa7, 0xc5, 0x39, 0x1a, 0xca, 0xd9, 0xbf, 0x61, 0x46, 0x74, 0x51, 0x1d, 0xc7, 0xbe, 0x72,
    0x61, 0xf9, 0x96, 0xa4, 0xca, 0x81, 0xa8, 0x9a, 0xc5, 0x23, 0x16, 0xa9, 0xdd, 0xd1, 0x63, 0x8c,
    0xda, 0xbd, 0xbf, 0xdc, 0x89, 0xa6, 0xcf, 0x62, 0x1a, 0x10, 0x33, 0x89, 0xb2, 0xec, 0x67, 0x8e,
    0xcd, 0xa5, 0xce, 0xfa, 0xb9, 0x84, 0x0c, 0xea, 0x89, 0x4a, 0x80, 0x22, 0x4c, 0xb4, 0x96, 0x94,
    0x8e, 0x7e, 0xc3, 0xca, 0x3e, 0x0e, 0x88, 0x64, 0xe0, 0x6a, 0xe4, 0xd1, 0xf5, 0x39, 0xc6, 0xae,
    0x65, 0xfd, 0x55, 0x3a, 0x9d, 0xb7, 0x60, 0x73, 0xb0, 0x49, 0x09, 0x7b, 0x9e, 0x83, 0xe9, 0x1e,
    0x19, 0xac, 0x52, 0xa9, 0x30, 0xa5, 0x91, 0x63, 0x83, 0xdb, 0x50, 0xfb, 0xc8, 0xd9, 0x72, 0x49,
    0x0f, 0x1a, 0x82, 0x88, 0x5f, 0x49, 0x64, 0x6a, 0x57, 0xeb, 0xee, 0xa1, 0x2a, 0x1f, 0x0d, 0x84,
    0xfe, 0x17, 0x56, 0xeb, 0xf5, 0x76, 0x99, 0xa0, 0x21, 0x94, 0x87, 0x4d, 0xff, 0x1d, 0x39, 0x94,
    0x50, 0x3f, 0x1a, 0xb4, 0x1a, 0xe2, 0x54, 0x57, 0x5d, 0x6c, 0xcb, 0x90, 0x29, 0xc7, 0x81, 0xde,
    0x53, 0x78, 0x73, 0xa2, 0xe1, 0xa0, 0x59, 0xae, 0x03, 0x08, 0xda, 0xf3, 0x47, 0xa0, 0x54, 0xe4,
    0x06, 0x80, 0x78, 0xd2, 0x40, 0x0c, 0x1e, 0x53, 0xf0, 0xda, 0xa5, 0xb0, 0x14, 0xc5, 0x27, 0xda,
    0x60, 0x89, 0xc1, 0x6b, 0x38, 0x3a, 0xb9, 0x99, 0x3c, 0x84, 0xeb, 0xb8, 0xff, 0x5b, 0xdc, 0xe9,
    0x34, 0x5d, 0xea, 0x9c, 0xff, 0x74, 0x5e, 0xa6, 0xab, 0x88, 0x86, 0xc9, 0xa1, 0xe2, 0x7a, 0xf4,
    0x6f, 0x89, 0xec, 0xc1, 0x90, 0xa0, 0xa5, 0xbb, 0x9a, 0x45, 0x6b, 0xcf, 0xaf, 0xb4, 0xed, 0xa8,
    0x93, 0xb0, 0xc1, 0xb4, 0x03, 0x31, 0xb2, 0x11, 0x2f, 0x75, 0xd5, 0x47, 0xf3, 0xcb, 0x48, 0x71,
    0xfb, 0x77, 0x71, 0xd8, 0xcf, 0x30, 0x4c, 0x21, 0xd8, 0x57, 0x33, 0xfd, 0xe2, 0x8d, 0x18, 0x40,
    0xe7, 0x91, 0xce, 0x4e, 0x6b, 0x8e, 0xdd, 0x8b, 0xe0, 0xbd, 0xc5, 0x8a, 0xd9, 0x04, 0x54, 0x26,
    0x02, 0x2e, 0xc0, 0x32, 0x51, 0x53, 0x19, 0x00, 0xd8, 0x90, 0x48, 0x40, 0x1e, 0x24, 0x90, 0x01,
    0xfc, 0x02, 0x93, 0x40, 0xb4, 0x42, 0x85, 0x3f, 0x4e, 0x5f, 0x29, 0xca, 0xea, 0x8d, 0x1b, 0x1d,
    0xa5, 0x9a, 0xf7, 0x3c, 0xd7, 0x40, 0x71, 0x42, 0x13, 0x87, 0x75, 0xd7, 0xda, 0x5b, 0x36, 0xe2,
    0x7f, 0xe4, 0xca, 0xd0, 0x24, 0xac, 0xbe, 0x72, 0x9f, 0xd4, 0x7d, 0x3b, 0x8c, 0xf2, 0x35, 0xbd,
    0x81, 0xac, 0xb1, 0x7d, 0xbd, 0xb7, 0xb1, 0xd2, 0x8a, 0xc5, 0x62, 0x71, 0x67, 0x20, 0x21, 0xb3,
    0xd2, 0x9e, 0x2e, 0xec, 0x10, 0xb4, 0x23, 0x75, 0x0f, 0x6b, 0x00, 0x72, 0x61, 0x15, 0x4e, 0xcd,
    0x15, 0x89, 0x56, 0x04, 0xae, 0x4e, 0xb6, 0xf5, 0x6a, 0xc5, 0x0d, 0xe0, 0x1d, 0x82, 0x58, 0x91,
    0xab, 0xdc, 0xfb, 0xe6, 0xc3, 0x1a, 0x18, 0x08, 0x1a, 0xc7, 0xcc, 0xb6, 0x0a, 0xa9, 0x6d, 0x3b,
    0xb6, 0x85, 0xa9, 0x96, 0xf9, 0x17, 0x8c, 0x16, 0x56, 0xfe, 0xc4, 0x44, 0xb0, 0xdd, 0x24, 0x93,
    0xce, 0x79, 0xcc, 0x8f, 0x7a, 0xc4, 0x1b, 0x96, 0x26, 0x04, 0x7a, 0x06, 0xdc, 0x89, 0xee, 0xbf,
    0xf6, 0xf8, 0xb3, 0x71, 0x98, 0xf8, 0x78, 0xdb, 0xe4, 0x00, 0x7c, 0xb1, 0xd4, 0xc1, 0xaa, 0x9f,
    0xcb, 0x4a, 0x19, 0x62, 0x61, 0x69, 0x59, 0xd1, 0xff, 0xd5, 0x3f, 0xfe, 0x3a, 0xaa, 0x7f, 0xe0,
    0x3e, 0xe1, 0xc8, 0xd1, 0xd3, 0x81, 0xd7, 0xa6, 0x80, 0x40, 0x1c, 0x21, 0xeb, 0xbc, 0x26, 0x5e,
    0x56, 0x59, 0xa2, 0xf3, 0xf5, 0x7e, 0xe3, 0x52, 0x51, 0xca, 0xb6, 0x9c, 0xfe, 0x84, 0x41, 0xf7,
    0xb0, 0x42, 0x36, 0x82, 0x93, 0x2a, 0x47, 0x6f, 0x71, 0x96, 0xbd, 0xac, 0x85, 0x49, 0xf1, 0x6c,
    0x4c, 0x25, 0xb7, 0xb0, 0xea, 0xbe, 0xe5, 0x3b, 0xb0, 0x99, 0x4f, 0xcf, 0xcf, 0x50, 0x23, 0x79,
    0xd1, 0xaa, 0x52, 0xfb, 0x8f, 0xeb, 0x76, 0x8b, 0x5f, 0xbd, 0x96, 0x49, 0xb4, 0x02, 0x41, 0xd1,
    0x5f, 0x0a, 0x09, 0x53, 0x37, 0x0d, 0x4e, 0xf2, 0x3b, 0xe5, 0xb7, 0x25, 0x8c, 0xe5, 0x77, 0xec,
    0x1f, 0x32, 0x73, 0x0e, 0x1e, 0xd2, 0x65, 0xf6, 0x5d, 0x38, 0x79, 0x73, 0xc3, 0xa3, 0xee, 0x9e,
    0x11, 0x92, 0x2a, 0x43, 0xb8, 0xaa, 0xa1, 0xf4, 0xe0, 0xa4, 0x01, 0x48, 0xf2, 0x47, 0x0d, 0x94,
    0x5b, 0x40, 0x4a, 0x34, 0x05, 0x35, 0x2f, 0x5b, 0x20, 0x29, 0x92, 0xac, 0xed, 0x1e, 0xc1, 0xce,
    0x19, 0x37, 0x61, 0x6b, 0xc1, 0xbe, 0x17, 0x53, 0x9f, 0x0c, 0x17, 0x35, 0xa9, 0x51, 0xa0, 0x39,
    0x34, 0xb6, 0x72, 0x10, 0x92, 0x92, 0x7f, 0xd0, 0xbe, 0xe3, 0x05, 0x87, 0x09, 0x6d, 0x13, 0xd4,
    0xe0, 0x8f, 0xe3, 0x27, 0x90, 0xab, 0xcd, 0x55, 0xb4, 0xe9, 0xdb, 0x22, 0x74, 0x8b, 0x95, 0x52,
    0xd6, 0x51, 0x1e, 0xd3, 0xee, 0x05, 0x0e, 0x93, 0xfa, 0x0b, 0xb4, 0xbe, 0x0c, 0x52, 0xd2, 0x3e,
    0x77, 0x66, 0x08, 0x8d, 0x6d, 0x33, 0xa3, 0xdb, 0x8c, 0x52, 0x31, 0x2f, 0x16, 0x95, 0x8b, 0x52,
    0xe9, 0xeb, 0x1e, 0x6d, 0xf4, 0xb2, 0xeb, 0x2b, 0xc5, 0x11, 0x18, 0x81, 0xa0, 0x36, 0xc7, 0xad,
    0x7f, 0x31, 0xa8, 0xa1, 0x37, 0x8a, 0x4a, 0x56, 0x0f, 0x73, 0x0e, 0xd1, 0x3c, 0xff, 0x1c, 0xbd,
    0xa3, 0xf6, 0xae, 0xda, 0xbb, 0xb8, 0x7e, 0x07, 0x50, 0x77, 0x1c, 0xe8, 0xb8, 0x32, 0xcd, 0x67,
    0x16, 0x59, 0x43, 0x48, 0xec, 0xad, 0x64, 0x44, 0xd4, 0xc0, 0x29, 0x44, 0x18, 0x1b, 0x37, 0x55,
    0xfa, 0xf9, 0x58, 0xdb, 0xd9, 0x38, 0xae, 0x79, 0x36, 0x9c, 0x45, 0xe1, 0x0b, 0x78, 0x9c, 0xf3,
    0xde, 0x5c, 0x4c, 0xf4, 0x58, 0x7e, 0x23, 0xa7, 0x2e, 0x81, 0x9e, 0x1f, 0xef, 0x25, 0x99, 0xdf,
    0x84, 0xcf, 0x19, 0x71, 0xb7, 0xae, 0x17, 0xf6, 0x5e, 0x5b, 0x16, 0x95, 0xc9, 0x91, 0x59, 0x96,
    0xd9, 0xed, 0x77, 0xdb, 0x39, 0x0d, 0x4e, 0xdd, 0x06, 0x53, 0x5c, 0x48, 0x4f, 0x43, 0xdd, 0x1e,
    0x19, 0xe6, 0xb8, 0xc7, 0xf4, 0xa4, 0x3c, 0xe8, 0x32, 0x8d, 0x2a, 0x7e,
};

static const MessageEncodingTestVector sMessageEncodingTest0528 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xA69E85F8,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x23F9,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0528_EncryptionKey,
    sMessageEncodingTest0528_Payload,
    sizeof(sMessageEncodingTest0528_Payload),
    sMessageEncodingTest0528_ExpectedEncoding,
    sizeof(sMessageEncodingTest0528_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0529_EncryptionKey =
{
    {
        0x4a, 0x0a, 0xf7, 0xa2, 0xae, 0xcf, 0x2a, 0x4a, 0xe7, 0x22, 0x1b, 0x07, 0xe6, 0xd5, 0xc6, 0x22,
    }
};
static const uint8_t sMessageEncodingTest0529_Payload[] =
{
    0x39, 0xb4, 0x67, 0xcc, 0xa0, 0x2f, 0x1a, 0xc4, 0xb2, 0x60, 0x4a, 0x6a, 0x8c, 0x40, 0xec, 0x64,
    0x51, 0x28, 0x99, 0xe9, 0x9a, 0xae, 0x71, 0x25, 0x36, 0x99, 0x14, 0xaf, 0x1a, 0x0f, 0x21, 0xdb,
    0xd3, 0xdc, 0x49, 0xf9, 0xa8, 0x2f, 0xb9, 0xe1, 0xc8, 0x73, 0xea, 0x53, 0x91, 0xae, 0xbe, 0xb6,
    0xe7, 0xdf, 0x64, 0x6e, 0xaf, 0x51, 0xac, 0x34, 0xcb, 0xd5, 0xb5, 0x72, 0xad, 0xab, 0xbb, 0xb4,
    0x4e, 0xb0, 0x39, 0xb3, 0x90, 0xad, 0x08, 0xe3, 0xa3, 0xa9, 0xcb, 0xdb, 0xcf, 0x79, 0x9a, 0x65,
    0xbf, 0xf0, 0xab, 0x9f, 0x1a, 0xca, 0x87, 0x41, 0x09, 0x29, 0x92, 0x3e, 0xb0, 0x91, 0x56, 0xe9,
    0xdf, 0x7f, 0x84, 0x54, 0x56, 0x55, 0x6c, 0xb2, 0x54, 0x27, 0x21, 0xc3, 0xa5, 0x01, 0x8a, 0xc0,
    0x16, 0x07, 0xe6, 0xa2, 0xa9, 0x34, 0xe3, 0x22, 0x51, 0x8d, 0x8d, 0x0b, 0xc6, 0xd7, 0xc9, 0x4f,
    0xa7, 0x3f, 0xda, 0xfa, 0x82, 0x79, 0xf9, 0x8a, 0x17, 0xe9, 0xaf, 0x8c, 0x33, 0xc0, 0x63, 0x6b,
    0x5d, 0xc6, 0x4a, 0xa7, 0xf2, 0x21, 0xc7, 0xed, 0xfa, 0x51, 0xb4, 0xed, 0xef, 0x13, 0x0a, 0xe9,
    0x4a, 0x8e, 0xec, 0x37, 0xaf, 0x08, 0x19, 0x93, 0x1e, 0xc9, 0xbc, 0xdf, 0x9e, 0xed, 0xcb, 0x49,
    0x33, 0xeb, 0x9d, 0xbe, 0xb2, 0xa8, 0xdb, 0xd4, 0x5e, 0x36, 0x53, 0x4c, 0xee, 0xc2, 0x00, 0x80,
    0xf0, 0x74, 0x04, 0x2d, 0x0f, 0x92, 0x8a, 0xf1, 0x5a, 0x53, 0xf4, 0x3d, 0xe7, 0x8e, 0x8c, 0xe3,
    0xcd, 0xeb, 0x28, 0x81, 0x9e, 0x2b, 0x11, 0x4b, 0xeb, 0x02, 0x86, 0x51, 0x44, 0x5b, 0x3f, 0xe7,
    0x4d, 0xca, 0x67, 0x83, 0xe8, 0xb6, 0x54, 0x7b, 0x91, 0xac, 0x7e, 0xd6, 0xd3, 0xf4, 0xcd, 0xc7,
    0xf6, 0x86, 0xe2, 0xb9, 0x95, 0xa6, 0xf8, 0x64, 0x91, 0x3f, 0x4a, 0x52, 0xb1, 0x94, 0xa3, 0x28,
    0x9c, 0x61, 0x8c, 0x97, 0xad, 0xba, 0xf0, 0x50, 0x44, 0x60, 0x1b, 0xf8, 0x7c, 0x01, 0xef, 0xf0,
    0x91, 0x41, 0x55, 0x08, 0xda, 0x26, 0xa6, 0x61, 0xc2, 0x81, 0x6d, 0xd8, 0x40, 0xa1, 0xe4, 0x3a,
    0x22, 0x41, 0xb2, 0xe7, 0x59, 0xdc, 0xff, 0xdf, 0x69, 0xd0, 0x03, 0xd0, 0x54, 0xed, 0xdb, 0x4a,
    0x8e, 0x6c, 0x8e, 0x14, 0x79, 0x5d, 0xe2, 0x59, 0xb4, 0xd8, 0x29, 0xfe, 0x1b, 0x78, 0xb4, 0x9a,
    0x8a, 0xc1, 0x23, 0x7f, 0xc7, 0x32, 0x60, 0x52, 0xe4, 0xe9, 0x79, 0xfd, 0x7a, 0x45, 0x90, 0xb7,
    0x80, 0x89, 0x0c, 0x2e, 0xc1, 0x78, 0x70, 0x5a, 0x20, 0x20, 0xae, 0x21, 0x22, 0xe4, 0x4f, 0x17,
    0x86, 0xc7, 0xaf, 0x96, 0xb8, 0xda, 0x5a, 0x87, 0xad, 0x9f, 0xe1, 0x53, 0x29, 0x42, 0x98, 0x9c,
    0x09, 0xa2, 0x34, 0x0f, 0x29, 0xe0, 0x6e, 0x52, 0xff, 0xeb, 0x15, 0x0d, 0x25, 0xcf, 0xf8, 0x61,
    0x26, 0x57, 0xc4, 0xf5, 0x1d, 0xec, 0xd1, 0x7a, 0x5b, 0x0a, 0xe1, 0xad, 0x0e, 0xb1, 0x25, 0x33,
    0x8f, 0xc0, 0x87, 0xaa, 0x0d, 0x1b, 0xbc, 0xe7, 0xed, 0x22, 0xd7, 0xe2, 0x67, 0x3a, 0x7d, 0x94,
    0xd2, 0xd3, 0xde, 0x4c, 0x9f, 0x57, 0x28, 0x15, 0x5d, 0xd5, 0xc7, 0x8d, 0x6f, 0x16, 0xa0, 0x09,
    0xfe, 0x38, 0xc2, 0xe4, 0x05, 0xc5, 0xa8, 0xaa, 0xcd, 0xe4, 0xfe, 0x1f, 0x0e, 0x3a, 0xc7, 0x3b,
    0x51, 0x7d, 0xa7, 0x8d, 0xe7, 0xaa, 0x6e, 0x82, 0xcc, 0xd9, 0x3d, 0x79, 0x17, 0x90, 0x10, 0x4b,
    0xc6, 0x82, 0xfb, 0xb9, 0x87, 0x7a, 0x45, 0xa6, 0x55, 0x1b, 0x11, 0xd1, 0x5e, 0x95, 0xb9, 0x3b,
    0x9f, 0x80, 0x40, 0x02, 0x4d, 0x90, 0x73, 0x37, 0xb8, 0xaa, 0xe1, 0x77, 0x65, 0xd4, 0x0e, 0xdc,
    0x44, 0xa8, 0x59, 0xd7, 0x94, 0x6a, 0x60, 0xb2, 0x2b, 0x99, 0x05, 0xb1, 0x67, 0x88, 0xbe, 0x00,
    0x69, 0xa0, 0xdb, 0x83, 0x14, 0x98, 0x12, 0x1a, 0x28, 0x85, 0xcf, 0x39, 0xf0, 0xcb, 0xb9, 0xbe,
    0xd7, 0xb9, 0xba, 0x02, 0x0b, 0x3d, 0xf0, 0x02, 0xd8, 0x4a, 0x43, 0x30, 0x92, 0xdb, 0x69, 0xa2,
    0x18, 0x65, 0xd4, 0x11, 0xf4, 0x84, 0x5b, 0xb8, 0x18, 0x24, 0xfa, 0x4f, 0xa4, 0xbb, 0x94, 0xed,
    0xa3, 0x93, 0x3f, 0x68, 0x28, 0x63, 0x49, 0x4b, 0x5c, 0xf3, 0xdc, 0x88, 0xfa, 0x94, 0x70, 0xbc,
    0xcb, 0xaa, 0x0f, 0x88, 0x36, 0x81, 0x25, 0xde, 0x07, 0x3d, 0x9f, 0x4a, 0xb2, 0x30, 0x32, 0xc1,
    0x2b, 0xef, 0x29, 0x6b, 0x3d, 0x7c, 0x28, 0xf7, 0xc9, 0x84, 0xdb, 0x05, 0xbc, 0x6d, 0xd9, 0x5a,
    0x07, 0xe1, 0x76, 0x16, 0xb9, 0xac, 0x33, 0xe3, 0x01, 0xfb, 0xb0, 0xbc, 0x67, 0xee, 0xa7, 0xad,
    0x95, 0xfe, 0xd2, 0x33, 0x9b, 0x53, 0x3d, 0x6b, 0x6a, 0xb6, 0x89, 0x6a, 0xd5, 0x7f, 0x5c, 0xc9,
    0x4c, 0xed, 0x47, 0x3b, 0x34, 0xdf, 0xc1, 0x32, 0xf4, 0xd8, 0xc2, 0x5c, 0xa5, 0x5d, 0xeb, 0x7e,
    0x43, 0x31, 0x8c, 0xd3, 0xf4, 0x51, 0x99, 0x49, 0x81, 0xcf, 0xe9, 0x36, 0x60, 0xfb, 0x0e, 0x32,
    0x99, 0xe2, 0xe2, 0xc8, 0x18, 0xfe, 0xe0, 0x6c, 0xef, 0xd2, 0xe5, 0x0e, 0xb1, 0x47, 0x43, 0xe9,
    0x20, 0x01, 0x6d, 0x02, 0x71, 0x06, 0x38, 0x6c, 0x68, 0xe4, 0xac, 0x2e, 0xf2, 0x75, 0x67, 0xd8,
    0x26, 0x47, 0x01, 0x18, 0x21, 0x04, 0x5e, 0xf0, 0xc3, 0x5d, 0x58, 0xa3, 0x92, 0xff, 0x80, 0x20,
    0x2d, 0x52, 0x2c, 0xe9, 0xfb, 0x39, 0xd2, 0x54, 0x7b, 0xba, 0x0d, 0x85, 0x8e, 0xc3, 0xab, 0xd5,
    0x3a, 0xd9, 0xd8, 0x7a, 0x94, 0xd8, 0x74, 0x7f, 0xc8, 0x23, 0xc1, 0x8e, 0x55, 0x61, 0xb8, 0xa2,
    0xc9, 0x47, 0x2e, 0x63, 0x46, 0xd5, 0x5f, 0x38, 0xf7, 0xf6, 0x08, 0x57, 0x7f, 0xdf, 0xac, 0xe8,
    0x2b, 0x6d, 0xe4, 0x4f, 0x7e, 0x99, 0x11, 0x8c, 0xd9, 0x33, 0x0c, 0xfb, 0xc9, 0x9d, 0x57, 0x61,
    0x84, 0xee, 0xf4, 0x00, 0x86, 0xc1, 0x22, 0xcb, 0xe7, 0x9c, 0x87, 0x2d, 0x77, 0xba, 0xf3, 0xfb,
    0xff, 0xc1, 0x82, 0x5f, 0xfc, 0x7b, 0xa4, 0xe5, 0xa3, 0x24, 0x1a, 0x1c, 0xa1, 0x31, 0x4c, 0x90,
    0x99, 0xe3, 0x73, 0x7d, 0xee, 0xdd, 0xc8, 0xd2, 0xdb, 0xff, 0x31, 0x2f, 0xec, 0x7d, 0x4c, 0x7d,
    0x80, 0xc3, 0xff, 0xa9, 0xed, 0x5f, 0xce, 0xeb, 0x4f, 0xd3, 0x8c, 0x76, 0xaf, 0x6c, 0x66, 0x17,
    0xdc, 0x88, 0xfb, 0x93, 0x05, 0x84, 0x38, 0x50, 0x35, 0xae, 0xd0, 0x4e, 0xf4, 0x46, 0xd3, 0xca,
    0xaf, 0xb3, 0x86, 0xae, 0x98, 0x38, 0xcb, 0x71, 0x4d, 0xe0, 0xd0, 0x7d, 0x24, 0x02, 0x07, 0x81,
    0x52, 0x64, 0xd0, 0x6d, 0x64, 0x3e, 0x7c, 0xf7, 0x94, 0x48, 0xfa, 0x14, 0x82, 0x1a, 0x82, 0xd0,
    0x80, 0xb0, 0xa0, 0x12, 0x6d, 0x54, 0xd8, 0xa6, 0xda, 0xc7, 0x86, 0xfb, 0x39, 0x1c, 0xa3, 0xc1,
    0xee, 0xc8, 0x0d, 0x5c, 0xba, 0x21, 0xa0, 0x8f, 0xed, 0x1c, 0x94, 0x89, 0xe9, 0x27, 0x53, 0x3a,
    0x8f, 0x13, 0xda, 0x07, 0xdc, 0x26, 0x86, 0xed, 0x70, 0xd8, 0x5c, 0x2a, 0xe8, 0xfb, 0x23, 0x06,
    0xe7, 0xeb, 0x8c, 0xb1, 0xee, 0x8e, 0x35, 0xe6, 0xc8, 0x6f, 0x12, 0x2d, 0x5e, 0x4e, 0xcd, 0xc1,
    0xb0, 0x6a, 0x02, 0xd8, 0x38, 0x96, 0x3d, 0xec, 0xce, 0x78, 0x92, 0xc0, 0x61, 0x36, 0x59, 0x4a,
    0xe6, 0x20, 0x9f, 0xff, 0x83, 0x31, 0x29, 0xc1, 0xd2, 0xac, 0xeb, 0xd0, 0xac, 0x6f, 0xc2, 0xb6,
    0x28, 0x3d, 0x4a, 0x50, 0xbb, 0x85, 0x48, 0x84, 0x30, 0x41, 0x38, 0x10, 0xd3, 0x04, 0x21, 0x7f,
    0xbe, 0x2b, 0xa0, 0xbe, 0xac, 0xaf, 0xdd, 0x76, 0xcf, 0x3a, 0x4e, 0x0f, 0xf0, 0x3e, 0x8e, 0x78,
};

static const uint8_t sMessageEncodingTest0529_ExpectedEncoding[] =
{
    0x20, 0x27, 0x47, 0x1e, 0x76, 0x46, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xd5, 0x28, 0xe3, 0xe6, 0xdf, 0x49, 0x91, 0xbc, 0x83, 0x86,
    0x11, 0x76, 0xba, 0x76, 0xff, 0x0b, 0x70, 0xce, 0xd6, 0x1a, 0xf2, 0xd7, 0x66, 0xb1, 0x5d, 0x82,
    0x57, 0xbc, 0xc3, 0xa9, 0xb8, 0x5a, 0x5e, 0xaf, 0x8c, 0x9b, 0x15, 0x4d, 0x5e, 0x71, 0x31, 0xf1,
    0x26, 0x84, 0x28, 0xd3, 0x88, 0x54, 0x6d, 0x8a, 0x7e, 0x2b, 0xd2, 0x74, 0x53, 0x7c, 0x09, 0xd6,
    0x2e, 0x4e, 0x1a, 0x18, 0x39, 0xda, 0xde, 0xc2, 0x97, 0xcf, 0xc1, 0xf7, 0x6a, 0x7d, 0x59, 0x75,
    0x0f, 0x41, 0xf0, 0x7a, 0x0a, 0xbc, 0x79, 0x02, 0xb5, 0xbf, 0xac, 0x3d, 0x53, 0x1e, 0xf8, 0xf1,
    0xe5, 0xad, 0x71, 0xd6, 0x36, 0xa4, 0x66, 0x96, 0x31, 0xad, 0x98, 0x00, 0x46, 0xcd, 0xa3, 0xa2,
    0x8c, 0x6c, 0x38, 0xfc, 0x9c, 0xfa, 0x71, 0x58, 0x3c, 0xfe, 0x59, 0xab, 0xa8, 0x53, 0x69, 0x3c,
    0xc0, 0x7b, 0xa5, 0x12, 0x67, 0x04, 0x38, 0x17, 0xa4, 0x7d, 0x3c, 0xef, 0x86, 0x0e, 0x36, 0x58,
    0x0b, 0x22, 0xe7, 0x12, 0x50, 0x73, 0xb5, 0x2c, 0x28, 0xab, 0xd9, 0x94, 0xe3, 0x6d, 0xfd, 0xd3,
    0xdb, 0x2b, 0xc2, 0xd0, 0xe8, 0x85, 0xfb, 0x2a, 0xc3, 0xdb, 0x2a, 0xdf, 0x52, 0x69, 0x2e, 0x2b,
    0xb0, 0xbf, 0x52, 0x1d, 0x8b, 0xe0, 0x09, 0xac, 0xc7, 0x2c, 0xbb, 0x51, 0x06, 0x9d, 0x74, 0xa8,
    0xf4, 0xaf, 0xb6, 0xf1, 0x81, 0xd9, 0x92, 0xa8, 0x8c, 0x10, 0x0d, 0x82, 0x84, 0xdf, 0x72, 0x7d,
    0xa0, 0x2a, 0x1c, 0xe0, 0xef, 0x46, 0xee, 0xac, 0xfe, 0x43, 0x36, 0x5e, 0xe3, 0x0e, 0x7c, 0xd0,
    0xd0, 0xe6, 0x5b, 0xc2, 0x54, 0xd6, 0x35, 0x45, 0x3e, 0x8b, 0xc1, 0x5c, 0xf2, 0x08, 0x58, 0x3d,
    0xb2, 0xa2, 0xfc, 0x22, 0x7c, 0x0c, 0x58, 0x0b, 0xa1, 0x5e, 0xb9, 0x37, 0x68, 0xfe, 0xf5, 0xb4,
    0x8f, 0x9e, 0xce, 0x35, 0x99, 0x94, 0xd8, 0xf3, 0x57, 0xda, 0xba, 0x1b, 0xfd, 0xe7, 0xa9, 0xb3,
    0xd5, 0xc0, 0x9a, 0x23, 0x2e, 0xd5, 0x4e, 0x9f, 0x64, 0x91, 0x24, 0x6b, 0xea, 0xa6, 0xb1, 0x63,
    0x0b, 0x7f, 0xdf, 0x58, 0x04, 0x9a, 0xa4, 0x38, 0x50, 0x57, 0xdf, 0x9b, 0xce, 0x80, 0x35, 0x2f,
    0x05, 0xac, 0x58, 0x33, 0x84, 0x34, 0x8b, 0xfc, 0x3e, 0xc4, 0x81, 0x58, 0x22, 0x96, 0x76, 0x1b,
    0x6f, 0x2c, 0x0e, 0xd6, 0x92, 0xc0, 0x54, 0xd6, 0x7b, 0x42, 0x31, 0x57, 0xcd, 0x06, 0x62, 0xae,
    0xea, 0x4f, 0x40, 0x78, 0x2f, 0x2b, 0x96, 0x35, 0xcd, 0x19, 0x89, 0x15, 0x71, 0x84, 0xe6, 0x23,
    0x30, 0x00, 0x46, 0x7c, 0x52, 0x09, 0xa0, 0x61, 0xf6, 0xfb, 0x02, 0x8e, 0x6b, 0x4a, 0x6c, 0x6d,
    0xb6, 0x68, 0x5f, 0x12, 0x13, 0x38, 0x77, 0x17, 0x73, 0x42, 0x3a, 0x20, 0x93, 0xb0, 0x42, 0xd9,
    0x8b, 0x6f, 0xf4, 0xad, 0x13, 0xaa, 0xc4, 0xe9, 0x4f, 0x6d, 0x22, 0xdb, 0x6b, 0xd7, 0x3b, 0x38,
    0x2c, 0xc6, 0xf8, 0x93, 0xdd, 0x12, 0x54, 0x9b, 0xb6, 0xd5, 0xc3, 0x26, 0xbc, 0x77, 0xd6, 0x52,
    0x5d, 0xdc, 0xa2, 0x00, 0x81, 0x44, 0xd2, 0xe9, 0x36, 0x1b, 0x28, 0xc7, 0xb9, 0x0d, 0x31, 0xdd,
    0x61, 0x4e, 0x1f, 0x95, 0xb4, 0x45, 0x08, 0x61, 0xcf, 0xe9, 0x35, 0x8b, 0x49, 0x12, 0x97, 0x77,
    0x6f, 0x14, 0x7a, 0x59, 0xef, 0x42, 0x11, 0x67, 0xa1, 0xa2, 0xf1, 0x73, 0xd6, 0xf7, 0x50, 0x7a,
    0x2d, 0x3c, 0xbb, 0x9d, 0x1c, 0xd0, 0x0c, 0x57, 0x6f, 0x3a, 0x26, 0x03, 0xcd, 0x25, 0x1a, 0x70,
    0x3c, 0x18, 0x24, 0xe1, 0x2c, 0x7c, 0x79, 0x44, 0x15, 0x33, 0x51, 0xdd, 0x7d, 0xa3, 0xd5, 0x04,
    0x57, 0x65, 0x0b, 0x7c, 0x50, 0x0b, 0x22, 0x73, 0x0f, 0x5f, 0x67, 0xa2, 0x89, 0x61, 0x69, 0x0e,
    0x70, 0x1c, 0x52, 0x0d, 0xbd, 0x88, 0xe6, 0xb3, 0xa0, 0xc3, 0x25, 0xcf, 0xb2, 0x1d, 0x55, 0x3c,
    0xaa, 0x22, 0x1a, 0xa5, 0x60, 0x5e, 0xe6, 0x37, 0x9e, 0x9a, 0xfd, 0x58, 0x4d, 0x42, 0xa6, 0x95,
    0x9c, 0x9d, 0x61, 0x2a, 0x82, 0xcf, 0x5a, 0xb9, 0x7b, 0x32, 0x70, 0x7a, 0x31, 0x50, 0xb4, 0x40,
    0x60, 0x0b, 0x2e, 0x3a, 0x24, 0x6f, 0xcb, 0xef, 0x9c, 0x3f, 0x4b, 0x1e, 0x21, 0x4e, 0x18, 0x1d,
    0x74, 0xf5, 0x62, 0xa7, 0x30, 0xec, 0x4b, 0x8b, 0x54, 0x08, 0xfb, 0x26, 0xf8, 0xfb, 0x70, 0xa2,
    0x3b, 0xd6, 0xe9, 0x54, 0x05, 0xbc, 0x42, 0x7a, 0x52, 0x91, 0xb2, 0x44, 0xd6, 0xb2, 0xdc, 0xa2,
    0x95, 0x54, 0x7f, 0xab, 0x7d, 0xec, 0x98, 0x02, 0x0e, 0x04, 0xce, 0x71, 0x98, 0x71, 0x61, 0x87,
    0xf3, 0xeb, 0xbb, 0x68, 0x71, 0x64, 0x75, 0x77, 0xd9, 0x88, 0x0c, 0x4a, 0xfb, 0x9d, 0x6d, 0xfe,
    0x50, 0xb1, 0xff, 0x58, 0xff, 0x2a, 0xe2, 0x69, 0x45, 0xd1, 0x77, 0x9b, 0xe1, 0x7b, 0x9b, 0x5e,
    0xb2, 0x99, 0x8e, 0xf2, 0x95, 0x86, 0x28, 0x33, 0xc5, 0xff, 0xdd, 0x26, 0x45, 0xa4, 0xb1, 0xa6,
    0x4a, 0x32, 0x86, 0x39, 0x59, 0x73, 0x3c, 0x65, 0x72, 0xff, 0x1b, 0xd4, 0xcd, 0xdb, 0xef, 0x3b,
    0x46, 0x70, 0xad, 0x84, 0x3e, 0xdc, 0x6b, 0x3b, 0xad, 0xd5, 0x28, 0xf8, 0xe7, 0x40, 0x69, 0xda,
    0x90, 0x30, 0xc2, 0x2f, 0x34, 0xf5, 0x44, 0x5c, 0xd9, 0xdc, 0x8a, 0xcc, 0xf9, 0x44, 0x40, 0xcb,
    0xbf, 0x91, 0xeb, 0x78, 0x80, 0xa3, 0x31, 0x6c, 0x76, 0x6c, 0x63, 0x1e, 0x58, 0xdf, 0x9c, 0xc2,
    0x61, 0x30, 0xf4, 0x3e, 0x75, 0xe6, 0xf3, 0x82, 0xe3, 0x4a, 0xd0, 0x95, 0xd0, 0xdd, 0xa6, 0x10,
    0x0c, 0xa8, 0xaa, 0xb9, 0xa9, 0x07, 0x9f, 0x8a, 0x8a, 0x63, 0xd8, 0x7c, 0x90, 0xbe, 0xa0, 0xf2,
    0x09, 0x79, 0x1d, 0xb0, 0x8a, 0xa8, 0x49, 0x81, 0x41, 0x73, 0x8c, 0x97, 0xd9, 0x89, 0x78, 0x81,
    0xeb, 0x16, 0x2d, 0xbc, 0x75, 0xd0, 0x7a, 0x34, 0xbb, 0x6f, 0xa5, 0x0d, 0xac, 0xc1, 0x74, 0x4d,
    0x65, 0x75, 0x03, 0x22, 0x64, 0x42, 0xc2, 0x62, 0x8f, 0x0c, 0xe3, 0xac, 0xdd, 0x8b, 0xcf, 0x39,
    0x82, 0xa2, 0x97, 0xdf, 0xfe, 0xe2, 0xdf, 0xc5, 0xfb, 0x82, 0x4f, 0x4d, 0x16, 0xe8, 0x52, 0xc9,
    0x3e, 0xec, 0x9e, 0xae, 0x72, 0x1e, 0x6f, 0xa2, 0x72, 0x85, 0xdf, 0x1a, 0x0a, 0x92, 0x23, 0x02,
    0x1b, 0x92, 0x26, 0x91, 0x46, 0x84, 0x93, 0xa0, 0x98, 0xb2, 0xff, 0xd7, 0x9a, 0xf7, 0xbb, 0x2e,
    0x5b, 0xd8, 0x61, 0x71, 0x80, 0x4f, 0xe0, 0x50, 0x09, 0xb5, 0x38, 0x89, 0x0a, 0xcc, 0x57, 0x2a,
    0x7d, 0x9a, 0x82, 0xb2, 0xdf, 0xac, 0xbf, 0x2d, 0xae, 0xcf, 0x73, 0xdb, 0x79, 0xbf, 0x67, 0x94,
    0xb5, 0x03, 0xba, 0x2c, 0x35, 0xe9, 0xa8, 0x9b, 0xd2, 0x1e, 0x70, 0x80, 0x93, 0xcd, 0x64, 0x74,
    0x57, 0xcb, 0x42, 0x94, 0x25, 0xb2, 0xcd, 0xb4, 0xb1, 0x20, 0x69, 0xe1, 0xb3, 0x1e, 0xa5, 0x44,
    0xb2, 0x7d, 0xdb, 0xa4, 0xbf, 0x61, 0x31, 0x13, 0xba, 0xdb, 0x02, 0x3a, 0x35, 0xe3, 0x7c, 0xce,
    0xa2, 0xff, 0x57, 0xc0, 0xba, 0x5e, 0x57, 0xaf, 0x23, 0x1b, 0x78, 0x50, 0x8c, 0xb8, 0xf4, 0xa6,
    0x64, 0x9e, 0xde, 0x19, 0xef, 0x9f, 0x63, 0x7e, 0xf1, 0x7c, 0xa1, 0x08, 0x15, 0x3b, 0x20, 0xf6,
    0x4e, 0x67, 0xd8, 0xd3, 0xb9, 0x6d, 0x7b, 0xb4, 0x0f, 0x1c, 0x02, 0xce, 0x84, 0x5c, 0x6b, 0x59,
    0xcc, 0x34, 0xeb, 0x81, 0x26, 0x40, 0xb4, 0xb7, 0x72, 0xb5, 0x86, 0x7b, 0xec, 0x40, 0xfa, 0x53,
    0x9b, 0x68, 0xc0, 0x8a, 0x6c, 0xbf, 0x36, 0x80, 0xca, 0x57, 0xfa, 0x30, 0xec, 0x06, 0x92, 0x17,
    0x3e, 0xe0, 0x92, 0x70, 0x54, 0x5e, 0x2f, 0x99, 0x5f, 0x2f, 0x21, 0x58, 0x4f, 0xfe, 0xdd, 0xd0,
};

static const MessageEncodingTestVector sMessageEncodingTest0529 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x46761E47,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x28D5,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0529_EncryptionKey,
    sMessageEncodingTest0529_Payload,
    sizeof(sMessageEncodingTest0529_Payload),
    sMessageEncodingTest0529_ExpectedEncoding,
    sizeof(sMessageEncodingTest0529_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0530_EncryptionKey =
{
    {
        0x7b, 0xd8, 0xc6, 0x8e, 0x23, 0x1f, 0xe8, 0x7e, 0x30, 0x27, 0x60, 0xe9, 0x9c, 0x0a, 0xe1, 0x55,
    }
};
static const uint8_t sMessageEncodingTest0530_Payload[] =
{
    0x85, 0xa6, 0x02, 0x0a, 0xb1, 0x6c, 0x88, 0x76, 0x35, 0x3d, 0xa7, 0x87, 0x3e, 0xaf, 0x7e, 0xae,
    0xc5, 0xc2, 0x81, 0x60, 0xb8, 0x35, 0x2c, 0xf4, 0x26, 0xc5, 0xac, 0x0f, 0x23, 0xd4, 0x6c, 0x62,
    0xb8, 0xf9, 0x5e, 0x3c, 0xba, 0xf0, 0xc3, 0xaa, 0xb7, 0xdb, 0xd9, 0xaa, 0x79, 0x5e, 0x5c, 0x6a,
    0x3b, 0xc4, 0x24, 0x68, 0xf4, 0x73, 0xe6, 0xb1, 0x56, 0xc3, 0x9f, 0x8d, 0x12, 0x1a, 0xdc, 0x12,
    0x9f, 0x2a, 0x74, 0x27, 0x33, 0xe7, 0xfa, 0x26, 0x9f, 0x79, 0x22, 0x39, 0x5f, 0x7d, 0xa5, 0x54,
    0xba, 0xc9, 0xba, 0xfa, 0x5a, 0xc2, 0x77, 0xc9, 0xd2, 0x2d, 0xa7, 0xfe, 0x3a, 0x14, 0x3e, 0xc2,
    0xa8, 0x92, 0x36, 0xcf, 0x50, 0x78, 0xdb, 0x8e, 0x95, 0x0c, 0x9b, 0x48, 0x56, 0xc7, 0x8b, 0xfe,
    0xcf, 0x89, 0x7b, 0xc8, 0xbc, 0x77, 0x28, 0x39, 0x51, 0x7c, 0xa4, 0xca, 0xc8, 0xd4, 0xf2, 0x23,
    0xac, 0x10, 0x56, 0xd4, 0x25, 0xf2, 0xc4, 0xd8, 0x04, 0xe7, 0x7b, 0x23, 0x69, 0xda, 0xda, 0x0b,
    0x7a, 0xc3, 0xa4, 0x30, 0xd0, 0x0c, 0xa7, 0xc0, 0x34, 0xe7, 0xff, 0xd2, 0x57, 0xa0, 0x10, 0x52,
    0x58, 0x57, 0x4b, 0xcc, 0x5d, 0x38, 0x27, 0x82, 0xa5, 0xb3, 0x5d, 0x3e, 0xbb, 0x9e, 0xb7, 0xc1,
    0x83, 0x42, 0x5f, 0xb5, 0xed, 0xb5, 0x43, 0x5b, 0xf6, 0x37, 0xad, 0x5e, 0xa0, 0x42, 0xcb, 0x68,
    0xfe, 0x5f, 0x23, 0x6f, 0x5b, 0xbf, 0xc3, 0x93, 0x36, 0x8f, 0x49, 0x10, 0x98, 0x24, 0xb9, 0x07,
    0x9e, 0xd9, 0x35, 0x31, 0xa3, 0x3a, 0x62, 0xd5, 0x38, 0x1e, 0x08, 0x31, 0xd0, 0x8b, 0x74, 0xf4,
    0x4e, 0xbf, 0x6f, 0x83, 0x62, 0x70, 0x80, 0x90, 0xb6, 0xb3, 0x2a, 0x85, 0x2a, 0xe0, 0x45, 0x5a,
    0xc8, 0x74, 0x85, 0x19, 0x57, 0x39, 0x66, 0xd5, 0x52, 0xc5, 0x7e, 0x11, 0x2a, 0xdc, 0x96, 0xae,
    0xb7, 0x69, 0x10, 0x78, 0x97, 0xed, 0xec, 0xcb, 0x06, 0xf0, 0x34, 0x45, 0x9c, 0x71, 0xa8, 0x88,
    0x20, 0x48, 0xeb, 0x38, 0xcb, 0xd1, 0x98, 0x9e, 0x1d, 0xed, 0x94, 0x28, 0x82, 0xcb, 0xa0, 0x98,
    0xff, 0x83, 0x4a, 0xd7, 0x12, 0xe8, 0x90, 0xb6, 0xe4, 0xbe, 0x91, 0x0f, 0x18, 0xa2, 0x21, 0xa9,
    0x83, 0xd4, 0x94, 0x14, 0xa9, 0x37, 0x8a, 0x93, 0x83, 0xbf, 0x3e, 0xe7, 0x44, 0x51, 0x89, 0x70,
    0x6f, 0xfa, 0x03, 0xa0, 0x2a, 0x92, 0x35, 0xc4, 0x7f, 0x5c, 0x88, 0x78, 0x48, 0x45, 0x22, 0xb2,
    0x10, 0xc6, 0xf2, 0x50, 0xed, 0xb1, 0xc6, 0x1b, 0xc1, 0xc4, 0x7e, 0x5f, 0x89, 0xf6, 0xc2, 0xf4,
    0x66, 0x8b, 0x2a, 0xad, 0x58, 0x63, 0xd0, 0x07, 0x62, 0x7c, 0x3f, 0x0f, 0x34, 0x10, 0x29, 0xb8,
    0x93, 0xee, 0x0f, 0x6c, 0xde, 0xf3, 0xb5, 0x38, 0xab, 0xf3, 0x6d, 0x06, 0xc0, 0xe6, 0xb6, 0x9f,
    0x02, 0x9a, 0x5e, 0x0c, 0xa3, 0xd8, 0xe9, 0x63, 0xab, 0x46, 0x96, 0x9f, 0x32, 0xf7, 0x19, 0x47,
    0x05, 0xf8, 0xdd, 0xbd, 0x0b, 0x0f, 0xc9, 0xab, 0x4b, 0x27, 0x47, 0x86, 0xe4, 0xc5, 0x1a, 0x7b,
    0xd3, 0x58, 0xdf, 0xd5, 0x3a, 0xf6, 0x6f, 0x50, 0x53, 0x2a, 0xa2, 0xec, 0x73, 0x44, 0x26, 0x55,
    0x36, 0x20, 0xc7, 0xdb, 0x78, 0x6c, 0xf3, 0xe7, 0xf3, 0x29, 0xe9, 0x5f, 0xff, 0x15, 0x5f, 0x75,
    0xb4, 0x77, 0x4a, 0x39, 0x34, 0x16, 0xde, 0x6d, 0xf0, 0x9a, 0x1c, 0xdc, 0x52, 0x2c, 0x9c, 0x63,
    0xa1, 0x63, 0xc3, 0x77, 0x18, 0xb8, 0xac, 0x55, 0x08, 0xc8, 0x8e, 0xf7, 0x20, 0x0c, 0x67, 0xf1,
    0xae, 0x0d, 0x8f, 0x21, 0xfd, 0xe2, 0x12, 0x0a, 0x04, 0xd5, 0xb0, 0x9b, 0xe3, 0x1b, 0x12, 0x67,
    0x5f, 0x73, 0xf6, 0xe7, 0x41, 0x16, 0x21, 0x8f, 0xaf, 0x68, 0x65, 0x07, 0x8a, 0x1b, 0x4b, 0x92,
    0x0a, 0x2b, 0xe8, 0x0f, 0xa2, 0x4a, 0x9c, 0x26, 0x79, 0xfc, 0xc2, 0x55, 0x1a, 0x78, 0x22, 0x20,
    0x83, 0xde, 0xb5, 0x29, 0x7f, 0xf6, 0x69, 0x73, 0xcb, 0x53, 0x6c, 0x53, 0x72, 0x4a, 0xc2, 0x73,
    0x54, 0xb3, 0x81, 0x40, 0xf6, 0x86, 0x9e, 0x1f, 0x4b, 0xd0, 0xbf, 0xf2, 0xc2, 0x16, 0x5e, 0x15,
    0x04, 0xa3, 0x74, 0x0a, 0x32, 0x22, 0x75, 0x56, 0x04, 0x75, 0x4a, 0xf2, 0x80, 0xb2, 0xc0, 0x74,
    0x62, 0xfb, 0x6b, 0x98, 0x47, 0xc1, 0xa1, 0x1d, 0x07, 0x9a, 0xcb, 0xb1, 0x82, 0x8a, 0xf9, 0x2f,
    0xb6, 0x6e, 0x6b, 0x8a, 0x5c, 0x39, 0x82, 0x5d, 0x0a, 0xb5, 0x28, 0xe6, 0xbc, 0x30, 0xf5, 0xb2,
    0x0a, 0x2a, 0x83, 0xbf, 0x38, 0x65, 0x5c, 0x2f, 0x02, 0x06, 0xfa, 0x41, 0x3d, 0x69, 0x26, 0xd5,
    0xb8, 0xcb, 0xf8, 0xc6, 0x82, 0xcb, 0x92, 0x2e, 0x33, 0xd9, 0x1c, 0xc2, 0x89, 0xf8, 0x1a, 0xf4,
    0x63, 0x73, 0xec, 0x6f, 0xf6, 0x42, 0xf2, 0x10, 0x15, 0x7e, 0xd1, 0xc5, 0xf0, 0x9e, 0xdf, 0xbf,
    0xae, 0xd2, 0x2d, 0x38, 0x0d, 0xa6, 0x53, 0xa4, 0xe2, 0x43, 0x6c, 0xdd, 0xf7, 0x7b, 0x44, 0x68,
    0x8f, 0x54, 0x0a, 0x2a, 0x45, 0x7a, 0x30, 0x06, 0xf2, 0x8e, 0x80, 0xf4, 0xaa, 0x7b, 0x96, 0xbd,
    0xb6, 0x0e, 0x23, 0x6f, 0x84, 0x16, 0xf7, 0x71, 0x86, 0x67, 0x6a, 0xe0, 0xd5, 0x60, 0x35, 0x40,
    0x43, 0x3d, 0xe5, 0x24, 0x03, 0xfc, 0x10, 0x5c, 0x86, 0x69, 0xb0, 0xc1, 0x75, 0x6f, 0x0b, 0x1a,
    0x86, 0xcc, 0x2b, 0xc9, 0x65, 0x43, 0x82, 0xe6, 0x69, 0x90, 0xce, 0x4d, 0x8c, 0x53, 0x24, 0x67,
    0x9c, 0xa9, 0x9e, 0x08, 0x10, 0xcd, 0xfd, 0xda, 0x68, 0x5e, 0xd6, 0x85, 0x2e, 0xfb, 0x2a, 0x19,
    0x4c, 0xfe, 0xdd, 0x6e, 0x5f, 0x60, 0xf6, 0x64, 0xc6, 0xbb, 0xff, 0x17, 0x1f, 0x28, 0xb6, 0x11,
    0xfe, 0x42, 0xf7, 0xc0, 0x27, 0x81, 0x92, 0x75, 0x52, 0x84, 0xeb, 0xa5, 0x0a, 0x40, 0x5f, 0x45,
    0x3f, 0xd9, 0xa6, 0x2a, 0x4d, 0x94, 0xa9, 0xc5, 0x31, 0x9a, 0x8a, 0x0f, 0x15, 0xb0, 0x3e, 0x7a,
    0xf1, 0xe0, 0xde, 0xc9, 0xc6, 0x9e, 0x08, 0x20, 0x66, 0x76, 0xd2, 0xd3, 0xe8, 0xfa, 0x8f, 0xdc,
    0xd0, 0x68, 0x61, 0x41, 0x1e, 0xfa, 0xb6, 0x62, 0xec, 0x3b, 0x82, 0x84, 0xc1, 0xa6, 0x79, 0xc4,
    0x47, 0x32, 0xd7, 0x9e, 0x26, 0x23, 0x2b, 0xc2, 0xca, 0x02, 0x80, 0xbc, 0x18, 0x19, 0x6f, 0xd9,
    0xe3, 0x8a, 0x5f, 0xf5, 0xd8, 0x6b, 0xc5, 0x46, 0xdc, 0x5b, 0x7c, 0xee, 0xd8, 0x40, 0x97, 0xa5,
    0x30, 0x35, 0x22, 0x49, 0x15, 0x6e, 0x9a, 0xc0, 0x56, 0xc9, 0xa5, 0x02, 0xc0, 0x82, 0x1b, 0x51,
    0xe9, 0x7c, 0xfe, 0x82, 0x44, 0xf5, 0x64, 0x89, 0xce, 0x01, 0xbe, 0x27, 0x44, 0xe1, 0x22, 0x35,
    0xe3, 0x48, 0x5d, 0x43, 0x38, 0x16, 0x24, 0x02, 0xf9, 0x1a, 0x72, 0x0f, 0xec, 0x9d, 0x86, 0x7d,
    0xc7, 0x5b, 0x48, 0xd8, 0x91, 0xe6, 0x90, 0xa5, 0x34, 0x9e, 0x3d, 0x3d, 0x34, 0xad, 0x9d, 0xdb,
    0x23, 0x26, 0x25, 0xf9, 0xe4, 0xe2, 0x96, 0x24, 0xd2, 0xe2, 0xc6, 0x13, 0xd7, 0x6d, 0x9e, 0x25,
    0xc3, 0xb6, 0xff, 0xd2, 0xf3, 0x0b, 0x85, 0xe4, 0xf5, 0xec, 0x97, 0xea, 0xa0, 0xff, 0x22, 0x21,
    0xc5, 0xcc, 0x3c, 0x50, 0x5d, 0x6a, 0xd3, 0x42, 0x45, 0xb2, 0xbf, 0x92, 0x12, 0x59, 0xb7, 0x93,
    0xb7, 0x8d, 0xa1, 0x00, 0x4f, 0xc7, 0xdf, 0x93, 0xf9, 0xc5, 0xc6, 0xdd, 0xbf, 0x93, 0xd9, 0x4d,
    0x10, 0x37, 0xce, 0xca, 0x20, 0xae, 0xff, 0x9b, 0x84, 0xed, 0x29, 0x7e, 0x47, 0xb6, 0x20, 0x8b,
    0xad, 0xbf, 0x8a, 0xf1, 0xec, 0x08, 0xb1, 0x40, 0x35, 0x1e, 0x49, 0x4d, 0xc6, 0xbe, 0x89, 0x28,
};

static const uint8_t sMessageEncodingTest0530_ExpectedEncoding[] =
{
    0x30, 0x27, 0xc9, 0xcc, 0xc6, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8b, 0x2e, 0x74, 0xbf, 0xd8, 0xe0, 0x35, 0x2a, 0xa9, 0x96,
    0x54, 0x4d, 0x3a, 0x9a, 0xa6, 0xa3, 0x3a, 0x87, 0xa8, 0x59, 0x9d, 0xd4, 0x4e, 0xb1, 0x9f, 0x89,
    0x0b, 0xa5, 0x87, 0xfe, 0xdd, 0xde, 0xad, 0x89, 0x20, 0xb8, 0x11, 0xc9, 0xa9, 0x45, 0x5a, 0xca,
    0xd5, 0xcd, 0xd1, 0x96, 0x20, 0x7a, 0xf4, 0xba, 0x94, 0xe9, 0x5b, 0x18, 0xb5, 0x32, 0x73, 0xdd,
    0x3e, 0x0d, 0x69, 0xfc, 0x0a, 0x1c, 0x54, 0xdf, 0x4a, 0x1f, 0x69, 0x32, 0xd0, 0x70, 0xaf, 0x1e,
    0x4a, 0xf4, 0xfa, 0x17, 0x4d, 0xf2, 0x63, 0x1f, 0x5e, 0x58, 0xfd, 0xde, 0x92, 0x4c, 0x65, 0x02,
    0x32, 0xa9, 0x70, 0xce, 0xbe, 0x97, 0x5f, 0xaf, 0xf2, 0xb9, 0xc7, 0x9c, 0x82, 0x88, 0xc3, 0xbf,
    0x9d, 0x6a, 0xe4, 0x07, 0x5c, 0x8d, 0x09, 0xcc, 0xff, 0x62, 0x75, 0xe7, 0x92, 0x07, 0x9c, 0x95,
    0xed, 0x78, 0x12, 0x18, 0x5a, 0xad, 0xf7, 0xbc, 0x84, 0x5a, 0x3c, 0x0f, 0xf7, 0x06, 0x7e, 0x7d,
    0x90, 0x83, 0x23, 0x39, 0xee, 0xd4, 0xba, 0x63, 0x46, 0x8a, 0x84, 0x12, 0xd8, 0x6b, 0x6f, 0x35,
    0x2f, 0xe5, 0x57, 0x9a, 0x8e, 0xe4, 0x2e, 0xf3, 0x51, 0xc9, 0xc5, 0x85, 0xd3, 0x6a, 0xbe, 0x37,
    0xce, 0x77, 0xa4, 0x87, 0xce, 0x25, 0xc1, 0xea, 0x68, 0xf4, 0xd7, 0x13, 0x74, 0xcd, 0x55, 0xcb,
    0x85, 0xa9, 0x55, 0xa2, 0xa8, 0x5f, 0x28, 0x9c, 0xdb, 0xd0, 0x35, 0x8e, 0x73, 0xfc, 0x4d, 0xc3,
    0x97, 0x09, 0x27, 0xae, 0x76, 0x5a, 0x69, 0x2c, 0x0c, 0x7d, 0xf1, 0xdc, 0x8a, 0x35, 0xb1, 0xba,
    0xe2, 0x42, 0x3c, 0x47, 0x4b, 0xc1, 0x01, 0xaf, 0xab, 0xbd, 0xf5, 0x6e, 0x6a, 0x8d, 0xea, 0x87,
    0x90, 0xff, 0x28, 0x65, 0xf0, 0xea, 0x22, 0x4e, 0x45, 0xd7, 0xa7, 0x27, 0x76, 0x23, 0xd2, 0x11,
    0x81, 0x72, 0x35, 0xc1, 0xa6, 0x79, 0xda, 0x75, 0xc7, 0x19, 0x68, 0xf3, 0x89, 0x19, 0xa8, 0x8d,
    0x58, 0xc9, 0x22, 0xd8, 0x7e, 0xf8, 0xd7, 0x3c, 0xe0, 0x5c, 0x47, 0x35, 0x76, 0x1d, 0xc7, 0x27,
    0xe3, 0x87, 0x17, 0x68, 0x7e, 0x4e, 0x8f, 0x6e, 0xb6, 0xd3, 0xca, 0x3b, 0x3a, 0xd4, 0x08, 0x96,
    0xfa, 0x39, 0xb6, 0x71, 0xbd, 0xfb, 0x52, 0x62, 0x95, 0x48, 0xe2, 0xc7, 0x5c, 0xbd, 0x37, 0xec,
    0xe7, 0x47, 0x2a, 0xdd, 0x80, 0xbe, 0x0e, 0xd4, 0x25, 0x0b, 0xbb, 0x75, 0xb4, 0x2d, 0xe5, 0x37,
    0xe0, 0x89, 0xde, 0x35, 0x50, 0xfd, 0x58, 0xa6, 0x73, 0x40, 0x71, 0x47, 0x1b, 0x78, 0x39, 0x47,
    0x22, 0x89, 0xaa, 0xe7, 0x80, 0x09, 0xd8, 0x8b, 0x2e, 0x85, 0x4d, 0xf4, 0x19, 0x51, 0x4a, 0xe7,
    0xdc, 0x5c, 0xf8, 0x35, 0xb6, 0x69, 0xe0, 0x2a, 0x4b, 0xfd, 0x00, 0x12, 0x66, 0xf6, 0x26, 0x9e,
    0x06, 0x24, 0x26, 0x3c, 0x83, 0x2c, 0x3d, 0x16, 0xfe, 0x76, 0x5b, 0x43, 0x52, 0x6a, 0x98, 0x22,
    0x90, 0xf7, 0xb7, 0x28, 0xe4, 0x0a, 0x4d, 0x3d, 0x2b, 0x73, 0x32, 0x2d, 0x5d, 0x48, 0x11, 0xac,
    0x9f, 0x80, 0xd9, 0xa9, 0xd0, 0x87, 0x7c, 0x0d, 0x22, 0xba, 0xf3, 0x7d, 0x19, 0x54, 0x44, 0x56,
    0x9c, 0x01, 0x08, 0xcd, 0x67, 0x8c, 0xb7, 0xa2, 0xf7, 0x2b, 0x21, 0x13, 0xad, 0x0e, 0xe9, 0x25,
    0xad, 0x59, 0x1c, 0xb4, 0xb7, 0x27, 0x20, 0x80, 0xa9, 0xc0, 0x63, 0xc1, 0x0a, 0x90, 0x3d, 0x48,
    0x8e, 0xf8, 0x90, 0x17, 0x66, 0x56, 0x36, 0x3b, 0xaa, 0xf4, 0xa8, 0xfc, 0x8f, 0x9d, 0xea, 0x51,
    0xb4, 0xa0, 0x45, 0x7d, 0x7b, 0xb1, 0x4b, 0xdb, 0x78, 0x9a, 0xb0, 0x94, 0x5c, 0x08, 0x06, 0x0e,
    0xc1, 0x2b, 0xff, 0xa1, 0x68, 0x79, 0x07, 0xd1, 0x59, 0xd2, 0xac, 0x08, 0x2b, 0x0b, 0x45, 0x3d,
    0xab, 0x72, 0x18, 0xcc, 0x9e, 0x58, 0xc3, 0x55, 0xed, 0x37, 0x8c, 0x3d, 0x06, 0xdb, 0xf7, 0xce,
    0x8e, 0xe5, 0xda, 0x15, 0x9c, 0xe5, 0x71, 0xa2, 0x4c, 0x7b, 0x87, 0x2e, 0xdd, 0xcb, 0x48, 0xe1,
    0x36, 0xd6, 0x38, 0x9d, 0x40, 0x39, 0xbc, 0x84, 0xcb, 0xfc, 0x1f, 0x52, 0x9c, 0xfe, 0x49, 0x53,
    0x5a, 0xf6, 0xf4, 0xcb, 0xa1, 0x6a, 0x95, 0xbe, 0x57, 0x01, 0xe5, 0x43, 0xf5, 0x32, 0x2f, 0xbf,
    0x40, 0x06, 0xbf, 0xab, 0x12, 0xda, 0x68, 0x11, 0xd1, 0x9c, 0xac, 0x3f, 0x63, 0xfb, 0xfc, 0x58,
    0x8b, 0x84, 0x4a, 0x7d, 0x9c, 0x49, 0xd0, 0x10, 0xbe, 0xe9, 0x15, 0x6d, 0x0b, 0x86, 0x9e, 0x67,
    0x17, 0x4d, 0xd0, 0x16, 0x77, 0x68, 0xe6, 0x65, 0xf1, 0xe6, 0x44, 0x03, 0xef, 0x32, 0x32, 0xf5,
    0x80, 0x10, 0x68, 0x4f, 0x99, 0x23, 0x67, 0xf9, 0x3c, 0xd1, 0x8a, 0xfb, 0x03, 0xec, 0x67, 0x39,
    0xad, 0x2c, 0x59, 0x76, 0x4e, 0xbc, 0x4e, 0xd4, 0x47, 0x25, 0x41, 0x24, 0x7d, 0xdb, 0xd7, 0xb0,
    0x54, 0xd0, 0xf4, 0x3b, 0xc9, 0xd6, 0x6c, 0x2c, 0x89, 0x8f, 0x7d, 0xa7, 0x67, 0x0f, 0x78, 0x5d,
    0x38, 0x38, 0x18, 0xd1, 0x37, 0xd1, 0x49, 0xa8, 0xe9, 0x6a, 0x8a, 0x53, 0x2b, 0x94, 0x28, 0x77,
    0x0c, 0x77, 0x7a, 0x89, 0x9b, 0x02, 0xe7, 0x3d, 0xb7, 0x75, 0x74, 0xfc, 0xc9, 0xcf, 0xa5, 0xb1,
    0xd0, 0xb0, 0x3c, 0x5a, 0xa8, 0x3c, 0xbf, 0xf8, 0x88, 0x65, 0x12, 0x4e, 0x1c, 0x4a, 0x9e, 0x24,
    0xde, 0xd0, 0x1b, 0x83, 0xfe, 0x4a, 0x50, 0xa8, 0x88, 0xda, 0x9e, 0xf0, 0x13, 0x5c, 0xdb, 0xb5,
    0x01, 0x18, 0x68, 0x22, 0xeb, 0x89, 0xf7, 0x56, 0x26, 0x25, 0x55, 0xaf, 0xec, 0x04, 0x2e, 0x75,
    0xb5, 0xda, 0xb1, 0x4c, 0x6b, 0xd3, 0xb9, 0xd8, 0x93, 0x3e, 0xef, 0x3f, 0x52, 0x0a, 0xec, 0x97,
    0xaa, 0x07, 0xc2, 0x09, 0x4e, 0xc2, 0x07, 0xa2, 0x8e, 0xea, 0xb9, 0xb2, 0xa1, 0x4f, 0x4d, 0x86,
    0x3b, 0x8c, 0xa6, 0x80, 0x7a, 0xa0, 0x3f, 0xb2, 0xa5, 0xf6, 0x70, 0x44, 0xc5, 0x0b, 0xdf, 0x74,
    0x59, 0xdf, 0xc2, 0xe9, 0xb2, 0x18, 0xb1, 0xfa, 0xb4, 0x7c, 0x73, 0x26, 0x5c, 0x62, 0xf2, 0x7f,
    0xcd, 0x4c, 0xf9, 0x6f, 0xfa, 0xff, 0x24, 0xf3, 0xf4, 0x68, 0x4c, 0xce, 0x86, 0xe0, 0x3b, 0x2b,
    0xab, 0xe1, 0x76, 0x34, 0x75, 0x36, 0x30, 0x6f, 0x48, 0xc9, 0x00, 0x0b, 0x93, 0x9d, 0xe4, 0xb0,
    0x7e, 0x27, 0xf6, 0xee, 0x3a, 0x27, 0x1a, 0x6f, 0x3d, 0xdc, 0xf2, 0xd0, 0xa2, 0x3b, 0x5f, 0x5b,
    0x2f, 0x16, 0x3a, 0x1a, 0x88, 0x76, 0xf9, 0x41, 0x5d, 0x33, 0x15, 0x63, 0xb6, 0x55, 0xe1, 0xf7,
    0xad, 0xd2, 0x36, 0x7e, 0x7a, 0x56, 0x88, 0x40, 0x5c, 0x4f, 0x96, 0x80, 0xed, 0x78, 0x8a, 0xb6,
    0x3f, 0xbc, 0x0a, 0x2a, 0x9a, 0xab, 0x79, 0x47, 0x7a, 0xb5, 0x8c, 0x46, 0x19, 0xa0, 0x5d, 0xed,
    0x6e, 0xf4, 0x76, 0x8d, 0x3c, 0xa2, 0x42, 0x70, 0x67, 0x5a, 0x37, 0xa5, 0x25, 0x96, 0x59, 0xb4,
    0xd6, 0xfe, 0x19, 0xc7, 0xe2, 0xe6, 0x4c, 0x9d, 0xc0, 0x3c, 0xce, 0x95, 0xfd, 0x55, 0x0f, 0x26,
    0x83, 0x8f, 0x33, 0x11, 0xb7, 0xaa, 0x14, 0x83, 0xdc, 0xeb, 0x41, 0x2c, 0x5c, 0x52, 0xe2, 0x26,
    0x69, 0x93, 0x0d, 0xc0, 0x17, 0x2a, 0x90, 0x5c, 0xa6, 0xfd, 0x54, 0x2f, 0xa8, 0xf2, 0x62, 0xe3,
    0xbf, 0x97, 0x17, 0x83, 0xce, 0xca, 0xe7, 0xd7, 0x7a, 0xd8, 0xb9, 0x69, 0xed, 0x88, 0x2b, 0x31,
    0x80, 0x4c, 0x75, 0x4a, 0x89, 0xf3, 0x73, 0x50, 0x7c, 0x19, 0x4d, 0xe2, 0xcc, 0xd8, 0xf6, 0x89,
    0x18, 0x87, 0x88, 0x83, 0x64, 0x22, 0x8c, 0x57, 0x28, 0x41, 0x34, 0x66, 0x09, 0x21, 0xe9, 0x7e,
    0xd1, 0xac, 0xf9, 0x51, 0x54, 0x8e, 0x0a, 0x42, 0xb1, 0x96, 0x0f, 0xda, 0xab, 0xda, 0x5c, 0x3a,
    0x2a, 0xde, 0x4c, 0x6e, 0xc1, 0xb2, 0x2f, 0xa2,
};

static const MessageEncodingTestVector sMessageEncodingTest0530 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x32C6CCC9,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2E8B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0530_EncryptionKey,
    sMessageEncodingTest0530_Payload,
    sizeof(sMessageEncodingTest0530_Payload),
    sMessageEncodingTest0530_ExpectedEncoding,
    sizeof(sMessageEncodingTest0530_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0531_Payload[] =
{
    0xad, 0xc3, 0x4e, 0x0d, 0x7f, 0xe1, 0x40, 0xc8, 0xf6, 0xf7, 0x5a, 0x2d, 0x3a, 0x0d, 0xb7, 0x36,
    0x88, 0xa0, 0x09, 0xc1, 0x03, 0x7c, 0x95, 0x29, 0xac, 0xfd, 0xc0, 0x5b, 0xdf, 0x16, 0xef, 0xb9,
    0x09, 0xef, 0x86, 0x3e, 0x99, 0xc9, 0x0d, 0x36, 0xfc, 0x04, 0x6c, 0x7d, 0x1b, 0xeb, 0xe9, 0x5f,
    0xfe, 0xe7, 0xf0, 0x8b, 0xed, 0x74, 0x44, 0xcf, 0x39, 0x55, 0xae, 0xd2, 0x9c, 0x2c, 0xac, 0x9a,
    0x52, 0xfd, 0x39, 0xec, 0x7c, 0x54, 0x01, 0x1c, 0x86, 0xe7, 0x62, 0x91, 0xbb, 0x35, 0x93, 0xd2,
    0x52, 0x2e, 0xa1, 0xb5, 0xa4, 0x9c, 0x12, 0x5a, 0xd8, 0xd9, 0xe9, 0x10, 0x75, 0x29, 0x86, 0x8e,
    0xc5, 0xdc, 0x0c, 0x48, 0x1d, 0x11, 0x01, 0x2e, 0xd3, 0x84, 0xbb, 0xcd, 0x80, 0xad, 0x62, 0x13,
    0x72, 0x0f, 0x4d, 0xf4, 0xf1, 0xac, 0x22, 0x52, 0x50, 0x55, 0x2d, 0xb8, 0xe5, 0xfb, 0x1d, 0x69,
    0x2d, 0xb8, 0x46, 0x7b, 0x1a, 0x7f, 0xbd, 0xc0, 0x28, 0xca, 0xc8, 0xd7, 0x8f, 0x83, 0x8c, 0x1c,
    0xcc, 0x5a, 0xfa, 0xae, 0x79, 0xdc, 0xff, 0x13, 0x50, 0xf2, 0x30, 0xc4, 0x2e, 0x21, 0x79, 0x9b,
    0x65, 0xd2, 0x53, 0x6b, 0x4b, 0xc8, 0x1d, 0xa7, 0xb5, 0xae, 0x5e, 0x32, 0x28, 0x3d, 0x10, 0x67,
    0x43, 0xc0, 0x73, 0xab, 0x46, 0xad, 0x46, 0xf1, 0xb2, 0x54, 0xac, 0x9f, 0xc7, 0xbf, 0x6f, 0x95,
    0x5a, 0x30, 0x96, 0x6b, 0x97, 0x2c, 0x19, 0x22, 0xfc, 0xec, 0xf8, 0x2f, 0xd9, 0x0f, 0x85, 0x7a,
    0x25, 0xab, 0x24, 0x54, 0xd0, 0x84, 0x13, 0xc1, 0x4d, 0xf5, 0xb8, 0x6d, 0x53, 0x8b, 0x56, 0xb2,
    0xc7, 0x93, 0xf2, 0x16, 0xd3, 0xd2, 0x68, 0x6d, 0x64, 0x32, 0x9e, 0xd7, 0x5a, 0xfc, 0xb0, 0xd1,
    0x3c, 0x2a, 0x4a, 0x14, 0x0b, 0x12, 0x91, 0x1d, 0xc4, 0x13, 0xc2, 0x3d, 0xd9, 0xd2, 0x67, 0x98,
    0x3b, 0x15, 0x96, 0x41, 0xce, 0xde, 0xe3, 0xa3, 0xa8, 0x45, 0x94, 0xb9, 0x01, 0xab, 0x20, 0xae,
    0x79, 0x19, 0x22, 0xe1, 0x3c, 0x71, 0xc8, 0xd1, 0xf2, 0x9c, 0x54, 0x91, 0xef, 0xd8, 0x08, 0xe3,
    0xe7, 0x9c, 0x47, 0xc7, 0x68, 0x7e, 0xfa, 0xc3, 0x1a, 0xb4, 0xa2, 0x4f, 0xc9, 0xe0, 0x3a, 0x42,
    0xeb, 0x40, 0x72, 0x8b, 0xca, 0x47, 0xc3, 0x6a, 0x52, 0x15, 0x75, 0x9c, 0xe5, 0xdd, 0xfb, 0x65,
    0x7b, 0x3d, 0x90, 0xbb, 0x64, 0xef, 0x83, 0xdb, 0xce, 0xd2, 0x50, 0x15, 0x66, 0xab, 0x55, 0x9c,
    0x23, 0x5c, 0x8c, 0xc3, 0x76, 0xf4, 0xba, 0x32, 0x16, 0xcd, 0xfe, 0xb0, 0xbb, 0xf2, 0xe7, 0x82,
    0x39, 0x54, 0x0b, 0x6f, 0xc0, 0x09, 0x39, 0x34, 0x55, 0xeb, 0x82, 0xfb, 0x6b, 0x8f, 0xe9, 0xd3,
    0xc0, 0xbd, 0x83, 0xe1, 0x89, 0x5b, 0x09, 0xdb, 0x7c, 0xd6, 0xd2, 0x5a, 0xeb, 0x54, 0x6d, 0x17,
    0x35, 0x92, 0xb8, 0x69, 0x68, 0x82, 0x24, 0x38, 0x8f, 0x6c, 0x6c, 0x2a, 0x1f, 0x21, 0xcb, 0xe9,
    0xef, 0x53, 0x47, 0xea, 0xf7, 0x93, 0x38, 0x44, 0x62, 0xbb, 0x75, 0x4a, 0xf3, 0xc7, 0xce, 0xa0,
    0xbe, 0x0a, 0x5b, 0xdd, 0x10, 0xd2, 0x90, 0x14, 0xd9, 0xc2, 0x3e, 0x8e, 0xb2, 0xcc, 0xa8, 0xcf,
    0x4a, 0x72, 0xcf, 0x06, 0xdd, 0xa1, 0xd5, 0x95, 0x15, 0xb9, 0x09, 0x8b, 0x43, 0x91, 0xa1, 0x7a,
    0x00, 0xc3, 0xe6, 0x37, 0x47, 0x67, 0xb9, 0x95, 0x9d, 0xb3, 0xcf, 0xe9, 0x61, 0x7c, 0x44, 0xd6,
    0x34, 0x77, 0x0d, 0x01, 0xf7, 0x62, 0x0f, 0xba, 0x0d, 0x1d, 0x15, 0x66, 0x92, 0x2a, 0x01, 0x62,
    0x42, 0xf8, 0xa0, 0x89, 0x2e, 0x1a, 0xbb, 0x4b, 0xf8, 0xb7, 0xd8, 0x39, 0x38, 0x77, 0xee, 0x2e,
    0x90, 0xba, 0xb8, 0xe5, 0xac, 0x3e, 0xc4, 0x13, 0x03, 0xf5, 0x89, 0xf1, 0xcb, 0x08, 0x4e, 0xa2,
    0xb3, 0xda, 0x07, 0xda, 0x02, 0xd1, 0x60, 0x71, 0x67, 0xe1, 0x19, 0x2f, 0x6c, 0xb1, 0x2f, 0xb2,
    0xa5, 0x0b, 0x7b, 0xa1, 0xa8, 0x2f, 0x40, 0x16, 0x16, 0xfd, 0x9c, 0x8c, 0xc1, 0xb3, 0x01, 0x1c,
    0xdb, 0xb6, 0xa4, 0x38, 0x9d, 0x99, 0x23, 0x92, 0xec, 0x7e, 0x8f, 0x14, 0xe7, 0x33, 0x63, 0x9c,
    0x42, 0x53, 0x44, 0x8a, 0x92, 0x79, 0xbe, 0x3a, 0xb1, 0xa0, 0xa8, 0x11, 0x08, 0xfe, 0x1c, 0x69,
    0x3d, 0x48, 0xb0, 0x22, 0x5c, 0x33, 0x89, 0x57, 0x4e, 0x3c, 0xfa, 0x8a, 0x76, 0xea, 0x0c, 0x2a,
    0x00, 0xff, 0xb3, 0x12, 0x77, 0x0c, 0x66, 0x74, 0xf2, 0x53, 0x0f, 0xdf, 0x6d, 0x1c, 0x4f, 0x9a,
    0x02, 0x13, 0xee, 0x92, 0xe4, 0xac, 0xc3, 0x5a, 0xe4, 0x75, 0xda, 0x12, 0x09, 0x81, 0x4a, 0x02,
    0xda, 0xd5, 0x22, 0x85, 0x2a, 0x36, 0x23, 0xf7, 0x79, 0x80, 0x2f, 0xa9, 0x58, 0xbc, 0xee, 0x87,
    0x07, 0x13, 0x55, 0x6b, 0x4b, 0xb7, 0xa1, 0xdb, 0x64, 0xab, 0x92, 0x08, 0x69, 0x9e, 0x6c, 0x14,
    0xd6, 0x5e, 0x80, 0x08, 0x16, 0x75, 0xe3, 0xb1, 0x1f, 0x03, 0xfb, 0xe4, 0x74, 0x56, 0xed, 0x2f,
    0xf2, 0xf4, 0xe8, 0xa3, 0x52, 0xf2, 0xe7, 0x64, 0xee, 0xef, 0xe4, 0x7f, 0x05, 0x39, 0xda, 0x52,
    0xa0, 0x54, 0x37, 0xbb, 0xc5, 0x37, 0x36, 0x18, 0xdc, 0x6a, 0x51, 0xe6, 0x64, 0xb9, 0x69, 0x68,
    0x18, 0xe5, 0x1f, 0x3a, 0xc2, 0x1a, 0x1f, 0x54, 0x3e, 0xc0, 0xfe, 0xf9, 0xb4, 0xe7, 0x7e, 0x90,
    0xfa, 0x0e, 0xcd, 0x3c, 0x7f, 0xea, 0x77, 0xc2, 0xae, 0x14, 0x64, 0x91, 0xf5, 0xd5, 0x53, 0x7f,
    0xd1, 0x8f, 0x5c, 0xba, 0x95, 0x61, 0x8c, 0xd5, 0x11, 0x0b, 0x42, 0xf6, 0x9e, 0x7f, 0xcc, 0xa8,
    0xd0, 0xce, 0xb2, 0x8a, 0x84, 0x23, 0x4e, 0x13, 0x1f, 0x04, 0x56, 0x52, 0xd6, 0xf2, 0x84, 0x1e,
    0x1f, 0x44, 0x50, 0xfc, 0xdb, 0x55, 0x86, 0x4d, 0x80, 0x90, 0xce, 0xd3, 0x2c, 0x08, 0x1c, 0x79,
    0xcc, 0x8b, 0xd3, 0x2e, 0x5d, 0xb8, 0x31, 0xd7, 0x89, 0x34, 0xb0, 0x4f, 0x0e, 0xad, 0x57, 0x5f,
    0x3f, 0xba, 0xb3, 0xe1, 0x68, 0x7e, 0xd3, 0x26, 0x17, 0x79, 0x87, 0xb5, 0x88, 0xa2, 0x43, 0x77,
    0x26, 0x79, 0x76, 0x80, 0x1f, 0x4c, 0x43, 0xb2, 0x18, 0x16, 0x73, 0xb2, 0x39, 0xd0, 0x09, 0x5d,
    0x43, 0x41, 0xd3, 0xc6, 0x0f, 0x95, 0x07, 0xf5, 0xcd, 0x54, 0x25, 0x62, 0x2f, 0xaa, 0xd3, 0x9c,
    0x20, 0x38, 0x40, 0xd7, 0x0f, 0x2c, 0xd7, 0x47, 0x18, 0xc1, 0x62, 0x4a, 0x9b, 0xd2, 0xac, 0x4e,
    0x11, 0xe2, 0x2b, 0xe9, 0x75, 0x98, 0x2c, 0x10, 0xa6, 0xd4, 0x35, 0x45, 0x4a, 0x9a, 0xc4, 0x62,
    0x73, 0x3e, 0xfc, 0x2e, 0x9c, 0x2a, 0x07, 0xff, 0x47, 0x4e, 0xa4, 0x32, 0xcb, 0x9b, 0xbc, 0x5b,
    0x46, 0x11, 0xa8, 0x97, 0x81, 0xb1, 0x76, 0x82, 0x71, 0x69, 0x90, 0x18, 0xe5, 0x8a, 0x75, 0x17,
    0x35, 0xe9, 0x41, 0x3b, 0x75, 0xdd, 0x38, 0x5f, 0x3d, 0x9f, 0x09, 0x1d, 0x3a, 0xf6, 0xab, 0x4f,
    0x77, 0x77, 0x6b, 0x1c, 0xea, 0xad, 0x7a, 0xec, 0x98, 0x46, 0x45, 0x0e, 0xc4, 0x84, 0x6a, 0xc4,
    0x13, 0xc4, 0xf7, 0x52, 0x98, 0x57, 0x7c, 0x93, 0xbd, 0xa2, 0xad, 0x4b, 0xfe, 0xd4, 0xd0, 0x04,
    0xdb, 0xe7, 0x1a, 0x59, 0xba, 0x29, 0xc7, 0xa6, 0x1c, 0x25, 0x6f, 0x3a, 0x28, 0x40, 0x80, 0xd3,
    0x06, 0x03, 0x6f, 0x48, 0xe1, 0xab, 0xff, 0x5e, 0xa6, 0x4d, 0x96, 0x10, 0xfb, 0x17, 0x32, 0xb7,
    0xac, 0x77, 0xda, 0x97, 0x5e, 0x67, 0x19, 0x90, 0x42, 0x46, 0x08, 0xbc, 0x54, 0x42, 0xde, 0x14,
    0x5c, 0xab, 0xb3, 0xbe, 0x39, 0x4b, 0x01, 0xe2, 0x3b, 0x84, 0xe2, 0xfe, 0xb0, 0x81, 0xc9, 0x3f,
};

static const uint8_t sMessageEncodingTest0531_ExpectedEncoding[] =
{
    0x00, 0x2b, 0x30, 0x96, 0xed, 0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xad, 0xc3, 0x4e, 0x0d, 0x7f, 0xe1, 0x40, 0xc8, 0xf6, 0xf7,
    0x5a, 0x2d, 0x3a, 0x0d, 0xb7, 0x36, 0x88, 0xa0, 0x09, 0xc1, 0x03, 0x7c, 0x95, 0x29, 0xac, 0xfd,
    0xc0, 0x5b, 0xdf, 0x16, 0xef, 0xb9, 0x09, 0xef, 0x86, 0x3e, 0x99, 0xc9, 0x0d, 0x36, 0xfc, 0x04,
    0x6c, 0x7d, 0x1b, 0xeb, 0xe9, 0x5f, 0xfe, 0xe7, 0xf0, 0x8b, 0xed, 0x74, 0x44, 0xcf, 0x39, 0x55,
    0xae, 0xd2, 0x9c, 0x2c, 0xac, 0x9a, 0x52, 0xfd, 0x39, 0xec, 0x7c, 0x54, 0x01, 0x1c, 0x86, 0xe7,
    0x62, 0x91, 0xbb, 0x35, 0x93, 0xd2, 0x52, 0x2e, 0xa1, 0xb5, 0xa4, 0x9c, 0x12, 0x5a, 0xd8, 0xd9,
    0xe9, 0x10, 0x75, 0x29, 0x86, 0x8e, 0xc5, 0xdc, 0x0c, 0x48, 0x1d, 0x11, 0x01, 0x2e, 0xd3, 0x84,
    0xbb, 0xcd, 0x80, 0xad, 0x62, 0x13, 0x72, 0x0f, 0x4d, 0xf4, 0xf1, 0xac, 0x22, 0x52, 0x50, 0x55,
    0x2d, 0xb8, 0xe5, 0xfb, 0x1d, 0x69, 0x2d, 0xb8, 0x46, 0x7b, 0x1a, 0x7f, 0xbd, 0xc0, 0x28, 0xca,
    0xc8, 0xd7, 0x8f, 0x83, 0x8c, 0x1c, 0xcc, 0x5a, 0xfa, 0xae, 0x79, 0xdc, 0xff, 0x13, 0x50, 0xf2,
    0x30, 0xc4, 0x2e, 0x21, 0x79, 0x9b, 0x65, 0xd2, 0x53, 0x6b, 0x4b, 0xc8, 0x1d, 0xa7, 0xb5, 0xae,
    0x5e, 0x32, 0x28, 0x3d, 0x10, 0x67, 0x43, 0xc0, 0x73, 0xab, 0x46, 0xad, 0x46, 0xf1, 0xb2, 0x54,
    0xac, 0x9f, 0xc7, 0xbf, 0x6f, 0x95, 0x5a, 0x30, 0x96, 0x6b, 0x97, 0x2c, 0x19, 0x22, 0xfc, 0xec,
    0xf8, 0x2f, 0xd9, 0x0f, 0x85, 0x7a, 0x25, 0xab, 0x24, 0x54, 0xd0, 0x84, 0x13, 0xc1, 0x4d, 0xf5,
    0xb8, 0x6d, 0x53, 0x8b, 0x56, 0xb2, 0xc7, 0x93, 0xf2, 0x16, 0xd3, 0xd2, 0x68, 0x6d, 0x64, 0x32,
    0x9e, 0xd7, 0x5a, 0xfc, 0xb0, 0xd1, 0x3c, 0x2a, 0x4a, 0x14, 0x0b, 0x12, 0x91, 0x1d, 0xc4, 0x13,
    0xc2, 0x3d, 0xd9, 0xd2, 0x67, 0x98, 0x3b, 0x15, 0x96, 0x41, 0xce, 0xde, 0xe3, 0xa3, 0xa8, 0x45,
    0x94, 0xb9, 0x01, 0xab, 0x20, 0xae, 0x79, 0x19, 0x22, 0xe1, 0x3c, 0x71, 0xc8, 0xd1, 0xf2, 0x9c,
    0x54, 0x91, 0xef, 0xd8, 0x08, 0xe3, 0xe7, 0x9c, 0x47, 0xc7, 0x68, 0x7e, 0xfa, 0xc3, 0x1a, 0xb4,
    0xa2, 0x4f, 0xc9, 0xe0, 0x3a, 0x42, 0xeb, 0x40, 0x72, 0x8b, 0xca, 0x47, 0xc3, 0x6a, 0x52, 0x15,
    0x75, 0x9c, 0xe5, 0xdd, 0xfb, 0x65, 0x7b, 0x3d, 0x90, 0xbb, 0x64, 0xef, 0x83, 0xdb, 0xce, 0xd2,
    0x50, 0x15, 0x66, 0xab, 0x55, 0x9c, 0x23, 0x5c, 0x8c, 0xc3, 0x76, 0xf4, 0xba, 0x32, 0x16, 0xcd,
    0xfe, 0xb0, 0xbb, 0xf2, 0xe7, 0x82, 0x39, 0x54, 0x0b, 0x6f, 0xc0, 0x09, 0x39, 0x34, 0x55, 0xeb,
    0x82, 0xfb, 0x6b, 0x8f, 0xe9, 0xd3, 0xc0, 0xbd, 0x83, 0xe1, 0x89, 0x5b, 0x09, 0xdb, 0x7c, 0xd6,
    0xd2, 0x5a, 0xeb, 0x54, 0x6d, 0x17, 0x35, 0x92, 0xb8, 0x69, 0x68, 0x82, 0x24, 0x38, 0x8f, 0x6c,
    0x6c, 0x2a, 0x1f, 0x21, 0xcb, 0xe9, 0xef, 0x53, 0x47, 0xea, 0xf7, 0x93, 0x38, 0x44, 0x62, 0xbb,
    0x75, 0x4a, 0xf3, 0xc7, 0xce, 0xa0, 0xbe, 0x0a, 0x5b, 0xdd, 0x10, 0xd2, 0x90, 0x14, 0xd9, 0xc2,
    0x3e, 0x8e, 0xb2, 0xcc, 0xa8, 0xcf, 0x4a, 0x72, 0xcf, 0x06, 0xdd, 0xa1, 0xd5, 0x95, 0x15, 0xb9,
    0x09, 0x8b, 0x43, 0x91, 0xa1, 0x7a, 0x00, 0xc3, 0xe6, 0x37, 0x47, 0x67, 0xb9, 0x95, 0x9d, 0xb3,
    0xcf, 0xe9, 0x61, 0x7c, 0x44, 0xd6, 0x34, 0x77, 0x0d, 0x01, 0xf7, 0x62, 0x0f, 0xba, 0x0d, 0x1d,
    0x15, 0x66, 0x92, 0x2a, 0x01, 0x62, 0x42, 0xf8, 0xa0, 0x89, 0x2e, 0x1a, 0xbb, 0x4b, 0xf8, 0xb7,
    0xd8, 0x39, 0x38, 0x77, 0xee, 0x2e, 0x90, 0xba, 0xb8, 0xe5, 0xac, 0x3e, 0xc4, 0x13, 0x03, 0xf5,
    0x89, 0xf1, 0xcb, 0x08, 0x4e, 0xa2, 0xb3, 0xda, 0x07, 0xda, 0x02, 0xd1, 0x60, 0x71, 0x67, 0xe1,
    0x19, 0x2f, 0x6c, 0xb1, 0x2f, 0xb2, 0xa5, 0x0b, 0x7b, 0xa1, 0xa8, 0x2f, 0x40, 0x16, 0x16, 0xfd,
    0x9c, 0x8c, 0xc1, 0xb3, 0x01, 0x1c, 0xdb, 0xb6, 0xa4, 0x38, 0x9d, 0x99, 0x23, 0x92, 0xec, 0x7e,
    0x8f, 0x14, 0xe7, 0x33, 0x63, 0x9c, 0x42, 0x53, 0x44, 0x8a, 0x92, 0x79, 0xbe, 0x3a, 0xb1, 0xa0,
    0xa8, 0x11, 0x08, 0xfe, 0x1c, 0x69, 0x3d, 0x48, 0xb0, 0x22, 0x5c, 0x33, 0x89, 0x57, 0x4e, 0x3c,
    0xfa, 0x8a, 0x76, 0xea, 0x0c, 0x2a, 0x00, 0xff, 0xb3, 0x12, 0x77, 0x0c, 0x66, 0x74, 0xf2, 0x53,
    0x0f, 0xdf, 0x6d, 0x1c, 0x4f, 0x9a, 0x02, 0x13, 0xee, 0x92, 0xe4, 0xac, 0xc3, 0x5a, 0xe4, 0x75,
    0xda, 0x12, 0x09, 0x81, 0x4a, 0x02, 0xda, 0xd5, 0x22, 0x85, 0x2a, 0x36, 0x23, 0xf7, 0x79, 0x80,
    0x2f, 0xa9, 0x58, 0xbc, 0xee, 0x87, 0x07, 0x13, 0x55, 0x6b, 0x4b, 0xb7, 0xa1, 0xdb, 0x64, 0xab,
    0x92, 0x08, 0x69, 0x9e, 0x6c, 0x14, 0xd6, 0x5e, 0x80, 0x08, 0x16, 0x75, 0xe3, 0xb1, 0x1f, 0x03,
    0xfb, 0xe4, 0x74, 0x56, 0xed, 0x2f, 0xf2, 0xf4, 0xe8, 0xa3, 0x52, 0xf2, 0xe7, 0x64, 0xee, 0xef,
    0xe4, 0x7f, 0x05, 0x39, 0xda, 0x52, 0xa0, 0x54, 0x37, 0xbb, 0xc5, 0x37, 0x36, 0x18, 0xdc, 0x6a,
    0x51, 0xe6, 0x64, 0xb9, 0x69, 0x68, 0x18, 0xe5, 0x1f, 0x3a, 0xc2, 0x1a, 0x1f, 0x54, 0x3e, 0xc0,
    0xfe, 0xf9, 0xb4, 0xe7, 0x7e, 0x90, 0xfa, 0x0e, 0xcd, 0x3c, 0x7f, 0xea, 0x77, 0xc2, 0xae, 0x14,
    0x64, 0x91, 0xf5, 0xd5, 0x53, 0x7f, 0xd1, 0x8f, 0x5c, 0xba, 0x95, 0x61, 0x8c, 0xd5, 0x11, 0x0b,
    0x42, 0xf6, 0x9e, 0x7f, 0xcc, 0xa8, 0xd0, 0xce, 0xb2, 0x8a, 0x84, 0x23, 0x4e, 0x13, 0x1f, 0x04,
    0x56, 0x52, 0xd6, 0xf2, 0x84, 0x1e, 0x1f, 0x44, 0x50, 0xfc, 0xdb, 0x55, 0x86, 0x4d, 0x80, 0x90,
    0xce, 0xd3, 0x2c, 0x08, 0x1c, 0x79, 0xcc, 0x8b, 0xd3, 0x2e, 0x5d, 0xb8, 0x31, 0xd7, 0x89, 0x34,
    0xb0, 0x4f, 0x0e, 0xad, 0x57, 0x5f, 0x3f, 0xba, 0xb3, 0xe1, 0x68, 0x7e, 0xd3, 0x26, 0x17, 0x79,
    0x87, 0xb5, 0x88, 0xa2, 0x43, 0x77, 0x26, 0x79, 0x76, 0x80, 0x1f, 0x4c, 0x43, 0xb2, 0x18, 0x16,
    0x73, 0xb2, 0x39, 0xd0, 0x09, 0x5d, 0x43, 0x41, 0xd3, 0xc6, 0x0f, 0x95, 0x07, 0xf5, 0xcd, 0x54,
    0x25, 0x62, 0x2f, 0xaa, 0xd3, 0x9c, 0x20, 0x38, 0x40, 0xd7, 0x0f, 0x2c, 0xd7, 0x47, 0x18, 0xc1,
    0x62, 0x4a, 0x9b, 0xd2, 0xac, 0x4e, 0x11, 0xe2, 0x2b, 0xe9, 0x75, 0x98, 0x2c, 0x10, 0xa6, 0xd4,
    0x35, 0x45, 0x4a, 0x9a, 0xc4, 0x62, 0x73, 0x3e, 0xfc, 0x2e, 0x9c, 0x2a, 0x07, 0xff, 0x47, 0x4e,
    0xa4, 0x32, 0xcb, 0x9b, 0xbc, 0x5b, 0x46, 0x11, 0xa8, 0x97, 0x81, 0xb1, 0x76, 0x82, 0x71, 0x69,
    0x90, 0x18, 0xe5, 0x8a, 0x75, 0x17, 0x35, 0xe9, 0x41, 0x3b, 0x75, 0xdd, 0x38, 0x5f, 0x3d, 0x9f,
    0x09, 0x1d, 0x3a, 0xf6, 0xab, 0x4f, 0x77, 0x77, 0x6b, 0x1c, 0xea, 0xad, 0x7a, 0xec, 0x98, 0x46,
    0x45, 0x0e, 0xc4, 0x84, 0x6a, 0xc4, 0x13, 0xc4, 0xf7, 0x52, 0x98, 0x57, 0x7c, 0x93, 0xbd, 0xa2,
    0xad, 0x4b, 0xfe, 0xd4, 0xd0, 0x04, 0xdb, 0xe7, 0x1a, 0x59, 0xba, 0x29, 0xc7, 0xa6, 0x1c, 0x25,
    0x6f, 0x3a, 0x28, 0x40, 0x80, 0xd3, 0x06, 0x03, 0x6f, 0x48, 0xe1, 0xab, 0xff, 0x5e, 0xa6, 0x4d,
    0x96, 0x10, 0xfb, 0x17, 0x32, 0xb7, 0xac, 0x77, 0xda, 0x97, 0x5e, 0x67, 0x19, 0x90, 0x42, 0x46,
    0x08, 0xbc, 0x54, 0x42, 0xde, 0x14, 0x5c, 0xab, 0xb3, 0xbe, 0x39, 0x4b, 0x01, 0xe2, 0x3b, 0x84,
    0xe2, 0xfe, 0xb0, 0x81, 0xc9, 0x3f,
};

static const MessageEncodingTestVector sMessageEncodingTest0531 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0DED9630,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0531_Payload,
    sizeof(sMessageEncodingTest0531_Payload),
    sMessageEncodingTest0531_ExpectedEncoding,
    sizeof(sMessageEncodingTest0531_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0532_EncryptionKey =
{
    {
        0xd0, 0xbe, 0xca, 0xd6, 0xbb, 0x1b, 0x4a, 0x4f, 0x8e, 0x32, 0xf3, 0xde, 0xf2, 0xc8, 0x0e, 0xf2,
    },
    {
        0x49, 0x4b, 0xc5, 0xbc, 0x75, 0x72, 0x04, 0xd9, 0xff, 0x3e, 0x95, 0xe0, 0x1a, 0xa1, 0x17, 0x6b,
        0xe6, 0xa6, 0x76, 0x6c,
    }
};
static const uint8_t sMessageEncodingTest0532_Payload[] =
{
    0x23, 0xfa, 0x66, 0xc8, 0x1a, 0x1f, 0xb2, 0x58, 0xf0, 0xb3, 0xda, 0xe9, 0x00, 0x11, 0x82, 0xb7,
    0x9c, 0x0f, 0x20, 0x2e, 0x19, 0x91, 0x8a, 0x31, 0xaa, 0xc2, 0x66, 0x7a, 0x2a, 0x1f, 0x58, 0x98,
    0xcc, 0x9b, 0x2b, 0xd5, 0x3e, 0xfb, 0x02, 0x1c, 0xd5, 0x69, 0x4b, 0xd7, 0xdf, 0xdc, 0xf6, 0x32,
    0xfb, 0x35, 0xd3, 0x25, 0xe5, 0xd0, 0xca, 0x12, 0x7f, 0x03, 0xa2, 0xc0, 0x28, 0x75, 0x29, 0xce,
    0x27, 0x21, 0x34, 0x72, 0x26, 0x15, 0x05, 0xd9, 0xf0, 0x31, 0xca, 0xf6, 0x2a, 0xda, 0x3c, 0x51,
    0x2b, 0x37, 0x15, 0x81, 0x1d, 0x76, 0xe3, 0xa6, 0x4e, 0x9a, 0x7d, 0x9e, 0xdc, 0xa5, 0x0b, 0xb7,
    0xbb, 0x08, 0xa3, 0x4a, 0x55, 0xb2, 0x3d, 0x7d, 0x23, 0x09, 0x6e, 0xf7, 0x63, 0x10, 0xd0, 0x1a,
    0x7d, 0xa3, 0xb2, 0x08, 0xea, 0xd3, 0x86, 0xdb, 0xb4, 0x1e, 0x3a, 0x24, 0xbe, 0x90, 0xa6, 0x6b,
    0x9a, 0x43, 0x4f, 0x09, 0x2c, 0xae, 0x75, 0xf5, 0xf1, 0xa8, 0x98, 0x9b, 0x18, 0x88, 0x93, 0x83,
    0xae, 0x23, 0x76, 0xe0, 0xc8, 0xe9, 0xd2, 0x3e, 0x41, 0x9b, 0x84, 0x33, 0x1f, 0xf8, 0x74, 0x44,
    0x9d, 0x7e, 0x69, 0x72, 0x14, 0x96, 0xfd, 0x43, 0x23, 0x37, 0xc5, 0x9b, 0x85, 0xc4, 0xc8, 0x6b,
    0xa8, 0x0c, 0xfd, 0x77, 0xc8, 0xc8, 0x70, 0xf5, 0xd0, 0xbf, 0x6e, 0xd8, 0x28, 0x20, 0xf0, 0x88,
    0x23, 0x21, 0x26, 0x25, 0x82, 0xca, 0xc8, 0x7e, 0x15, 0x95, 0xa0, 0xcc, 0x4d, 0xfe, 0xfb, 0x85,
    0x42, 0xb5, 0x46, 0x1c, 0x84, 0x6d, 0x97, 0x39, 0x9e, 0x91, 0x98, 0xa2, 0x2c, 0xfc, 0x06, 0xff,
    0x36, 0x42, 0x28, 0xba, 0xf6, 0xb1, 0x49, 0x56, 0xdb, 0xc7, 0x02, 0xad, 0xc1, 0x77, 0xdd, 0x15,
    0x19, 0x72, 0xfd, 0x51, 0x7f, 0xa5, 0xdc, 0x64, 0x80, 0xd4, 0x96, 0x74, 0xc2, 0x07, 0x23, 0xb6,
    0xd8, 0xc1, 0xc2, 0x92, 0x5e, 0xb3, 0x6e, 0x14, 0x74, 0x41, 0x9e, 0xb8, 0x93, 0x1c, 0xe3, 0xbc,
    0x7b, 0x14, 0xa8, 0x6c, 0x89, 0x43, 0xde, 0x1f, 0x95, 0x4e, 0xcb, 0xa1, 0xe5, 0x73, 0x13, 0xe2,
    0xe4, 0x82, 0x9e, 0x14, 0x9f, 0x28, 0xc7, 0x20, 0xb5, 0x9f, 0xb6, 0xc2, 0x90, 0x0a, 0x97, 0xb2,
    0x08, 0x87, 0x80, 0x50, 0xe3, 0xf1, 0x04, 0x89, 0xe8, 0xfb, 0x6b, 0x2d, 0x28, 0xb6, 0xe6, 0x29,
    0x89, 0x77, 0x54, 0x7a, 0x15, 0x69, 0x2f, 0x93, 0xad, 0x3e, 0xab, 0x54, 0x96, 0x54, 0xc4, 0x7e,
    0xfd, 0x63, 0xcf, 0x28, 0x70, 0xe3, 0xe5, 0x29, 0x45, 0x96, 0xff, 0x32, 0x08, 0xc8, 0x54, 0xd6,
    0x9c, 0x5d, 0x3b, 0x5d, 0x22, 0xe8, 0x71, 0xdf, 0xc5, 0x97, 0x80, 0x4b, 0x5d, 0xe3, 0xa5, 0xb5,
    0xdf, 0x74, 0x2c, 0x9e, 0x84, 0x1e, 0x46, 0x07, 0x7a, 0x17, 0xce, 0x39, 0x32, 0xbd, 0xaf, 0xe1,
    0x91, 0xe1, 0x75, 0xf6, 0x33, 0x45, 0x52, 0x8a, 0x61, 0x1b, 0xd8, 0x16, 0x7c, 0x6c, 0x4c, 0xab,
    0xce, 0xa0, 0xd9, 0xd6, 0x32, 0xf9, 0x5a, 0xfa, 0x31, 0xef, 0x75, 0x46, 0x26, 0xbd, 0xdb, 0xda,
    0xa7, 0xf0, 0x83, 0x97, 0x76, 0x88, 0x88, 0x14, 0xc3, 0x33, 0x8e, 0x21, 0x7c, 0xf7, 0x53, 0xbc,
    0x06, 0xed, 0x8b, 0xe0, 0x68, 0x91, 0x4b, 0x1e, 0x66, 0xac, 0xdf, 0x9e, 0xab, 0x02, 0xee, 0xdc,
    0x00, 0x92, 0x63, 0xb3, 0xd4, 0x1f, 0x39, 0xf7, 0xc1, 0x93, 0xc5, 0x7e, 0x3b, 0x9d, 0x11, 0xae,
    0x6e, 0xa4, 0x1e, 0xed, 0xb8, 0xee, 0xfd, 0x8d, 0xe6, 0xc7, 0xcc, 0x1b, 0xe1, 0x5f, 0x2b, 0xe8,
    0x58, 0x6e, 0x17, 0x4a, 0x85, 0xee, 0x78, 0xf8, 0xd3, 0x95, 0x2c, 0x04, 0xab, 0x36, 0x64, 0x18,
    0xb8, 0x66, 0x3e, 0x7e, 0xd1, 0xca, 0xf7, 0xeb, 0xfd, 0xe2, 0xcc, 0xfb, 0xf4, 0x0b, 0xab, 0xde,
    0xe2, 0xb6, 0xb6, 0x63, 0x54, 0x0b, 0xf9, 0xec, 0xb2, 0xb9, 0x84, 0xed, 0x75, 0xab, 0xc8, 0x09,
    0xfb, 0x0f, 0x03, 0x97, 0x7b, 0x24, 0xfd, 0x8f, 0x12, 0x57, 0xf2, 0x1d, 0xb3, 0xe3, 0x0d, 0x92,
    0xef, 0x8d, 0x1d, 0x8c, 0x5d, 0x8a, 0xe2, 0x59, 0xac, 0x16, 0x95, 0x66, 0x16, 0xe3, 0x6e, 0x3a,
    0xef, 0xd8, 0xd7, 0x76, 0x25, 0xe1, 0x38, 0x0e, 0x5b, 0xb3, 0xf9, 0xce, 0x06, 0xd2, 0xc0, 0xe9,
    0x9c, 0x3a, 0xb7, 0x41, 0x6d, 0x23, 0x10, 0x5f, 0xba, 0x13, 0x4a, 0x0a, 0x92, 0xae, 0x52, 0x7f,
    0x07, 0xc3, 0xb1, 0xcc, 0x42, 0xe8, 0xe1, 0x22, 0x15, 0x57, 0x4f, 0x49, 0xee, 0xfd, 0x65, 0x68,
    0x9e, 0x19, 0x24, 0xd8, 0x18, 0x51, 0xb0, 0x10, 0x0f, 0x98, 0x68, 0x2f, 0x49, 0xb7, 0x67, 0xb5,
    0xb5, 0xe1, 0x48, 0x16, 0x23, 0xa6, 0xd4, 0x8f, 0x35, 0x32, 0x50, 0x56, 0x9b, 0x8b, 0x84, 0x31,
    0x38, 0x4c, 0xfc, 0xe5, 0x45, 0xf3, 0x24, 0x33, 0x15, 0xe0, 0xfe, 0x58, 0x88, 0x83, 0x1c, 0x3e,
    0x15, 0x74, 0x32, 0xcb, 0x99, 0x8b, 0xee, 0xa1, 0x54, 0xac, 0xc4, 0x59, 0xa2, 0xa5, 0x10, 0x98,
    0xec, 0xd9, 0x16, 0x56, 0x71, 0xab, 0xe5, 0x32, 0xff, 0xf1, 0x29, 0x77, 0x94, 0xde, 0x5b, 0xf1,
    0x70, 0xf6, 0x50, 0x39, 0x0a, 0xd5, 0x4f, 0xdd, 0x6b, 0x4f, 0xc9, 0x58, 0x1f, 0xa4, 0x67, 0x72,
    0xea, 0xa0, 0x2a, 0x58, 0x8f, 0xb6, 0x93, 0x9f, 0xee, 0x84, 0x8a, 0xf2, 0xbd, 0xd4, 0x53, 0x46,
    0xbf, 0xf6, 0xe6, 0x7c, 0xb7, 0x7f, 0xae, 0xb8, 0x80, 0x59, 0x8b, 0x79, 0x43, 0x7b, 0x4c, 0x8a,
    0xab, 0xe6, 0xda, 0xa2, 0x4d, 0x21, 0xde, 0x05, 0x0d, 0x1b, 0x9d, 0x93, 0x5c, 0x8b, 0x2a, 0xb4,
    0xf1, 0xe3, 0x73, 0xac, 0x2f, 0x25, 0xd9, 0xc2, 0x4c, 0x3a, 0x43, 0xb7, 0xb5, 0xd2, 0x17, 0xb4,
    0x03, 0xe5, 0x2a, 0xbb, 0xc2, 0x4f, 0x52, 0x68, 0x0c, 0xcb, 0x98, 0xb2, 0x16, 0x73, 0xd1, 0xfe,
    0x4e, 0x3c, 0xb9, 0xb8, 0xfe, 0x94, 0x4e, 0xaa, 0x5c, 0x26, 0xec, 0x68, 0x7b, 0x0c, 0xe4, 0xd9,
    0x77, 0xc0, 0x39, 0xa6, 0x43, 0xd7, 0xb3, 0xe9, 0x50, 0xb0, 0xd2, 0x0d, 0x69, 0x79, 0xca, 0x41,
    0xc0, 0x50, 0x63, 0x6b, 0x14, 0x6a, 0xd3, 0x27, 0xdb, 0x7b, 0x8b, 0x36, 0x6b, 0xc6, 0xda, 0xe1,
    0x1d, 0xc6, 0xcd, 0xde, 0x83, 0x48, 0x65, 0x3b, 0x3f, 0x5c, 0xf2, 0x4b, 0x1a, 0xb3, 0x51, 0x4b,
    0x50, 0xd7, 0x73, 0x51, 0x9f, 0xd1, 0x4e, 0xb5, 0xe8, 0x68, 0xa5, 0xf4, 0x78, 0xa6, 0xad, 0xf5,
    0x0a, 0x98, 0x39, 0xbc, 0xdf, 0xae, 0xfa, 0x95, 0x2d, 0x68, 0x0f, 0xc9, 0xcd, 0xac, 0x0f, 0xb6,
    0x5b, 0x77, 0xc6, 0x7f, 0xef, 0xa6, 0x2a, 0x6a, 0xef, 0xa3, 0x1a, 0xe4, 0xe0, 0x8e, 0x3c, 0xad,
    0x55, 0xe8, 0x36, 0x4c, 0x0e, 0xcb, 0xc3, 0x96, 0x3d, 0xdb, 0x59, 0x07, 0x59, 0xf5, 0x89, 0xaa,
    0x44, 0xa4, 0x35, 0x03, 0x5a, 0xc3, 0xab, 0x13, 0xaa, 0xa9, 0x11, 0x45, 0x07, 0xa5, 0x55, 0xc8,
    0x1b, 0x55, 0xb8, 0xd6, 0xab, 0x3e, 0xe7, 0x91, 0xf6, 0x70, 0x1b, 0x45, 0x5e, 0x1e, 0x89, 0xa4,
    0x34, 0x66, 0x72, 0xe3, 0x2c, 0x4d, 0x1e, 0x8d, 0xc2, 0x8c, 0x55, 0x5f, 0x39, 0x80, 0x60, 0x3a,
    0x31, 0x33, 0x46, 0xab, 0xc5, 0xf1, 0x87, 0x95, 0x32, 0xce, 0x2a, 0x23, 0x0e, 0x7b, 0xad, 0x5c,
    0x29, 0xa6, 0x59, 0xf7, 0xae, 0x5f, 0x28, 0x6e, 0xbd, 0x1a, 0x43, 0x6e, 0x82, 0xb2, 0x5f, 0x53,
    0x28, 0x7f, 0xa9, 0x18, 0x32, 0xa3, 0x90, 0xfb, 0xbf, 0x7c, 0x6f, 0x91, 0x4a, 0x9c, 0x13, 0x25,
    0xbb, 0x1d, 0x9a, 0x7f, 0x2a, 0xef, 0x7c, 0xfd, 0x10, 0xd5, 0x37, 0x40, 0x66, 0x9e, 0xa6, 0xed,
};

static const uint8_t sMessageEncodingTest0532_ExpectedEncoding[] =
{
    0x10, 0x2b, 0xfa, 0x41, 0x42, 0x5d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc4, 0x2f, 0xf5, 0x6d, 0xf9, 0xbc, 0xa5, 0xf2, 0x32, 0x22,
    0x63, 0x9e, 0x7b, 0x65, 0x4d, 0x23, 0xab, 0xe6, 0xc9, 0x7c, 0x34, 0x1b, 0xb6, 0xcc, 0x11, 0x7e,
    0x4b, 0xe8, 0x38, 0x1e, 0x35, 0x82, 0xa9, 0x9e, 0x99, 0xe8, 0x36, 0x41, 0xd3, 0xe0, 0xbf, 0xd2,
    0xa1, 0x3b, 0xbe, 0x58, 0x62, 0xdd, 0xc2, 0x93, 0xcf, 0x96, 0xe9, 0x46, 0x85, 0xd9, 0xfa, 0x85,
    0xe5, 0xcd, 0x6d, 0x8b, 0x3b, 0x29, 0x6d, 0x31, 0xd3, 0x61, 0x27, 0xf9, 0x2b, 0x9f, 0x50, 0x62,
    0x13, 0x5b, 0x9f, 0x23, 0x41, 0xb0, 0x77, 0x46, 0xbe, 0x02, 0x1e, 0x41, 0x67, 0x31, 0x2d, 0xe7,
    0x77, 0x29, 0x7b, 0x28, 0xa4, 0x3f, 0x79, 0x24, 0x60, 0x85, 0x8f, 0x80, 0x4c, 0xa8, 0xe0, 0xaf,
    0xd6, 0x23, 0x6a, 0x5b, 0x6e, 0xd1, 0x57, 0xcb, 0x71, 0x62, 0x24, 0xa9, 0xdc, 0xdc, 0x89, 0x1a,
    0xc2, 0x32, 0xe9, 0x6b, 0x2f, 0x68, 0x15, 0x57, 0xa1, 0xb7, 0x3e, 0x8b, 0xf7, 0x1b, 0xa9, 0x38,
    0x29, 0x4c, 0xc4, 0x8d, 0x1f, 0xfb, 0xd9, 0xee, 0x26, 0x77, 0x56, 0xc1, 0x38, 0xfc, 0x4b, 0xd7,
    0xca, 0x0b, 0x76, 0x1d, 0x6f, 0xe2, 0xd9, 0x94, 0x9d, 0x87, 0x34, 0x16, 0x05, 0x5d, 0x9b, 0xdf,
    0x90, 0x54, 0x3e, 0xf2, 0x3f, 0xd1, 0x5a, 0xf3, 0x8f, 0x1a, 0xd2, 0x28, 0xf1, 0x4a, 0xfa, 0xd4,
    0xe4, 0xd2, 0xe5, 0x01, 0x62, 0xe0, 0x61, 0x79, 0xeb, 0x2a, 0x6f, 0x0b, 0xda, 0x84, 0x4a, 0xf2,
    0xcc, 0x28, 0x91, 0xf2, 0x03, 0x52, 0x18, 0xf2, 0x2d, 0x9e, 0x3b, 0xf2, 0xe6, 0x92, 0x7a, 0x91,
    0xf1, 0xd2, 0x3c, 0xda, 0x74, 0x8e, 0x11, 0x6c, 0xfa, 0x5b, 0xe9, 0x00, 0x1c, 0x0e, 0x66, 0x3a,
    0xae, 0x7d, 0xf3, 0xe1, 0xc5, 0x85, 0xe5, 0x6e, 0xad, 0xa6, 0xac, 0x68, 0x67, 0x95, 0x11, 0x7f,
    0xb0, 0x2b, 0xa7, 0x4a, 0xbf, 0xde, 0x62, 0xf2, 0x27, 0x67, 0x43, 0x9c, 0x60, 0xce, 0xca, 0x9b,
    0x0e, 0x78, 0x56, 0x0e, 0x8a, 0x8b, 0x7b, 0xe2, 0xbf, 0x62, 0x62, 0xb8, 0x31, 0x93, 0x4b, 0xcb,
    0xc1, 0x16, 0x9c, 0x8a, 0x2e, 0x6b, 0x4f, 0x80, 0x7c, 0x9d, 0xa8, 0x8d, 0x58, 0xf0, 0x54, 0x27,
    0xe9, 0x12, 0x78, 0xa2, 0xf8, 0x73, 0x9f, 0xbc, 0x0f, 0xf1, 0xfb, 0xd2, 0xc8, 0xf4, 0x61, 0x77,
    0xbe, 0x6d, 0x42, 0xfc, 0xb2, 0x2d, 0x21, 0x59, 0x6e, 0x7d, 0xfe, 0x12, 0x34, 0x5f, 0x32, 0xbf,
    0x99, 0x52, 0x5e, 0xcb, 0xef, 0x29, 0x8d, 0x4f, 0x16, 0x31, 0x06, 0x0d, 0x8e, 0xed, 0x00, 0xdd,
    0xf4, 0x77, 0x08, 0x9a, 0x4b, 0x6e, 0x1b, 0x17, 0xe4, 0x22, 0x9b, 0xed, 0xc3, 0x38, 0xc7, 0xf9,
    0xb3, 0x0e, 0xe9, 0xa5, 0x35, 0x25, 0x36, 0x64, 0x50, 0x57, 0x55, 0xd0, 0xca, 0x0a, 0x04, 0x87,
    0x31, 0x48, 0xe4, 0x42, 0x55, 0x98, 0x68, 0xee, 0x4f, 0xc7, 0x11, 0xde, 0x3a, 0xca, 0x40, 0x19,
    0x40, 0xad, 0x29, 0xf5, 0xd1, 0x07, 0x01, 0xec, 0x24, 0x4d, 0x46, 0x56, 0xe6, 0x88, 0xbe, 0x81,
    0x69, 0x8c, 0xe0, 0x8b, 0xa9, 0x64, 0x48, 0x80, 0x64, 0x39, 0x34, 0xcd, 0xf0, 0x47, 0x2e, 0xc2,
    0x2c, 0xd1, 0x0f, 0x65, 0x7a, 0x9e, 0xfd, 0x7b, 0xc0, 0x0a, 0xe4, 0x52, 0x77, 0xac, 0xf1, 0x14,
    0x0a, 0xf8, 0xf8, 0xc0, 0xb2, 0x1d, 0x17, 0xfd, 0x12, 0x3b, 0x71, 0x13, 0x9b, 0xe1, 0x65, 0x4e,
    0xb2, 0x83, 0x02, 0xa8, 0x6b, 0x30, 0xc4, 0x62, 0x28, 0x29, 0xa3, 0x53, 0xd0, 0xa1, 0xb7, 0x82,
    0x95, 0xfa, 0x1f, 0x5d, 0x03, 0x71, 0xbc, 0x11, 0xfa, 0x61, 0x01, 0x2a, 0xbc, 0xa6, 0xd6, 0xe7,
    0x2d, 0xc6, 0xa4, 0x7f, 0x93, 0x41, 0x00, 0xb3, 0xee, 0xf8, 0xf7, 0x37, 0x44, 0x3f, 0x95, 0xd9,
    0xc6, 0xf0, 0xca, 0xb5, 0x64, 0x46, 0xae, 0x43, 0x88, 0x84, 0xe3, 0x4c, 0xb5, 0xc6, 0x41, 0xd5,
    0x2b, 0x0f, 0xda, 0x17, 0x27, 0xb9, 0x8e, 0x22, 0x96, 0xf5, 0x12, 0x5a, 0xe2, 0xe0, 0x38, 0xcf,
    0x6a, 0x7c, 0xf3, 0x49, 0x65, 0x31, 0x8d, 0x46, 0xe1, 0xa4, 0xc4, 0xb6, 0x2f, 0x38, 0x38, 0x8c,
    0x7c, 0xad, 0x60, 0x95, 0x03, 0x41, 0xd0, 0x98, 0x93, 0x6c, 0x6c, 0x60, 0x51, 0x7c, 0xd4, 0xc7,
    0x41, 0x55, 0x52, 0x15, 0x9f, 0x74, 0x07, 0x57, 0x4c, 0xa7, 0x8d, 0xac, 0x6c, 0xa5, 0x68, 0xf7,
    0xb4, 0xa9, 0x9a, 0x54, 0xc2, 0x5d, 0xda, 0x52, 0x08, 0x42, 0x04, 0x52, 0xc1, 0xf8, 0xde, 0x78,
    0x73, 0xa1, 0xa8, 0x78, 0xd7, 0x87, 0xa7, 0xc8, 0x1a, 0x7c, 0x53, 0xed, 0x84, 0xf3, 0xa2, 0x0e,
    0xfb, 0x92, 0x43, 0xb9, 0x29, 0xfb, 0x83, 0x36, 0xd6, 0xc6, 0x09, 0x87, 0x42, 0xe9, 0xf3, 0xcc,
    0x0c, 0x7b, 0x2d, 0xec, 0x60, 0x62, 0x4a, 0x15, 0x76, 0x13, 0x8a, 0x0d, 0xe4, 0x7d, 0xf1, 0x19,
    0xff, 0x21, 0x92, 0x1f, 0x7d, 0x79, 0xce, 0x3a, 0x31, 0x01, 0xfa, 0x2f, 0x51, 0x7e, 0xb6, 0x23,
    0x30, 0x3f, 0xfe, 0xb5, 0xc1, 0xac, 0x09, 0x2d, 0xeb, 0xb4, 0xbd, 0x0b, 0x25, 0x4f, 0x93, 0xd2,
    0xfb, 0xee, 0x4f, 0xf4, 0x94, 0x12, 0x03, 0xbe, 0xf1, 0xd7, 0xf7, 0x67, 0x54, 0x09, 0xed, 0xcd,
    0xeb, 0x36, 0x30, 0x87, 0x72, 0xa0, 0x1a, 0xbb, 0x4a, 0x86, 0xbe, 0xcd, 0x1b, 0xc2, 0x4a, 0x1d,
    0xcd, 0xf3, 0x08, 0xae, 0x81, 0xe2, 0x8f, 0x54, 0xde, 0xd6, 0x65, 0xb8, 0x77, 0x07, 0x7d, 0x8a,
    0xeb, 0x83, 0x43, 0x03, 0x73, 0xbc, 0x0f, 0xc4, 0xa5, 0x2a, 0xf5, 0xd4, 0x0c, 0x75, 0x89, 0x94,
    0x76, 0x05, 0x44, 0x6c, 0x79, 0x82, 0xfc, 0xe6, 0x25, 0xa9, 0xb6, 0x54, 0x7a, 0x3e, 0x37, 0x71,
    0x80, 0xf7, 0x25, 0x45, 0x29, 0xf6, 0x38, 0x66, 0xed, 0x67, 0x36, 0xd2, 0xea, 0x5c, 0x76, 0xba,
    0x79, 0xad, 0x39, 0x98, 0x41, 0xe0, 0xac, 0x1a, 0x20, 0x96, 0x60, 0xd3, 0x19, 0x4d, 0x16, 0x91,
    0x0a, 0x56, 0x3f, 0xa5, 0x35, 0xed, 0x96, 0xa7, 0xff, 0x90, 0xf9, 0x77, 0xe1, 0x3b, 0x59, 0x35,
    0x2b, 0xab, 0x8d, 0x83, 0xe5, 0x40, 0x8a, 0xce, 0x62, 0xee, 0x54, 0x3e, 0x0c, 0x17, 0xd3, 0xba,
    0x35, 0xbf, 0xfc, 0x7a, 0x1c, 0x35, 0x0f, 0x73, 0xf4, 0x96, 0x3a, 0x8e, 0x5b, 0xd5, 0xba, 0xf1,
    0xa2, 0xca, 0x89, 0xe1, 0xb2, 0x1b, 0x21, 0x1a, 0x34, 0xb9, 0xa4, 0xdb, 0xe5, 0x65, 0xf4, 0xa1,
    0x3c, 0x56, 0x12, 0x4f, 0xd5, 0x65, 0x21, 0x1a, 0x65, 0x5f, 0xda, 0x30, 0x35, 0xc4, 0xcc, 0x1c,
    0xa9, 0x3f, 0xb3, 0x3b, 0x4c, 0x0b, 0x10, 0xce, 0x1f, 0x85, 0x06, 0x61, 0x34, 0x7a, 0x7a, 0xbb,
    0xc4, 0xef, 0xd1, 0x55, 0xbc, 0x83, 0xf5, 0x4f, 0xb0, 0xa7, 0xf5, 0x8b, 0x06, 0x83, 0xfa, 0x0c,
    0xd6, 0x53, 0x07, 0xd3, 0xa0, 0x63, 0x6b, 0x22, 0x4c, 0xde, 0xc1, 0x6d, 0x9d, 0x84, 0xfd, 0x3f,
    0xc2, 0xdd, 0x58, 0xc6, 0x95, 0x12, 0xb0, 0x36, 0xf8, 0x1a, 0x07, 0x3e, 0xe1, 0xd9, 0x31, 0xf6,
    0xbe, 0x0b, 0xe3, 0x88, 0x9c, 0xc9, 0x62, 0x4e, 0xfc, 0xf7, 0xb7, 0x21, 0x48, 0x57, 0xca, 0xe2,
    0xed, 0xc1, 0x7e, 0xc0, 0xc6, 0x24, 0x6c, 0x6e, 0x40, 0x62, 0xfe, 0x69, 0x72, 0x3a, 0xe3, 0xc5,
    0x89, 0x32, 0x9c, 0x36, 0x7e, 0x07, 0x82, 0xd2, 0xff, 0xd0, 0x54, 0xc6, 0x63, 0x19, 0xa5, 0xbf,
    0x8f, 0x98, 0xea, 0xe8, 0x38, 0x37, 0x3f, 0xf9, 0x42, 0xd4, 0x70, 0x89, 0xbb, 0x58, 0x49, 0xb1,
    0x77, 0xf8, 0xd7, 0x6b, 0x2f, 0x89, 0x78, 0x58, 0x0d, 0x7b, 0x58, 0x6e, 0x2a, 0x57, 0x68, 0xa1,
    0x3b, 0x48, 0x68, 0x2e, 0x1f, 0xf5, 0x45, 0x3d, 0x78, 0x23, 0x4b, 0xfb, 0x0c, 0x31, 0x71, 0x53,
    0xb5, 0xc6, 0x40, 0x44, 0x01, 0x23, 0x85, 0x09, 0x1a, 0x67, 0xb1, 0x39,
};

static const MessageEncodingTestVector sMessageEncodingTest0532 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x5D4241FA,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2FC4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0532_EncryptionKey,
    sMessageEncodingTest0532_Payload,
    sizeof(sMessageEncodingTest0532_Payload),
    sMessageEncodingTest0532_ExpectedEncoding,
    sizeof(sMessageEncodingTest0532_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0533_EncryptionKey =
{
    {
        0xe3, 0xb8, 0xf3, 0x96, 0xf0, 0x2c, 0x2a, 0x45, 0x77, 0x37, 0x85, 0x2c, 0x58, 0x32, 0x5c, 0x37,
    }
};
static const uint8_t sMessageEncodingTest0533_Payload[] =
{
    0x66, 0xb4, 0x22, 0x5e, 0x76, 0x6d, 0xaa, 0x44, 0x59, 0xb0, 0x25, 0x67, 0x83, 0x08, 0x1f, 0x82,
    0xc6, 0xac, 0x54, 0x09, 0xa3, 0x5c, 0x8e, 0xf5, 0xbd, 0xfb, 0x0b, 0xa0, 0x10, 0xae, 0xec, 0x20,
    0xe5, 0x64, 0x59, 0xfc, 0xdb, 0x5e, 0x80, 0x9c, 0x43, 0xdf, 0x7d, 0xca, 0x2f, 0xac, 0x53, 0xe1,
    0x6d, 0xe3, 0x09, 0x68, 0xf3, 0x1a, 0x9e, 0x09, 0xad, 0x88, 0xeb, 0x07, 0x87, 0xfb, 0xb5, 0x32,
    0xcc, 0x8a, 0xcf, 0x15, 0xe1, 0xe7, 0x71, 0x13, 0xaf, 0xd5, 0x67, 0x28, 0xbf, 0x24, 0x4e, 0x46,
    0x78, 0x6e, 0x66, 0x7f, 0x04, 0x44, 0xb0, 0x6c, 0x30, 0xc8, 0x8e, 0x8f, 0x12, 0x49, 0xf0, 0xb5,
    0x4d, 0x0b, 0x97, 0xf9, 0xf9, 0x7b, 0xa5, 0x63, 0xa6, 0x35, 0xb7, 0x4a, 0x77, 0x29, 0x12, 0x85,
    0x2e, 0xa4, 0xc8, 0xca, 0xfa, 0x14, 0xd3, 0xdc, 0x61, 0x0b, 0xea, 0xbc, 0xeb, 0x8d, 0x68, 0x14,
    0xd6, 0x45, 0x82, 0x55, 0xf3, 0xb1, 0x0c, 0x4a, 0xa2, 0x8e, 0xb1, 0xf6, 0x36, 0xa6, 0xd0, 0xee,
    0x83, 0x38, 0x8d, 0xfc, 0x4a, 0x79, 0x32, 0xd2, 0x90, 0xde, 0x58, 0xe5, 0x88, 0x2e, 0x21, 0xc5,
    0x98, 0x38, 0xe9, 0x89, 0xb4, 0xf0, 0xf1, 0x45, 0x5c, 0x56, 0x05, 0xe2, 0x5a, 0x17, 0x4d, 0x76,
    0xca, 0xe6, 0x02, 0xdf, 0xe3, 0xbd, 0x23, 0x3f, 0x31, 0x70, 0xae, 0x96, 0x66, 0x9f, 0xf6, 0x1a,
    0x77, 0x70, 0x54, 0x2f, 0x77, 0xfe, 0x58, 0xbe, 0xf9, 0xdb, 0xeb, 0xcb, 0x9e, 0xe0, 0xe3, 0x6b,
    0x09, 0x91, 0x68, 0xe2, 0x89, 0xf1, 0x0b, 0x07, 0x50, 0x09, 0x7c, 0x20, 0x4f, 0x63, 0x45, 0x69,
    0x23, 0xf4, 0x01, 0xf3, 0x9f, 0x0a, 0x6b, 0xbf, 0x37, 0x8a, 0xec, 0xb3, 0x62, 0x0a, 0x02, 0x28,
    0x8f, 0x57, 0xd0, 0xfe, 0x0f, 0x07, 0xa9, 0x78, 0xfc, 0x92, 0x29, 0x80, 0x06, 0xd6, 0x17, 0x2e,
    0x72, 0xed, 0x9d, 0xe4, 0x0a, 0xe0, 0x5c, 0x49, 0xf4, 0x45, 0x56, 0xb5, 0x42, 0xe7, 0x45, 0xb7,
    0xd0, 0x6f, 0x02, 0xfa, 0x9b, 0x77, 0xa8, 0x93, 0xc6, 0x64, 0x98, 0x11, 0xa5, 0x1a, 0x51, 0xb0,
    0xc4, 0x2c, 0xe1, 0x27, 0xad, 0xf5, 0x99, 0x41, 0x12, 0x62, 0x2f, 0xa4, 0x8b, 0xb5, 0x71, 0x7a,
    0x2d, 0xc2, 0x61, 0x04, 0x88, 0x73, 0x00, 0xf7, 0xbf, 0xdb, 0x23, 0x23, 0xe9, 0xae, 0x1e, 0xac,
    0x87, 0x7c, 0x85, 0x53, 0xb5, 0x91, 0x74, 0x70, 0xb0, 0x0f, 0x40, 0x2c, 0x91, 0x6d, 0x2b, 0xef,
    0xfb, 0x52, 0x7e, 0x1c, 0x6f, 0xbb, 0x22, 0xb5, 0x78, 0x7a, 0x8e, 0x69, 0xe8, 0x8d, 0x77, 0x2f,
    0x4a, 0x70, 0x0f, 0x1b, 0xf0, 0x57, 0x9d, 0x9b, 0x1b, 0xf3, 0x84, 0x6e, 0x2d, 0x70, 0x86, 0x14,
    0xd8, 0x7e, 0x31, 0xc2, 0xa4, 0x6a, 0x59, 0x6b, 0x4a, 0xbb, 0x37, 0x0d, 0x12, 0x8c, 0x3e, 0xf5,
    0x64, 0xa1, 0xcb, 0x35, 0x47, 0x0e, 0x02, 0xdd, 0xb2, 0x29, 0xaa, 0x29, 0x13, 0xaa, 0xc8, 0x36,
    0xb6, 0x38, 0xcf, 0x1c, 0x5c, 0x79, 0x02, 0xc0, 0x78, 0x5e, 0xfd, 0xfd, 0x0c, 0xb1, 0x25, 0xcc,
    0xde, 0x41, 0x46, 0x2e, 0x38, 0xab, 0x2f, 0x8b, 0x25, 0x45, 0x44, 0xfb, 0x1a, 0x4b, 0x13, 0xb9,
    0x1e, 0x56, 0x6c, 0x3e, 0x79, 0x15, 0x31, 0x9d, 0x8b, 0x49, 0xf1, 0x89, 0xad, 0xde, 0xde, 0x5e,
    0x45, 0x26, 0x30, 0x26, 0x8f, 0x5d, 0xf4, 0xb9, 0x6b, 0x10, 0x4b, 0x18, 0x93, 0xa0, 0x18, 0xa9,
    0xe7, 0xde, 0x49, 0x7d, 0xa2, 0x64, 0xc5, 0xeb, 0xfd, 0x08, 0x53, 0xf3, 0xc7, 0xb4, 0x1a, 0x69,
    0x04, 0x8f, 0x21, 0xbc, 0xc2, 0xa2, 0x64, 0x25, 0xc6, 0x76, 0xd2, 0xb3, 0xcf, 0xdb, 0x4a, 0x0a,
    0x85, 0x84, 0x56, 0xdc, 0xd3, 0xba, 0x38, 0xcb, 0x3a, 0x3e, 0xf1, 0x2d, 0x99, 0x07, 0xf3, 0xbf,
    0xee, 0x9e, 0x77, 0x49, 0x44, 0x0c, 0x3a, 0x03, 0xa2, 0xe0, 0xeb, 0x03, 0x8f, 0x0e, 0x34, 0x67,
    0x10, 0x66, 0x3e, 0x13, 0x42, 0xf8, 0xfd, 0xf5, 0xbd, 0x61, 0xeb, 0x1f, 0x16, 0x68, 0x2f, 0xc9,
    0x32, 0x4e, 0x5a, 0x6b, 0x23, 0x21, 0x35, 0xb9, 0x9d, 0x81, 0xc9, 0x95, 0x18, 0xf3, 0x72, 0x35,
    0x63, 0xf6, 0x0e, 0x23, 0xe6, 0x2a, 0x5a, 0x0a, 0xee, 0x36, 0x44, 0x4c, 0xf7, 0x33, 0x24, 0x32,
    0x9c, 0xff, 0xf4, 0x5d, 0x27, 0x40, 0x0b, 0x4e, 0xd4, 0x68, 0xac, 0x2a, 0x9b, 0x3e, 0x2f, 0x85,
    0x58, 0xa1, 0xfd, 0xa3, 0x7a, 0x3c, 0xde, 0x11, 0x11, 0x54, 0x50, 0x92, 0xb2, 0x99, 0x26, 0xbc,
    0x17, 0x32, 0xa6, 0xdd, 0x3b, 0x33, 0x1a, 0xfc, 0x7b, 0x5c, 0x2a, 0xf9, 0xa1, 0x27, 0x19, 0x67,
    0xaf, 0xa9, 0x9d, 0x49, 0xd3, 0x48, 0x5e, 0x1a, 0x7a, 0x9e, 0xfa, 0xea, 0x50, 0x6c, 0xff, 0xe0,
    0xce, 0xe0, 0x6a, 0x46, 0x3b, 0xcb, 0xe3, 0xa8, 0xb6, 0xe6, 0xef, 0x51, 0x4b, 0xf9, 0x84, 0xae,
    0x77, 0x00, 0x98, 0xb7, 0x00, 0x3b, 0x17, 0x89, 0xbf, 0xee, 0x48, 0x70, 0x6f, 0xc7, 0x54, 0x68,
    0xbd, 0x71, 0xf9, 0xa5, 0xfc, 0x1d, 0xc8, 0xc8, 0x0a, 0x41, 0xab, 0xee, 0x4b, 0xe5, 0x81, 0x77,
    0x22, 0x7c, 0x58, 0x99, 0x4e, 0xe5, 0x45, 0x63, 0xa7, 0x0c, 0xee, 0x5f, 0xf6, 0x24, 0xb6, 0xe7,
    0xa7, 0xd7, 0x84, 0xa7, 0xb4, 0x37, 0x0e, 0x2a, 0xc1, 0x24, 0xf7, 0xef, 0x87, 0x57, 0xda, 0x44,
    0x9b, 0x87, 0x37, 0x5b, 0xa3, 0xe7, 0xb2, 0xa6, 0xfa, 0xdc, 0x29, 0xe4, 0xdf, 0x6a, 0x90, 0x65,
    0xb5, 0xc1, 0x3d, 0x4f, 0xbd, 0xc1, 0xca, 0x0b, 0x8d, 0xc3, 0x5c, 0xe3, 0xe3, 0xcf, 0x6c, 0xdd,
    0x20, 0xf7, 0xc9, 0xa6, 0x7c, 0x64, 0x39, 0x58, 0xc8, 0xac, 0xaf, 0x3f, 0x80, 0x3d, 0xe9, 0x55,
    0x5b, 0xb5, 0xda, 0x92, 0x73, 0xdb, 0x84, 0x73, 0x24, 0x7c, 0x0f, 0x01, 0xce, 0x96, 0x72, 0x9c,
    0x21, 0xa3, 0x14, 0xbf, 0x1a, 0xfa, 0xb0, 0x04, 0x73, 0xe4, 0x23, 0x96, 0x51, 0x44, 0x88, 0x88,
    0x4c, 0x63, 0xa2, 0x45, 0x19, 0x7d, 0xb1, 0xcc, 0x52, 0x0a, 0x3c, 0xd2, 0x6a, 0xc6, 0xc2, 0x33,
    0xe9, 0x60, 0xc8, 0x51, 0xcc, 0x96, 0x05, 0xbb, 0x34, 0xa8, 0x3e, 0x03, 0xa0, 0x6a, 0x4a, 0xc5,
    0xa1, 0x05, 0xab, 0xad, 0x0d, 0x05, 0xb3, 0x52, 0xaf, 0xbb, 0xfb, 0x7e, 0x93, 0x34, 0x60, 0xaf,
    0x58, 0xf3, 0x1e, 0xf7, 0x57, 0xe7, 0x2c, 0xdf, 0x84, 0x54, 0x8c, 0x92, 0x6c, 0x15, 0xec, 0xaf,
    0x55, 0x0c, 0xa7, 0x5b, 0x1d, 0x26, 0xc0, 0x58, 0x4d, 0x31, 0xd7, 0xcb, 0x2a, 0x17, 0x9b, 0xdf,
    0x1d, 0xcf, 0x40, 0x19, 0x34, 0x99, 0x20, 0x41, 0xa9, 0x4d, 0xa4, 0x86, 0xef, 0xb6, 0x73, 0x7d,
    0x58, 0x6b, 0x6d, 0x10, 0x19, 0xa6, 0xca, 0x6f, 0xbe, 0x93, 0x1d, 0xe8, 0x33, 0x43, 0xa2, 0x26,
    0x28, 0x3b, 0xc9, 0x6e, 0x65, 0x4f, 0x68, 0x9f, 0x13, 0xfa, 0xb7, 0x27, 0x4a, 0xbd, 0x7e, 0xb6,
    0x39, 0x9d, 0xd2, 0x5a, 0xea, 0xc8, 0x63, 0xcb, 0xe7, 0xfe, 0xcc, 0x5c, 0xfb, 0xf9, 0x8a, 0xd2,
    0xa5, 0x48, 0xb4, 0xae, 0x7a, 0x01, 0x6f, 0xd2, 0x16, 0xf7, 0xe4, 0x79, 0x9d, 0xad, 0x66, 0x45,
    0x2c, 0xb8, 0x11, 0x15, 0x27, 0xc1, 0x7c, 0x58, 0x64, 0x27, 0xad, 0xbe, 0x1e, 0xf3, 0xd2, 0x77,
    0x30, 0x0c, 0x3d, 0x77, 0x83, 0x1f, 0x5b, 0x6e, 0x1c, 0x79, 0x40, 0x83, 0x99, 0xf1, 0x93, 0xa7,
    0x37, 0x18, 0x7f, 0x21, 0x35, 0x0c, 0x0d, 0x2f, 0xd7, 0xbc, 0x82, 0x2a, 0x90, 0x8c, 0xf2, 0x03,
    0x1d, 0x56, 0xa7, 0x8c, 0xb1, 0xfa, 0xa3, 0x0d, 0x27, 0x15, 0x7f, 0xe5, 0x26, 0x3f, 0xf3, 0x4f,
};

static const uint8_t sMessageEncodingTest0533_ExpectedEncoding[] =
{
    0x20, 0x2b, 0x4d, 0xb6, 0xfb, 0x77, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa4, 0x2e, 0xe7, 0x84, 0x47, 0x0a, 0x01, 0xf0, 0x08, 0x09,
    0xdf, 0x74, 0x9a, 0x9d, 0x64, 0xd3, 0x4e, 0x5e, 0xc1, 0x82, 0x27, 0x36, 0x7e, 0x38, 0x80, 0xca,
    0x59, 0x2e, 0x1a, 0x20, 0x12, 0xf6, 0xcb, 0xee, 0xf3, 0x9e, 0x20, 0x02, 0xc3, 0x96, 0x63, 0x65,
    0x6e, 0xd8, 0x54, 0x35, 0xb1, 0x67, 0xb0, 0xf6, 0x84, 0x5b, 0x91, 0x16, 0x2f, 0x30, 0x63, 0x72,
    0x78, 0x79, 0x6b, 0x56, 0xf6, 0xa1, 0x60, 0x0c, 0x80, 0xc9, 0x12, 0xa7, 0xc7, 0x4d, 0x31, 0xfd,
    0xc1, 0x15, 0xf8, 0xc9, 0x0b, 0x68, 0xa7, 0xaf, 0x62, 0x62, 0xa4, 0x78, 0x47, 0x2e, 0xdf, 0xd9,
    0x6a, 0x40, 0x74, 0x95, 0x67, 0x60, 0x78, 0x12, 0x8a, 0x39, 0xae, 0x63, 0xca, 0xbf, 0x0d, 0xf7,
    0xf8, 0x4e, 0xc3, 0x50, 0xa7, 0xac, 0xbe, 0x9e, 0x99, 0x52, 0xf5, 0x3a, 0xf3, 0x3b, 0x83, 0xba,
    0xdf, 0xec, 0x8a, 0xca, 0xb1, 0x13, 0x80, 0x24, 0x8d, 0x16, 0xf2, 0xf3, 0x58, 0x83, 0x3c, 0xb7,
    0xe9, 0x5a, 0x4d, 0x79, 0x5a, 0xc4, 0x64, 0x22, 0xfe, 0xef, 0x52, 0xec, 0xea, 0x87, 0xce, 0xd5,
    0x29, 0x50, 0xab, 0x9f, 0xf7, 0x94, 0xcf, 0x06, 0x2c, 0xce, 0x68, 0xcb, 0xc9, 0x24, 0xd2, 0x5b,
    0xaf, 0x62, 0x6d, 0xe5, 0x56, 0xd4, 0x24, 0x78, 0x25, 0xcf, 0xc2, 0x56, 0xb0, 0x16, 0x95, 0x05,
    0xb6, 0x0b, 0xe4, 0xa6, 0x58, 0xbc, 0xcd, 0x8a, 0x06, 0x89, 0xda, 0x41, 0x76, 0xf8, 0xb1, 0x63,
    0x29, 0xd9, 0xbe, 0x77, 0x5f, 0xae, 0x6f, 0x0c, 0xc2, 0xde, 0x78, 0x16, 0x25, 0xfb, 0x51, 0xb7,
    0xa5, 0x6c, 0xe2, 0x07, 0x53, 0x69, 0xd1, 0x2c, 0xd4, 0x28, 0xc4, 0xe8, 0x75, 0xe9, 0xf0, 0x5a,
    0x54, 0xf7, 0x65, 0x3b, 0x1b, 0x5c, 0xf0, 0xd9, 0x80, 0x8b, 0x9e, 0xa8, 0xc1, 0x5b, 0xa5, 0x4b,
    0x8d, 0xfb, 0xdf, 0xbd, 0x77, 0x4b, 0x00, 0x71, 0x56, 0xed, 0x88, 0x60, 0x87, 0xc3, 0xea, 0x13,
    0x40, 0x34, 0xd5, 0xc7, 0x28, 0x09, 0x4b, 0xe7, 0x0c, 0xe6, 0x2e, 0xbb, 0x16, 0x9e, 0x42, 0xd0,
    0xcb, 0x35, 0x8e, 0xa2, 0xa8, 0x9c, 0x8f, 0xc7, 0xfc, 0x55, 0x5c, 0xf6, 0x43, 0x41, 0xca, 0xc6,
    0x92, 0xd2, 0xd0, 0x66, 0x15, 0xfb, 0x1d, 0x99, 0x6e, 0x8f, 0x0b, 0x2a, 0xdc, 0xf8, 0x8f, 0xd4,
    0xed, 0xed, 0x40, 0xf6, 0x5b, 0xf7, 0x34, 0xda, 0xaa, 0x4d, 0x60, 0xed, 0xcc, 0x43, 0x9c, 0x4e,
    0xce, 0x45, 0x66, 0x50, 0xdb, 0x9a, 0x68, 0x88, 0xcd, 0xa9, 0x56, 0x62, 0xf4, 0x91, 0x76, 0x33,
    0xda, 0x96, 0x48, 0x81, 0x34, 0x4e, 0xf9, 0x5d, 0x44, 0x37, 0x7e, 0x6f, 0x99, 0x99, 0xc3, 0x7d,
    0xa8, 0xb2, 0xbe, 0x33, 0x6c, 0xf7, 0x36, 0x16, 0x1b, 0x30, 0x93, 0x07, 0x7e, 0xff, 0xfa, 0xa8,
    0xe3, 0x73, 0x92, 0xa8, 0x3e, 0xeb, 0x37, 0x58, 0xca, 0x69, 0xf9, 0x34, 0x3a, 0x39, 0xe4, 0x16,
    0x3c, 0x28, 0x01, 0x6c, 0xc3, 0x2c, 0x5e, 0x62, 0xa8, 0x23, 0x22, 0xf8, 0x60, 0xbe, 0x58, 0x6c,
    0x90, 0x0c, 0xe0, 0xcc, 0x81, 0xbf, 0x48, 0x6d, 0x12, 0x2a, 0x25, 0x23, 0x04, 0x87, 0x4a, 0x93,
    0x35, 0xa7, 0x81, 0xa8, 0x1f, 0x95, 0x90, 0xfd, 0x62, 0xe1, 0xec, 0xe5, 0x08, 0xce, 0xe4, 0x06,
    0xe4, 0x05, 0xf6, 0x23, 0x4a, 0xfb, 0xe5, 0x62, 0xed, 0xe8, 0xdc, 0x15, 0xc7, 0x75, 0xb0, 0x99,
    0xbf, 0xa2, 0x87, 0x4a, 0x76, 0x87, 0x3c, 0x48, 0x8d, 0x67, 0x62, 0xdf, 0x96, 0xd9, 0x2a, 0xa3,
    0xe0, 0xfd, 0x22, 0x3d, 0xd5, 0x52, 0x1d, 0x5e, 0x64, 0x07, 0x96, 0xfd, 0xbd, 0x8b, 0x09, 0x45,
    0xeb, 0xa8, 0x76, 0x0e, 0x5c, 0xa6, 0xb8, 0xee, 0xf4, 0xe4, 0x14, 0x82, 0xb5, 0x2f, 0x62, 0xee,
    0x8c, 0x68, 0x16, 0xc6, 0x5f, 0x82, 0x67, 0x77, 0x41, 0x44, 0xd3, 0xa8, 0x37, 0x1f, 0x4b, 0x55,
    0xdf, 0xf5, 0xed, 0x74, 0x9a, 0x9f, 0xc4, 0x3b, 0x4c, 0x81, 0x36, 0x8b, 0xa2, 0xaf, 0xad, 0x9b,
    0xa1, 0x0e, 0x6a, 0x4d, 0x44, 0x68, 0x03, 0xb0, 0x54, 0x22, 0x6e, 0x93, 0xed, 0xa2, 0x66, 0xb4,
    0x6f, 0x9b, 0x1b, 0x7c, 0x78, 0x2f, 0x1d, 0xc6, 0xcb, 0xde, 0x2e, 0x74, 0xc8, 0x1f, 0xe6, 0x82,
    0x3f, 0x54, 0xd1, 0xe1, 0xb7, 0xe7, 0xa1, 0x65, 0x7d, 0x44, 0xcb, 0xfa, 0xbd, 0x2e, 0x79, 0x32,
    0x25, 0xbe, 0x04, 0xd8, 0x9a, 0x16, 0x2c, 0x85, 0xdb, 0x4f, 0xdf, 0x24, 0x39, 0x7d, 0xda, 0xc0,
    0xe2, 0x03, 0x0d, 0xc7, 0x56, 0x00, 0x1b, 0xe6, 0x89, 0x47, 0xac, 0x8e, 0xb9, 0x80, 0x71, 0x5a,
    0x12, 0x45, 0x8d, 0xed, 0xf4, 0xb9, 0x08, 0x4a, 0x6c, 0xbe, 0x34, 0x32, 0xe5, 0xee, 0xac, 0xae,
    0x78, 0x9a, 0x65, 0x8e, 0x2b, 0x37, 0x17, 0x02, 0x10, 0x7e, 0x91, 0x3f, 0x3e, 0x7d, 0x69, 0x55,
    0x9c, 0xac, 0xcf, 0x87, 0xa4, 0x8a, 0x93, 0xc8, 0xf1, 0xab, 0xa7, 0x29, 0x60, 0x6e, 0x96, 0x9d,
    0x99, 0xdb, 0x22, 0x75, 0xb1, 0x75, 0xc0, 0x4e, 0xa9, 0x6b, 0xa7, 0x6b, 0x29, 0x04, 0xeb, 0x39,
    0xaf, 0x99, 0x9a, 0xf8, 0x4d, 0xf8, 0xcd, 0xed, 0xb6, 0x4e, 0xd9, 0xf6, 0xd6, 0xa9, 0xb2, 0xfc,
    0xe9, 0xa5, 0x93, 0x4a, 0x1d, 0x1f, 0x4b, 0x4c, 0x5a, 0x97, 0xba, 0x4f, 0x41, 0xff, 0x72, 0xc2,
    0x7e, 0x51, 0x6d, 0x7d, 0x7d, 0x2e, 0x42, 0x29, 0x28, 0xf1, 0x33, 0x89, 0x0c, 0x28, 0x19, 0xd6,
    0x32, 0xcc, 0xd2, 0xa6, 0x61, 0x2d, 0x14, 0xf2, 0x8b, 0xcb, 0x8e, 0xf6, 0x4d, 0xd3, 0xac, 0xbd,
    0xaf, 0xa2, 0xdc, 0x14, 0xb5, 0x5b, 0xba, 0x53, 0x25, 0x79, 0xc9, 0xe9, 0x63, 0x65, 0xbc, 0xee,
    0x66, 0xf6, 0xf5, 0x03, 0xeb, 0x66, 0x30, 0x5a, 0x66, 0x6b, 0x4c, 0x82, 0xab, 0x3c, 0xe3, 0x52,
    0x49, 0x15, 0x1e, 0x8e, 0x9d, 0x1f, 0xae, 0x2c, 0x70, 0x8a, 0x66, 0x13, 0x2d, 0xd1, 0x9e, 0xda,
    0xfb, 0x70, 0xe9, 0xc2, 0x9f, 0xd6, 0x57, 0x9d, 0x14, 0xbc, 0x3f, 0xd5, 0x7d, 0xd4, 0xad, 0xd0,
    0xd6, 0x61, 0x9c, 0x01, 0x27, 0x32, 0xc1, 0x9d, 0x3d, 0xff, 0x6e, 0x0a, 0x96, 0xb1, 0x10, 0xf0,
    0xc0, 0xcc, 0xe3, 0x34, 0x0b, 0xd2, 0x1f, 0x60, 0x21, 0x84, 0x9b, 0x6f, 0x8e, 0x17, 0x76, 0x1a,
    0x40, 0x27, 0x1c, 0x0d, 0x71, 0x44, 0xc0, 0x7a, 0xdd, 0x66, 0x4b, 0x30, 0x7a, 0x19, 0xd6, 0xbb,
    0x74, 0x46, 0xba, 0x82, 0xec, 0x4a, 0x4b, 0x17, 0x8b, 0x5d, 0x20, 0x5e, 0x33, 0xe3, 0xd1, 0xe2,
    0xec, 0xbc, 0xea, 0x8a, 0x97, 0xc5, 0x47, 0x3f, 0x6e, 0xa0, 0x76, 0x06, 0x6d, 0x95, 0x61, 0xa6,
    0xdc, 0x1e, 0x77, 0xac, 0x70, 0x2c, 0x1a, 0x10, 0xdc, 0xda, 0xfc, 0x5a, 0x40, 0x9b, 0xe8, 0x68,
    0xc2, 0xa5, 0x18, 0xd1, 0x6f, 0x7b, 0x0d, 0xc4, 0x58, 0xef, 0x67, 0x32, 0x84, 0xd8, 0xb4, 0xf0,
    0x02, 0xe9, 0xc1, 0x9a, 0x8c, 0xc5, 0x49, 0x8d, 0x8f, 0xf4, 0xcd, 0xcb, 0xf3, 0xd7, 0x1f, 0x51,
    0xd6, 0x2b, 0x7e, 0x1a, 0xf6, 0xe2, 0x58, 0x9f, 0x4b, 0x39, 0x70, 0x02, 0x24, 0x60, 0x24, 0x88,
    0x76, 0x71, 0x09, 0x57, 0x2b, 0xd4, 0x1b, 0x5c, 0xd1, 0x8b, 0x5d, 0x01, 0xc9, 0x1d, 0xeb, 0x21,
    0xf5, 0xe3, 0xad, 0x01, 0xee, 0x22, 0x0b, 0x7c, 0xa1, 0x73, 0x53, 0xe3, 0xff, 0x9d, 0x9c, 0x47,
    0x53, 0x9d, 0x61, 0x27, 0x3a, 0x96, 0x17, 0x02, 0x6d, 0xe6, 0x29, 0x48, 0xb7, 0x40, 0x1f, 0xcf,
    0x11, 0x61, 0x03, 0xb4, 0x68, 0x72, 0x35, 0x88, 0x2c, 0x23, 0x93, 0xf2, 0xd5, 0x58, 0x21, 0xe4,
    0xe6, 0xa1, 0xe0, 0x4f, 0xb1, 0x75, 0x17, 0xdd, 0x59, 0x58, 0x8a, 0x9d, 0x70, 0x23, 0xef, 0xb4,
};

static const MessageEncodingTestVector sMessageEncodingTest0533 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x77FBB64D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2EA4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0533_EncryptionKey,
    sMessageEncodingTest0533_Payload,
    sizeof(sMessageEncodingTest0533_Payload),
    sMessageEncodingTest0533_ExpectedEncoding,
    sizeof(sMessageEncodingTest0533_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0534_EncryptionKey =
{
    {
        0x14, 0x78, 0x36, 0x38, 0x50, 0x4f, 0xd4, 0x3c, 0x19, 0x8e, 0x7e, 0x3c, 0x38, 0x03, 0xe5, 0x4b,
    }
};
static const uint8_t sMessageEncodingTest0534_Payload[] =
{
    0x3f, 0xac, 0xe4, 0x60, 0xa9, 0xc1, 0xe0, 0x1e, 0x63, 0xdd, 0x5d, 0xb4, 0x19, 0xbd, 0x8c, 0x47,
    0x2a, 0xdd, 0x82, 0x60, 0x8f, 0x00, 0x13, 0xcf, 0x06, 0xa2, 0x13, 0x46, 0xe8, 0x1a, 0xad, 0x9e,
    0x9c, 0xcf, 0x5a, 0x31, 0x8f, 0x5c, 0xff, 0x29, 0xeb, 0x52, 0x95, 0x78, 0x5a, 0x85, 0x25, 0x06,
    0x8a, 0x33, 0x90, 0x1e, 0xdd, 0xc4, 0xab, 0x22, 0xb2, 0xb8, 0x9f, 0x88, 0xfe, 0x96, 0x4a, 0x41,
    0xa5, 0x27, 0xfe, 0x0a, 0x8c, 0xdd, 0xa2, 0x50, 0x42, 0xca, 0xc1, 0xa8, 0x26, 0xb8, 0xc3, 0xa7,
    0x16, 0xd9, 0x5c, 0x43, 0x25, 0x7c, 0x1e, 0xef, 0x8f, 0x00, 0x76, 0x7f, 0x5e, 0x6c, 0xe2, 0x07,
    0x02, 0x81, 0xc5, 0xa2, 0xd2, 0xdf, 0x4c, 0x1b, 0x59, 0xe8, 0xdf, 0xc3, 0x38, 0x22, 0x2a, 0x87,
    0x49, 0x9c, 0xe5, 0xbd, 0xe3, 0x7b, 0xc0, 0x1b, 0x0c, 0x19, 0xc6, 0xd7, 0xe6, 0xc9, 0x43, 0x0d,
    0xd3, 0x01, 0x56, 0x75, 0xbd, 0x24, 0x55, 0x46, 0x56, 0x49, 0x32, 0x14, 0xcb, 0x39, 0xac, 0xdf,
    0xff, 0x09, 0x50, 0x6e, 0x90, 0xe0, 0xd3, 0xe2, 0x84, 0xe8, 0xf5, 0x66, 0x96, 0x15, 0xd6, 0x72,
    0xe7, 0x56, 0xdf, 0xb2, 0x07, 0x20, 0xc6, 0x57, 0xb0, 0x97, 0x61, 0xd3, 0xaa, 0x0d, 0x08, 0x56,
    0xf0, 0xb6, 0x85, 0x08, 0xd7, 0xf2, 0xb4, 0xae, 0xa6, 0x51, 0xe2, 0xb9, 0x40, 0x3b, 0x92, 0x2e,
    0xa5, 0x1f, 0x20, 0xe9, 0x01, 0x14, 0x4c, 0xae, 0xbf, 0x8c, 0x45, 0xfb, 0x4d, 0x78, 0x3d, 0x8a,
    0x81, 0xfa, 0xde, 0xe2, 0x6b, 0x67, 0xdd, 0x56, 0xf6, 0x49, 0x10, 0x72, 0xf6, 0xac, 0x14, 0xa6,
    0x1b, 0x6f, 0xda, 0x2a, 0xe6, 0x3a, 0xe0, 0xd3, 0x52, 0x70, 0x67, 0x1d, 0x78, 0xb2, 0xa8, 0xf3,
    0x2c, 0x23, 0xea, 0x57, 0xba, 0x37, 0x9e, 0x10, 0xa1, 0x98, 0x9b, 0x12, 0x93, 0x57, 0x88, 0x8e,
    0x1f, 0x63, 0xc9, 0x61, 0xb5, 0x2b, 0xe3, 0x46, 0x99, 0xdd, 0x38, 0xb2, 0x86, 0x1e, 0xf9, 0x92,
    0x0f, 0xdd, 0xab, 0x91, 0x72, 0x0c, 0xae, 0x11, 0xe7, 0x03, 0x65, 0xe4, 0xe7, 0x73, 0x95, 0x94,
    0xe8, 0x63, 0xa4, 0x6f, 0x78, 0x4d, 0x8d, 0x78, 0xcf, 0xd5, 0x66, 0xf3, 0xed, 0x0d, 0xf5, 0x85,
    0xae, 0x91, 0xfb, 0x81, 0xf8, 0x95, 0x6b, 0x77, 0x1a, 0xbb, 0x25, 0xd8, 0x5e, 0x13, 0xae, 0x43,
    0x50, 0x59, 0x5f, 0x97, 0xb1, 0xf3, 0xf0, 0x9d, 0x8e, 0xaf, 0x31, 0x30, 0x47, 0x9f, 0xf2, 0xaf,
    0x4b, 0xeb, 0xb6, 0x94, 0x8c, 0xd6, 0xe9, 0x57, 0xca, 0x39, 0xe6, 0xd0, 0x71, 0x99, 0x66, 0x07,
    0xcf, 0xb9, 0x5b, 0xa0, 0x1b, 0x63, 0xea, 0x2c, 0x51, 0x1e, 0x97, 0xfe, 0x2c, 0xe3, 0x17, 0x17,
    0x3e, 0xe2, 0x4b, 0x64, 0xb0, 0x11, 0xdb, 0xe2, 0xd9, 0x88, 0xfe, 0x09, 0xe4, 0x95, 0x2f, 0x29,
    0xca, 0xdf, 0xd8, 0x99, 0xcf, 0x1a, 0x91, 0xf7, 0xc0, 0xc1, 0x43, 0x27, 0xf0, 0xea, 0x5f, 0x94,
    0x85, 0x36, 0xbf, 0xce, 0x88, 0x04, 0x5b, 0xdd, 0xb2, 0x5d, 0xb0, 0x42, 0xd1, 0x42, 0xb9, 0x4a,
    0x6d, 0x34, 0x4e, 0x50, 0xb2, 0x26, 0x88, 0x8a, 0xe6, 0x82, 0x99, 0xa8, 0xda, 0x3a, 0x0f, 0x94,
    0x33, 0x5e, 0x4b, 0xb5, 0x90, 0x7b, 0x1b, 0xa0, 0xa1, 0x5a, 0xe6, 0xd9, 0xfe, 0x98, 0xa7, 0x91,
    0x5e, 0x26, 0xd2, 0xa9, 0x65, 0x99, 0x98, 0xfc, 0xff, 0x27, 0xee, 0xac, 0xaf, 0x14, 0x1a, 0xfa,
    0x8f, 0x47, 0xc9, 0x1c, 0xf8, 0x19, 0x0d, 0x61, 0xf2, 0x64, 0x7c, 0xc4, 0x07, 0xc7, 0xc3, 0x1b,
    0xe5, 0x89, 0x7d, 0x17, 0xb5, 0x11, 0xcf, 0x75, 0xff, 0x92, 0x69, 0x6c, 0x3f, 0x84, 0x1a, 0xca,
    0x04, 0x62, 0x4c, 0x9f, 0xfc, 0x7f, 0xe2, 0xb8, 0xcb, 0xde, 0xb1, 0xb1, 0xce, 0x0f, 0x13, 0x84,
    0xc0, 0x27, 0x2f, 0x8f, 0xb8, 0x68, 0x11, 0x4d, 0x1c, 0x7f, 0xd2, 0xfc, 0xf6, 0xd8, 0x08, 0x12,
    0xdf, 0xb4, 0x58, 0xa5, 0x62, 0x7d, 0x8b, 0xa6, 0x4a, 0x53, 0x14, 0xfd, 0x2a, 0x13, 0x4f, 0x38,
    0x43, 0xc8, 0x7c, 0x29, 0x9b, 0xac, 0x41, 0x27, 0xa2, 0x91, 0x0d, 0x1a, 0xbf, 0xc0, 0x0a, 0x96,
    0xb9, 0x64, 0x90, 0xf3, 0x36, 0x99, 0x87, 0x66, 0x18, 0xc5, 0x54, 0x98, 0x99, 0xb2, 0x6b, 0x6f,
    0x99, 0x7a, 0x62, 0xb6, 0x56, 0x37, 0xda, 0x44, 0x4a, 0x76, 0x9a, 0xa5, 0xd3, 0x15, 0x99, 0xff,
    0xc9, 0x39, 0x36, 0x57, 0xf6, 0x69, 0xd7, 0x64, 0xae, 0x6c, 0x14, 0x03, 0xce, 0x82, 0x99, 0xd5,
    0x67, 0x2a, 0xdd, 0x7a, 0xba, 0x3c, 0xb5, 0xcf, 0x6d, 0x6e, 0x31, 0xac, 0xa7, 0x2b, 0x42, 0xc2,
    0x97, 0x27, 0x4c, 0x72, 0x71, 0x1b, 0xbd, 0xaa, 0x52, 0x22, 0x30, 0x1c, 0x34, 0xd8, 0xe2, 0x75,
    0x3e, 0x0e, 0x01, 0x80, 0x3a, 0xc9, 0x10, 0x7b, 0x8a, 0x93, 0xbe, 0xd3, 0x24, 0xb8, 0x24, 0x21,
    0x2b, 0x47, 0x3b, 0x23, 0x0e, 0xa3, 0x26, 0xd2, 0x43, 0xed, 0x46, 0x32, 0x13, 0xea, 0xf0, 0xc1,
    0x47, 0xe6, 0x36, 0x8e, 0x39, 0x1e, 0xd1, 0xdb, 0xbd, 0x8d, 0x0a, 0x44, 0x27, 0xa2, 0xf6, 0xbe,
    0x4d, 0x1f, 0x94, 0xa4, 0xd1, 0x93, 0xa6, 0xed, 0x33, 0xac, 0xa8, 0xda, 0xe1, 0xdb, 0xde, 0xbb,
    0x5e, 0xe3, 0x9d, 0x79, 0x4e, 0xee, 0x76, 0x6c, 0xd5, 0x98, 0x00, 0x1c, 0xb2, 0xab, 0x32, 0x59,
    0x22, 0x73, 0x5e, 0x76, 0xd9, 0x48, 0x5b, 0x4b, 0x6b, 0x75, 0xce, 0xe1, 0xfa, 0x55, 0xf8, 0xa7,
    0x76, 0x1c, 0x16, 0xd5, 0x5c, 0x20, 0x2e, 0xd7, 0x67, 0xbc, 0x7f, 0x33, 0xe6, 0x81, 0x1d, 0x96,
    0x21, 0xd1, 0x9e, 0x91, 0x44, 0x7a, 0xca, 0x5b, 0x24, 0x90, 0x5e, 0x1c, 0xde, 0xb1, 0xf5, 0xd3,
    0x3e, 0x3e, 0x33, 0xf3, 0x1f, 0x4f, 0xbf, 0xf9, 0x7e, 0xcc, 0x52, 0x5e, 0xe9, 0xdc, 0x71, 0x4a,
    0x83, 0xfd, 0x8e, 0xc7, 0xd4, 0x96, 0xa7, 0x57, 0x71, 0x51, 0xad, 0x56, 0x55, 0x94, 0x5b, 0x18,
    0x41, 0xc1, 0x84, 0xd1, 0x1f, 0x61, 0xfb, 0xa6, 0x18, 0xea, 0xfe, 0xa3, 0x17, 0x60, 0xfa, 0xc1,
    0xd6, 0xad, 0x15, 0x08, 0x96, 0x8f, 0x10, 0xbb, 0x42, 0xe0, 0x79, 0x23, 0xd4, 0x40, 0x58, 0xbd,
    0x60, 0x18, 0xeb, 0x28, 0x69, 0x2a, 0x42, 0x7a, 0x63, 0x7d, 0x69, 0xa4, 0x9c, 0xa0, 0x2a, 0x3c,
    0xd2, 0x04, 0x29, 0x2e, 0xe8, 0x80, 0x77, 0x1b, 0x05, 0x27, 0x98, 0x53, 0x73, 0xcd, 0x45, 0x5e,
    0x72, 0xa1, 0xb5, 0xc6, 0x59, 0x16, 0x79, 0xf7, 0x3b, 0x30, 0x24, 0xae, 0x24, 0x83, 0xfc, 0x21,
    0x1d, 0x77, 0xd9, 0x95, 0x83, 0x37, 0xc9, 0x36, 0x07, 0x5b, 0x13, 0xaa, 0xe9, 0x83, 0xac, 0x74,
    0x5f, 0xa0, 0x38, 0x48, 0x7e, 0xdb, 0xc7, 0xd0, 0x38, 0xff, 0x48, 0xcc, 0x3d, 0x42, 0xcf, 0xa7,
    0x36, 0x03, 0xe5, 0x0a, 0x36, 0x47, 0x30, 0xd6, 0x92, 0x76, 0xc7, 0x80, 0x7a, 0x4d, 0xe3, 0xb3,
    0xab, 0x44, 0x41, 0xbd, 0x58, 0xab, 0x38, 0x8c, 0x28, 0x0f, 0x3d, 0x02, 0x12, 0xea, 0xf1, 0x17,
    0x6b, 0xa6, 0x8e, 0xed, 0x7c, 0x5f, 0x14, 0x58, 0x59, 0x5f, 0x9c, 0xb1, 0xa1, 0xfe, 0x19, 0xb1,
    0x60, 0xc6, 0xf3, 0xcd, 0x7e, 0x7d, 0x8e, 0xd5, 0x0d, 0x76, 0xee, 0x9a, 0x6d, 0xc8, 0x6b, 0x19,
    0x59, 0x02, 0x83, 0x76, 0x37, 0xdb, 0x06, 0xcc, 0x88, 0xde, 0x7e, 0x01, 0xdd, 0xec, 0x2f, 0x31,
    0xcb, 0xd6, 0x5f, 0xb7, 0x31, 0x0c, 0x14, 0x0f, 0x23, 0xf8, 0x9b, 0x15, 0xce, 0x05, 0xc1, 0x74,
    0xee, 0xfb, 0xd5, 0xfa, 0x93, 0xfb, 0xfa, 0x33, 0x07, 0x12, 0xb7, 0x5b, 0xec, 0x3f, 0xdb, 0x7b,
};

static const uint8_t sMessageEncodingTest0534_ExpectedEncoding[] =
{
    0x30, 0x2b, 0xa1, 0x6f, 0xea, 0x16, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x01, 0x26, 0x0b, 0xf2, 0x94, 0xd7, 0xcf, 0xb1, 0x56, 0xf8,
    0x22, 0x6d, 0x2f, 0x7e, 0x9c, 0xc7, 0xcd, 0xd3, 0xc5, 0x65, 0x6a, 0x4c, 0xc1, 0xf8, 0x03, 0x1a,
    0xfe, 0x51, 0x44, 0xbc, 0x06, 0x4a, 0xf8, 0x98, 0x21, 0x8f, 0x6b, 0x93, 0x6d, 0x45, 0x55, 0x84,
    0xd4, 0x67, 0xe4, 0x59, 0xd7, 0x9f, 0x08, 0xe0, 0x7f, 0xb6, 0x18, 0xe1, 0x30, 0xcd, 0x91, 0x2e,
    0x76, 0x62, 0x14, 0xd4, 0x57, 0xdc, 0xea, 0xed, 0xf6, 0xa4, 0x57, 0x8d, 0x2c, 0x59, 0x93, 0x77,
    0x67, 0xa1, 0xff, 0x8e, 0xd8, 0xce, 0x60, 0xb0, 0x33, 0xfd, 0xe1, 0x07, 0x4e, 0xec, 0xed, 0xa3,
    0x8f, 0xe4, 0xb5, 0x13, 0x85, 0x16, 0xe1, 0x70, 0xb2, 0x03, 0xf1, 0xfa, 0x82, 0x2d, 0x38, 0x65,
    0xf4, 0xd7, 0x4a, 0xa0, 0xf3, 0x82, 0xec, 0x16, 0xe0, 0x7c, 0x2f, 0xa3, 0x12, 0x35, 0xd1, 0x8d,
    0x2c, 0x37, 0xa8, 0x67, 0x0c, 0x77, 0x48, 0x9c, 0xe7, 0x93, 0xe6, 0x8d, 0xe7, 0x82, 0x06, 0x0f,
    0x3a, 0x2b, 0xfd, 0x9b, 0x98, 0xa4, 0xac, 0x60, 0xf8, 0x60, 0x73, 0xa4, 0x47, 0x08, 0xa9, 0x82,
    0x58, 0x8a, 0x4d, 0x99, 0xad, 0xa0, 0x83, 0x11, 0x30, 0xd4, 0xc8, 0x4e, 0x9d, 0x93, 0x85, 0xa8,
    0xc6, 0x32, 0x87, 0x69, 0x8d, 0xb9, 0x39, 0x13, 0x4a, 0x0e, 0x63, 0xb0, 0xa4, 0x40, 0x29, 0x8e,
    0xa1, 0x76, 0x94, 0xa1, 0x6a, 0xa0, 0x56, 0xb4, 0x1e, 0x86, 0xc6, 0x1f, 0x61, 0xef, 0x27, 0x69,
    0x1d, 0x7a, 0x60, 0x91, 0x45, 0x81, 0xde, 0xc8, 0xaf, 0x40, 0x2b, 0x32, 0x5f, 0x1b, 0x68, 0xb4,
    0xa7, 0x50, 0xd4, 0xfe, 0x16, 0x4e, 0x86, 0xdf, 0x69, 0xa7, 0x8c, 0x5d, 0xc1, 0x45, 0x1d, 0x6f,
    0x78, 0xea, 0xaf, 0x9c, 0x7c, 0xaa, 0x5d, 0x0c, 0xbf, 0x3a, 0x38, 0xc3, 0x63, 0xa8, 0x3c, 0x7e,
    0x80, 0x76, 0xe9, 0x48, 0x8d, 0x1a, 0x3c, 0x8b, 0x8f, 0x0f, 0x19, 0x6e, 0xc0, 0x25, 0x02, 0xbd,
    0x8b, 0x4f, 0x5d, 0x3a, 0x53, 0x21, 0xff, 0x3a, 0x71, 0xe1, 0x06, 0xeb, 0x05, 0xa2, 0x2d, 0x22,
    0x7d, 0x52, 0x1c, 0xd5, 0x86, 0xee, 0x9b, 0x18, 0xbd, 0x68, 0x86, 0xdb, 0x2e, 0x03, 0x06, 0x87,
    0x81, 0x90, 0xb6, 0xf3, 0xb9, 0x32, 0xc9, 0x63, 0x26, 0x77, 0xeb, 0x42, 0x8c, 0xa2, 0xf2, 0x90,
    0x16, 0x88, 0x26, 0x27, 0x61, 0xa7, 0x41, 0xdd, 0xe5, 0xc9, 0x27, 0xde, 0xd0, 0x50, 0x2c, 0x63,
    0xfe, 0x77, 0xb6, 0x49, 0x2b, 0x33, 0xb4, 0xf5, 0x57, 0xd4, 0x91, 0x12, 0xb8, 0xdf, 0x76, 0x5a,
    0x80, 0x80, 0x0d, 0x0c, 0x38, 0xe8, 0x2c, 0xa1, 0x16, 0x77, 0xff, 0x16, 0x40, 0x9b, 0x66, 0x80,
    0x4c, 0xfb, 0x2d, 0xb6, 0x07, 0x6e, 0xbe, 0x07, 0x88, 0xa5, 0x08, 0x0c, 0xe9, 0xb6, 0xf5, 0x3d,
    0x9c, 0xe0, 0x43, 0xdb, 0xa7, 0xb1, 0x58, 0xad, 0xca, 0xb0, 0xaa, 0xe4, 0x6b, 0x65, 0xb3, 0x98,
    0x44, 0x00, 0x66, 0xef, 0x3d, 0xb6, 0x81, 0x98, 0x60, 0xc3, 0x4e, 0x64, 0x02, 0xa6, 0xc6, 0xde,
    0xc7, 0x26, 0x5c, 0x4a, 0x7a, 0x1d, 0x98, 0x89, 0xdd, 0x1b, 0x79, 0xe6, 0x85, 0x28, 0x40, 0x07,
    0x35, 0x69, 0xc6, 0x74, 0x35, 0x4a, 0x38, 0x05, 0x7b, 0xa2, 0x51, 0xf1, 0x32, 0x72, 0x7e, 0x76,
    0xb7, 0xaa, 0x7a, 0x0c, 0x67, 0xa4, 0x80, 0xd8, 0xd8, 0x0d, 0x7b, 0xf4, 0x40, 0xdb, 0x67, 0x14,
    0xc3, 0x6a, 0xa2, 0x30, 0x97, 0x04, 0xae, 0xb1, 0x0a, 0x29, 0xf4, 0x46, 0x49, 0xe4, 0xc5, 0x11,
    0xd1, 0x8f, 0x5b, 0x11, 0xf2, 0x35, 0x36, 0x22, 0x75, 0x46, 0x26, 0xe0, 0x28, 0xa7, 0x7c, 0x92,
    0x16, 0x68, 0xfc, 0xb1, 0xeb, 0xf9, 0xaf, 0x6a, 0xeb, 0xc0, 0x1b, 0x05, 0x6f, 0xd3, 0x02, 0x7f,
    0xb3, 0xa1, 0xcc, 0x4a, 0x95, 0x3b, 0x97, 0xcf, 0xbc, 0xcf, 0xd0, 0x8e, 0x93, 0x41, 0x9a, 0x86,
    0x60, 0xb7, 0x64, 0xca, 0x22, 0x09, 0x0c, 0xb1, 0xf4, 0x94, 0x18, 0xbe, 0xc7, 0x04, 0x61, 0x1a,
    0x62, 0x7b, 0x1d, 0x00, 0x6a, 0x7b, 0xf1, 0x14, 0x0d, 0x2a, 0xb0, 0x6b, 0x23, 0x07, 0x81, 0x91,
    0x9d, 0xe7, 0x85, 0xc0, 0xd2, 0x66, 0x36, 0xdd, 0x6b, 0xa7, 0xc3, 0x95, 0xbe, 0xbd, 0xd0, 0x40,
    0xa5, 0x72, 0x51, 0xc9, 0x4d, 0xc6, 0xa0, 0x3a, 0xb9, 0x11, 0xbf, 0x06, 0xd7, 0x93, 0x09, 0x1e,
    0x3e, 0x8c, 0x28, 0xb5, 0xba, 0x2d, 0x13, 0xad, 0x76, 0x5c, 0x54, 0x71, 0x01, 0x31, 0x18, 0xfc,
    0xba, 0x8c, 0xd7, 0xcb, 0x9e, 0xe1, 0x97, 0x36, 0x26, 0x63, 0x67, 0x62, 0xf6, 0x27, 0xbb, 0xc0,
    0xd7, 0x47, 0x32, 0x3c, 0xf9, 0xbf, 0xcc, 0xe5, 0x20, 0x27, 0x5e, 0x6f, 0x83, 0x49, 0xb1, 0x9a,
    0xc6, 0xf7, 0x5b, 0x82, 0x0b, 0xfb, 0xce, 0x82, 0x04, 0x3e, 0x63, 0x72, 0x77, 0x20, 0x9a, 0x65,
    0x2b, 0x12, 0xec, 0xea, 0x0f, 0x2e, 0x23, 0x14, 0xcc, 0x4e, 0x97, 0x94, 0x07, 0x0c, 0x6d, 0xa9,
    0xe1, 0xb2, 0x21, 0xd0, 0x50, 0x5c, 0xde, 0x8e, 0x09, 0xe8, 0x47, 0x8e, 0x63, 0xed, 0xc6, 0x7a,
    0x7c, 0x68, 0x86, 0x5d, 0x02, 0x31, 0x98, 0x0e, 0xfa, 0x47, 0x7c, 0x6f, 0x63, 0xf9, 0xd7, 0xd6,
    0x11, 0xff, 0x22, 0x15, 0x19, 0xd6, 0xd1, 0x50, 0xfc, 0x2e, 0xe1, 0xea, 0xc3, 0x84, 0x8d, 0x25,
    0x2f, 0xce, 0x8a, 0x93, 0xd5, 0x5a, 0xe7, 0x40, 0xd5, 0x9e, 0x3e, 0x9a, 0x4f, 0x28, 0xb6, 0x20,
    0x35, 0xd8, 0x32, 0x4d, 0x92, 0x82, 0xdf, 0x55, 0xcb, 0x90, 0x4e, 0x53, 0x1f, 0x26, 0xe9, 0x6f,
    0x23, 0x78, 0x30, 0x10, 0x2d, 0x0d, 0x08, 0x9c, 0x4f, 0xe9, 0x89, 0x24, 0xd7, 0xe3, 0xe7, 0x77,
    0x46, 0xc2, 0x1e, 0xd5, 0xb5, 0x05, 0xa4, 0x72, 0x61, 0xef, 0x4a, 0x39, 0x8d, 0xda, 0xf0, 0x2f,
    0xde, 0xe5, 0x96, 0xb1, 0x04, 0xbc, 0xb7, 0xa1, 0x9e, 0x0d, 0xad, 0x62, 0x16, 0x26, 0x10, 0xfa,
    0x07, 0xb8, 0xe0, 0xb9, 0x0a, 0x0a, 0x7e, 0xa5, 0x3d, 0xf9, 0x2d, 0x1a, 0xd3, 0x30, 0xb8, 0x5b,
    0xee, 0xdf, 0x72, 0x11, 0xc3, 0x10, 0x7d, 0xaf, 0xb2, 0x12, 0xe0, 0x56, 0xbc, 0x76, 0x70, 0x50,
    0xa0, 0xd5, 0x00, 0xa9, 0x76, 0x4e, 0xd4, 0x06, 0x67, 0xb3, 0x4d, 0xe4, 0x2f, 0xdf, 0xce, 0xc7,
    0x23, 0xd1, 0x9a, 0x9d, 0x90, 0xe9, 0xfa, 0x00, 0xf9, 0x06, 0x8b, 0x35, 0xe5, 0x28, 0x07, 0x5f,
    0x07, 0xa4, 0xdb, 0x4a, 0xec, 0x8e, 0x12, 0xb4, 0xc4, 0xe0, 0xaf, 0x81, 0xb3, 0x39, 0x08, 0x04,
    0xc4, 0xb3, 0xc3, 0x25, 0x3b, 0x7a, 0xc0, 0x88, 0x1e, 0x80, 0xe6, 0xec, 0xc4, 0x0f, 0x3d, 0x2b,
    0x0d, 0xfa, 0x8d, 0x87, 0x94, 0xc6, 0xfb, 0xe6, 0xa8, 0x15, 0xae, 0xb2, 0x31, 0xa3, 0xc8, 0x9b,
    0x0e, 0x79, 0x7e, 0x76, 0x97, 0xb1, 0xb8, 0xa0, 0xf5, 0xdf, 0xb3, 0xb7, 0x17, 0x43, 0x4b, 0x11,
    0x24, 0x40, 0x45, 0xed, 0x55, 0x11, 0x2a, 0xdb, 0xd3, 0x8e, 0xf2, 0x4c, 0xe7, 0xbf, 0x82, 0x5c,
    0xba, 0x92, 0x52, 0x32, 0x69, 0x2c, 0x3a, 0x2a, 0x5c, 0xbf, 0x2b, 0x8c, 0x9f, 0x11, 0x1a, 0xab,
    0x57, 0xf6, 0x9b, 0xec, 0xa1, 0xe5, 0x00, 0x60, 0x0b, 0x86, 0xab, 0x2b, 0x2b, 0x5f, 0x9c, 0xf0,
    0x45, 0x4d, 0x55, 0xdf, 0x9c, 0x7c, 0xd9, 0x80, 0x36, 0xfd, 0xf5, 0xe5, 0x27, 0x6c, 0xd2, 0x58,
    0x25, 0xaa, 0xbe, 0x80, 0xc6, 0xd6, 0x7d, 0x80, 0x15, 0xa9, 0x5a, 0x75, 0x56, 0x1d, 0x75, 0xae,
    0x1d, 0xe1, 0xbe, 0x07, 0xcf, 0x0b, 0xf6, 0xca, 0x9a, 0x7b, 0x77, 0xcd, 0xa2, 0x32, 0x2e, 0x1f,
    0xf8, 0x26, 0xab, 0x28, 0xb9, 0x1e, 0x92, 0xf7, 0xa0, 0x8b, 0xb5, 0xc7, 0x13, 0x98, 0x61, 0x71,
    0xb8, 0xff, 0xad, 0x23, 0x38, 0x3d, 0xd8, 0xae,
};

static const MessageEncodingTestVector sMessageEncodingTest0534 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x16EA6FA1,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2601,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0534_EncryptionKey,
    sMessageEncodingTest0534_Payload,
    sizeof(sMessageEncodingTest0534_Payload),
    sMessageEncodingTest0534_ExpectedEncoding,
    sizeof(sMessageEncodingTest0534_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0535_Payload[] =
{
    0xa7, 0xc6, 0x7a, 0x60, 0xd5, 0xa1, 0xac, 0x3f, 0x91, 0x94, 0x33, 0x24, 0x27, 0x26, 0xb2, 0x74,
    0xee, 0x65, 0xe0, 0xc0, 0x07, 0xad, 0x95, 0x54, 0x72, 0x85, 0x8b, 0xde, 0x56, 0xb4, 0xd1, 0x21,
    0x68, 0x34, 0x31, 0xbc, 0x44, 0x37, 0xbe, 0x82, 0x2c, 0x90, 0xce, 0x7a, 0x38, 0x49, 0x94, 0x09,
    0x7c, 0x91, 0x07, 0x8d, 0x84, 0x52, 0x3f, 0x98, 0xc6, 0x2b, 0x88, 0x7b, 0xad, 0xa5, 0x7c, 0x9a,
    0x5b, 0xdd, 0x56, 0x1f, 0x52, 0x1e, 0x54, 0x1e, 0xee, 0x18, 0xa3, 0x5a, 0xc6, 0x45, 0x82, 0xc4,
    0x63, 0xad, 0x2e, 0xd9, 0x0a, 0xc5, 0x3d, 0x2b, 0xe9, 0xc4, 0x42, 0xd3, 0x21, 0x57, 0x6d, 0xe8,
    0x1b, 0x76, 0x2d, 0xe5, 0xb8, 0x1f, 0x14, 0x85, 0xb3, 0x5a, 0xcf, 0xe6, 0x2f, 0x38, 0xe5, 0xe8,
    0xe4, 0xb5, 0x42, 0x2f, 0xfe, 0xa0, 0x89, 0xce, 0x3f, 0x82, 0x76, 0x15, 0x24, 0x7b, 0x02, 0xb0,
    0x18, 0x0f, 0x67, 0x6a, 0x90, 0x6b, 0x2b, 0xf1, 0xba, 0xf8, 0xa5, 0x1a, 0xd0, 0xd9, 0xea, 0x5a,
    0xd7, 0x3d, 0x65, 0xc0, 0xdc, 0x28, 0xd4, 0xcb, 0x8c, 0x60, 0x98, 0x80, 0x27, 0xd5, 0xb6, 0x12,
    0x92, 0x75, 0x1e, 0x10, 0x0e, 0x33, 0x47, 0x58, 0x5d, 0x33, 0xde, 0x09, 0x7b, 0x14, 0x29, 0x27,
    0x5a, 0x71, 0x9a, 0x07, 0x82, 0x4a, 0xbf, 0xb9, 0x86, 0x96, 0x18, 0xe5, 0x53, 0xb2, 0xf7, 0xd6,
    0x12, 0x66, 0x8f, 0x9c, 0x05, 0x38, 0x8a, 0x47, 0xc1, 0x4f, 0x65, 0x21, 0x6e, 0xb3, 0x12, 0x65,
    0xdd, 0x98, 0x6d, 0x51, 0xcd, 0xe4, 0x4d, 0x38, 0x7f, 0x0e, 0x54, 0x1c, 0x48, 0xd2, 0x31, 0x4f,
    0x40, 0xed, 0x6b, 0x32, 0x21, 0x0b, 0xd9, 0x48, 0xe5, 0x33, 0x1d, 0x35, 0x44, 0x17, 0x70, 0x47,
    0x07, 0x4e, 0x3a, 0xe6, 0xa4, 0x2d, 0x36, 0x2f, 0x37, 0x80, 0x0a, 0x68, 0x12, 0x50, 0xc9, 0xe1,
    0xdd, 0xa9, 0xb0, 0x4c, 0x36, 0x41, 0xbd, 0xcc, 0xe3, 0x57, 0x26, 0x09, 0x42, 0x90, 0x77, 0x6f,
    0x4a, 0xff, 0xf6, 0x62, 0x5b, 0x57, 0x68, 0x08, 0xf4, 0x02, 0x6e, 0xe1, 0x5d, 0x9e, 0x79, 0xe8,
    0xce, 0xae, 0xa3, 0x20, 0xe1, 0x9b, 0xd2, 0x7d, 0xce, 0x6a, 0xb2, 0x2a, 0x69, 0x36, 0x9b, 0x84,
    0xf9, 0xa4, 0x58, 0x5f, 0xcc, 0x5b, 0x76, 0x7a, 0x9b, 0x30, 0x74, 0x1f, 0x2b, 0x6b, 0x41, 0x65,
    0x78, 0x78, 0x0b, 0xff, 0x5d, 0xa8, 0x74, 0x07, 0x25, 0xd5, 0x1a, 0xc1, 0x49, 0xff, 0x66, 0x89,
    0xb7, 0xb0, 0xba, 0x4b, 0x85, 0x45, 0x94, 0x87, 0x3c, 0x06, 0xdf, 0xe9, 0x85, 0x64, 0x07, 0x1f,
    0xf6, 0x7f, 0xc9, 0x79, 0x4f, 0x86, 0xaa, 0x4f, 0xb8, 0xf1, 0x20, 0x59, 0xd8, 0x77, 0x7b, 0xd9,
    0x79, 0x5a, 0x82, 0xe1, 0x86, 0x9d, 0x33, 0x7b, 0xa3, 0x3a, 0xaa, 0x31, 0x4e, 0x85, 0x85, 0x90,
    0x95, 0x2d, 0xcf, 0x51, 0xc7, 0x7d, 0xea, 0x25, 0x07, 0x5d, 0xba, 0xcc, 0x78, 0xdb, 0xdf, 0xe3,
    0xca, 0xf5, 0xad, 0xe4, 0x86, 0x4f, 0x7d, 0x46, 0xd1, 0xd5, 0x21, 0x92, 0x1d, 0x21, 0xda, 0x3f,
    0x5f, 0x7d, 0x94, 0x88, 0xe3, 0x5c, 0x67, 0xdc, 0x86, 0x91, 0x7c, 0x3a, 0xd0, 0x27, 0x74, 0x62,
    0x54, 0xf2, 0x55, 0x79, 0xe4, 0x0e, 0x14, 0x23, 0xef, 0xa8, 0x94, 0x23, 0xfb, 0xe2, 0xa1, 0xdb,
    0xa6, 0xe3, 0x65, 0x15, 0xdc, 0xad, 0x16, 0xe5, 0x37, 0x0c, 0x6a, 0x9f, 0x5e, 0x24, 0x71, 0xa2,
    0x3b, 0x5b, 0x1c, 0x83, 0x47, 0xd7, 0x70, 0xb5, 0x03, 0xb7, 0x18, 0xaf, 0x55, 0xc8, 0x8b, 0x8e,
    0x34, 0x96, 0xc2, 0x4c, 0x20, 0x55, 0x8c, 0x16, 0xfe, 0xa0, 0x7e, 0xf8, 0xda, 0x0b, 0x5f, 0x9e,
    0xf7, 0x3c, 0xec, 0x71, 0x73, 0x39, 0xe5, 0x62, 0x11, 0x23, 0x2f, 0x86, 0x3f, 0x59, 0x9f, 0xb9,
    0xfd, 0x57, 0x7b, 0x10, 0x4d, 0x6f, 0x8d, 0x4d, 0x25, 0x48, 0x69, 0x48, 0x61, 0xda, 0xe3, 0x2a,
    0xa4, 0xa4, 0xf2, 0xaf, 0x04, 0x13, 0xb5, 0x35, 0xc4, 0x52, 0xa9, 0x28, 0x45, 0x49, 0xfa, 0x41,
    0x8e, 0x3e, 0x6b, 0xfc, 0xc9, 0x4b, 0xa5, 0xea, 0x7f, 0x58, 0x01, 0xc0, 0xfc, 0xe0, 0x69, 0x5d,
    0xe2, 0xfb, 0xf3, 0x3a, 0x6f, 0x16, 0xf4, 0x1a, 0xb7, 0xd4, 0x32, 0x08, 0x4a, 0x08, 0xc2, 0xd7,
    0xfe, 0x43, 0x5a, 0x71, 0x74, 0x17, 0xba, 0x8a, 0xfd, 0xe6, 0xc0, 0xf2, 0x13, 0x0c, 0x69, 0xc0,
    0xd2, 0xa9, 0xca, 0x9a, 0x70, 0x92, 0x6a, 0xad, 0xc0, 0xc9, 0x0c, 0x73, 0x8f, 0xd7, 0x22, 0x14,
    0x72, 0x17, 0x57, 0x0b, 0x73, 0xe7, 0xf3, 0x9c, 0xdf, 0xdb, 0x8a, 0x5f, 0x25, 0xc6, 0x7c, 0x8d,
    0x3f, 0xbd, 0x90, 0xcb, 0xbe, 0xb2, 0xa8, 0x7c, 0x81, 0x45, 0x60, 0x18, 0x69, 0x4e, 0x80, 0xfc,
    0xdf, 0x60, 0x42, 0xbf, 0xf5, 0xec, 0x63, 0x68, 0x6f, 0x31, 0x66, 0x4b, 0xa4, 0x19, 0x3f, 0xec,
    0x9a, 0x24, 0x67, 0xf2, 0x0a, 0x0b, 0x94, 0x9a, 0x09, 0xb9, 0x5f, 0x8c, 0x2c, 0x25, 0xcd, 0x7d,
    0x57, 0x42, 0x62, 0x18, 0x0c, 0xea, 0x04, 0x0b, 0x4b, 0xb2, 0x51, 0x62, 0xc2, 0xb9, 0x51, 0x1d,
    0x81, 0xed, 0x46, 0xff, 0x96, 0xe3, 0x10, 0xfa, 0x34, 0x0e, 0xa8, 0x25, 0xd3, 0x3d, 0x7c, 0xfb,
    0xc1, 0x1f, 0x48, 0x5d, 0x8e, 0xb0, 0x84, 0x9c, 0x3a, 0xf7, 0x31, 0xe4, 0xad, 0xf7, 0xc2, 0xcc,
    0x0f, 0xbf, 0xba, 0xf2, 0x0d, 0x89, 0x29, 0x09, 0x53, 0x65, 0xdb, 0x0b, 0x7d, 0xcb, 0x30, 0xdc,
    0xb6, 0xb8, 0x0d, 0x41, 0xd7, 0x6e, 0x55, 0xb5, 0xf3, 0xe7, 0xb8, 0x6d, 0xd4, 0x46, 0x31, 0xa3,
    0xce, 0x91, 0x9f, 0x36, 0x1a, 0x8c, 0xd3, 0x8e, 0x56, 0x87, 0x4a, 0x1c, 0x3f, 0x21, 0xaa, 0x88,
    0xdf, 0x72, 0xd6, 0xcb, 0xba, 0xec, 0xc8, 0xb3, 0xe5, 0x7b, 0x1f, 0xda, 0xd2, 0x89, 0x96, 0x50,
    0x64, 0xf9, 0x58, 0x9c, 0xd8, 0x64, 0x82, 0x00, 0xaf, 0x10, 0xe8, 0x88, 0xa3, 0x4e, 0x54, 0xac,
    0x71, 0x37, 0xff, 0xb5, 0xe1, 0x4b, 0x79, 0x57, 0x82, 0xa6, 0x1b, 0xe9, 0x30, 0x1e, 0x4d, 0xd3,
    0xc2, 0x03, 0x0c, 0x3f, 0x5d, 0x42, 0x96, 0x52, 0xeb, 0xe0, 0x44, 0x56, 0x3e, 0x12, 0x58, 0x0b,
    0x2f, 0x2b, 0x42, 0xe8, 0x5f, 0xa7, 0x89, 0x60, 0x8e, 0x6f, 0xc5, 0x95, 0xa6, 0x6c, 0x31, 0xf4,
    0x61, 0xd7, 0xf0, 0xa4, 0x8d, 0x8b, 0x5a, 0x53, 0x65, 0x11, 0xff, 0x84, 0x15, 0x2c, 0x66, 0x27,
    0x11, 0x8d, 0x4e, 0xfb, 0x1a, 0x23, 0x49, 0x0c, 0x4d, 0x8d, 0x9f, 0x6e, 0x5e, 0xe3, 0x15, 0xab,
    0x7e, 0xe4, 0x90, 0xa1, 0x28, 0x3e, 0x5c, 0x25, 0x97, 0xb4, 0xb5, 0xf0, 0x55, 0xeb, 0x0b, 0x25,
    0x79, 0xf2, 0x68, 0xa2, 0x20, 0xd5, 0x10, 0x95, 0xd4, 0xc2, 0xed, 0x36, 0xe7, 0x28, 0x72, 0xfc,
    0x46, 0xcd, 0x60, 0x8f, 0xc2, 0xbd, 0x25, 0xea, 0xb5, 0x2a, 0xcb, 0xcd, 0x70, 0x90, 0x89, 0x29,
    0x3a, 0xa2, 0xb5, 0xb1, 0x30, 0xa8, 0xae, 0xde, 0x82, 0x3e, 0x45, 0x39, 0x2c, 0x74, 0xb2, 0x1d,
    0xbe, 0xbe, 0x59, 0x78, 0xb1, 0x92, 0x8e, 0xc3, 0x9f, 0x76, 0x66, 0x74, 0x33, 0x25, 0xab, 0x47,
    0xf9, 0xec, 0x33, 0xe0, 0xb7, 0x43, 0x12, 0x34, 0xb2, 0x98, 0xa2, 0x73, 0x16, 0x93, 0xef, 0xfa,
    0xa8, 0x99, 0x13, 0x54, 0x65, 0xe0, 0x37, 0x56, 0xf1, 0x39, 0xea, 0x45, 0xcd, 0xcc, 0x69, 0xd7,
    0x71, 0xac, 0xe4, 0x32, 0xbc, 0xca, 0x63, 0x67, 0x8b, 0x60, 0x69, 0x65, 0x7a, 0x2f, 0x61, 0x6b,
    0xab, 0x40, 0x1e, 0xd4, 0x59, 0xf0, 0x7a, 0x8f, 0x78, 0xff, 0xa8, 0x15, 0x0c, 0x5f, 0x97, 0x69,
};

static const uint8_t sMessageEncodingTest0535_ExpectedEncoding[] =
{
    0x00, 0x23, 0xa1, 0x7f, 0xe1, 0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xa7, 0xc6, 0x7a, 0x60, 0xd5, 0xa1, 0xac, 0x3f, 0x91, 0x94,
    0x33, 0x24, 0x27, 0x26, 0xb2, 0x74, 0xee, 0x65, 0xe0, 0xc0, 0x07, 0xad, 0x95, 0x54, 0x72, 0x85,
    0x8b, 0xde, 0x56, 0xb4, 0xd1, 0x21, 0x68, 0x34, 0x31, 0xbc, 0x44, 0x37, 0xbe, 0x82, 0x2c, 0x90,
    0xce, 0x7a, 0x38, 0x49, 0x94, 0x09, 0x7c, 0x91, 0x07, 0x8d, 0x84, 0x52, 0x3f, 0x98, 0xc6, 0x2b,
    0x88, 0x7b, 0xad, 0xa5, 0x7c, 0x9a, 0x5b, 0xdd, 0x56, 0x1f, 0x52, 0x1e, 0x54, 0x1e, 0xee, 0x18,
    0xa3, 0x5a, 0xc6, 0x45, 0x82, 0xc4, 0x63, 0xad, 0x2e, 0xd9, 0x0a, 0xc5, 0x3d, 0x2b, 0xe9, 0xc4,
    0x42, 0xd3, 0x21, 0x57, 0x6d, 0xe8, 0x1b, 0x76, 0x2d, 0xe5, 0xb8, 0x1f, 0x14, 0x85, 0xb3, 0x5a,
    0xcf, 0xe6, 0x2f, 0x38, 0xe5, 0xe8, 0xe4, 0xb5, 0x42, 0x2f, 0xfe, 0xa0, 0x89, 0xce, 0x3f, 0x82,
    0x76, 0x15, 0x24, 0x7b, 0x02, 0xb0, 0x18, 0x0f, 0x67, 0x6a, 0x90, 0x6b, 0x2b, 0xf1, 0xba, 0xf8,
    0xa5, 0x1a, 0xd0, 0xd9, 0xea, 0x5a, 0xd7, 0x3d, 0x65, 0xc0, 0xdc, 0x28, 0xd4, 0xcb, 0x8c, 0x60,
    0x98, 0x80, 0x27, 0xd5, 0xb6, 0x12, 0x92, 0x75, 0x1e, 0x10, 0x0e, 0x33, 0x47, 0x58, 0x5d, 0x33,
    0xde, 0x09, 0x7b, 0x14, 0x29, 0x27, 0x5a, 0x71, 0x9a, 0x07, 0x82, 0x4a, 0xbf, 0xb9, 0x86, 0x96,
    0x18, 0xe5, 0x53, 0xb2, 0xf7, 0xd6, 0x12, 0x66, 0x8f, 0x9c, 0x05, 0x38, 0x8a, 0x47, 0xc1, 0x4f,
    0x65, 0x21, 0x6e, 0xb3, 0x12, 0x65, 0xdd, 0x98, 0x6d, 0x51, 0xcd, 0xe4, 0x4d, 0x38, 0x7f, 0x0e,
    0x54, 0x1c, 0x48, 0xd2, 0x31, 0x4f, 0x40, 0xed, 0x6b, 0x32, 0x21, 0x0b, 0xd9, 0x48, 0xe5, 0x33,
    0x1d, 0x35, 0x44, 0x17, 0x70, 0x47, 0x07, 0x4e, 0x3a, 0xe6, 0xa4, 0x2d, 0x36, 0x2f, 0x37, 0x80,
    0x0a, 0x68, 0x12, 0x50, 0xc9, 0xe1, 0xdd, 0xa9, 0xb0, 0x4c, 0x36, 0x41, 0xbd, 0xcc, 0xe3, 0x57,
    0x26, 0x09, 0x42, 0x90, 0x77, 0x6f, 0x4a, 0xff, 0xf6, 0x62, 0x5b, 0x57, 0x68, 0x08, 0xf4, 0x02,
    0x6e, 0xe1, 0x5d, 0x9e, 0x79, 0xe8, 0xce, 0xae, 0xa3, 0x20, 0xe1, 0x9b, 0xd2, 0x7d, 0xce, 0x6a,
    0xb2, 0x2a, 0x69, 0x36, 0x9b, 0x84, 0xf9, 0xa4, 0x58, 0x5f, 0xcc, 0x5b, 0x76, 0x7a, 0x9b, 0x30,
    0x74, 0x1f, 0x2b, 0x6b, 0x41, 0x65, 0x78, 0x78, 0x0b, 0xff, 0x5d, 0xa8, 0x74, 0x07, 0x25, 0xd5,
    0x1a, 0xc1, 0x49, 0xff, 0x66, 0x89, 0xb7, 0xb0, 0xba, 0x4b, 0x85, 0x45, 0x94, 0x87, 0x3c, 0x06,
    0xdf, 0xe9, 0x85, 0x64, 0x07, 0x1f, 0xf6, 0x7f, 0xc9, 0x79, 0x4f, 0x86, 0xaa, 0x4f, 0xb8, 0xf1,
    0x20, 0x59, 0xd8, 0x77, 0x7b, 0xd9, 0x79, 0x5a, 0x82, 0xe1, 0x86, 0x9d, 0x33, 0x7b, 0xa3, 0x3a,
    0xaa, 0x31, 0x4e, 0x85, 0x85, 0x90, 0x95, 0x2d, 0xcf, 0x51, 0xc7, 0x7d, 0xea, 0x25, 0x07, 0x5d,
    0xba, 0xcc, 0x78, 0xdb, 0xdf, 0xe3, 0xca, 0xf5, 0xad, 0xe4, 0x86, 0x4f, 0x7d, 0x46, 0xd1, 0xd5,
    0x21, 0x92, 0x1d, 0x21, 0xda, 0x3f, 0x5f, 0x7d, 0x94, 0x88, 0xe3, 0x5c, 0x67, 0xdc, 0x86, 0x91,
    0x7c, 0x3a, 0xd0, 0x27, 0x74, 0x62, 0x54, 0xf2, 0x55, 0x79, 0xe4, 0x0e, 0x14, 0x23, 0xef, 0xa8,
    0x94, 0x23, 0xfb, 0xe2, 0xa1, 0xdb, 0xa6, 0xe3, 0x65, 0x15, 0xdc, 0xad, 0x16, 0xe5, 0x37, 0x0c,
    0x6a, 0x9f, 0x5e, 0x24, 0x71, 0xa2, 0x3b, 0x5b, 0x1c, 0x83, 0x47, 0xd7, 0x70, 0xb5, 0x03, 0xb7,
    0x18, 0xaf, 0x55, 0xc8, 0x8b, 0x8e, 0x34, 0x96, 0xc2, 0x4c, 0x20, 0x55, 0x8c, 0x16, 0xfe, 0xa0,
    0x7e, 0xf8, 0xda, 0x0b, 0x5f, 0x9e, 0xf7, 0x3c, 0xec, 0x71, 0x73, 0x39, 0xe5, 0x62, 0x11, 0x23,
    0x2f, 0x86, 0x3f, 0x59, 0x9f, 0xb9, 0xfd, 0x57, 0x7b, 0x10, 0x4d, 0x6f, 0x8d, 0x4d, 0x25, 0x48,
    0x69, 0x48, 0x61, 0xda, 0xe3, 0x2a, 0xa4, 0xa4, 0xf2, 0xaf, 0x04, 0x13, 0xb5, 0x35, 0xc4, 0x52,
    0xa9, 0x28, 0x45, 0x49, 0xfa, 0x41, 0x8e, 0x3e, 0x6b, 0xfc, 0xc9, 0x4b, 0xa5, 0xea, 0x7f, 0x58,
    0x01, 0xc0, 0xfc, 0xe0, 0x69, 0x5d, 0xe2, 0xfb, 0xf3, 0x3a, 0x6f, 0x16, 0xf4, 0x1a, 0xb7, 0xd4,
    0x32, 0x08, 0x4a, 0x08, 0xc2, 0xd7, 0xfe, 0x43, 0x5a, 0x71, 0x74, 0x17, 0xba, 0x8a, 0xfd, 0xe6,
    0xc0, 0xf2, 0x13, 0x0c, 0x69, 0xc0, 0xd2, 0xa9, 0xca, 0x9a, 0x70, 0x92, 0x6a, 0xad, 0xc0, 0xc9,
    0x0c, 0x73, 0x8f, 0xd7, 0x22, 0x14, 0x72, 0x17, 0x57, 0x0b, 0x73, 0xe7, 0xf3, 0x9c, 0xdf, 0xdb,
    0x8a, 0x5f, 0x25, 0xc6, 0x7c, 0x8d, 0x3f, 0xbd, 0x90, 0xcb, 0xbe, 0xb2, 0xa8, 0x7c, 0x81, 0x45,
    0x60, 0x18, 0x69, 0x4e, 0x80, 0xfc, 0xdf, 0x60, 0x42, 0xbf, 0xf5, 0xec, 0x63, 0x68, 0x6f, 0x31,
    0x66, 0x4b, 0xa4, 0x19, 0x3f, 0xec, 0x9a, 0x24, 0x67, 0xf2, 0x0a, 0x0b, 0x94, 0x9a, 0x09, 0xb9,
    0x5f, 0x8c, 0x2c, 0x25, 0xcd, 0x7d, 0x57, 0x42, 0x62, 0x18, 0x0c, 0xea, 0x04, 0x0b, 0x4b, 0xb2,
    0x51, 0x62, 0xc2, 0xb9, 0x51, 0x1d, 0x81, 0xed, 0x46, 0xff, 0x96, 0xe3, 0x10, 0xfa, 0x34, 0x0e,
    0xa8, 0x25, 0xd3, 0x3d, 0x7c, 0xfb, 0xc1, 0x1f, 0x48, 0x5d, 0x8e, 0xb0, 0x84, 0x9c, 0x3a, 0xf7,
    0x31, 0xe4, 0xad, 0xf7, 0xc2, 0xcc, 0x0f, 0xbf, 0xba, 0xf2, 0x0d, 0x89, 0x29, 0x09, 0x53, 0x65,
    0xdb, 0x0b, 0x7d, 0xcb, 0x30, 0xdc, 0xb6, 0xb8, 0x0d, 0x41, 0xd7, 0x6e, 0x55, 0xb5, 0xf3, 0xe7,
    0xb8, 0x6d, 0xd4, 0x46, 0x31, 0xa3, 0xce, 0x91, 0x9f, 0x36, 0x1a, 0x8c, 0xd3, 0x8e, 0x56, 0x87,
    0x4a, 0x1c, 0x3f, 0x21, 0xaa, 0x88, 0xdf, 0x72, 0xd6, 0xcb, 0xba, 0xec, 0xc8, 0xb3, 0xe5, 0x7b,
    0x1f, 0xda, 0xd2, 0x89, 0x96, 0x50, 0x64, 0xf9, 0x58, 0x9c, 0xd8, 0x64, 0x82, 0x00, 0xaf, 0x10,
    0xe8, 0x88, 0xa3, 0x4e, 0x54, 0xac, 0x71, 0x37, 0xff, 0xb5, 0xe1, 0x4b, 0x79, 0x57, 0x82, 0xa6,
    0x1b, 0xe9, 0x30, 0x1e, 0x4d, 0xd3, 0xc2, 0x03, 0x0c, 0x3f, 0x5d, 0x42, 0x96, 0x52, 0xeb, 0xe0,
    0x44, 0x56, 0x3e, 0x12, 0x58, 0x0b, 0x2f, 0x2b, 0x42, 0xe8, 0x5f, 0xa7, 0x89, 0x60, 0x8e, 0x6f,
    0xc5, 0x95, 0xa6, 0x6c, 0x31, 0xf4, 0x61, 0xd7, 0xf0, 0xa4, 0x8d, 0x8b, 0x5a, 0x53, 0x65, 0x11,
    0xff, 0x84, 0x15, 0x2c, 0x66, 0x27, 0x11, 0x8d, 0x4e, 0xfb, 0x1a, 0x23, 0x49, 0x0c, 0x4d, 0x8d,
    0x9f, 0x6e, 0x5e, 0xe3, 0x15, 0xab, 0x7e, 0xe4, 0x90, 0xa1, 0x28, 0x3e, 0x5c, 0x25, 0x97, 0xb4,
    0xb5, 0xf0, 0x55, 0xeb, 0x0b, 0x25, 0x79, 0xf2, 0x68, 0xa2, 0x20, 0xd5, 0x10, 0x95, 0xd4, 0xc2,
    0xed, 0x36, 0xe7, 0x28, 0x72, 0xfc, 0x46, 0xcd, 0x60, 0x8f, 0xc2, 0xbd, 0x25, 0xea, 0xb5, 0x2a,
    0xcb, 0xcd, 0x70, 0x90, 0x89, 0x29, 0x3a, 0xa2, 0xb5, 0xb1, 0x30, 0xa8, 0xae, 0xde, 0x82, 0x3e,
    0x45, 0x39, 0x2c, 0x74, 0xb2, 0x1d, 0xbe, 0xbe, 0x59, 0x78, 0xb1, 0x92, 0x8e, 0xc3, 0x9f, 0x76,
    0x66, 0x74, 0x33, 0x25, 0xab, 0x47, 0xf9, 0xec, 0x33, 0xe0, 0xb7, 0x43, 0x12, 0x34, 0xb2, 0x98,
    0xa2, 0x73, 0x16, 0x93, 0xef, 0xfa, 0xa8, 0x99, 0x13, 0x54, 0x65, 0xe0, 0x37, 0x56, 0xf1, 0x39,
    0xea, 0x45, 0xcd, 0xcc, 0x69, 0xd7, 0x71, 0xac, 0xe4, 0x32, 0xbc, 0xca, 0x63, 0x67, 0x8b, 0x60,
    0x69, 0x65, 0x7a, 0x2f, 0x61, 0x6b, 0xab, 0x40, 0x1e, 0xd4, 0x59, 0xf0, 0x7a, 0x8f, 0x78, 0xff,
    0xa8, 0x15, 0x0c, 0x5f, 0x97, 0x69,
};

static const MessageEncodingTestVector sMessageEncodingTest0535 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x44E17FA1,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0535_Payload,
    sizeof(sMessageEncodingTest0535_Payload),
    sMessageEncodingTest0535_ExpectedEncoding,
    sizeof(sMessageEncodingTest0535_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0536_EncryptionKey =
{
    {
        0xcb, 0x41, 0x97, 0x0a, 0x2f, 0x98, 0x4c, 0xac, 0xb9, 0xb9, 0xf9, 0xb7, 0x35, 0x2f, 0x81, 0x50,
    },
    {
        0xac, 0xc3, 0x8f, 0xda, 0x94, 0xfd, 0x40, 0x62, 0xdf, 0xdb, 0x04, 0x76, 0x3b, 0x9d, 0x80, 0x8c,
        0xbf, 0xf0, 0x8a, 0x00,
    }
};
static const uint8_t sMessageEncodingTest0536_Payload[] =
{
    0x61, 0xb7, 0x84, 0x5f, 0x61, 0xc0, 0xb1, 0xd2, 0x84, 0xf7, 0xe0, 0xa0, 0xab, 0x7a, 0x7a, 0x09,
    0x63, 0xab, 0xc3, 0x77, 0xae, 0xd4, 0xcd, 0xa6, 0xfb, 0x54, 0x77, 0xdc, 0x9b, 0x4a, 0x6b, 0xa4,
    0xdb, 0x60, 0xd7, 0x8d, 0x42, 0x69, 0xc5, 0x03, 0x77, 0xdc, 0x77, 0xef, 0x58, 0xdb, 0x9e, 0x5b,
    0x80, 0xf4, 0xb9, 0xee, 0xf8, 0xbf, 0x41, 0xf9, 0x44, 0xfd, 0xfc, 0xcb, 0x33, 0xa1, 0x44, 0xcc,
    0x3e, 0xbf, 0x86, 0xff, 0x1c, 0x28, 0x88, 0x6b, 0xe0, 0xe8, 0xd4, 0x88, 0xa5, 0xf4, 0xd9, 0x9c,
    0x5b, 0x62, 0x1c, 0xa9, 0x9c, 0x5d, 0xea, 0xfc, 0xfb, 0xf4, 0xf7, 0xb9, 0x38, 0x62, 0x6d, 0x32,
    0x5c, 0xf0, 0xe0, 0x90, 0xc6, 0xc4, 0xbb, 0xbd, 0x49, 0x7a, 0x50, 0xf5, 0x0e, 0x32, 0xe7, 0xe3,
    0x2d, 0x1d, 0xb5, 0x33, 0xb9, 0x98, 0x24, 0x07, 0x00, 0xae, 0x6e, 0x08, 0xe2, 0x93, 0xd8, 0xc9,
    0xfd, 0xe7, 0x6b, 0xbe, 0x5b, 0xc8, 0x04, 0x63, 0xb6, 0x5d, 0x3f, 0x7a, 0x5e, 0xc4, 0x4d, 0x62,
    0x4b, 0xb6, 0x0d, 0x77, 0x34, 0x42, 0x3e, 0xe4, 0x06, 0xfc, 0x25, 0x1c, 0x83, 0x76, 0x63, 0x4c,
    0x51, 0x5e, 0x5c, 0xa1, 0x6a, 0x6e, 0xf2, 0x75, 0x3b, 0x54, 0x8a, 0x1b, 0x16, 0x85, 0x7d, 0xf9,
    0xb3, 0x34, 0x9d, 0x03, 0x3e, 0x15, 0x8c, 0x28, 0x53, 0x2e, 0x12, 0xf0, 0xf6, 0x32, 0x8c, 0xb6,
    0xff, 0x6e, 0xa0, 0x76, 0x6a, 0x04, 0x55, 0x1e, 0x6f, 0x75, 0x39, 0xd2, 0xbf, 0x6d, 0xe3, 0x2d,
    0xca, 0x2d, 0xdc, 0xd2, 0x2d, 0x88, 0xd9, 0x1d, 0xe9, 0x6c, 0xe1, 0xbb, 0xd6, 0x09, 0x13, 0x6a,
    0xd0, 0xc8, 0xea, 0x25, 0xac, 0x50, 0xea, 0xc1, 0x0d, 0x38, 0x44, 0xf0, 0x25, 0xa1, 0x1b, 0x88,
    0x06, 0x0e, 0xf6, 0x5f, 0x6f, 0x68, 0xfe, 0xcb, 0xed, 0x80, 0xa6, 0x6b, 0x37, 0x30, 0xd8, 0xc8,
    0x78, 0x1b, 0xc3, 0xc7, 0x40, 0x65, 0x1d, 0x3f, 0x8e, 0xb6, 0xee, 0x93, 0x3f, 0xbf, 0x72, 0x7a,
    0x9c, 0x1f, 0x00, 0xfe, 0x32, 0xf1, 0xf8, 0xb0, 0xce, 0xc6, 0x66, 0xa7, 0xb5, 0x92, 0x49, 0x74,
    0x8b, 0xcd, 0xb1, 0xaa, 0xc9, 0x59, 0xc3, 0x58, 0x1b, 0x03, 0x4a, 0x4d, 0x84, 0x50, 0x2e, 0x11,
    0xfa, 0x5a, 0x4d, 0x75, 0x02, 0x93, 0x96, 0x19, 0x3b, 0x6d, 0xb4, 0xd7, 0x29, 0x5c, 0x8d, 0x4d,
    0x5e, 0x21, 0x2d, 0xa0, 0x29, 0x82, 0x9c, 0x08, 0x29, 0x22, 0x41, 0xfe, 0x69, 0x75, 0x1d, 0xfe,
    0x04, 0xc7, 0xe4, 0x1e, 0x3b, 0x2c, 0x9d, 0xa6, 0x2c, 0x3f, 0x82, 0x6c, 0x93, 0x10, 0x02, 0x58,
    0x8c, 0x81, 0xe8, 0x67, 0xb3, 0xa5, 0x0d, 0x8e, 0xe0, 0x37, 0x36, 0xa4, 0xac, 0xcc, 0xc4, 0x77,
    0x58, 0x75, 0x08, 0x1f, 0x3d, 0xc0, 0x5c, 0x40, 0x88, 0x50, 0xfe, 0x6d, 0x94, 0xe3, 0x43, 0x54,
    0x21, 0xf4, 0x93, 0xae, 0xf9, 0x3b, 0xd4, 0x38, 0xbb, 0x4f, 0x26, 0x43, 0x94, 0x53, 0xb3, 0xf0,
    0xee, 0xfe, 0xbb, 0xa3, 0x73, 0xa1, 0xd1, 0xaa, 0x71, 0x17, 0x0b, 0xcd, 0x0c, 0x07, 0xa5, 0xc7,
    0x45, 0x3b, 0x47, 0xb3, 0x0a, 0x1a, 0xfd, 0xdf, 0x69, 0xf4, 0x2a, 0x2f, 0x30, 0xef, 0xd2, 0xcb,
    0x27, 0xf0, 0x3d, 0x8e, 0x89, 0x44, 0x19, 0x02, 0xe4, 0xf0, 0x6a, 0x69, 0xd3, 0x12, 0x9f, 0xc8,
    0x32, 0xcb, 0xbd, 0x59, 0x95, 0xeb, 0x63, 0xe3, 0x63, 0x34, 0x56, 0xc3, 0xf4, 0x24, 0xb2, 0xbe,
    0x9a, 0x05, 0x2e, 0xd7, 0x98, 0xaf, 0xe0, 0x63, 0x23, 0x7b, 0x5c, 0xab, 0x9b, 0x9f, 0x8b, 0x61,
    0xff, 0x0a, 0x4a, 0x54, 0xc3, 0x4a, 0xff, 0x1f, 0x5c, 0xfd, 0x6e, 0x92, 0x36, 0x73, 0x17, 0xd8,
    0x78, 0x10, 0x6e, 0xd3, 0x3d, 0x48, 0xc1, 0x79, 0x29, 0xb2, 0x90, 0xde, 0x4f, 0x8d, 0x26, 0x5c,
    0x3b, 0x04, 0x34, 0x15, 0xf3, 0x2a, 0x22, 0xbe, 0x6a, 0xed, 0x4c, 0xcf, 0x7d, 0xb7, 0xfc, 0x95,
    0xf0, 0xfb, 0xad, 0x71, 0x09, 0xd6, 0xc8, 0xd8, 0xe4, 0x12, 0x56, 0xf6, 0xf5, 0x88, 0xbc, 0x93,
    0xa4, 0x36, 0xef, 0xbc, 0x7b, 0x18, 0xa0, 0xbb, 0x59, 0x0a, 0xfc, 0x41, 0x3d, 0x96, 0x3d, 0xa6,
    0xee, 0x12, 0xd9, 0x05, 0x30, 0x45, 0x7f, 0x09, 0x2f, 0x2a, 0x3b, 0x91, 0xf6, 0x4f, 0x50, 0x52,
    0xd8, 0xe1, 0xf2, 0x04, 0x26, 0x13, 0x15, 0x59, 0x0e, 0x42, 0xb2, 0x05, 0xf0, 0x83, 0x27, 0xa7,
    0x37, 0x97, 0x9f, 0x23, 0x26, 0x6b, 0xf8, 0xa0, 0x34, 0x65, 0xf9, 0x46, 0x5e, 0xdf, 0xa0, 0x2c,
    0x2b, 0xaa, 0x97, 0xcf, 0x82, 0x93, 0xe9, 0xf1, 0xf6, 0xb9, 0xf8, 0xdb, 0x1c, 0x4b, 0x45, 0x58,
    0xac, 0xed, 0xb6, 0x66, 0xdb, 0x77, 0x81, 0x8e, 0xcb, 0xe8, 0xd6, 0x86, 0xac, 0xdd, 0xa7, 0x9f,
    0xee, 0xe5, 0x88, 0x1b, 0x3d, 0xaf, 0x3b, 0x09, 0x4f, 0x27, 0xd4, 0x49, 0x76, 0x27, 0x11, 0x05,
    0x78, 0xa1, 0xe8, 0x05, 0x25, 0xea, 0x3b, 0x81, 0xba, 0xf5, 0x42, 0xa5, 0x3e, 0xbc, 0xb7, 0xf3,
    0x13, 0xee, 0x3f, 0xc9, 0xce, 0x4f, 0xfd, 0x61, 0x7c, 0x66, 0xdb, 0xe7, 0x7a, 0x08, 0x3b, 0xa6,
    0x06, 0x94, 0xcc, 0xe5, 0x43, 0x8c, 0x54, 0xbf, 0x1c, 0x9f, 0xcd, 0xdf, 0x12, 0xd1, 0x25, 0xd2,
    0xc5, 0xf1, 0x11, 0xdc, 0xd8, 0xc0, 0x34, 0x04, 0x18, 0x09, 0x84, 0xe6, 0x8f, 0x5e, 0x36, 0x4e,
    0x3d, 0x50, 0xf3, 0x68, 0x6e, 0xb1, 0xdb, 0xd9, 0x94, 0xf7, 0x2d, 0xb3, 0x37, 0x38, 0x6f, 0xc2,
    0x90, 0x10, 0x00, 0xec, 0xc7, 0x7c, 0x5d, 0x52, 0x2e, 0xd4, 0xa9, 0xa2, 0xe1, 0x3c, 0xff, 0xbf,
    0x51, 0xa8, 0x0f, 0x4f, 0x2f, 0x38, 0xc2, 0x98, 0xc7, 0x81, 0x33, 0x7f, 0x75, 0xdf, 0xfc, 0xd1,
    0xfe, 0xa5, 0xb7, 0x23, 0x85, 0xc7, 0xbf, 0x9d, 0xb3, 0x23, 0x06, 0xf8, 0x5a, 0x42, 0x83, 0xdd,
    0x2d, 0x1e, 0x72, 0x40, 0x19, 0x7e, 0xec, 0xdd, 0xf1, 0xab, 0xf3, 0x21, 0x37, 0x6e, 0x59, 0x7a,
    0x34, 0x41, 0x22, 0xc9, 0xd7, 0x5d, 0xf9, 0x45, 0xb2, 0xcf, 0x84, 0xac, 0xfc, 0xe6, 0xdf, 0x9a,
    0x69, 0x82, 0x3b, 0x2d, 0x4e, 0xac, 0x0c, 0xf1, 0x6f, 0x12, 0x00, 0x02, 0xff, 0x86, 0xb4, 0xae,
    0x00, 0xfb, 0x29, 0x66, 0xfe, 0xa9, 0x2e, 0xab, 0xfc, 0x6a, 0x65, 0x16, 0x2e, 0x8e, 0xe1, 0x0d,
    0xc8, 0x26, 0x2f, 0xcc, 0x9c, 0xbf, 0xb0, 0x6d, 0x1e, 0x69, 0xff, 0x70, 0xcf, 0x21, 0x32, 0xe7,
    0x2d, 0x05, 0x3a, 0x1c, 0x5d, 0x2e, 0xf3, 0xdd, 0xb8, 0xb0, 0xf3, 0x4a, 0x08, 0x89, 0x3c, 0xaf,
    0x00, 0xa7, 0x04, 0x98, 0x3f, 0xae, 0x24, 0x4c, 0x2e, 0x6a, 0x4e, 0xdc, 0xe0, 0x6c, 0x05, 0x3a,
    0xb7, 0x77, 0x23, 0xce, 0x9a, 0xe4, 0x25, 0x86, 0xb4, 0x59, 0xe5, 0x60, 0x07, 0x80, 0xc2, 0x0e,
    0xdb, 0x58, 0xe7, 0x31, 0x34, 0xbb, 0x21, 0xd0, 0x0b, 0x78, 0x19, 0x54, 0x0d, 0x83, 0xf2, 0xe9,
    0x92, 0xb5, 0x10, 0xe5, 0xbc, 0x28, 0xa7, 0xb3, 0x34, 0xd9, 0xd4, 0x60, 0x55, 0x3f, 0x76, 0x8d,
    0xa8, 0xba, 0x3f, 0xd5, 0x32, 0xaf, 0xa2, 0x28, 0x4a, 0xdc, 0xc6, 0xea, 0x52, 0x6b, 0x1a, 0x11,
    0xbf, 0xdf, 0x82, 0xb9, 0x66, 0x6a, 0x6b, 0x3a, 0x26, 0xeb, 0x7f, 0x76, 0x81, 0xd4, 0x0c, 0xb4,
    0xd8, 0x1c, 0xae, 0xdf, 0xb9, 0xff, 0xc9, 0xca, 0x21, 0x82, 0x3d, 0x1d, 0x77, 0xc3, 0x30, 0x42,
    0xc6, 0xca, 0x53, 0x1f, 0xc2, 0x93, 0xdb, 0xbb, 0xe4, 0x5c, 0x43, 0x22, 0xc1, 0x6a, 0x30, 0xb3,
    0xaa, 0xf4, 0x0d, 0xd4, 0xa0, 0x46, 0xab, 0x19, 0xf2, 0x0e, 0xe6, 0xad, 0x6d, 0x3c, 0x49, 0x51,
};

static const uint8_t sMessageEncodingTest0536_ExpectedEncoding[] =
{
    0x10, 0x23, 0x99, 0xa9, 0x7b, 0x21, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x5f, 0x26, 0x8f, 0xe0, 0xe1, 0x84, 0x2f, 0xd3, 0xf3, 0xcb,
    0x23, 0xbf, 0x17, 0xac, 0x0d, 0x1f, 0x62, 0x97, 0x84, 0xfd, 0x29, 0x0a, 0xfb, 0xba, 0x89, 0xab,
    0xb9, 0x08, 0x71, 0x93, 0x37, 0x1c, 0x75, 0x7b, 0xa0, 0x20, 0x9e, 0x0d, 0xb3, 0xcc, 0xab, 0xa8,
    0xf8, 0xdc, 0x73, 0x1e, 0x82, 0xb0, 0x99, 0xb2, 0xae, 0x9c, 0x46, 0xef, 0x59, 0xe8, 0xa6, 0x6b,
    0x7e, 0xe8, 0x40, 0x78, 0x6d, 0x18, 0x49, 0x27, 0x67, 0xba, 0x4a, 0x03, 0x4e, 0x92, 0xff, 0xd6,
    0xc1, 0x34, 0xe4, 0xf1, 0x1f, 0x54, 0x13, 0x67, 0xbd, 0x07, 0x22, 0x1d, 0x8f, 0xcb, 0xad, 0xd1,
    0xf0, 0xab, 0x28, 0xec, 0xdd, 0xe9, 0x72, 0xaf, 0xdd, 0xc4, 0x03, 0xa9, 0x50, 0x25, 0x0b, 0xb5,
    0x62, 0x13, 0xf8, 0x4c, 0x2e, 0xaf, 0xff, 0x96, 0x67, 0xf6, 0x34, 0x89, 0x3e, 0xe4, 0x59, 0xd8,
    0xe3, 0xa0, 0x7d, 0x6c, 0xe0, 0x98, 0xf8, 0xba, 0x41, 0x67, 0xb1, 0xd1, 0xdb, 0x8f, 0x1b, 0x2e,
    0x27, 0xdd, 0xaf, 0x4a, 0x43, 0x92, 0x26, 0x0f, 0x1e, 0x90, 0x6d, 0xbd, 0x9d, 0xa5, 0x54, 0x43,
    0x96, 0xe2, 0x16, 0x44, 0x04, 0xe4, 0xd0, 0xc7, 0x56, 0x94, 0x0c, 0x77, 0xe2, 0xf6, 0xa7, 0xab,
    0x3f, 0xe4, 0xff, 0x28, 0xdb, 0x5f, 0x11, 0xa2, 0xad, 0x2d, 0xa6, 0x34, 0xc1, 0xd0, 0x7a, 0x33,
    0xb1, 0x35, 0xd2, 0x73, 0xd6, 0x11, 0x29, 0xdb, 0xc7, 0xeb, 0x21, 0x1f, 0x62, 0x20, 0x44, 0xf0,
    0x94, 0x75, 0x4b, 0xb8, 0xe1, 0xe8, 0x06, 0x6e, 0x4f, 0x6a, 0xa8, 0x5e, 0x3c, 0xeb, 0xec, 0xf9,
    0x1f, 0xa6, 0x46, 0x52, 0x42, 0x85, 0x8e, 0x1f, 0xd2, 0xa9, 0x63, 0x60, 0x48, 0xe2, 0x7b, 0x21,
    0xea, 0xcd, 0xbc, 0xf4, 0x52, 0x7b, 0xaa, 0x95, 0x8d, 0x15, 0xc6, 0xd3, 0xdc, 0x23, 0x6c, 0x18,
    0x34, 0x47, 0xac, 0x9d, 0x15, 0xed, 0xc1, 0x41, 0x86, 0x15, 0x61, 0x48, 0xb9, 0x21, 0x05, 0xf1,
    0xcf, 0x91, 0x19, 0xf8, 0xd4, 0x61, 0x65, 0xdf, 0x2f, 0x49, 0x5a, 0x00, 0xd0, 0xc2, 0x51, 0xaf,
    0xb2, 0xa0, 0x22, 0xb0, 0x27, 0xda, 0x45, 0xa4, 0x1d, 0x11, 0xf9, 0xd5, 0xab, 0xe3, 0xee, 0x60,
    0x0f, 0x7a, 0xec, 0xd8, 0x17, 0xaa, 0x75, 0x1d, 0x42, 0x54, 0x94, 0xc7, 0x80, 0x88, 0x69, 0x63,
    0x51, 0x81, 0xbb, 0xad, 0xe1, 0x14, 0xa9, 0xa7, 0x02, 0x2a, 0x03, 0x60, 0x0f, 0x8f, 0x2c, 0xf3,
    0x55, 0x7c, 0x10, 0xfe, 0x61, 0x7a, 0xd8, 0x9b, 0x31, 0x44, 0x74, 0xe2, 0xed, 0x44, 0xa1, 0x8f,
    0xf4, 0xe6, 0xc2, 0x4e, 0x8d, 0xa0, 0x66, 0xd2, 0x67, 0x5b, 0x4a, 0x49, 0xfc, 0x98, 0x2e, 0x78,
    0xe8, 0x60, 0xdc, 0x93, 0x69, 0x6c, 0xfd, 0xd5, 0xdd, 0x21, 0x41, 0xe4, 0x1f, 0x05, 0x44, 0x16,
    0xb2, 0xa5, 0x1e, 0x8a, 0xa8, 0x44, 0xbd, 0x6c, 0x42, 0xac, 0x0b, 0xf4, 0xb3, 0x2f, 0xe8, 0xcc,
    0xb5, 0x40, 0x2b, 0xd7, 0x34, 0x7b, 0xb3, 0x05, 0xc6, 0x51, 0xc1, 0x2a, 0x19, 0xd3, 0x1f, 0x43,
    0xa0, 0xaf, 0x63, 0x76, 0x1b, 0xfb, 0xd7, 0xe4, 0xef, 0x47, 0xfa, 0x73, 0x86, 0x51, 0xd7, 0xef,
    0xea, 0xec, 0x6d, 0x7a, 0x6a, 0x6d, 0x15, 0x4b, 0xd9, 0xcd, 0x70, 0xc3, 0xe8, 0x0a, 0xc4, 0xa9,
    0xfa, 0x67, 0xb2, 0x5d, 0x2f, 0x99, 0xee, 0xbb, 0x03, 0x66, 0x0a, 0xff, 0x86, 0x61, 0xfb, 0x59,
    0xb9, 0xf7, 0x8b, 0x62, 0x2d, 0x41, 0x2f, 0xcf, 0xb1, 0x58, 0x8f, 0x0d, 0xb4, 0xe5, 0x13, 0x54,
    0x9a, 0x33, 0x40, 0x0a, 0xd2, 0xcd, 0xa5, 0x05, 0x14, 0xc8, 0xfc, 0xc9, 0x79, 0x07, 0x8e, 0xbd,
    0x7f, 0x86, 0xce, 0xb5, 0x54, 0x85, 0xe8, 0x11, 0xf6, 0x29, 0x77, 0xed, 0xec, 0xc2, 0xa0, 0xfb,
    0xbf, 0xe5, 0x78, 0x2c, 0x95, 0x81, 0xde, 0x9f, 0x7d, 0x7b, 0x4f, 0x91, 0x2b, 0xfd, 0xb0, 0x15,
    0xa2, 0x78, 0x15, 0x83, 0x94, 0x57, 0x2c, 0xd9, 0x0d, 0x75, 0x8f, 0xcf, 0x05, 0x6d, 0x21, 0x37,
    0x62, 0x86, 0x1f, 0x97, 0x83, 0x3a, 0x84, 0xc3, 0xdc, 0x47, 0xd2, 0xca, 0xf3, 0x22, 0x07, 0x95,
    0xca, 0x12, 0xc4, 0xa7, 0xda, 0xf8, 0xbe, 0xf4, 0x76, 0x74, 0x4a, 0xcd, 0xd9, 0x66, 0x0c, 0x0d,
    0x3d, 0x3a, 0x8e, 0xae, 0x54, 0x02, 0xec, 0xdd, 0x9c, 0x5b, 0xf5, 0x26, 0x50, 0x6d, 0xed, 0x4b,
    0x21, 0x41, 0x83, 0xaf, 0xcc, 0x97, 0xa0, 0xe4, 0xb5, 0x53, 0x5e, 0x0a, 0xf2, 0xde, 0x5b, 0xff,
    0xa1, 0x29, 0x40, 0x7b, 0x94, 0x27, 0xd6, 0x88, 0xf8, 0x42, 0xa0, 0x7b, 0x16, 0xfb, 0xd7, 0x23,
    0x32, 0xf9, 0x0a, 0x94, 0x14, 0xf3, 0xd8, 0x6b, 0x99, 0xe6, 0x07, 0x79, 0xa5, 0xb0, 0xcc, 0xc7,
    0x6a, 0xdf, 0x61, 0x1e, 0x80, 0x52, 0x64, 0xc6, 0x4d, 0xe6, 0xc7, 0x85, 0x0f, 0xa7, 0x95, 0xfb,
    0xc9, 0xaf, 0x6e, 0xa4, 0x6c, 0xdf, 0x68, 0x24, 0x77, 0xa8, 0x4e, 0xda, 0xd6, 0xcc, 0x07, 0x19,
    0x39, 0x73, 0x61, 0x79, 0x19, 0x65, 0x0a, 0x5d, 0xc4, 0xee, 0xf6, 0x24, 0x7b, 0xa3, 0xe5, 0x30,
    0x82, 0x8d, 0x7e, 0xfb, 0x22, 0xb1, 0xa3, 0x07, 0x56, 0x9b, 0x30, 0x50, 0x77, 0x15, 0x6f, 0x9d,
    0x3f, 0x9d, 0x9c, 0x3d, 0x76, 0x44, 0x8e, 0x2c, 0x1f, 0x16, 0x94, 0x72, 0x5b, 0x86, 0x1a, 0xe5,
    0xca, 0x40, 0x20, 0x81, 0x97, 0x73, 0x4e, 0xf7, 0xa3, 0x42, 0x33, 0xdf, 0x28, 0x7d, 0xb1, 0xb5,
    0x19, 0x7e, 0x98, 0xab, 0x2c, 0x9a, 0x39, 0x4d, 0xb5, 0xc5, 0x74, 0xe0, 0xa7, 0x4b, 0x50, 0xb9,
    0xab, 0xf7, 0x23, 0x05, 0x93, 0x4f, 0x55, 0x16, 0x68, 0x8a, 0xbd, 0x50, 0x02, 0x8e, 0x3e, 0xee,
    0xe6, 0x5a, 0xf9, 0xb2, 0x5e, 0x2b, 0x64, 0xa7, 0x6e, 0xf5, 0x38, 0xdb, 0x0b, 0xbb, 0x51, 0xba,
    0xef, 0x69, 0xa8, 0x9f, 0xd1, 0xda, 0x17, 0x54, 0xd2, 0xd8, 0x5f, 0x84, 0x1d, 0x63, 0xee, 0x97,
    0xe6, 0xd8, 0x66, 0x57, 0xc0, 0xf9, 0x8c, 0xaa, 0xa3, 0x12, 0x11, 0x64, 0x96, 0x16, 0x1b, 0x0d,
    0x40, 0x01, 0xee, 0x7b, 0x45, 0xe2, 0x6a, 0xbf, 0xbe, 0x53, 0x6f, 0x91, 0x84, 0xfb, 0x69, 0xd5,
    0x01, 0x0e, 0xe8, 0x57, 0x9c, 0x95, 0x9e, 0x1f, 0xb9, 0x2f, 0x16, 0xa3, 0x80, 0x71, 0xd9, 0x84,
    0x7b, 0x46, 0xf9, 0xfe, 0xdb, 0xbe, 0x6d, 0x17, 0xb8, 0x24, 0xee, 0x65, 0xac, 0xcd, 0x82, 0x61,
    0x65, 0xe7, 0xee, 0x40, 0xff, 0xd5, 0x67, 0x89, 0x32, 0x39, 0x59, 0xb4, 0x68, 0xb9, 0x1e, 0xf6,
    0x8c, 0x5f, 0xd5, 0x95, 0xe0, 0xf4, 0xde, 0xdb, 0xc7, 0xac, 0xed, 0x20, 0xed, 0x66, 0xe8, 0x82,
    0x91, 0x2d, 0x65, 0x56, 0x16, 0x52, 0x1e, 0xfe, 0x4a, 0x98, 0x48, 0xab, 0x18, 0x0a, 0x4d, 0xbe,
    0x93, 0xaf, 0xf1, 0x11, 0x83, 0x06, 0xf3, 0xa8, 0x47, 0x9d, 0xeb, 0xcb, 0xd9, 0x82, 0xa4, 0xb4,
    0x99, 0xb2, 0x9a, 0x58, 0x8b, 0x53, 0xde, 0x10, 0xfa, 0x53, 0xbd, 0xce, 0x3b, 0xd8, 0x9f, 0xa7,
    0xb4, 0x8a, 0xd7, 0x4b, 0xd3, 0x93, 0x53, 0x8e, 0x83, 0x0f, 0x3d, 0x41, 0x12, 0x57, 0x4b, 0x84,
    0xc0, 0x87, 0x49, 0x78, 0x9a, 0x46, 0xde, 0xe6, 0x2e, 0x11, 0x87, 0xfb, 0xe9, 0x75, 0xb3, 0x54,
    0xd8, 0x84, 0x8b, 0x02, 0x29, 0xa3, 0xf6, 0xe7, 0x57, 0xfb, 0x34, 0x97, 0x10, 0xa0, 0x6c, 0x04,
    0x57, 0xed, 0x25, 0x6e, 0x60, 0x8a, 0x11, 0xed, 0xf4, 0x34, 0x20, 0x47, 0x91, 0x4c, 0x90, 0x92,
    0xec, 0x22, 0x52, 0x26, 0xa8, 0x8e, 0xf3, 0xef, 0xfa, 0xd1, 0xed, 0x38, 0x55, 0x00, 0xa0, 0xa0,
    0x76, 0x5d, 0x1b, 0x3a, 0xb3, 0x06, 0x92, 0x4d, 0x41, 0x1c, 0x1d, 0xa7, 0x11, 0xab, 0xe5, 0x7f,
    0xfe, 0xcb, 0x80, 0x75, 0x2f, 0x2d, 0xf1, 0xa3, 0x39, 0x8e, 0xa4, 0x52,
};

static const MessageEncodingTestVector sMessageEncodingTest0536 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x217BA999,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x265F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0536_EncryptionKey,
    sMessageEncodingTest0536_Payload,
    sizeof(sMessageEncodingTest0536_Payload),
    sMessageEncodingTest0536_ExpectedEncoding,
    sizeof(sMessageEncodingTest0536_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0537_EncryptionKey =
{
    {
        0xef, 0x0c, 0x69, 0x8c, 0x85, 0x22, 0x7c, 0x71, 0xb3, 0x36, 0x2e, 0x85, 0x9b, 0x78, 0x87, 0xdc,
    }
};
static const uint8_t sMessageEncodingTest0537_Payload[] =
{
    0x51, 0xb5, 0x85, 0x54, 0xdf, 0xd8, 0x7b, 0x65, 0x9b, 0x15, 0x31, 0x71, 0x84, 0x7d, 0xcb, 0xcd,
    0x7d, 0x83, 0x95, 0x9d, 0x05, 0xe6, 0x8d, 0x01, 0x34, 0x2e, 0x40, 0x04, 0x1b, 0x8e, 0xec, 0x1a,
    0xab, 0x50, 0x77, 0x3c, 0xbb, 0x2d, 0xe6, 0x0c, 0x0d, 0xbc, 0xba, 0xb1, 0x7e, 0xd9, 0x30, 0xac,
    0x23, 0x0c, 0x49, 0xcc, 0x0a, 0x11, 0x96, 0xe0, 0x7e, 0x82, 0x4e, 0xb3, 0xa1, 0xf1, 0xdd, 0x51,
    0x26, 0x10, 0x0a, 0x0d, 0x04, 0x86, 0xfb, 0x60, 0xd2, 0x80, 0x1e, 0x52, 0x2f, 0x45, 0x68, 0x5f,
    0xe8, 0xe3, 0x2e, 0x4c, 0x62, 0xb5, 0x0d, 0x88, 0x07, 0x12, 0x87, 0xfe, 0x73, 0x14, 0x5e, 0x01,
    0xad, 0x87, 0x2e, 0x03, 0x26, 0x05, 0xa2, 0x4d, 0xe0, 0xf7, 0x29, 0xf6, 0x7e, 0x04, 0x2c, 0xbe,
    0x54, 0xa2, 0xcd, 0xcb, 0x9e, 0xbb, 0x1e, 0x70, 0x18, 0xe3, 0x63, 0xd2, 0xe9, 0x63, 0x0f, 0x6e,
    0xdf, 0x3f, 0x23, 0xd9, 0xfb, 0xa2, 0x0c, 0x5d, 0x1f, 0xbe, 0x1a, 0xb3, 0x73, 0x36, 0x6f, 0xb9,
    0x36, 0xe3, 0xed, 0xa6, 0x29, 0x57, 0xd5, 0x46, 0xaa, 0x3a, 0x55, 0xc5, 0xd4, 0xeb, 0xc1, 0xda,
    0x7a, 0x27, 0x36, 0xaa, 0x19, 0xac, 0xfa, 0xb1, 0x01, 0x5a, 0x5b, 0x5b, 0x6e, 0x2b, 0x3a, 0x95,
    0x98, 0x59, 0xae, 0x3d, 0xd4, 0x25, 0xdc, 0x0e, 0x05, 0xa0, 0x8d, 0x46, 0x5c, 0x5d, 0xea, 0x58,
    0x68, 0x7f, 0x54, 0x8f, 0x29, 0x8b, 0xaf, 0x7a, 0x14, 0x96, 0xfe, 0x1b, 0xd9, 0xed, 0x76, 0xc8,
    0xff, 0x6a, 0x20, 0x0c, 0xb0, 0x56, 0xf2, 0xd2, 0xf5, 0x82, 0x54, 0xea, 0x8e, 0xb7, 0x97, 0xed,
    0x7f, 0x86, 0x84, 0xd3, 0x32, 0xe1, 0x60, 0xfd, 0xf6, 0x2a, 0x98, 0xd2, 0x47, 0x66, 0xaa, 0x30,
    0x86, 0xd8, 0xb1, 0x19, 0x9a, 0xb9, 0xf9, 0x0a, 0xf3, 0xe7, 0xb4, 0xff, 0x43, 0xda, 0x65, 0x15,
    0x9c, 0x02, 0x3c, 0x63, 0x36, 0x35, 0xc2, 0x35, 0xa4, 0x7f, 0x00, 0x01, 0x05, 0x13, 0x6b, 0x60,
    0x6f, 0x6d, 0x13, 0x1c, 0x78, 0x3d, 0xf8, 0x52, 0x96, 0x6d, 0x0b, 0xbb, 0x0b, 0x1c, 0x4f, 0x0c,
    0x7b, 0xc3, 0x2e, 0xe1, 0x4a, 0xc7, 0xdd, 0x2e, 0xc3, 0xd2, 0xa2, 0x46, 0x2a, 0x9a, 0x36, 0xd9,
    0x7e, 0x04, 0x3d, 0x01, 0xb7, 0x1c, 0x97, 0x7a, 0x5d, 0x2e, 0x58, 0x23, 0xab, 0x45, 0xb8, 0xaf,
    0x8c, 0x6a, 0x6c, 0x06, 0x3e, 0x8d, 0x75, 0x5b, 0x12, 0x51, 0x8a, 0x79, 0x78, 0xca, 0x8b, 0x56,
    0xa6, 0x71, 0x1e, 0x3c, 0x0d, 0xe9, 0x28, 0x95, 0xcd, 0x4f, 0xc7, 0x5e, 0x2e, 0xab, 0x4a, 0x42,
    0x6e, 0x92, 0x6a, 0x46, 0x00, 0x73, 0x2e, 0x78, 0x3c, 0xb2, 0x0f, 0xea, 0x85, 0xf4, 0xc7, 0x3e,
    0x8c, 0x28, 0x20, 0x08, 0x0a, 0xdc, 0x02, 0xcb, 0xf1, 0x00, 0x32, 0xf3, 0x15, 0x4f, 0x00, 0xef,
    0xad, 0xf5, 0xc3, 0xb1, 0x3b, 0x97, 0xc3, 0x99, 0x3a, 0x77, 0x09, 0xd3, 0x7d, 0x31, 0xa3, 0x2c,
    0xfc, 0x8e, 0x0a, 0x20, 0x5f, 0xd3, 0xd3, 0x46, 0x74, 0xfb, 0x24, 0x98, 0xf9, 0x36, 0xd2, 0x00,
    0x52, 0x91, 0x29, 0x51, 0x41, 0x28, 0x6d, 0x2c, 0xef, 0x98, 0x4b, 0xf3, 0xdb, 0xb4, 0x22, 0xc6,
    0xbc, 0x2f, 0xb3, 0x81, 0xac, 0xab, 0x0c, 0x53, 0x7c, 0x17, 0x7d, 0xe6, 0x0c, 0x95, 0x68, 0x6a,
    0xae, 0x98, 0x08, 0xf0, 0x27, 0x83, 0x25, 0x3c, 0x69, 0x3a, 0x36, 0xf5, 0xb3, 0x24, 0xda, 0x55,
    0xcc, 0x7c, 0x46, 0xc1, 0x11, 0x57, 0xab, 0xba, 0xf6, 0x9d, 0x3d, 0xca, 0x1e, 0xa5, 0x34, 0xbe,
    0x93, 0x4c, 0xfd, 0x24, 0x72, 0xe1, 0x6f, 0xcc, 0x06, 0x29, 0xda, 0x5c, 0xf2, 0xd1, 0x3b, 0x00,
    0xc9, 0x28, 0xe3, 0x40, 0xa0, 0x96, 0xba, 0x8d, 0x05, 0x70, 0x97, 0x89, 0xe8, 0xd6, 0x35, 0xcf,
    0xb5, 0xa9, 0x6f, 0x54, 0xea, 0x48, 0xf0, 0x6f, 0xa1, 0x27, 0x44, 0x64, 0x9e, 0x0e, 0xe2, 0x9b,
    0x4c, 0x4a, 0xf3, 0x65, 0xe0, 0x58, 0x83, 0xd9, 0xcd, 0xd2, 0xf0, 0x06, 0x99, 0xdf, 0x26, 0x42,
    0xa4, 0xe1, 0x70, 0x12, 0xa5, 0xe6, 0xad, 0xbd, 0x09, 0x63, 0xb1, 0xf2, 0xe6, 0xca, 0x5e, 0x03,
    0xdc, 0x80, 0x2c, 0xd6, 0xc0, 0x7a, 0xb5, 0x76, 0x5c, 0xec, 0xcd, 0x6a, 0xa7, 0xae, 0x09, 0x9e,
    0x55, 0xb7, 0xbb, 0xdb, 0xa3, 0x93, 0xf3, 0x37, 0x13, 0x77, 0xe8, 0xcf, 0xe5, 0xd9, 0xf8, 0xbd,
    0xef, 0xdd, 0x53, 0x98, 0x44, 0xf7, 0x87, 0xd3, 0xa7, 0x2b, 0xff, 0x72, 0x17, 0x6a, 0x31, 0x77,
    0x29, 0xe2, 0x31, 0x0a, 0xd3, 0xc6, 0xa6, 0x82, 0x53, 0xd0, 0x67, 0xa2, 0x90, 0x54, 0xc1, 0x17,
    0x41, 0x2b, 0x2d, 0xa8, 0xc8, 0x84, 0xc0, 0xea, 0xf4, 0x1a, 0x5c, 0x59, 0x75, 0xe7, 0xb4, 0x07,
    0x31, 0x03, 0x64, 0x5e, 0x9e, 0xe9, 0xed, 0xe9, 0x7f, 0xa8, 0xcf, 0x08, 0xc9, 0xd9, 0x84, 0x71,
    0x77, 0xb2, 0x28, 0xad, 0x3c, 0x48, 0xb7, 0xe2, 0x86, 0xd8, 0x51, 0x5c, 0x6b, 0x27, 0xdb, 0xb9,
    0xe4, 0x4d, 0x86, 0x34, 0x64, 0x05, 0x9b, 0xe7, 0xe5, 0x6f, 0x5f, 0x21, 0x4e, 0x11, 0x5f, 0x27,
    0xf9, 0x0d, 0xa3, 0xbe, 0xb5, 0x63, 0x18, 0xb0, 0x4d, 0x25, 0x41, 0xde, 0x1e, 0xb6, 0x6a, 0x92,
    0x86, 0x21, 0x14, 0xd3, 0xfa, 0x46, 0x2c, 0x76, 0xd2, 0x9b, 0xfe, 0xa5, 0x12, 0xf3, 0x5d, 0x3f,
    0xca, 0x9e, 0x1f, 0xcd, 0xa3, 0x4e, 0xef, 0x27, 0xaa, 0x9c, 0x83, 0xf8, 0xd3, 0x50, 0x5e, 0x22,
    0xb8, 0x59, 0xc3, 0x2a, 0x12, 0x90, 0xc2, 0xe8, 0x7b, 0x03, 0x52, 0x91, 0x24, 0x91, 0x8c, 0xc8,
    0x5b, 0x09, 0xcd, 0x48, 0xf5, 0x9f, 0x08, 0xd2, 0xe6, 0x6a, 0x9b, 0x6f, 0xad, 0x13, 0xb0, 0x73,
    0x55, 0xb3, 0xbd, 0x8c, 0x3a, 0x01, 0x5c, 0xa5, 0x64, 0xca, 0xee, 0xa2, 0x04, 0x17, 0x8e, 0x54,
    0xa0, 0x27, 0x46, 0x4d, 0x5c, 0x73, 0x2e, 0xb8, 0x9e, 0x02, 0x15, 0x35, 0x42, 0xde, 0x1d, 0x60,
    0x93, 0x48, 0x18, 0x7a, 0x55, 0xcc, 0x4d, 0xba, 0x91, 0xbc, 0x5e, 0x0d, 0x28, 0x90, 0x8f, 0x39,
    0xf8, 0x74, 0xf2, 0x1c, 0xdb, 0x5f, 0x76, 0x39, 0xde, 0x8c, 0x71, 0x56, 0xce, 0x4b, 0x93, 0x90,
    0x38, 0x12, 0xc6, 0xde, 0x46, 0x16, 0x5b, 0xfe, 0xe7, 0xb2, 0xeb, 0xa3, 0xe8, 0x9b, 0x86, 0x33,
    0x36, 0xdc, 0x8b, 0xaa, 0x70, 0x3f, 0x10, 0xec, 0xe5, 0x27, 0x82, 0x10, 0x3d, 0xb1, 0xf6, 0x3a,
    0xb9, 0xc1, 0x1a, 0xa8, 0xa7, 0xcb, 0x06, 0x0c, 0xad, 0xfe, 0xc3, 0xc3, 0xd8, 0x15, 0x88, 0xf6,
    0xcd, 0x4d, 0x02, 0x54, 0x8b, 0x7a, 0x16, 0x79, 0x08, 0xd8, 0x1d, 0x31, 0xa2, 0xec, 0xa6, 0xb6,
    0xd0, 0xc6, 0x0d, 0x0a, 0xe4, 0x55, 0xc2, 0x47, 0x6f, 0x22, 0xa4, 0xad, 0x4f, 0x6e, 0x88, 0x99,
    0xf4, 0x97, 0x11, 0x72, 0xd5, 0xa2, 0x3f, 0x03, 0x93, 0x7c, 0xa9, 0xf4, 0xfe, 0x84, 0x31, 0xd8,
    0xe8, 0xa8, 0x75, 0x73, 0xb2, 0x3e, 0x06, 0x00, 0x51, 0x6b, 0xac, 0x93, 0xec, 0x26, 0x2f, 0x78,
    0x2f, 0x9f, 0xf4, 0xed, 0x93, 0x5a, 0x08, 0x24, 0xd3, 0x77, 0x3c, 0x3f, 0x76, 0x4d, 0x06, 0x88,
    0xc3, 0x8c, 0xb2, 0xd9, 0xdb, 0x53, 0xbc, 0x8c, 0x73, 0xd7, 0xdc, 0xe4, 0xac, 0xff, 0x74, 0x9b,
    0x8d, 0x4d, 0xc9, 0x88, 0xde, 0x46, 0x6c, 0x61, 0x5f, 0x7b, 0xa1, 0x60, 0x01, 0x49, 0xf1, 0x3d,
    0x23, 0x3e, 0x58, 0x75, 0xa5, 0xd6, 0x6f, 0xe0, 0x01, 0x5e, 0x31, 0x96, 0x54, 0x89, 0xb4, 0x85,
    0x90, 0xf6, 0xda, 0x28, 0x66, 0x79, 0x95, 0xc7, 0x61, 0x87, 0x2e, 0x13, 0x46, 0x37, 0x82, 0x18,
};

static const uint8_t sMessageEncodingTest0537_ExpectedEncoding[] =
{
    0x20, 0x23, 0x5e, 0xa0, 0x27, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x43, 0x24, 0x37, 0x4a, 0x5c, 0xfc, 0x91, 0xf9, 0x79, 0x4d,
    0x11, 0xd3, 0xcd, 0x7d, 0x40, 0x76, 0xe3, 0x27, 0xae, 0x54, 0xb3, 0xc0, 0x60, 0x20, 0x3e, 0xc8,
    0x6b, 0xbb, 0x76, 0xc4, 0xa8, 0xa8, 0x64, 0x3c, 0x8d, 0x92, 0x6b, 0x05, 0xf0, 0x3d, 0xbb, 0x87,
    0xc0, 0x7f, 0x88, 0x48, 0x0d, 0x20, 0x4a, 0xf5, 0xe8, 0x94, 0xe0, 0xbd, 0x85, 0xc4, 0xbe, 0x9b,
    0x4a, 0x4e, 0x72, 0x01, 0x52, 0x97, 0x50, 0x0a, 0xe4, 0x6b, 0x4b, 0x7c, 0xb5, 0x93, 0x50, 0x15,
    0xe7, 0xf5, 0x1f, 0x7e, 0x63, 0xae, 0x7c, 0x39, 0x2f, 0xd0, 0x4f, 0xb5, 0x74, 0xea, 0x4a, 0x21,
    0x04, 0x61, 0x49, 0xc0, 0x86, 0xb7, 0xfc, 0xe9, 0x1d, 0xf4, 0x07, 0x6a, 0x7e, 0x55, 0x84, 0x26,
    0xc7, 0xcd, 0x3a, 0x17, 0xe6, 0xb1, 0x26, 0x5d, 0xdb, 0x0c, 0xff, 0xe0, 0x3a, 0x45, 0xaa, 0x8c,
    0xb7, 0x48, 0xa5, 0x2c, 0xea, 0xba, 0x44, 0xfe, 0x37, 0x09, 0x63, 0x52, 0xf3, 0xd0, 0x03, 0x21,
    0x76, 0xd1, 0x54, 0xb0, 0x6e, 0xd3, 0x23, 0xa0, 0x9a, 0xa3, 0x22, 0xca, 0x55, 0x73, 0x99, 0xc0,
    0x65, 0x27, 0x1a, 0x3c, 0x1d, 0x30, 0x18, 0x4e, 0xe7, 0xd6, 0x74, 0xb4, 0x2f, 0x4e, 0x34, 0x32,
    0xba, 0x16, 0x42, 0xd5, 0xfb, 0x58, 0xf8, 0xc6, 0xbf, 0xa2, 0x6b, 0x13, 0x60, 0x32, 0x33, 0xe8,
    0x7e, 0x73, 0x2d, 0x7e, 0xb6, 0x4d, 0xdb, 0xdc, 0xc0, 0x90, 0xc1, 0xe8, 0xfd, 0x45, 0xc0, 0xf1,
    0xcb, 0x30, 0x3d, 0xbe, 0xc0, 0x5a, 0xff, 0xa3, 0x7b, 0xaf, 0x71, 0x90, 0x4f, 0xb1, 0x65, 0xfc,
    0xe7, 0x9c, 0xca, 0x38, 0x51, 0xb8, 0x13, 0xe5, 0xd2, 0xcd, 0xc9, 0x4a, 0xdd, 0xf1, 0x1b, 0xf0,
    0xd5, 0x22, 0xe4, 0x25, 0xa0, 0x03, 0xd8, 0xb2, 0xf1, 0xb0, 0x8e, 0xf1, 0x9a, 0x9c, 0x0e, 0xff,
    0xcc, 0xf4, 0x2d, 0x6a, 0xcb, 0x15, 0xc2, 0x14, 0xd2, 0x76, 0x9b, 0xb5, 0xb8, 0x4b, 0xe1, 0xea,
    0xb1, 0xdc, 0x23, 0x2a, 0xfb, 0x53, 0x23, 0xb3, 0x1c, 0xdf, 0x5c, 0x00, 0x2d, 0x26, 0x18, 0xbc,
    0x07, 0x9d, 0xf4, 0x9e, 0x03, 0x46, 0xae, 0x0c, 0xb3, 0x2c, 0xb8, 0x19, 0xa4, 0xbc, 0x6f, 0xc1,
    0x1a, 0x21, 0xdc, 0xa3, 0xa5, 0xb0, 0xba, 0x37, 0x02, 0x11, 0x08, 0x92, 0x5d, 0x2b, 0x9e, 0x80,
    0xcf, 0x63, 0x75, 0xd8, 0x93, 0xe0, 0x11, 0xc0, 0xac, 0x51, 0x86, 0x52, 0x19, 0xa1, 0xfc, 0xa3,
    0xce, 0x99, 0x34, 0x12, 0xbe, 0xc1, 0x4b, 0x6a, 0x8d, 0xb3, 0x41, 0x3c, 0x47, 0x6a, 0x9f, 0x7d,
    0xcc, 0x43, 0xc6, 0xb5, 0xbb, 0xd5, 0x3d, 0x6e, 0x0c, 0x34, 0x7a, 0x98, 0x45, 0x6f, 0x62, 0x10,
    0x28, 0x89, 0x36, 0x5e, 0x30, 0xfd, 0x43, 0x52, 0x48, 0x49, 0xf5, 0x0c, 0xd5, 0x3e, 0x7f, 0x1d,
    0x6d, 0xab, 0xab, 0x97, 0x48, 0xd6, 0xff, 0x72, 0x60, 0xb7, 0x6f, 0x0b, 0x04, 0x01, 0x70, 0x43,
    0x75, 0xa6, 0x90, 0xaf, 0x36, 0x6c, 0xdb, 0x06, 0x62, 0xe4, 0x03, 0xd9, 0x24, 0xb9, 0x6b, 0x58,
    0xb6, 0x39, 0xa6, 0x03, 0x98, 0x10, 0x88, 0xe7, 0xfb, 0xe7, 0xca, 0x65, 0xa5, 0xfe, 0x6e, 0x3d,
    0xfd, 0xa3, 0x5b, 0xbc, 0x64, 0x3d, 0xfe, 0xbd, 0xea, 0x18, 0x85, 0xad, 0xb0, 0x14, 0x2a, 0xb0,
    0x6d, 0xb3, 0x90, 0x7f, 0x06, 0x33, 0x23, 0x39, 0x9d, 0x63, 0xd8, 0xf7, 0xc6, 0xc2, 0x27, 0x6e,
    0xa9, 0xd2, 0xdc, 0xc6, 0x13, 0x9b, 0x6b, 0xcf, 0x27, 0x1b, 0x44, 0x5e, 0x16, 0xab, 0x0e, 0xe2,
    0x51, 0x8e, 0x8f, 0x4c, 0xfb, 0xcb, 0x64, 0x0b, 0xd7, 0x30, 0x60, 0x24, 0xd3, 0x7b, 0xbf, 0xeb,
    0x71, 0x38, 0xfd, 0xc0, 0x05, 0x22, 0x24, 0x2c, 0x7a, 0x1e, 0xc3, 0x01, 0x24, 0x7a, 0x0c, 0x8f,
    0x0d, 0x16, 0x02, 0xb4, 0xb1, 0x67, 0xdb, 0x60, 0xeb, 0x95, 0x20, 0xe4, 0xc9, 0x46, 0xd7, 0x29,
    0x8c, 0x72, 0x19, 0x47, 0xb9, 0xb2, 0x2d, 0x39, 0x8e, 0x25, 0x23, 0xc1, 0xa9, 0xc4, 0xe5, 0xdb,
    0x54, 0xba, 0xc8, 0xb4, 0xcb, 0xd7, 0xa6, 0xef, 0x03, 0xa9, 0x9f, 0x5c, 0xe0, 0x1f, 0x76, 0xbb,
    0xae, 0x5b, 0x3b, 0xf6, 0xcf, 0x3e, 0x4b, 0x52, 0x98, 0xea, 0x8b, 0x83, 0xb2, 0x3d, 0x2b, 0xe4,
    0x3a, 0x2d, 0xc6, 0xe7, 0xb3, 0x37, 0xa7, 0xa1, 0x10, 0x09, 0x8c, 0xe9, 0x6e, 0x50, 0xc3, 0x79,
    0x96, 0xfc, 0x0e, 0xd6, 0x4b, 0x0a, 0x02, 0xf7, 0xe2, 0xe1, 0xc9, 0xee, 0x7e, 0xe6, 0xf0, 0xe2,
    0x54, 0x55, 0x2b, 0xe6, 0x98, 0xc9, 0x6c, 0x6e, 0x29, 0xb0, 0x23, 0x50, 0x6a, 0x29, 0xbf, 0xb0,
    0x8c, 0x7c, 0x7a, 0xdb, 0x1e, 0x0f, 0x94, 0xe9, 0x83, 0xcd, 0x65, 0xf1, 0xad, 0xe1, 0x91, 0xa9,
    0xfd, 0xd1, 0xa7, 0xfa, 0xe5, 0x35, 0xa4, 0x11, 0x93, 0xdc, 0xd4, 0x0a, 0xb8, 0xef, 0xfd, 0xce,
    0xab, 0xd7, 0x05, 0x26, 0x22, 0x20, 0x87, 0x25, 0x26, 0x97, 0xa1, 0xd6, 0xfe, 0x7e, 0x2c, 0xe3,
    0x72, 0xcf, 0x6a, 0xc4, 0xf1, 0x51, 0x0d, 0x01, 0x43, 0x5f, 0x2d, 0x9d, 0x80, 0x10, 0x59, 0x33,
    0x63, 0xb3, 0x5b, 0xdb, 0x13, 0x33, 0xc8, 0xfc, 0xf5, 0xf7, 0xd0, 0xcb, 0x75, 0x0d, 0x2b, 0x58,
    0xcb, 0x7f, 0xc5, 0x97, 0xc8, 0xa7, 0xdc, 0xd1, 0xde, 0xfc, 0xb0, 0xaa, 0x6d, 0xf5, 0x69, 0x64,
    0xdb, 0x31, 0x2d, 0x60, 0x35, 0xe4, 0xbe, 0x91, 0x55, 0xa0, 0x2e, 0xca, 0x64, 0x74, 0x91, 0xfa,
    0x09, 0x70, 0x6e, 0x62, 0x8a, 0x2c, 0x6a, 0x87, 0x14, 0x18, 0x11, 0xf2, 0x45, 0x51, 0x7a, 0x6b,
    0x14, 0x1d, 0x78, 0xc0, 0xaf, 0xad, 0x0b, 0x37, 0xae, 0x5b, 0x1a, 0xaa, 0x0e, 0x51, 0x0a, 0x43,
    0xe7, 0x2a, 0xd4, 0x6c, 0xd9, 0xab, 0x67, 0x34, 0x85, 0xe6, 0x83, 0xf7, 0x1c, 0xbd, 0xb0, 0xc6,
    0xc9, 0x0e, 0xda, 0xee, 0xc7, 0x15, 0x04, 0x7d, 0x1f, 0x49, 0xcc, 0x22, 0xdb, 0x48, 0x49, 0x3f,
    0x3d, 0xfb, 0xdc, 0xea, 0xfd, 0x4c, 0x52, 0xf6, 0x99, 0x47, 0xe5, 0xcf, 0x9c, 0xbb, 0xfc, 0x67,
    0xa9, 0x10, 0xc9, 0xc0, 0x55, 0xb6, 0x48, 0x3c, 0xc2, 0x7c, 0x5f, 0x8b, 0x48, 0xdc, 0x99, 0xfc,
    0xdd, 0x2b, 0x9d, 0x70, 0x3b, 0x7c, 0x39, 0xde, 0x8c, 0x6c, 0x91, 0xe2, 0xf0, 0xd6, 0x81, 0x88,
    0x1a, 0xa6, 0x9c, 0xea, 0xa3, 0x86, 0x6b, 0x4a, 0x92, 0xbf, 0x92, 0x8c, 0x80, 0x4b, 0x74, 0xc8,
    0x67, 0x97, 0x20, 0x6b, 0x77, 0xc6, 0xc6, 0x25, 0x39, 0x7b, 0x85, 0x01, 0xc3, 0xdf, 0x86, 0x37,
    0xfa, 0x6a, 0x8f, 0x4e, 0xf1, 0x6b, 0xd0, 0xb9, 0xdb, 0x32, 0xe0, 0xf7, 0xc7, 0x52, 0x23, 0xfe,
    0x94, 0x4e, 0x3d, 0x5c, 0xd0, 0x33, 0x96, 0x9b, 0x5a, 0x6a, 0x07, 0x5f, 0xbf, 0x30, 0x15, 0x57,
    0xd8, 0xf5, 0xb7, 0xb9, 0xb7, 0xdd, 0x2e, 0xc9, 0xf7, 0xb7, 0xda, 0x39, 0xbb, 0x72, 0xae, 0xdf,
    0x1e, 0x82, 0x34, 0xba, 0x81, 0x91, 0xcc, 0xeb, 0x50, 0x3d, 0x8d, 0x9f, 0xd9, 0x43, 0x70, 0xd1,
    0x18, 0x2d, 0x65, 0x38, 0xa2, 0xdc, 0x62, 0xbd, 0x6c, 0xcf, 0x51, 0x08, 0x3c, 0x0a, 0x8c, 0xe9,
    0x78, 0x96, 0x7b, 0xca, 0xa0, 0x48, 0x11, 0x65, 0xba, 0x3b, 0x4e, 0x48, 0x52, 0x41, 0xb9, 0x3f,
    0xf2, 0xb1, 0xe7, 0x60, 0x0c, 0xc4, 0x93, 0xbe, 0x34, 0xa2, 0xfe, 0xa9, 0xc6, 0x0a, 0x66, 0x33,
    0xe8, 0x07, 0x6b, 0x13, 0xee, 0x6a, 0x84, 0x96, 0x19, 0x3a, 0xc2, 0x58, 0xa5, 0x79, 0xef, 0x80,
    0xbb, 0xd6, 0xe3, 0x76, 0x33, 0x32, 0xe9, 0x4a, 0xb5, 0x3b, 0x23, 0x9a, 0xd0, 0xcf, 0xfe, 0x25,
    0x54, 0xfc, 0x68, 0x1f, 0x96, 0x66, 0xc2, 0x8c, 0x00, 0x6f, 0x82, 0x6f, 0x54, 0x04, 0x5c, 0xe4,
};

static const MessageEncodingTestVector sMessageEncodingTest0537 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x5127A05E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2443,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0537_EncryptionKey,
    sMessageEncodingTest0537_Payload,
    sizeof(sMessageEncodingTest0537_Payload),
    sMessageEncodingTest0537_ExpectedEncoding,
    sizeof(sMessageEncodingTest0537_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0538_EncryptionKey =
{
    {
        0x00, 0xdf, 0x97, 0x71, 0x74, 0xbb, 0x82, 0x01, 0xc9, 0xfa, 0x86, 0x0c, 0x62, 0xdb, 0xf8, 0x9f,
    }
};
static const uint8_t sMessageEncodingTest0538_Payload[] =
{
    0xca, 0xdc, 0x9c, 0xc8, 0x21, 0x51, 0xa7, 0x46, 0x6f, 0x9a, 0x95, 0x50, 0xd0, 0x73, 0x23, 0xf7,
    0x9a, 0x25, 0xb1, 0x5e, 0x98, 0xce, 0x06, 0x8d, 0x82, 0xbb, 0x5a, 0x53, 0xf4, 0x61, 0x51, 0x8e,
    0x85, 0x2d, 0xed, 0x5c, 0x6e, 0x82, 0x26, 0x4b, 0xfd, 0xb9, 0x26, 0xa3, 0x50, 0x9a, 0xe7, 0xca,
    0xc4, 0x71, 0x13, 0xf9, 0x46, 0x21, 0x68, 0x9c, 0x2d, 0x85, 0x81, 0x33, 0x87, 0x2c, 0xd7, 0x7a,
    0x94, 0xa8, 0xfc, 0x90, 0x7a, 0x9b, 0xe3, 0x5b, 0xf4, 0x2e, 0x74, 0xfd, 0xc8, 0xae, 0x97, 0xc9,
    0x85, 0xe5, 0xaf, 0xc9, 0x16, 0x5a, 0xd9, 0xa0, 0x5b, 0x79, 0xf2, 0xe8, 0x03, 0x35, 0xb6, 0xcc,
    0x3f, 0xfc, 0x8d, 0x44, 0xf2, 0xcf, 0x4d, 0x98, 0xf6, 0x0d, 0x2e, 0xac, 0x62, 0x9e, 0x92, 0xc8,
    0x87, 0x76, 0xee, 0x64, 0x78, 0x49, 0xa9, 0x65, 0xfe, 0xad, 0x4d, 0x40, 0xc9, 0x94, 0x28, 0xb7,
    0x5b, 0x3d, 0x6e, 0xcf, 0x1a, 0xdf, 0x01, 0xfb, 0x67, 0x44, 0x24, 0xba, 0xa7, 0x58, 0x61, 0x82,
    0x98, 0x9d, 0x69, 0x98, 0x4f, 0x4e, 0x5e, 0xb9, 0x19, 0xcc, 0xb3, 0x9c, 0xb6, 0xa3, 0xae, 0x49,
    0xef, 0xa3, 0xda, 0x3b, 0xda, 0x38, 0xb6, 0xae, 0x99, 0x7c, 0x33, 0xdb, 0xfd, 0xe7, 0x0a, 0xa8,
    0x31, 0x37, 0xce, 0x3a, 0x49, 0xc1, 0x38, 0x7e, 0xac, 0x78, 0xc8, 0x44, 0x1e, 0x5d, 0xf6, 0xdb,
    0x66, 0x01, 0x73, 0x76, 0x39, 0x63, 0xf0, 0x78, 0xe3, 0x12, 0x81, 0xc2, 0xbe, 0x18, 0x6c, 0xe1,
    0x43, 0xe3, 0x0c, 0xc5, 0x86, 0xfe, 0xd2, 0xb4, 0x9b, 0xf4, 0x6f, 0x5a, 0xa4, 0xb2, 0xe7, 0x94,
    0x08, 0x9d, 0x47, 0x70, 0x00, 0x05, 0xeb, 0x85, 0xaa, 0xe3, 0x2e, 0x61, 0x7e, 0x94, 0xbc, 0x27,
    0x9e, 0x9b, 0x3b, 0x3d, 0xe9, 0x81, 0x2d, 0xbb, 0x42, 0xad, 0xbc, 0x0d, 0x28, 0x4d, 0xe3, 0x2d,
    0x3f, 0x40, 0x94, 0x59, 0x97, 0x06, 0x25, 0xce, 0xe2, 0xf8, 0x26, 0xcd, 0x26, 0x7b, 0x91, 0xf3,
    0x5b, 0xa1, 0x68, 0x0b, 0xe7, 0xa6, 0x89, 0x64, 0x2b, 0x8e, 0xe4, 0xc6, 0x38, 0x27, 0x19, 0xaf,
    0x66, 0xa1, 0x1c, 0xfc, 0x0a, 0x4e, 0x3f, 0x1d, 0x97, 0xb1, 0x13, 0x3a, 0x3d, 0xaf, 0x4a, 0x90,
    0xd7, 0xc2, 0xb9, 0x64, 0x60, 0x14, 0xaa, 0x73, 0x63, 0x6c, 0x59, 0x3a, 0xbe, 0x06, 0xa4, 0x85,
    0x20, 0xea, 0x78, 0x1b, 0xf1, 0x12, 0x18, 0xea, 0xed, 0xef, 0xa0, 0xbc, 0xe8, 0x03, 0xe7, 0xdf,
    0x75, 0xb4, 0x89, 0x11, 0xa3, 0xba, 0x4f, 0x52, 0x14, 0x85, 0xc5, 0x02, 0xc9, 0xee, 0x5d, 0xef,
    0xd3, 0x5a, 0x6d, 0xff, 0xab, 0x79, 0x9d, 0xd9, 0xb9, 0x38, 0x06, 0xae, 0xe0, 0x85, 0x5c, 0xfb,
    0x47, 0x26, 0xef, 0x38, 0xd2, 0x06, 0x91, 0xb1, 0xeb, 0x01, 0xe9, 0xc6, 0x09, 0xfc, 0x9d, 0x37,
    0x07, 0xb2, 0xf7, 0xdd, 0x71, 0xd9, 0x46, 0xf1, 0xbd, 0xb6, 0x5c, 0xa8, 0xd0, 0x96, 0x11, 0x38,
    0xaf, 0xe3, 0x05, 0x6f, 0x46, 0x4a, 0xba, 0x22, 0x11, 0x10, 0x22, 0xee, 0x64, 0x93, 0x3c, 0xd8,
    0x6d, 0x54, 0x70, 0xc4, 0xf2, 0xc0, 0xe5, 0x83, 0x68, 0x35, 0x93, 0xcb, 0x82, 0xd7, 0xb1, 0xc1,
    0xef, 0x90, 0x66, 0x0f, 0xf7, 0x07, 0xe1, 0x15, 0x3e, 0x83, 0x39, 0x1d, 0xd5, 0x58, 0x7d, 0x38,
    0x48, 0x58, 0x56, 0x97, 0xa0, 0x9f, 0x4b, 0x8c, 0x19, 0x18, 0x34, 0x68, 0xaf, 0x3c, 0x7d, 0x4c,
    0x2c, 0x55, 0x2a, 0xca, 0xcb, 0xd0, 0x57, 0xc6, 0x1a, 0x1c, 0xc9, 0xb8, 0x31, 0x9d, 0x62, 0x90,
    0x46, 0x3f, 0xb2, 0x49, 0xc6, 0x29, 0xfc, 0x0e, 0x1d, 0x68, 0x6b, 0x34, 0xc6, 0x4c, 0x7e, 0x28,
    0xd5, 0xcd, 0xbb, 0x7b, 0x1d, 0xd9, 0xd6, 0xc3, 0x57, 0xa0, 0x6d, 0x96, 0xeb, 0x35, 0x8a, 0x58,
    0xcc, 0x88, 0x98, 0x21, 0x01, 0x35, 0xb9, 0x55, 0xdd, 0x45, 0x43, 0xe0, 0xc1, 0xa3, 0x31, 0x4d,
    0x25, 0xe9, 0x7e, 0xdb, 0x80, 0x42, 0xb3, 0xf4, 0x07, 0x98, 0x4c, 0x8e, 0x98, 0xdc, 0xe3, 0xe5,
    0xff, 0x8b, 0x34, 0x42, 0x83, 0xd0, 0x23, 0xb0, 0xb9, 0xd3, 0x9e, 0xbc, 0x54, 0x22, 0x74, 0x04,
    0x97, 0x72, 0xca, 0x02, 0xd7, 0x29, 0x2a, 0x91, 0x7c, 0xb4, 0xc5, 0xdb, 0x87, 0x8b, 0x4c, 0x30,
    0x5c, 0x5c, 0x5f, 0x78, 0xaa, 0x54, 0xba, 0xe7, 0xdd, 0xe2, 0x6b, 0x35, 0xaf, 0xbe, 0x94, 0x81,
    0x4b, 0xa7, 0xeb, 0xb4, 0x9c, 0x46, 0x69, 0x80, 0x6c, 0xa8, 0xb5, 0xc6, 0x3b, 0x28, 0xbb, 0x69,
    0x85, 0xc3, 0x56, 0x36, 0x36, 0xf9, 0xe3, 0x8d, 0xa8, 0xde, 0xea, 0xa6, 0x1d, 0x03, 0x78, 0xcd,
    0x80, 0xf4, 0xce, 0x62, 0x7b, 0x94, 0x72, 0x10, 0x5d, 0xd8, 0x85, 0x1d, 0x18, 0x1f, 0x48, 0x1a,
    0x78, 0x86, 0x42, 0x02, 0x25, 0x13, 0x59, 0x65, 0x97, 0xb4, 0x2e, 0xaa, 0x2b, 0xda, 0x46, 0x81,
    0x67, 0x58, 0x1a, 0xcd, 0xc8, 0xa8, 0xfb, 0x16, 0x0a, 0x3a, 0x57, 0x97, 0x39, 0x61, 0x7d, 0x23,
    0x27, 0xf2, 0x66, 0x55, 0x63, 0xbd, 0xcc, 0xf6, 0xd9, 0xcd, 0xa2, 0xf3, 0x9a, 0x60, 0xb6, 0x6c,
    0xd3, 0xcc, 0xc3, 0xfd, 0x1a, 0xde, 0x46, 0x86, 0x9e, 0xd2, 0x97, 0x23, 0x6a, 0xdc, 0xc2, 0xf9,
    0xf2, 0xfd, 0x87, 0xd2, 0x5d, 0xbb, 0x0d, 0xa9, 0x9b, 0x96, 0x10, 0xba, 0x73, 0x09, 0xb9, 0x0d,
    0xf9, 0x39, 0x4a, 0x4f, 0x8e, 0xf1, 0xc0, 0x44, 0xb7, 0x58, 0xbd, 0xfd, 0x39, 0xdd, 0x6c, 0x85,
    0xb6, 0xf8, 0xe3, 0x89, 0x52, 0x3b, 0x57, 0x92, 0x5f, 0x0b, 0x5c, 0xb1, 0xed, 0x94, 0xcf, 0x2d,
    0xed, 0xe7, 0xe8, 0x27, 0xd5, 0xe4, 0x5a, 0xf3, 0x04, 0x1a, 0x50, 0xc2, 0x78, 0xd9, 0xbe, 0x0c,
    0x47, 0xd6, 0x31, 0x00, 0x4c, 0xc6, 0x75, 0x62, 0x4c, 0x65, 0xcf, 0x4b, 0xd2, 0x59, 0x76, 0x40,
    0x56, 0xa7, 0x9c, 0xa8, 0x7c, 0x8e, 0xe4, 0x07, 0x75, 0x99, 0x3d, 0x75, 0xde, 0x05, 0x70, 0xcf,
    0xeb, 0x4e, 0x4a, 0xdb, 0x13, 0xdd, 0x0f, 0x8a, 0xff, 0xa7, 0x0d, 0xe0, 0x28, 0xc1, 0xc4, 0x32,
    0x4b, 0x78, 0x63, 0x95, 0x09, 0xd5, 0x2c, 0x5f, 0xd6, 0x1d, 0x29, 0x44, 0x71, 0x2f, 0x11, 0x1a,
    0xec, 0xbe, 0xc6, 0x88, 0xa0, 0x56, 0x4f, 0xaf, 0x48, 0xfe, 0x74, 0x63, 0x61, 0xe0, 0xa6, 0xe6,
    0xe0, 0xe4, 0xa3, 0xb3, 0xef, 0x44, 0x08, 0x9d, 0xf1, 0x05, 0x54, 0x48, 0x6b, 0x56, 0xec, 0xb1,
    0xbe, 0xf6, 0xb4, 0xdd, 0xf7, 0x33, 0x92, 0xf2, 0x4b, 0xc5, 0x2e, 0xe7, 0x82, 0x1f, 0x4b, 0xc6,
    0xdd, 0x0b, 0xed, 0xe4, 0x5f, 0xde, 0x2e, 0x85, 0x4e, 0x20, 0x6d, 0xca, 0x04, 0xdc, 0x2c, 0x83,
    0x1e, 0x61, 0xeb, 0xe6, 0x23, 0xfc, 0x5e, 0x9b, 0xb3, 0x15, 0x83, 0xd2, 0xd0, 0xeb, 0x0b, 0x2f,
    0x4f, 0xce, 0xc7, 0xb7, 0xfa, 0x47, 0x05, 0x56, 0x69, 0x8b, 0xaf, 0xd9, 0x30, 0xb3, 0x75, 0xeb,
    0xe6, 0xae, 0x19, 0x90, 0xec, 0x0f, 0x35, 0x5f, 0xd8, 0x1b, 0xd5, 0xd3, 0xe7, 0xbe, 0x9a, 0x63,
    0xb8, 0xe4, 0x5e, 0x07, 0xde, 0x65, 0x93, 0x24, 0x88, 0xd1, 0xfc, 0x6e, 0xad, 0xc8, 0x57, 0xab,
    0x82, 0x13, 0x53, 0x6e, 0x4a, 0x37, 0xce, 0x7d, 0x38, 0xd3, 0x95, 0x12, 0xbb, 0xfa, 0xc4, 0x14,
    0x40, 0xb6, 0x26, 0x33, 0x7e, 0x85, 0x1f, 0xfe, 0x79, 0x7a, 0x91, 0xcf, 0x6c, 0x21, 0x7c, 0x0e,
    0x7e, 0xdc, 0xf9, 0x7e, 0x6c, 0x2b, 0x47, 0x8a, 0x03, 0x5f, 0x93, 0x64, 0x95, 0x43, 0xdc, 0x58,
    0x0d, 0x54, 0x7a, 0xec, 0x1a, 0x5b, 0x1c, 0xe5, 0x37, 0x6b, 0x44, 0xe1, 0xa8, 0xec, 0x8c, 0x79,
};

static const uint8_t sMessageEncodingTest0538_ExpectedEncoding[] =
{
    0x30, 0x23, 0x0b, 0x38, 0x4f, 0xaa, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x78, 0x24, 0x43, 0x98, 0x2a, 0x91, 0x85, 0xde, 0x1c, 0x02,
    0x82, 0xaa, 0xaa, 0x78, 0x82, 0x58, 0xb6, 0xf2, 0x70, 0x8b, 0xca, 0x44, 0x24, 0x51, 0x4a, 0xdc,
    0xa9, 0x10, 0x5a, 0x42, 0x0a, 0xef, 0x9a, 0xef, 0x4b, 0xbd, 0xf2, 0x08, 0x31, 0x3c, 0x5d, 0xc7,
    0x9d, 0x73, 0xde, 0xef, 0xd8, 0x30, 0x50, 0x44, 0x82, 0x05, 0x90, 0x80, 0x17, 0xb9, 0xfc, 0x31,
    0x82, 0xdd, 0x8a, 0x4d, 0x93, 0xf2, 0xe2, 0x1b, 0x63, 0x35, 0xf2, 0x3a, 0xc9, 0x8f, 0xd6, 0x4c,
    0xad, 0x6f, 0x7c, 0x9d, 0x3e, 0x61, 0x77, 0x7c, 0x55, 0x07, 0x16, 0x40, 0x08, 0x0b, 0xba, 0xae,
    0x19, 0x08, 0x6d, 0x16, 0x24, 0xe4, 0x91, 0xdf, 0x64, 0x8b, 0x33, 0xca, 0x73, 0xcb, 0x85, 0x00,
    0x61, 0xc6, 0xc0, 0x30, 0xa0, 0x20, 0xc6, 0xc7, 0x32, 0xde, 0x12, 0xbb, 0x0c, 0x32, 0x69, 0x57,
    0x4c, 0xd6, 0x3f, 0x56, 0x34, 0x23, 0xe2, 0xf8, 0x8e, 0x2e, 0xde, 0x4a, 0x21, 0x4d, 0x11, 0xdd,
    0x36, 0x0c, 0x85, 0x12, 0xd8, 0x45, 0x14, 0xd1, 0xc0, 0xa4, 0x90, 0xd2, 0xf3, 0xc9, 0x35, 0x8d,
    0x5d, 0x9d, 0x74, 0xee, 0x7f, 0xa9, 0x73, 0x50, 0x95, 0x06, 0x25, 0xc4, 0xb2, 0xaf, 0xa7, 0x3f,
    0x02, 0x27, 0xc9, 0xb5, 0x86, 0x46, 0xe6, 0x89, 0x60, 0x8d, 0xab, 0xd2, 0xdd, 0x7e, 0xa0, 0x61,
    0x47, 0xde, 0xa7, 0x09, 0x0c, 0x5a, 0xce, 0x18, 0xa8, 0x66, 0xf6, 0x87, 0xce, 0xb0, 0xdb, 0xd3,
    0xaf, 0x39, 0x86, 0xc6, 0xde, 0x88, 0x07, 0xcf, 0x61, 0xf3, 0x46, 0x87, 0xc9, 0x0a, 0xdf, 0x23,
    0x1e, 0xa2, 0x7f, 0x90, 0x76, 0x4b, 0x87, 0x05, 0xd3, 0x35, 0x60, 0x9d, 0xb6, 0x7b, 0xf4, 0x37,
    0xb6, 0x13, 0x17, 0xb6, 0xba, 0x89, 0x0a, 0x7f, 0xf9, 0x62, 0x8f, 0x7d, 0xa9, 0xc5, 0xba, 0xdd,
    0x73, 0xf4, 0x6c, 0xc8, 0x16, 0xd1, 0x8a, 0x08, 0x50, 0x02, 0xd0, 0x55, 0x7d, 0x19, 0x5d, 0x94,
    0xb4, 0xd3, 0xc0, 0xae, 0xab, 0xb7, 0xc1, 0x6e, 0xbd, 0xdd, 0x91, 0x32, 0xac, 0xd8, 0x8d, 0xc1,
    0x14, 0xff, 0x16, 0x93, 0xd8, 0x09, 0x3d, 0x13, 0x35, 0xb3, 0x2f, 0xd5, 0x19, 0x07, 0x33, 0x21,
    0x82, 0x61, 0x36, 0xe7, 0x5e, 0x3b, 0x18, 0x46, 0xee, 0x86, 0x80, 0xb9, 0xbe, 0x4b, 0x42, 0x3d,
    0xe8, 0x6a, 0x5c, 0xc9, 0x6b, 0x3c, 0x00, 0xd8, 0x4c, 0x6f, 0x5e, 0x4a, 0x80, 0x55, 0x8f, 0x44,
    0x36, 0x21, 0xc4, 0x5b, 0x83, 0x9a, 0xa9, 0xa5, 0x0a, 0xdb, 0x1c, 0x82, 0xcd, 0x7b, 0x62, 0xd4,
    0xd8, 0xf2, 0x5a, 0x3a, 0xad, 0x7d, 0x9a, 0xcb, 0xd8, 0xf4, 0x67, 0x34, 0x47, 0xf6, 0x39, 0x55,
    0x70, 0x77, 0x04, 0x1c, 0xd5, 0xad, 0x2b, 0x3e, 0x4d, 0x7a, 0xbb, 0x7d, 0x6e, 0xab, 0x75, 0x8a,
    0x93, 0x4b, 0x24, 0x99, 0xa5, 0x5a, 0x84, 0xee, 0x55, 0x57, 0xf1, 0xbf, 0xa3, 0x74, 0xc7, 0x80,
    0xe7, 0xbc, 0x30, 0x91, 0x69, 0x67, 0x64, 0x22, 0x74, 0x13, 0x03, 0x6d, 0x8a, 0xe0, 0x30, 0x7b,
    0xe4, 0x79, 0xd7, 0xc3, 0xd1, 0x2c, 0x67, 0x5d, 0x9c, 0x47, 0xf1, 0xec, 0x1a, 0x51, 0x7c, 0x8d,
    0x2c, 0x06, 0xe8, 0x7e, 0x05, 0x0b, 0x5e, 0xa5, 0xcf, 0x9a, 0x8d, 0xaa, 0x0a, 0x78, 0xd2, 0x46,
    0x82, 0x84, 0x59, 0x40, 0xf9, 0xc3, 0x1a, 0x83, 0xfe, 0x0d, 0x08, 0x57, 0x22, 0xd4, 0x7c, 0x6d,
    0x8f, 0x8a, 0x57, 0x7a, 0x05, 0x90, 0x68, 0xce, 0xdc, 0x6d, 0x41, 0x4b, 0xf3, 0x93, 0x89, 0xc3,
    0xa2, 0x35, 0x58, 0xc6, 0xdf, 0x5f, 0x54, 0xc1, 0xf7, 0xc5, 0xa5, 0xcb, 0xa8, 0x99, 0x9d, 0xc8,
    0xf3, 0x61, 0x35, 0x9c, 0xac, 0xae, 0xa6, 0xeb, 0xc4, 0xe2, 0xfe, 0x02, 0xca, 0xeb, 0x18, 0x56,
    0xbf, 0xba, 0x0c, 0xab, 0x5d, 0x64, 0x3a, 0x4d, 0xa3, 0x4e, 0xfa, 0x43, 0x0c, 0xc4, 0x3c, 0x90,
    0xb6, 0xb4, 0x83, 0x7a, 0xb6, 0xd6, 0x59, 0x20, 0xd6, 0xf8, 0x07, 0xb7, 0xae, 0xa6, 0xb5, 0x47,
    0xe5, 0x10, 0xa1, 0x22, 0xb6, 0xa4, 0xb2, 0x67, 0xa0, 0xa1, 0x58, 0xc2, 0xa3, 0x36, 0xa9, 0x44,
    0x7b, 0x0d, 0x0b, 0x24, 0xec, 0x41, 0x5a, 0x19, 0xa9, 0x53, 0xff, 0x25, 0x25, 0xda, 0xb4, 0x7d,
    0x77, 0x68, 0xa4, 0x33, 0xdb, 0x72, 0x95, 0x6b, 0x6c, 0xb7, 0x24, 0xad, 0xed, 0x8d, 0xbd, 0xef,
    0x0f, 0x58, 0x02, 0xa4, 0x59, 0x01, 0xd4, 0xc5, 0x4a, 0xb3, 0x12, 0xbe, 0x4a, 0xd1, 0x1f, 0xef,
    0x48, 0x93, 0x28, 0x55, 0xf8, 0xdb, 0xe5, 0xb1, 0x44, 0x66, 0x87, 0xaa, 0x2a, 0x81, 0x1b, 0x1e,
    0x35, 0x2e, 0x1f, 0x40, 0x27, 0x0e, 0xbc, 0x60, 0x43, 0x51, 0xaf, 0x00, 0xf6, 0xd4, 0xd9, 0x14,
    0x50, 0x27, 0xa2, 0xf9, 0x10, 0x8b, 0xad, 0xcd, 0xbf, 0x97, 0x0a, 0x8c, 0xa8, 0xd1, 0x2f, 0xb6,
    0x59, 0xb0, 0x4c, 0x04, 0xc6, 0x4b, 0x27, 0x1d, 0xe4, 0x6d, 0xb3, 0x05, 0x38, 0x1e, 0xa3, 0xb9,
    0x24, 0x8a, 0x98, 0x15, 0x6d, 0xd3, 0xe7, 0x37, 0x36, 0x46, 0x9e, 0x4e, 0x1f, 0x64, 0x52, 0xf7,
    0x44, 0x17, 0xe1, 0x3e, 0xbb, 0xff, 0x09, 0x6d, 0x4c, 0xf1, 0xb4, 0xbe, 0xee, 0xab, 0x56, 0x67,
    0xe7, 0x64, 0xf6, 0xf2, 0xc1, 0x07, 0xc5, 0x76, 0x72, 0x21, 0x41, 0xb5, 0xee, 0x47, 0xe5, 0x58,
    0x7e, 0xa2, 0x33, 0x68, 0xe0, 0xc4, 0x85, 0xe8, 0x00, 0xbe, 0x5c, 0xfb, 0x2d, 0x84, 0xd0, 0xf5,
    0x86, 0xb4, 0xf3, 0xdd, 0xd3, 0x2f, 0xb0, 0xfd, 0xa4, 0x3d, 0xb7, 0xdd, 0x2f, 0x31, 0x0d, 0x35,
    0x28, 0xdc, 0x15, 0xdc, 0x57, 0x1b, 0xc0, 0xc5, 0x4c, 0x9b, 0x9a, 0x16, 0xc3, 0xdf, 0x56, 0x2a,
    0x7d, 0xd7, 0x99, 0xfe, 0x32, 0x97, 0x51, 0xae, 0xc1, 0x89, 0xe7, 0x6f, 0x12, 0x25, 0xcd, 0x4c,
    0xba, 0xd3, 0x18, 0x72, 0x06, 0xc0, 0x75, 0x9b, 0xc7, 0x8d, 0x83, 0xe3, 0x45, 0x88, 0x5b, 0x70,
    0xbd, 0x76, 0xc2, 0x1a, 0x7a, 0x11, 0x56, 0x18, 0xe4, 0xf0, 0x94, 0x4d, 0x06, 0xcd, 0x64, 0x5d,
    0xa8, 0xf3, 0x02, 0xc4, 0xbe, 0x01, 0xdc, 0xb3, 0x70, 0x97, 0xbc, 0xb6, 0x16, 0x57, 0x96, 0x8b,
    0x6a, 0xeb, 0x24, 0x81, 0xfb, 0x80, 0xb3, 0x79, 0x6e, 0x66, 0x4b, 0x6c, 0x6b, 0x9a, 0x47, 0xe6,
    0x3d, 0x14, 0x3a, 0x46, 0x9d, 0x4f, 0x23, 0x42, 0xbd, 0x40, 0xf2, 0x87, 0x63, 0xa6, 0x91, 0x2e,
    0xb5, 0x14, 0xa5, 0x70, 0xa2, 0x6b, 0x4c, 0x12, 0x70, 0x3c, 0xab, 0x93, 0x43, 0x56, 0x46, 0xbe,
    0x6a, 0xff, 0xe5, 0x82, 0xe4, 0x76, 0x33, 0x0c, 0x0a, 0xa3, 0x3f, 0xae, 0x2c, 0xc9, 0x37, 0x37,
    0xe9, 0xc7, 0x1d, 0x86, 0xe7, 0x89, 0x2a, 0x22, 0xab, 0xf7, 0xb8, 0xef, 0xa0, 0x60, 0x73, 0xc1,
    0x44, 0xb2, 0xd0, 0x65, 0xf8, 0x2c, 0xb3, 0xb0, 0x2f, 0xfd, 0xfc, 0x46, 0xf5, 0x7b, 0x44, 0xeb,
    0x1d, 0xe7, 0xf6, 0x02, 0xf6, 0x8f, 0x4f, 0x1c, 0x68, 0x97, 0x05, 0x13, 0x73, 0xbb, 0x49, 0x68,
    0xcd, 0x8c, 0xd7, 0xbd, 0x29, 0xfc, 0x9b, 0xc2, 0x04, 0x8a, 0x17, 0x82, 0xea, 0xbb, 0x86, 0x10,
    0x55, 0xaf, 0x9f, 0xfd, 0x41, 0xac, 0xde, 0x3c, 0xdb, 0x10, 0x7d, 0x13, 0x04, 0x94, 0x19, 0x39,
    0x8f, 0x81, 0x47, 0x6f, 0xfd, 0xbe, 0x22, 0xc7, 0x26, 0x03, 0x45, 0x29, 0x1a, 0x57, 0xf1, 0x83,
    0xa6, 0xe8, 0xca, 0xc2, 0x85, 0xa9, 0x19, 0x56, 0x4e, 0x7f, 0xc9, 0xd5, 0x47, 0x72, 0x22, 0xf4,
    0x95, 0xcc, 0xd4, 0x0a, 0x6e, 0xe1, 0x77, 0x06, 0x7c, 0x21, 0xe9, 0xcf, 0x5c, 0xfc, 0x6a, 0x9a,
    0x2d, 0xfe, 0x63, 0xf9, 0x55, 0x45, 0x7d, 0x82, 0x77, 0xa9, 0x75, 0xba, 0xb3, 0xdf, 0x93, 0xc2,
    0xc4, 0x12, 0x17, 0x5d, 0x9a, 0xeb, 0xda, 0x9b,
};

static const MessageEncodingTestVector sMessageEncodingTest0538 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAA4F380B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_SourceNodeId,
        0x2478,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0538_EncryptionKey,
    sMessageEncodingTest0538_Payload,
    sizeof(sMessageEncodingTest0538_Payload),
    sMessageEncodingTest0538_ExpectedEncoding,
    sizeof(sMessageEncodingTest0538_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0539_Payload[] =
{
    0xe5, 0x7e, 0x86, 0x7b, 0x66, 0x3c, 0x14, 0x01, 0xab, 0xa3, 0x72, 0x1d, 0x9a, 0xfa, 0x95, 0x96,
    0x76, 0xa7, 0x1b, 0x1d, 0xf2, 0xfe, 0xe1, 0x47, 0x9b, 0x4f, 0xad, 0x6c, 0x59, 0x50, 0x69, 0x42,
    0xaf, 0xb5, 0x3a, 0x7c, 0x40, 0xff, 0x70, 0xd6, 0xdb, 0x26, 0x93, 0xfe, 0xcf, 0xa8, 0x1b, 0x76,
    0xc1, 0x50, 0x59, 0xdc, 0x17, 0xd4, 0xef, 0xbd, 0x3a, 0x6e, 0xd1, 0x76, 0x7e, 0x0f, 0xad, 0xb9,
    0x42, 0x59, 0x8a, 0x07, 0xa5, 0x05, 0xed, 0x23, 0x60, 0xa4, 0xba, 0xe9, 0x02, 0xfb, 0xcb, 0xb8,
    0x1b, 0x25, 0x06, 0xb7, 0x7d, 0xa3, 0x14, 0xb1, 0x36, 0xe5, 0x1b, 0x5d, 0xeb, 0x19, 0x84, 0xb5,
    0x26, 0xdd, 0x12, 0x2f, 0x72, 0x3a, 0x56, 0x63, 0xb2, 0xfd, 0x2d, 0xd5, 0x05, 0xbb, 0xc9, 0xef,
    0xef, 0x1b, 0x7f, 0x8d, 0x2a, 0x45, 0x98, 0x86, 0x43, 0xbe, 0x42, 0x6d, 0x30, 0x4a, 0x5b, 0x57,
    0x6b, 0x45, 0x87, 0x1d, 0x45, 0x89, 0x26, 0x05, 0x67, 0x7d, 0x10, 0x14, 0x2a, 0x5c, 0xf1, 0x7e,
    0x14, 0x6f, 0x37, 0x32, 0x10, 0x4d, 0x01, 0x71, 0xdf, 0x5c, 0x95, 0x03, 0x2a, 0x7d, 0x51, 0xb7,
    0xc8, 0xa2, 0x6c, 0xfe, 0x9f, 0xad, 0xc9, 0xbe, 0xae, 0x0f, 0xb0, 0x67, 0x63, 0x24, 0x7b, 0x78,
    0xb8, 0x16, 0xf4, 0xd5, 0xe6, 0x9a, 0x47, 0x1a, 0xef, 0x3c, 0x91, 0x3b, 0x58, 0xde, 0x72, 0x08,
    0x3d, 0x6e, 0xab, 0xe3, 0x5f, 0x07, 0x33, 0xa0, 0x22, 0x3b, 0xb0, 0x40, 0x1d, 0xd9, 0x87, 0x48,
    0xf4, 0xf9, 0x5d, 0x75, 0x95, 0xd4, 0x8f, 0xcb, 0x91, 0x09, 0xf9, 0x72, 0x0e, 0xfb, 0x8b, 0x51,
    0x8b, 0xcb, 0x81, 0x5e, 0xc1, 0xa7, 0x64, 0x7b, 0x03, 0xd0, 0x48, 0xb6, 0xba, 0x7f, 0x00, 0x35,
    0x9c, 0xb6, 0xc3, 0xc2, 0x21, 0x9f, 0x72, 0x7e, 0x9e, 0xe2, 0x9f, 0x97, 0x50, 0x87, 0xc2, 0x11,
    0xb5, 0x86, 0x54, 0xbc, 0xd3, 0x28, 0x01, 0xb4, 0x75, 0x73, 0x4d, 0x29, 0xf5, 0x92, 0xbe, 0x52,
    0x07, 0x36, 0xdb, 0x8f, 0x39, 0x05, 0x3b, 0xa9, 0x1c, 0x19, 0x3d, 0x27, 0x65, 0x69, 0xcd, 0xf8,
    0xfd, 0xc0, 0x81, 0x4a, 0x80, 0x2e, 0xb9, 0x98, 0x15, 0xe6, 0x47, 0x9c, 0xe8, 0x3e, 0x6a, 0xfb,
    0xfa, 0x84, 0x8c, 0xb4, 0x60, 0x51, 0x3d, 0xea, 0x19, 0x07, 0xb5, 0xa1, 0xcb, 0xd6, 0xce, 0x85,
    0x2a, 0x96, 0x8f, 0x2d, 0x95, 0x98, 0xc3, 0x81, 0x8e, 0x68, 0xbe, 0x0b, 0xbb, 0x05, 0xff, 0xea,
    0xbd, 0x16, 0x21, 0x37, 0xb8, 0xa2, 0x97, 0x6d, 0x5b, 0xa0, 0x45, 0x46, 0x0d, 0xf0, 0xee, 0x6a,
    0x57, 0x4b, 0x64, 0xf5, 0xe2, 0x67, 0x63, 0x60, 0x55, 0x3b, 0xfd, 0x38, 0x09, 0x0e, 0xb0, 0x6c,
    0x4c, 0x18, 0x00, 0xf2, 0xbe, 0x75, 0x8d, 0x61, 0x58, 0x28, 0x13, 0xd1, 0x87, 0x4f, 0x30, 0x1f,
    0x4c, 0xfb, 0xd7, 0xc7, 0xd7, 0xf8, 0x6e, 0x38, 0x12, 0x2c, 0x2a, 0x4d, 0x77, 0xa9, 0x1b, 0xeb,
    0x75, 0x95, 0x69, 0x8f, 0x6a, 0x8f, 0x64, 0x36, 0x4a, 0x67, 0x8f, 0xd5, 0x72, 0xbb, 0x8d, 0x62,
    0x72, 0x42, 0x79, 0x5f, 0xe1, 0x10, 0x8a, 0x61, 0x17, 0x5a, 0xef, 0x0e, 0x1b, 0xee, 0x98, 0x87,
    0x9e, 0xf5, 0x98, 0x68, 0x2f, 0xd2, 0xca, 0xf2, 0x01, 0xf0, 0x6d, 0x34, 0x74, 0xfa, 0x20, 0x99,
    0x7c, 0xeb, 0xe0, 0xe9, 0x61, 0x7a, 0xac, 0x97, 0x25, 0xd0, 0x34, 0xce, 0x8d, 0x65, 0x98, 0x1c,
    0xb6, 0x9d, 0x4a, 0x63, 0xb3, 0xa2, 0x20, 0x23, 0x07, 0x41, 0x82, 0xd0, 0x8f, 0xcb, 0xbe, 0x7f,
    0xbe, 0x62, 0x03, 0xf9, 0x84, 0x58, 0xe4, 0xee, 0x31, 0x75, 0xb5, 0x94, 0xc6, 0x74, 0x1f, 0x18,
    0x45, 0x15, 0x0a, 0xab, 0x9f, 0x71, 0x6f, 0x96, 0x0e, 0x6b, 0x5e, 0x75, 0xdd, 0xf6, 0x89, 0x7d,
    0x50, 0xb6, 0x24, 0x8b, 0x6b, 0x3f, 0x35, 0xbf, 0xfc, 0xcf, 0x39, 0x50, 0x81, 0x09, 0x5d, 0x1f,
    0x69, 0xc8, 0x38, 0x32, 0x50, 0x37, 0xf3, 0xda, 0x91, 0xd1, 0xb1, 0xbb, 0xa8, 0xb8, 0xab, 0xc9,
    0xa0, 0x63, 0x35, 0x36, 0xdc, 0x62, 0xd2, 0x1d, 0x21, 0xdf, 0x82, 0x60, 0x17, 0xd8, 0x32, 0x96,
    0x5a, 0x0c, 0x43, 0x04, 0xf6, 0x8d, 0xe2, 0x59, 0x88, 0xf7, 0xf3, 0xfa, 0x7d, 0x7e, 0x1d, 0xf9,
    0xe4, 0xe6, 0xd7, 0x9d, 0xd2, 0x1f, 0x98, 0xd1, 0x66, 0xdf, 0xaa, 0xca, 0xc6, 0x05, 0x50, 0x4c,
    0x15, 0xd7, 0x83, 0x59, 0x6b, 0x81, 0x88, 0xa7, 0xdb, 0x5b, 0x42, 0x23, 0x4f, 0x76, 0xd5, 0x86,
    0x26, 0x22, 0x40, 0xca, 0xb6, 0x3f, 0xfa, 0x18, 0x14, 0x5c, 0x95, 0x68, 0x23, 0x82, 0x44, 0xc6,
    0x75, 0xe9, 0x00, 0xc5, 0xf6, 0x5a, 0xb8, 0x74, 0x13, 0x5b, 0xca, 0x4c, 0x9b, 0xb7, 0xbd, 0xc3,
    0x2f, 0x71, 0xa0, 0x28, 0xe3, 0x87, 0x13, 0x24, 0x88, 0x2f, 0xc7, 0xc7, 0x2e, 0x15, 0xde, 0xe0,
    0x74, 0x01, 0x96, 0x11, 0xc5, 0xa4, 0x8d, 0x2f, 0x0a, 0x6e, 0xda, 0x41, 0x3f, 0x28, 0x08, 0x5d,
    0x96, 0x7c, 0xe7, 0x55, 0xe1, 0x9d, 0x15, 0x70, 0xf0, 0xd9, 0x70, 0x8b, 0x99, 0xd7, 0x05, 0x50,
    0xec, 0x1f, 0x55, 0xa0, 0x53, 0x9a, 0x0a, 0x81, 0x22, 0x84, 0xd2, 0x5e, 0xc7, 0xdc, 0x58, 0xb8,
    0xc7, 0x5c, 0xe7, 0xe1, 0x27, 0x92, 0x53, 0xfd, 0x81, 0x98, 0x90, 0x15, 0x89, 0x46, 0x68, 0x1b,
    0x84, 0x45, 0x80, 0x7b, 0x23, 0xf6, 0x40, 0xa8, 0xfc, 0xbc, 0x8c, 0xb0, 0x9a, 0xcf, 0x33, 0x24,
    0x0f, 0xa2, 0x25, 0xe3, 0x0b, 0xf1, 0x25, 0x83, 0xae, 0x14, 0x7a, 0xa5, 0x16, 0x1a, 0x36, 0xee,
    0x13, 0x53, 0xd4, 0x14, 0x70, 0xc9, 0xa9, 0xbd, 0x1e, 0x87, 0x79, 0x27, 0xd2, 0xf1, 0x31, 0x18,
    0x7c, 0xa9, 0xf5, 0x43, 0x40, 0x2e, 0x12, 0x05, 0xe7, 0x82, 0xae, 0x18, 0x7b, 0xf4, 0x51, 0xe9,
    0x81, 0x9c, 0xe3, 0x17, 0x1c, 0xd9, 0x6b, 0xd5, 0x23, 0x44, 0xb1, 0x92, 0xe1, 0x89, 0x68, 0x5b,
    0x90, 0x52, 0x9d, 0x58, 0x79, 0x36, 0x23, 0xeb, 0xf3, 0xed, 0x5c, 0xca, 0x86, 0x38, 0x50, 0xac,
    0xbe, 0xcc, 0x75, 0xae, 0x2b, 0x46, 0xaa, 0xe5, 0x9c, 0x77, 0xd5, 0xf8, 0xa6, 0x01, 0x78, 0xb5,
    0x3b, 0x7d, 0x51, 0x70, 0x2d, 0x47, 0x6e, 0xdd, 0x39, 0x8a, 0x51, 0xce, 0x92, 0x25, 0x66, 0x4d,
    0x4b, 0x02, 0xcd, 0xe9, 0xde, 0xea, 0x9e, 0x92, 0xbd, 0xb9, 0x63, 0x2b, 0x09, 0xe7, 0x4f, 0x67,
    0x93, 0x31, 0x08, 0xca, 0x3e, 0xc0, 0x88, 0x4a, 0x33, 0xe1, 0xb7, 0x5d, 0xd4, 0x42, 0x3d, 0x14,
    0x1c, 0x67, 0xbd, 0x69, 0x29, 0x5b, 0xb7, 0xe9, 0x70, 0x9f, 0x5b, 0x46, 0xd7, 0x86, 0x9e, 0x80,
    0xb9, 0x1c, 0xe2, 0x18, 0x39, 0xc0, 0xab, 0xf5, 0xe7, 0x7b, 0xce, 0xa9, 0x34, 0xc6, 0xcd, 0x89,
    0xf1, 0x5e, 0xcc, 0x93, 0xee, 0x2a, 0x51, 0xa6, 0xeb, 0x79, 0x9e, 0xab, 0xc5, 0xb9, 0x73, 0x8e,
    0xa9, 0x8f, 0xcf, 0xf1, 0xc3, 0xeb, 0xa6, 0x19, 0x0e, 0x7e, 0xc6, 0xa9, 0x9b, 0xbf, 0x44, 0x52,
    0xc9, 0xee, 0x03, 0x5d, 0x15, 0xad, 0xa7, 0xae, 0x6b, 0x5d, 0x31, 0xd0, 0x0a, 0x5f, 0xaf, 0xc0,
    0x73, 0x4b, 0x7d, 0x43, 0x66, 0xf5, 0xff, 0x4e, 0x4b, 0xb8, 0xf4, 0x79, 0x46, 0xd9, 0xfc, 0xee,
    0x56, 0xa8, 0xc9, 0x1a, 0xe6, 0xe9, 0xf4, 0x0e, 0xe8, 0x8e, 0x0b, 0xb5, 0x40, 0x6b, 0x48, 0x2e,
    0x09, 0x74, 0x3b, 0x19, 0x55, 0xbd, 0xda, 0xd6, 0x4f, 0x5a, 0x1c, 0xc0, 0xc9, 0x3e, 0x85, 0x61,
    0xc8, 0x32, 0xdd, 0x00, 0x0b, 0x6a, 0x48, 0x8c, 0x9e, 0x45, 0x2d, 0x6c, 0x62, 0x80, 0x43, 0x7c,
};

static const uint8_t sMessageEncodingTest0539_ExpectedEncoding[] =
{
    0x00, 0x25, 0x28, 0xea, 0x93, 0x76, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe5, 0x7e,
    0x86, 0x7b, 0x66, 0x3c, 0x14, 0x01, 0xab, 0xa3, 0x72, 0x1d, 0x9a, 0xfa, 0x95, 0x96, 0x76, 0xa7,
    0x1b, 0x1d, 0xf2, 0xfe, 0xe1, 0x47, 0x9b, 0x4f, 0xad, 0x6c, 0x59, 0x50, 0x69, 0x42, 0xaf, 0xb5,
    0x3a, 0x7c, 0x40, 0xff, 0x70, 0xd6, 0xdb, 0x26, 0x93, 0xfe, 0xcf, 0xa8, 0x1b, 0x76, 0xc1, 0x50,
    0x59, 0xdc, 0x17, 0xd4, 0xef, 0xbd, 0x3a, 0x6e, 0xd1, 0x76, 0x7e, 0x0f, 0xad, 0xb9, 0x42, 0x59,
    0x8a, 0x07, 0xa5, 0x05, 0xed, 0x23, 0x60, 0xa4, 0xba, 0xe9, 0x02, 0xfb, 0xcb, 0xb8, 0x1b, 0x25,
    0x06, 0xb7, 0x7d, 0xa3, 0x14, 0xb1, 0x36, 0xe5, 0x1b, 0x5d, 0xeb, 0x19, 0x84, 0xb5, 0x26, 0xdd,
    0x12, 0x2f, 0x72, 0x3a, 0x56, 0x63, 0xb2, 0xfd, 0x2d, 0xd5, 0x05, 0xbb, 0xc9, 0xef, 0xef, 0x1b,
    0x7f, 0x8d, 0x2a, 0x45, 0x98, 0x86, 0x43, 0xbe, 0x42, 0x6d, 0x30, 0x4a, 0x5b, 0x57, 0x6b, 0x45,
    0x87, 0x1d, 0x45, 0x89, 0x26, 0x05, 0x67, 0x7d, 0x10, 0x14, 0x2a, 0x5c, 0xf1, 0x7e, 0x14, 0x6f,
    0x37, 0x32, 0x10, 0x4d, 0x01, 0x71, 0xdf, 0x5c, 0x95, 0x03, 0x2a, 0x7d, 0x51, 0xb7, 0xc8, 0xa2,
    0x6c, 0xfe, 0x9f, 0xad, 0xc9, 0xbe, 0xae, 0x0f, 0xb0, 0x67, 0x63, 0x24, 0x7b, 0x78, 0xb8, 0x16,
    0xf4, 0xd5, 0xe6, 0x9a, 0x47, 0x1a, 0xef, 0x3c, 0x91, 0x3b, 0x58, 0xde, 0x72, 0x08, 0x3d, 0x6e,
    0xab, 0xe3, 0x5f, 0x07, 0x33, 0xa0, 0x22, 0x3b, 0xb0, 0x40, 0x1d, 0xd9, 0x87, 0x48, 0xf4, 0xf9,
    0x5d, 0x75, 0x95, 0xd4, 0x8f, 0xcb, 0x91, 0x09, 0xf9, 0x72, 0x0e, 0xfb, 0x8b, 0x51, 0x8b, 0xcb,
    0x81, 0x5e, 0xc1, 0xa7, 0x64, 0x7b, 0x03, 0xd0, 0x48, 0xb6, 0xba, 0x7f, 0x00, 0x35, 0x9c, 0xb6,
    0xc3, 0xc2, 0x21, 0x9f, 0x72, 0x7e, 0x9e, 0xe2, 0x9f, 0x97, 0x50, 0x87, 0xc2, 0x11, 0xb5, 0x86,
    0x54, 0xbc, 0xd3, 0x28, 0x01, 0xb4, 0x75, 0x73, 0x4d, 0x29, 0xf5, 0x92, 0xbe, 0x52, 0x07, 0x36,
    0xdb, 0x8f, 0x39, 0x05, 0x3b, 0xa9, 0x1c, 0x19, 0x3d, 0x27, 0x65, 0x69, 0xcd, 0xf8, 0xfd, 0xc0,
    0x81, 0x4a, 0x80, 0x2e, 0xb9, 0x98, 0x15, 0xe6, 0x47, 0x9c, 0xe8, 0x3e, 0x6a, 0xfb, 0xfa, 0x84,
    0x8c, 0xb4, 0x60, 0x51, 0x3d, 0xea, 0x19, 0x07, 0xb5, 0xa1, 0xcb, 0xd6, 0xce, 0x85, 0x2a, 0x96,
    0x8f, 0x2d, 0x95, 0x98, 0xc3, 0x81, 0x8e, 0x68, 0xbe, 0x0b, 0xbb, 0x05, 0xff, 0xea, 0xbd, 0x16,
    0x21, 0x37, 0xb8, 0xa2, 0x97, 0x6d, 0x5b, 0xa0, 0x45, 0x46, 0x0d, 0xf0, 0xee, 0x6a, 0x57, 0x4b,
    0x64, 0xf5, 0xe2, 0x67, 0x63, 0x60, 0x55, 0x3b, 0xfd, 0x38, 0x09, 0x0e, 0xb0, 0x6c, 0x4c, 0x18,
    0x00, 0xf2, 0xbe, 0x75, 0x8d, 0x61, 0x58, 0x28, 0x13, 0xd1, 0x87, 0x4f, 0x30, 0x1f, 0x4c, 0xfb,
    0xd7, 0xc7, 0xd7, 0xf8, 0x6e, 0x38, 0x12, 0x2c, 0x2a, 0x4d, 0x77, 0xa9, 0x1b, 0xeb, 0x75, 0x95,
    0x69, 0x8f, 0x6a, 0x8f, 0x64, 0x36, 0x4a, 0x67, 0x8f, 0xd5, 0x72, 0xbb, 0x8d, 0x62, 0x72, 0x42,
    0x79, 0x5f, 0xe1, 0x10, 0x8a, 0x61, 0x17, 0x5a, 0xef, 0x0e, 0x1b, 0xee, 0x98, 0x87, 0x9e, 0xf5,
    0x98, 0x68, 0x2f, 0xd2, 0xca, 0xf2, 0x01, 0xf0, 0x6d, 0x34, 0x74, 0xfa, 0x20, 0x99, 0x7c, 0xeb,
    0xe0, 0xe9, 0x61, 0x7a, 0xac, 0x97, 0x25, 0xd0, 0x34, 0xce, 0x8d, 0x65, 0x98, 0x1c, 0xb6, 0x9d,
    0x4a, 0x63, 0xb3, 0xa2, 0x20, 0x23, 0x07, 0x41, 0x82, 0xd0, 0x8f, 0xcb, 0xbe, 0x7f, 0xbe, 0x62,
    0x03, 0xf9, 0x84, 0x58, 0xe4, 0xee, 0x31, 0x75, 0xb5, 0x94, 0xc6, 0x74, 0x1f, 0x18, 0x45, 0x15,
    0x0a, 0xab, 0x9f, 0x71, 0x6f, 0x96, 0x0e, 0x6b, 0x5e, 0x75, 0xdd, 0xf6, 0x89, 0x7d, 0x50, 0xb6,
    0x24, 0x8b, 0x6b, 0x3f, 0x35, 0xbf, 0xfc, 0xcf, 0x39, 0x50, 0x81, 0x09, 0x5d, 0x1f, 0x69, 0xc8,
    0x38, 0x32, 0x50, 0x37, 0xf3, 0xda, 0x91, 0xd1, 0xb1, 0xbb, 0xa8, 0xb8, 0xab, 0xc9, 0xa0, 0x63,
    0x35, 0x36, 0xdc, 0x62, 0xd2, 0x1d, 0x21, 0xdf, 0x82, 0x60, 0x17, 0xd8, 0x32, 0x96, 0x5a, 0x0c,
    0x43, 0x04, 0xf6, 0x8d, 0xe2, 0x59, 0x88, 0xf7, 0xf3, 0xfa, 0x7d, 0x7e, 0x1d, 0xf9, 0xe4, 0xe6,
    0xd7, 0x9d, 0xd2, 0x1f, 0x98, 0xd1, 0x66, 0xdf, 0xaa, 0xca, 0xc6, 0x05, 0x50, 0x4c, 0x15, 0xd7,
    0x83, 0x59, 0x6b, 0x81, 0x88, 0xa7, 0xdb, 0x5b, 0x42, 0x23, 0x4f, 0x76, 0xd5, 0x86, 0x26, 0x22,
    0x40, 0xca, 0xb6, 0x3f, 0xfa, 0x18, 0x14, 0x5c, 0x95, 0x68, 0x23, 0x82, 0x44, 0xc6, 0x75, 0xe9,
    0x00, 0xc5, 0xf6, 0x5a, 0xb8, 0x74, 0x13, 0x5b, 0xca, 0x4c, 0x9b, 0xb7, 0xbd, 0xc3, 0x2f, 0x71,
    0xa0, 0x28, 0xe3, 0x87, 0x13, 0x24, 0x88, 0x2f, 0xc7, 0xc7, 0x2e, 0x15, 0xde, 0xe0, 0x74, 0x01,
    0x96, 0x11, 0xc5, 0xa4, 0x8d, 0x2f, 0x0a, 0x6e, 0xda, 0x41, 0x3f, 0x28, 0x08, 0x5d, 0x96, 0x7c,
    0xe7, 0x55, 0xe1, 0x9d, 0x15, 0x70, 0xf0, 0xd9, 0x70, 0x8b, 0x99, 0xd7, 0x05, 0x50, 0xec, 0x1f,
    0x55, 0xa0, 0x53, 0x9a, 0x0a, 0x81, 0x22, 0x84, 0xd2, 0x5e, 0xc7, 0xdc, 0x58, 0xb8, 0xc7, 0x5c,
    0xe7, 0xe1, 0x27, 0x92, 0x53, 0xfd, 0x81, 0x98, 0x90, 0x15, 0x89, 0x46, 0x68, 0x1b, 0x84, 0x45,
    0x80, 0x7b, 0x23, 0xf6, 0x40, 0xa8, 0xfc, 0xbc, 0x8c, 0xb0, 0x9a, 0xcf, 0x33, 0x24, 0x0f, 0xa2,
    0x25, 0xe3, 0x0b, 0xf1, 0x25, 0x83, 0xae, 0x14, 0x7a, 0xa5, 0x16, 0x1a, 0x36, 0xee, 0x13, 0x53,
    0xd4, 0x14, 0x70, 0xc9, 0xa9, 0xbd, 0x1e, 0x87, 0x79, 0x27, 0xd2, 0xf1, 0x31, 0x18, 0x7c, 0xa9,
    0xf5, 0x43, 0x40, 0x2e, 0x12, 0x05, 0xe7, 0x82, 0xae, 0x18, 0x7b, 0xf4, 0x51, 0xe9, 0x81, 0x9c,
    0xe3, 0x17, 0x1c, 0xd9, 0x6b, 0xd5, 0x23, 0x44, 0xb1, 0x92, 0xe1, 0x89, 0x68, 0x5b, 0x90, 0x52,
    0x9d, 0x58, 0x79, 0x36, 0x23, 0xeb, 0xf3, 0xed, 0x5c, 0xca, 0x86, 0x38, 0x50, 0xac, 0xbe, 0xcc,
    0x75, 0xae, 0x2b, 0x46, 0xaa, 0xe5, 0x9c, 0x77, 0xd5, 0xf8, 0xa6, 0x01, 0x78, 0xb5, 0x3b, 0x7d,
    0x51, 0x70, 0x2d, 0x47, 0x6e, 0xdd, 0x39, 0x8a, 0x51, 0xce, 0x92, 0x25, 0x66, 0x4d, 0x4b, 0x02,
    0xcd, 0xe9, 0xde, 0xea, 0x9e, 0x92, 0xbd, 0xb9, 0x63, 0x2b, 0x09, 0xe7, 0x4f, 0x67, 0x93, 0x31,
    0x08, 0xca, 0x3e, 0xc0, 0x88, 0x4a, 0x33, 0xe1, 0xb7, 0x5d, 0xd4, 0x42, 0x3d, 0x14, 0x1c, 0x67,
    0xbd, 0x69, 0x29, 0x5b, 0xb7, 0xe9, 0x70, 0x9f, 0x5b, 0x46, 0xd7, 0x86, 0x9e, 0x80, 0xb9, 0x1c,
    0xe2, 0x18, 0x39, 0xc0, 0xab, 0xf5, 0xe7, 0x7b, 0xce, 0xa9, 0x34, 0xc6, 0xcd, 0x89, 0xf1, 0x5e,
    0xcc, 0x93, 0xee, 0x2a, 0x51, 0xa6, 0xeb, 0x79, 0x9e, 0xab, 0xc5, 0xb9, 0x73, 0x8e, 0xa9, 0x8f,
    0xcf, 0xf1, 0xc3, 0xeb, 0xa6, 0x19, 0x0e, 0x7e, 0xc6, 0xa9, 0x9b, 0xbf, 0x44, 0x52, 0xc9, 0xee,
    0x03, 0x5d, 0x15, 0xad, 0xa7, 0xae, 0x6b, 0x5d, 0x31, 0xd0, 0x0a, 0x5f, 0xaf, 0xc0, 0x73, 0x4b,
    0x7d, 0x43, 0x66, 0xf5, 0xff, 0x4e, 0x4b, 0xb8, 0xf4, 0x79, 0x46, 0xd9, 0xfc, 0xee, 0x56, 0xa8,
    0xc9, 0x1a, 0xe6, 0xe9, 0xf4, 0x0e, 0xe8, 0x8e, 0x0b, 0xb5, 0x40, 0x6b, 0x48, 0x2e, 0x09, 0x74,
    0x3b, 0x19, 0x55, 0xbd, 0xda, 0xd6, 0x4f, 0x5a, 0x1c, 0xc0, 0xc9, 0x3e, 0x85, 0x61, 0xc8, 0x32,
    0xdd, 0x00, 0x0b, 0x6a, 0x48, 0x8c, 0x9e, 0x45, 0x2d, 0x6c, 0x62, 0x80, 0x43, 0x7c,
};

static const MessageEncodingTestVector sMessageEncodingTest0539 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7693EA28,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0539_Payload,
    sizeof(sMessageEncodingTest0539_Payload),
    sMessageEncodingTest0539_ExpectedEncoding,
    sizeof(sMessageEncodingTest0539_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0540_EncryptionKey =
{
    {
        0x50, 0xc2, 0xfa, 0xa2, 0x95, 0xb8, 0x73, 0x28, 0xf0, 0x63, 0x82, 0xa2, 0x30, 0x96, 0xb3, 0x95,
    },
    {
        0x0f, 0xbd, 0x03, 0xbf, 0x07, 0x84, 0x8e, 0xb5, 0x25, 0x61, 0xc2, 0xb1, 0x6e, 0x74, 0xe6, 0xb5,
        0xab, 0xff, 0xb9, 0xf8,
    }
};
static const uint8_t sMessageEncodingTest0540_Payload[] =
{
    0xde, 0x97, 0x51, 0xdd, 0x32, 0x71, 0x61, 0x66, 0xa9, 0xfb, 0xe6, 0x72, 0x09, 0x22, 0x4c, 0xb8,
    0x88, 0x45, 0x33, 0xc4, 0xe2, 0x13, 0x2f, 0x71, 0xee, 0x2b, 0x6e, 0x37, 0x95, 0x9a, 0xe8, 0x73,
    0x6f, 0x0b, 0xf6, 0x04, 0x5d, 0xfb, 0x49, 0x75, 0x6b, 0xd2, 0x37, 0x25, 0x23, 0xe7, 0x91, 0x1c,
    0x20, 0xbf, 0x41, 0x9b, 0x85, 0x5a, 0xd6, 0x61, 0x16, 0x69, 0x8d, 0x82, 0x1a, 0xfe, 0x3e, 0x90,
    0xf7, 0xaf, 0x1b, 0x79, 0x47, 0x91, 0x98, 0x4e, 0xf0, 0xe4, 0x5f, 0x9d, 0x60, 0x9d, 0x6c, 0x8f,
    0xf7, 0xb7, 0x83, 0xb5, 0x0e, 0x15, 0x30, 0x17, 0x82, 0x90, 0x06, 0xa9, 0x58, 0x7f, 0x90, 0xc7,
    0x1e, 0xa1, 0xc1, 0xbc, 0x13, 0x65, 0x0b, 0x64, 0xb8, 0x21, 0xde, 0x6b, 0x9c, 0x8e, 0x49, 0x2d,
    0xd5, 0x0f, 0xdf, 0x5d, 0x4a, 0x6c, 0x54, 0x5e, 0x47, 0x92, 0x4c, 0xc5, 0x04, 0x74, 0xf3, 0x52,
    0x3c, 0xc3, 0xbd, 0x56, 0x04, 0x06, 0xa7, 0xfa, 0x69, 0xdd, 0xbc, 0xa9, 0x67, 0xc6, 0x09, 0x16,
    0x9e, 0x02, 0xa5, 0xe8, 0x46, 0xa6, 0x0f, 0x2d, 0x6f, 0xb9, 0x7c, 0x4d, 0xf9, 0x92, 0xdc, 0x90,
    0x5d, 0xfb, 0xf9, 0x2d, 0x44, 0x8b, 0xe9, 0xaa, 0x21, 0x5f, 0x83, 0x40, 0x24, 0x23, 0x78, 0xf4,
    0x99, 0x92, 0xf3, 0xbb, 0x49, 0x73, 0x64, 0x31, 0x3a, 0xce, 0xc2, 0x27, 0xcd, 0x1f, 0xbf, 0x7e,
    0x7a, 0x01, 0xb4, 0x92, 0x92, 0x58, 0x3b, 0x40, 0xdc, 0x63, 0x05, 0x13, 0x0c, 0x30, 0x23, 0x55,
    0x07, 0x7d, 0xc6, 0x76, 0x98, 0x44, 0x70, 0x1c, 0xef, 0xe6, 0xcb, 0xa0, 0xe3, 0x3a, 0xf5, 0x2c,
    0x35, 0x48, 0x13, 0x4a, 0x1f, 0x22, 0x94, 0xf7, 0x4f, 0x0f, 0xea, 0xc3, 0xb8, 0xf3, 0x0d, 0x0a,
    0x74, 0xb9, 0x39, 0xe7, 0x7e, 0x15, 0x3a, 0xdd, 0x50, 0x52, 0x0b, 0x6e, 0x35, 0x40, 0x7e, 0xd8,
    0xb0, 0x20, 0x75, 0x71, 0x01, 0x55, 0x99, 0x24, 0x48, 0xe1, 0x3f, 0xd9, 0x13, 0xca, 0x1c, 0xc9,
    0x83, 0xd9, 0xa0, 0xc8, 0x75, 0x00, 0xd9, 0x83, 0xd1, 0xfe, 0x17, 0x40, 0xdf, 0x7d, 0x4c, 0x8f,
    0x06, 0x66, 0x80, 0xfd, 0x06, 0x76, 0xfc, 0x42, 0x23, 0xc0, 0x8b, 0x27, 0x10, 0xaf, 0x36, 0x57,
    0x55, 0x93, 0x67, 0xd6, 0xae, 0xf6, 0x97, 0xd6, 0x95, 0x7b, 0x67, 0xe4, 0x4f, 0xff, 0xdd, 0xf9,
    0xa6, 0x01, 0x44, 0x15, 0x9f, 0xb8, 0x43, 0x89, 0xd3, 0xa6, 0xd9, 0xa5, 0x27, 0xcf, 0x56, 0xe8,
    0x40, 0x01, 0x81, 0x8d, 0x2f, 0x1d, 0x22, 0xb6, 0xf9, 0x97, 0x54, 0xc2, 0x7b, 0x6b, 0xb0, 0xd2,
    0x81, 0xf8, 0x56, 0xd5, 0x6e, 0xca, 0x79, 0x4f, 0xe6, 0xd9, 0xfa, 0xc2, 0x0c, 0x3a, 0x0e, 0x0b,
    0x38, 0x77, 0x01, 0xe5, 0x69, 0xb1, 0xf0, 0x7e, 0xea, 0x5f, 0x33, 0x91, 0x53, 0x14, 0x5d, 0x00,
    0x0d, 0x8c, 0x3f, 0xd4, 0x23, 0xcf, 0x96, 0x36, 0x3d, 0x5f, 0x91, 0xd2, 0xe8, 0x48, 0xc4, 0x42,
    0x87, 0x10, 0x0b, 0x82, 0xa2, 0x4e, 0x62, 0x6c, 0x50, 0x29, 0xe9, 0x3d, 0xa6, 0x84, 0x44, 0xc3,
    0xb9, 0x69, 0xd5, 0x31, 0x3a, 0xa9, 0x94, 0xee, 0xbd, 0x2e, 0x05, 0x7f, 0x29, 0xa2, 0x56, 0x66,
    0xf7, 0xa6, 0x1c, 0xb4, 0xc9, 0xd3, 0x54, 0xfe, 0x67, 0x73, 0x72, 0xe6, 0x1b, 0xc2, 0x12, 0x05,
    0xdb, 0xa4, 0xe8, 0xc6, 0x16, 0xef, 0xde, 0xc1, 0x0e, 0x81, 0xd0, 0x89, 0xd3, 0xcd, 0xa7, 0xcf,
    0xb5, 0x94, 0x05, 0xce, 0x43, 0x36, 0xe3, 0x87, 0x8d, 0x42, 0x33, 0xd1, 0xd9, 0xa7, 0xce, 0x02,
    0x41, 0x57, 0xa6, 0xf6, 0xfb, 0x57, 0x54, 0x7c, 0xe9, 0x9c, 0x43, 0xda, 0x56, 0x70, 0x0a, 0x6a,
    0xc0, 0x44, 0x1e, 0x47, 0x65, 0x1a, 0x69, 0x3a, 0x1c, 0xd6, 0x48, 0x52, 0x8c, 0x18, 0xca, 0xfd,
    0x16, 0x5c, 0xb8, 0xc8, 0x21, 0x2f, 0xd6, 0xb5, 0x5c, 0x75, 0xc3, 0x71, 0xaa, 0x7d, 0x4e, 0xa1,
    0x79, 0x7e, 0xf2, 0xbf, 0xb4, 0x6c, 0xbc, 0x15, 0xac, 0x04, 0x64, 0x64, 0xd9, 0x4e, 0xb0, 0x6b,
    0x4a, 0xd6, 0x92, 0x85, 0x80, 0x04, 0x15, 0x72, 0xe9, 0xd2, 0x10, 0x30, 0x62, 0x5f, 0x91, 0xea,
    0x65, 0xa6, 0x7e, 0x06, 0xa9, 0x09, 0xb3, 0xfd, 0x2c, 0xa0, 0x94, 0x9d, 0x58, 0x06, 0xec, 0xcb,
    0x85, 0x11, 0x82, 0x14, 0x93, 0xbe, 0x0d, 0x3e, 0x8f, 0xf1, 0x5f, 0x05, 0xa3, 0x2e, 0xcf, 0x42,
    0x5b, 0xb4, 0x05, 0x60, 0x62, 0xd0, 0x30, 0xb3, 0x84, 0x8f, 0xfa, 0xa2, 0x0d, 0x5d, 0xb9, 0xf7,
    0xdf, 0xbe, 0xae, 0x66, 0xaf, 0x56, 0x14, 0x81, 0xe2, 0x9a, 0xc2, 0x25, 0x73, 0x73, 0x07, 0xf0,
    0xf8, 0xf1, 0xd3, 0xef, 0x4d, 0x91, 0x48, 0xc1, 0x10, 0xe2, 0x0c, 0x3c, 0x80, 0x60, 0x4f, 0x04,
    0x8a, 0x2d, 0x8d, 0xac, 0xa4, 0xaf, 0x04, 0xbe, 0x8c, 0xfc, 0x52, 0x8d, 0xc0, 0xbb, 0xbb, 0x2e,
    0xc8, 0x21, 0x60, 0x88, 0x55, 0x6e, 0xbc, 0x08, 0x5f, 0xf0, 0x4f, 0x4f, 0xe7, 0x00, 0x6f, 0x7a,
    0x57, 0x4c, 0x9e, 0x9e, 0x2e, 0x40, 0xfe, 0x02, 0xc0, 0xc7, 0xf5, 0xc3, 0x37, 0x4f, 0x1c, 0xae,
    0xb6, 0xb9, 0xba, 0x4e, 0x0a, 0x08, 0x16, 0x41, 0x67, 0x46, 0x8f, 0x17, 0xc7, 0x3e, 0x59, 0x4b,
    0xd4, 0xc4, 0xb5, 0x88, 0x43, 0x78, 0x23, 0x58, 0xdf, 0x25, 0x51, 0xd2, 0x68, 0xd9, 0x0a, 0x7a,
    0xd5, 0xe7, 0x70, 0xa6, 0xc2, 0x3f, 0x52, 0xd4, 0xff, 0x49, 0x72, 0x13, 0x6f, 0x65, 0x9f, 0x19,
    0xf9, 0x68, 0x66, 0x13, 0x9e, 0x72, 0x45, 0xa3, 0x51, 0x9a, 0x2c, 0x7f, 0x3d, 0x3a, 0xee, 0xbf,
    0x08, 0xcc, 0xc7, 0x03, 0xd9, 0xf7, 0x14, 0x9e, 0x32, 0x84, 0xe2, 0x1f, 0x0e, 0x01, 0x22, 0x78,
    0x7c, 0x2d, 0x5f, 0x74, 0xdc, 0x8e, 0x10, 0x4d, 0xed, 0x46, 0xb4, 0x78, 0x55, 0x1a, 0x6a, 0xc1,
    0xfc, 0x11, 0x54, 0x28, 0xdf, 0x42, 0x57, 0x5d, 0x43, 0x00, 0xbb, 0x23, 0x8d, 0x99, 0xb9, 0x99,
    0x5f, 0x33, 0x7d, 0x77, 0x05, 0xd6, 0xa9, 0x3f, 0xfa, 0xea, 0xa4, 0x93, 0xb0, 0x00, 0x13, 0x2d,
    0x70, 0xd0, 0x71, 0x22, 0x15, 0xb5, 0x7f, 0x2d, 0x53, 0x79, 0xce, 0x82, 0x04, 0x4a, 0x0f, 0x13,
    0xba, 0xf5, 0xd0, 0x56, 0x44, 0x65, 0x83, 0x31, 0xb2, 0x79, 0xdb, 0xd9, 0x65, 0xf2, 0x22, 0x4c,
    0x12, 0x45, 0x87, 0x5d, 0x22, 0x1f, 0x36, 0x8d, 0x6e, 0xc3, 0x20, 0xbe, 0x1d, 0x87, 0x64, 0x44,
    0x1d, 0xac, 0xb1, 0x2b, 0x08, 0xa6, 0xd0, 0x63, 0xcf, 0x6c, 0xba, 0x75, 0x58, 0xf5, 0xba, 0xf8,
    0x3c, 0x0c, 0xdc, 0x31, 0x1c, 0x62, 0x27, 0x4b, 0x83, 0x38, 0x58, 0x40, 0x46, 0xc7, 0x19, 0x98,
    0x04, 0x15, 0x93, 0xb9, 0x3d, 0x53, 0x75, 0x9c, 0xdb, 0x28, 0x87, 0x73, 0x4c, 0xcb, 0x2f, 0x39,
    0x8d, 0x2d, 0x04, 0x84, 0xf2, 0xc3, 0x10, 0xf6, 0x66, 0x60, 0xd8, 0x37, 0xea, 0xe2, 0xcd, 0xc4,
    0xbd, 0x3a, 0x14, 0x9d, 0xbe, 0x7a, 0xe7, 0x54, 0xe9, 0x0c, 0xe9, 0x55, 0x30, 0x91, 0x3d, 0xd1,
    0x61, 0x0b, 0xac, 0x72, 0xea, 0x01, 0xf2, 0xc6, 0x6d, 0xfe, 0xfb, 0xfe, 0x26, 0x54, 0xba, 0x7f,
    0xac, 0xb1, 0x61, 0x7c, 0xea, 0x7d, 0xcb, 0x96, 0x2c, 0x19, 0x3c, 0x25, 0x01, 0xc2, 0x4b, 0x8e,
    0xef, 0xa4, 0xac, 0x8e, 0x79, 0xe0, 0x3e, 0x80, 0xb9, 0x51, 0xbc, 0xfe, 0x45, 0x8a, 0x2e, 0x1e,
    0x30, 0x4f, 0x26, 0xe4, 0x50, 0xc1, 0xfc, 0xa5, 0xd5, 0x1b, 0xc1, 0xbc, 0xe8, 0xcb, 0x0e, 0x26,
    0x55, 0x31, 0xba, 0x54, 0xed, 0x61, 0xbc, 0xfb, 0x1a, 0x1a, 0xe2, 0xae, 0x01, 0x9f, 0x72, 0x81,
};

static const uint8_t sMessageEncodingTest0540_ExpectedEncoding[] =
{
    0x10, 0x25, 0x1b, 0xa3, 0x26, 0x42, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x13, 0x23,
    0xba, 0xe4, 0x27, 0x84, 0x89, 0x35, 0xba, 0xc6, 0xd2, 0x0c, 0x37, 0x20, 0x24, 0x20, 0x4f, 0xa8,
    0x38, 0x2b, 0x67, 0xf7, 0xc2, 0xaa, 0x10, 0x50, 0x13, 0xb1, 0x13, 0x37, 0xdf, 0x11, 0x43, 0xc2,
    0x31, 0xbf, 0x73, 0x96, 0xd5, 0xba, 0xf6, 0xe1, 0xa0, 0xf7, 0xb6, 0xef, 0xf3, 0xc7, 0x9a, 0xfc,
    0x1c, 0x52, 0x32, 0xb0, 0x0b, 0x60, 0xf3, 0xcb, 0xdd, 0x84, 0x20, 0x35, 0x38, 0x94, 0xec, 0xe4,
    0x0b, 0xdb, 0xfb, 0xbd, 0x60, 0x93, 0x54, 0xcb, 0x75, 0x24, 0x11, 0x21, 0x22, 0x0c, 0xe1, 0x48,
    0x6e, 0xdc, 0xf4, 0xc6, 0xe6, 0x52, 0x29, 0xa5, 0xb5, 0x7d, 0xc0, 0x67, 0xea, 0x9d, 0xde, 0x9d,
    0xef, 0x43, 0xf2, 0x90, 0xaa, 0x32, 0x6f, 0x8e, 0xcf, 0x2b, 0x3a, 0x2d, 0x1b, 0xcb, 0x5f, 0x84,
    0x1d, 0xb7, 0x16, 0x0b, 0x20, 0x90, 0x61, 0x93, 0x56, 0x13, 0xaa, 0x9b, 0xc8, 0x5b, 0x8e, 0x80,
    0x8b, 0x9f, 0x51, 0xf5, 0x51, 0xf3, 0x7a, 0xa1, 0xa1, 0xab, 0x29, 0x98, 0x22, 0xc3, 0xe9, 0x68,
    0x0f, 0xdc, 0xac, 0x27, 0x11, 0xe8, 0x52, 0x02, 0xd1, 0x6e, 0x35, 0x9e, 0x54, 0x5c, 0xd7, 0xdd,
    0x38, 0x70, 0xe1, 0xd4, 0xef, 0xd7, 0x82, 0x98, 0x1e, 0xb7, 0x81, 0x34, 0xf3, 0x47, 0xee, 0xb8,
    0xc2, 0x90, 0x28, 0x62, 0x7e, 0x63, 0x58, 0x90, 0x8c, 0xd7, 0xbf, 0xfb, 0x87, 0x14, 0xe4, 0x9c,
    0xd9, 0xab, 0xfe, 0x0a, 0xf7, 0x37, 0xdc, 0xa3, 0xc1, 0x0b, 0x5a, 0x2e, 0x8f, 0x25, 0xe8, 0x14,
    0x78, 0xa5, 0xc2, 0x04, 0x73, 0x2d, 0xdc, 0x11, 0xe8, 0x02, 0xdb, 0xc0, 0xb8, 0x77, 0x7e, 0x28,
    0x2d, 0x85, 0x18, 0x0d, 0xcf, 0x9a, 0xc3, 0xda, 0x5f, 0x91, 0x3b, 0x24, 0xd9, 0xb3, 0x6c, 0x77,
    0x55, 0x56, 0x50, 0xbe, 0xe1, 0x6f, 0x20, 0xb9, 0xf2, 0xed, 0x5e, 0x7b, 0x4c, 0x59, 0xbe, 0xaf,
    0x98, 0x2f, 0x5d, 0xe4, 0x6c, 0xf0, 0x89, 0x7d, 0x96, 0x56, 0x02, 0xc0, 0x85, 0xc3, 0xc7, 0x6b,
    0x4e, 0x2a, 0x06, 0xee, 0xd0, 0x34, 0xba, 0x07, 0x61, 0x9d, 0xfd, 0x3c, 0x96, 0x25, 0xa8, 0x80,
    0xf4, 0x6e, 0x5d, 0xeb, 0xc5, 0x0c, 0x27, 0x49, 0xb9, 0x14, 0xf8, 0x73, 0x98, 0x6c, 0xc5, 0x53,
    0xb1, 0x72, 0xc9, 0x82, 0xa4, 0xbd, 0xcf, 0x85, 0x9c, 0x4b, 0x1b, 0x53, 0x7a, 0x4a, 0x73, 0x47,
    0x2a, 0xda, 0x7b, 0xec, 0xa3, 0xd4, 0xd0, 0xf9, 0x75, 0x97, 0xe2, 0xf2, 0x6b, 0xe3, 0x01, 0xec,
    0x70, 0x3f, 0x93, 0x56, 0xfd, 0x89, 0x76, 0x25, 0x08, 0xbf, 0x6f, 0xc7, 0x24, 0x56, 0xef, 0xb1,
    0x30, 0x5a, 0xf7, 0xef, 0xd5, 0xbe, 0x9f, 0xfb, 0xf1, 0x67, 0x58, 0x78, 0xad, 0xb3, 0x3a, 0x02,
    0x3c, 0x09, 0x88, 0x3c, 0x32, 0xaf, 0xb0, 0x82, 0x5e, 0xe7, 0x9f, 0x8f, 0x3e, 0xa8, 0xb1, 0xd3,
    0x5d, 0xbf, 0xb6, 0x83, 0x0a, 0x1d, 0x29, 0x5d, 0xdf, 0x84, 0x7e, 0x72, 0xe0, 0xe5, 0x3c, 0xb4,
    0x00, 0xed, 0xdd, 0xf1, 0xd5, 0xa3, 0x8e, 0x12, 0xea, 0xee, 0x74, 0x0a, 0x57, 0x2c, 0xe0, 0x15,
    0xe1, 0x72, 0xc4, 0x7a, 0x74, 0x99, 0xe3, 0xfc, 0xba, 0x0f, 0x88, 0x2c, 0x4f, 0xc0, 0x0b, 0xcb,
    0x0c, 0xc9, 0xee, 0x63, 0x95, 0x0c, 0xeb, 0x56, 0x04, 0x2f, 0xbb, 0xb2, 0x97, 0xd7, 0x59, 0x57,
    0x64, 0x7d, 0xd7, 0x11, 0x15, 0xa1, 0x30, 0x4a, 0x0a, 0x90, 0x10, 0xd7, 0x0b, 0x56, 0xe0, 0x27,
    0x21, 0xa3, 0x0b, 0x71, 0xbe, 0x25, 0x52, 0xab, 0xfb, 0xd8, 0x9a, 0x61, 0x78, 0x08, 0xf3, 0x8a,
    0xf5, 0x1d, 0xfb, 0x45, 0xb3, 0x8d, 0xee, 0xa4, 0x1f, 0xe1, 0x1c, 0x47, 0x6f, 0xc5, 0x9d, 0x1e,
    0x62, 0xdd, 0x6b, 0xdd, 0x9a, 0x82, 0x0e, 0x64, 0x6c, 0xff, 0x76, 0xe4, 0x52, 0xeb, 0x9d, 0x0f,
    0x2f, 0x57, 0x2f, 0x91, 0xc8, 0x61, 0xe0, 0x7f, 0xff, 0x93, 0x45, 0x5b, 0xab, 0x56, 0x9b, 0x1d,
    0x8c, 0xcb, 0x78, 0x68, 0xeb, 0x70, 0x00, 0x04, 0xee, 0x1e, 0x66, 0x17, 0xd6, 0xa9, 0xaa, 0x45,
    0xf9, 0x35, 0x13, 0xa8, 0x15, 0xd4, 0xd8, 0xd5, 0x58, 0xd5, 0x46, 0x8b, 0xfd, 0xe0, 0x61, 0x67,
    0xb2, 0x1e, 0x3a, 0x7f, 0x33, 0x8a, 0x7d, 0x30, 0x68, 0x62, 0x65, 0xd6, 0x76, 0x36, 0xe8, 0x57,
    0x7c, 0x49, 0x60, 0x08, 0xba, 0x92, 0x9c, 0x2d, 0x1a, 0xa0, 0x5a, 0xe8, 0x80, 0xa7, 0xfe, 0x2b,
    0x56, 0xd4, 0x66, 0x56, 0xae, 0xe7, 0x05, 0xa7, 0xe0, 0xad, 0x2b, 0x7d, 0x0f, 0xdf, 0x7f, 0x3d,
    0xc7, 0xef, 0x1e, 0x3e, 0x6a, 0x3d, 0xe8, 0x08, 0x4b, 0x83, 0xe9, 0x8b, 0x15, 0xb4, 0xe6, 0xef,
    0x13, 0xcf, 0x4d, 0xf5, 0xd9, 0x0d, 0x99, 0x59, 0x8d, 0x94, 0x25, 0xac, 0x00, 0x95, 0x38, 0x60,
    0x48, 0xae, 0x16, 0x2c, 0x0e, 0x43, 0xfb, 0xa9, 0xf9, 0xaf, 0xb4, 0x00, 0x11, 0x8b, 0x3f, 0xfd,
    0x71, 0xf4, 0x53, 0x2b, 0x5a, 0xae, 0x60, 0xc1, 0x29, 0x0f, 0x6f, 0x53, 0xce, 0xce, 0xf3, 0x34,
    0x51, 0x9e, 0x73, 0x5d, 0xdd, 0xdb, 0x72, 0x5b, 0xab, 0x26, 0x2f, 0x97, 0xf0, 0xf8, 0xc0, 0xb2,
    0x68, 0x17, 0xa9, 0xe4, 0xf6, 0x95, 0xad, 0xc6, 0xe7, 0xb7, 0x97, 0x88, 0xd4, 0x5d, 0x48, 0x42,
    0x2a, 0x49, 0x04, 0xb9, 0x17, 0xf3, 0x19, 0x47, 0x26, 0xe3, 0x95, 0xde, 0xf4, 0xf0, 0x54, 0x9a,
    0xa6, 0x04, 0x57, 0x17, 0xe4, 0xbf, 0x2b, 0xf2, 0xe8, 0x41, 0xc9, 0x03, 0xe5, 0x22, 0xf6, 0x85,
    0x27, 0x81, 0x79, 0xaa, 0xc9, 0x2a, 0x63, 0x7f, 0xce, 0xd5, 0x90, 0x42, 0x41, 0x43, 0x04, 0x3c,
    0x9d, 0x00, 0x5d, 0xe0, 0x62, 0x2f, 0x15, 0x50, 0xb4, 0x2d, 0x6b, 0xaa, 0x02, 0x73, 0xdc, 0x8c,
    0xa9, 0x8b, 0xdc, 0x8c, 0x53, 0xe9, 0xdf, 0x22, 0xdc, 0x77, 0x7d, 0xf2, 0xc0, 0x27, 0x78, 0x67,
    0xce, 0x90, 0xaf, 0xab, 0x83, 0x0c, 0x11, 0xcb, 0xb7, 0x62, 0x9d, 0xb7, 0x1b, 0xf4, 0x37, 0x1e,
    0xd0, 0x94, 0x2d, 0x9c, 0x05, 0xdc, 0x78, 0xed, 0x93, 0x7f, 0x30, 0x66, 0xc0, 0xa6, 0x9f, 0x25,
    0x5d, 0x15, 0xb1, 0xf2, 0xae, 0x42, 0xe9, 0x1a, 0x20, 0x07, 0xc3, 0xe1, 0xd5, 0xb4, 0xe0, 0xc0,
    0x89, 0x7f, 0xbf, 0x00, 0xcc, 0xd9, 0xb4, 0xec, 0x48, 0x08, 0x62, 0xb9, 0xfa, 0xa3, 0xad, 0x5d,
    0x88, 0x39, 0x8d, 0xfb, 0x87, 0x2e, 0x58, 0x2a, 0x41, 0x04, 0xf8, 0x79, 0x9e, 0x57, 0x96, 0x54,
    0x56, 0x0b, 0xd6, 0xb5, 0xc5, 0x43, 0x13, 0x83, 0xb5, 0xe2, 0x57, 0x61, 0x03, 0x70, 0xa7, 0x8e,
    0xa4, 0x89, 0x65, 0xe6, 0x17, 0x2a, 0xa6, 0xad, 0xee, 0x30, 0x3b, 0x30, 0xcd, 0x91, 0xd0, 0x36,
    0x09, 0x71, 0x0b, 0x40, 0xf0, 0xcb, 0x7e, 0xdf, 0xb2, 0xc3, 0x88, 0x72, 0x86, 0xb9, 0x10, 0x81,
    0xad, 0xb5, 0x6e, 0xf6, 0xba, 0x80, 0xd4, 0xdf, 0xc7, 0x7b, 0x7a, 0x3e, 0x2e, 0x1c, 0x73, 0xda,
    0xea, 0x80, 0x40, 0x00, 0xaa, 0xd1, 0x10, 0x36, 0xc7, 0x8d, 0x39, 0x5a, 0xdd, 0xa3, 0x92, 0x1c,
    0x65, 0x0c, 0xba, 0xb8, 0x3e, 0x01, 0x0d, 0x31, 0x53, 0x0b, 0x05, 0x88, 0xfd, 0xbb, 0x60, 0x80,
    0xc5, 0x20, 0xdb, 0xff, 0x37, 0x06, 0xa6, 0x40, 0x6d, 0x20, 0x75, 0xfe, 0x57, 0x74, 0xf6, 0x55,
    0xe8, 0xb9, 0xe4, 0x0c, 0xb3, 0x41, 0xf3, 0xbc, 0x59, 0x2c, 0xcc, 0x8a, 0x86, 0x6d, 0x37, 0x3e,
    0x80, 0x61, 0x2b, 0x32, 0x6c, 0xed, 0x51, 0x24, 0xc4, 0x54, 0x2f, 0x8c, 0xa6, 0xcf, 0xf0, 0xd4,
    0xcb, 0xf1, 0xbb, 0x20, 0x05, 0x39, 0x1c, 0x0e, 0xa4, 0xa4, 0x6d, 0x07, 0x10, 0x1c, 0xe5, 0x6a,
    0xa9, 0x35, 0x7a, 0xde, 0x61, 0x94, 0x95, 0x47, 0xc5, 0x67, 0x21, 0x90, 0x55, 0xdb, 0xea, 0xac,
    0x23, 0x47, 0xe9, 0xff,
};

static const MessageEncodingTestVector sMessageEncodingTest0540 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x4226A31B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2313,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0540_EncryptionKey,
    sMessageEncodingTest0540_Payload,
    sizeof(sMessageEncodingTest0540_Payload),
    sMessageEncodingTest0540_ExpectedEncoding,
    sizeof(sMessageEncodingTest0540_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0541_EncryptionKey =
{
    {
        0x43, 0xfe, 0x32, 0xb8, 0xc5, 0xb9, 0x04, 0xd4, 0xe5, 0x70, 0x23, 0x1f, 0x31, 0x49, 0xd9, 0xf1,
    }
};
static const uint8_t sMessageEncodingTest0541_Payload[] =
{
    0x3f, 0xd0, 0x6a, 0xbd, 0x4f, 0x71, 0xb7, 0x6b, 0x42, 0x8b, 0xce, 0x7c, 0xbc, 0xf4, 0xb9, 0x76,
    0xf8, 0x3a, 0x2b, 0x57, 0xed, 0xeb, 0xe5, 0xd0, 0x6a, 0x60, 0xdd, 0x3b, 0xaa, 0xf8, 0x62, 0x4d,
    0xd2, 0xb7, 0xc8, 0xca, 0xdc, 0x3f, 0x98, 0x13, 0xca, 0x4d, 0x8f, 0x8a, 0xed, 0xab, 0xd8, 0x65,
    0xbb, 0xac, 0xfe, 0xc8, 0xe1, 0xae, 0x8f, 0xdc, 0x2a, 0x51, 0x5a, 0xc8, 0x83, 0xbc, 0x68, 0x80,
    0x09, 0x0c, 0xa9, 0xb9, 0x63, 0x5c, 0xe1, 0xe6, 0x45, 0xcb, 0x5e, 0x3b, 0x46, 0x4a, 0xd2, 0xa0,
    0xd0, 0xc2, 0xac, 0x03, 0xd6, 0xb4, 0x15, 0xa5, 0x73, 0x60, 0xe0, 0x1d, 0x17, 0x66, 0x32, 0xf2,
    0x0b, 0x2e, 0xd2, 0xdc, 0xdb, 0xac, 0x4d, 0xca, 0x4b, 0x4d, 0x66, 0xaf, 0xa8, 0xc7, 0xaa, 0xea,
    0x70, 0x20, 0x48, 0x7a, 0x1c, 0xcf, 0xf9, 0x38, 0x7c, 0x80, 0x4e, 0x6f, 0xb1, 0x77, 0x27, 0xc3,
    0x6e, 0x46, 0xb7, 0xe4, 0xd6, 0x27, 0x4d, 0x13, 0xb4, 0x40, 0xa9, 0xfc, 0xd1, 0xa0, 0x76, 0xcc,
    0x02, 0x9d, 0x17, 0x34, 0x21, 0x9b, 0x98, 0x50, 0xb1, 0xa2, 0xa8, 0xc5, 0x8d, 0x18, 0x1f, 0xbf,
    0x46, 0x9e, 0x20, 0x75, 0x62, 0x56, 0x40, 0xe0, 0xeb, 0x86, 0xd1, 0x4c, 0x72, 0xc8, 0x59, 0x66,
    0xd4, 0xc0, 0x76, 0x58, 0x38, 0x94, 0x5f, 0x36, 0x11, 0xa4, 0x8a, 0xd7, 0x06, 0xf8, 0xf5, 0x72,
    0xfc, 0x6b, 0xed, 0x28, 0x58, 0xab, 0x93, 0xb5, 0x6f, 0x84, 0x3c, 0x14, 0x8a, 0x66, 0x32, 0x88,
    0xab, 0x8e, 0x2a, 0x92, 0x06, 0x49, 0x48, 0xb3, 0x8a, 0x86, 0x46, 0xd4, 0xd6, 0x15, 0xe4, 0x47,
    0xf8, 0x11, 0x5e, 0xe9, 0xf4, 0x7a, 0x74, 0x46, 0xf5, 0x56, 0xc9, 0x85, 0xe8, 0x63, 0x94, 0xe9,
    0xbe, 0xee, 0x27, 0xe3, 0x3e, 0x03, 0x1e, 0x8b, 0x40, 0xcd, 0x50, 0xf4, 0x2c, 0x70, 0x68, 0x7b,
    0xec, 0xf2, 0x29, 0x0a, 0x30, 0x9f, 0x0b, 0x09, 0xc9, 0xb5, 0x7f, 0x11, 0x81, 0xaa, 0x56, 0x08,
    0xa6, 0x33, 0x53, 0xbf, 0x0d, 0x27, 0x68, 0xef, 0x46, 0x26, 0x29, 0x8f, 0x68, 0xc1, 0xc0, 0xb3,
    0xfb, 0x00, 0xa1, 0x41, 0x5a, 0xa7, 0x3e, 0x62, 0x06, 0xf4, 0x50, 0xb0, 0xd2, 0x79, 0xcd, 0x47,
    0x29, 0xc3, 0x39, 0xa3, 0xaf, 0x71, 0x3e, 0xa9, 0x6f, 0xeb, 0xaa, 0xc9, 0x13, 0x4c, 0x0b, 0xdf,
    0x55, 0xe2, 0x50, 0x38, 0xa7, 0x8d, 0x5d, 0x15, 0x71, 0xb9, 0x3a, 0x3e, 0xec, 0x19, 0x86, 0xb5,
    0xd9, 0xb7, 0x8d, 0xe8, 0x69, 0x99, 0x31, 0xb8, 0x60, 0xa8, 0x5e, 0xd9, 0x3f, 0x0b, 0x1f, 0x84,
    0x34, 0x89, 0xc4, 0x9a, 0x05, 0x15, 0xfb, 0xa6, 0x87, 0x31, 0x58, 0x05, 0x2e, 0x10, 0x54, 0x98,
    0x35, 0xa9, 0x96, 0xd1, 0x52, 0x35, 0x89, 0x8d, 0x13, 0xae, 0xd1, 0xed, 0xaa, 0x9a, 0x59, 0x5c,
    0x45, 0x51, 0x4e, 0x4d, 0xa1, 0x36, 0x0c, 0xfb, 0xfe, 0x0b, 0xf6, 0x02, 0x98, 0x20, 0xbc, 0xe3,
    0x7e, 0x7a, 0xec, 0x3d, 0xb1, 0xf5, 0xb3, 0xa3, 0x64, 0xee, 0x8b, 0x1c, 0xbb, 0xc8, 0x66, 0xc2,
    0x49, 0xb7, 0xa5, 0xf9, 0x7e, 0x0e, 0x2a, 0x98, 0xf1, 0xeb, 0xa9, 0xb8, 0x94, 0x7e, 0x7a, 0xd3,
    0x16, 0xb4, 0xee, 0x01, 0x5b, 0x09, 0x8f, 0x91, 0xc9, 0x2e, 0x0b, 0xbd, 0x83, 0xa0, 0x25, 0xfb,
    0x4a, 0xdc, 0xd1, 0x89, 0xe8, 0x12, 0x5a, 0x53, 0x7d, 0x7e, 0x7a, 0x54, 0x71, 0xd9, 0x03, 0x71,
    0x60, 0x2a, 0x23, 0x56, 0xa5, 0xad, 0xc1, 0x2c, 0x5c, 0x79, 0xee, 0xb2, 0xac, 0x72, 0x2b, 0xee,
    0x11, 0xf9, 0x8a, 0x3b, 0x75, 0xe8, 0xce, 0x99, 0x35, 0x0b, 0x40, 0xe7, 0x71, 0x76, 0x3c, 0x47,
    0xbb, 0x66, 0x68, 0x1a, 0xe3, 0xe4, 0xde, 0x12, 0x7f, 0x74, 0x78, 0x89, 0x00, 0xa1, 0x99, 0xba,
    0x58, 0xa9, 0x1e, 0x91, 0xb8, 0x25, 0x2a, 0x23, 0xa4, 0xac, 0xae, 0xec, 0x94, 0x0a, 0x75, 0xaa,
    0xad, 0xc3, 0xd1, 0x20, 0x1f, 0xc1, 0x63, 0xc5, 0x14, 0x51, 0x22, 0xe3, 0xee, 0x40, 0x52, 0x1a,
    0xb7, 0x27, 0x00, 0xfb, 0x56, 0x62, 0x84, 0xc8, 0xb1, 0x17, 0xf6, 0x18, 0x9e, 0x85, 0x62, 0xc5,
    0x2e, 0xe2, 0xc2, 0x56, 0x07, 0x63, 0xd9, 0x96, 0x14, 0x08, 0x72, 0xfc, 0x9b, 0xb8, 0xff, 0x4b,
    0x65, 0xe8, 0x8e, 0x8a, 0x04, 0xc0, 0xa3, 0x16, 0x1d, 0xff, 0x47, 0xa0, 0xbf, 0x4b, 0xcb, 0x53,
    0xc4, 0xff, 0x0d, 0x31, 0xcc, 0x1b, 0xa7, 0x47, 0xfa, 0x40, 0xb9, 0x8d, 0xa0, 0x93, 0xb7, 0xa7,
    0x63, 0x14, 0x47, 0xae, 0x07, 0x58, 0xa0, 0x8c, 0x64, 0x7c, 0x2b, 0x04, 0x0d, 0xc0, 0xbb, 0xef,
    0x07, 0xed, 0x09, 0x72, 0x10, 0x72, 0x20, 0x72, 0x02, 0xf3, 0xda, 0x58, 0x1a, 0x79, 0x4b, 0xa3,
    0xac, 0xb4, 0x0d, 0xb6, 0x75, 0x9a, 0xdc, 0x94, 0x1e, 0x28, 0x78, 0xbb, 0x60, 0xb1, 0x37, 0x7b,
    0x81, 0x18, 0xb9, 0x7b, 0xdd, 0x5b, 0xcf, 0x3e, 0xc0, 0xc6, 0xb8, 0x31, 0x38, 0x79, 0x92, 0x4a,
    0xb2, 0x7f, 0x98, 0xe7, 0x4b, 0xc2, 0xb4, 0x00, 0xc3, 0x61, 0x53, 0xe2, 0xb5, 0xa8, 0xec, 0x25,
    0xef, 0xfe, 0x0f, 0xc9, 0x2a, 0x12, 0x0f, 0xf9, 0xdf, 0x3a, 0x0f, 0x23, 0xfa, 0xda, 0x53, 0x03,
    0xaf, 0xfb, 0xf0, 0x4c, 0x5c, 0x96, 0xf3, 0xb8, 0x17, 0xed, 0x22, 0x56, 0x9b, 0x13, 0x39, 0x79,
    0x10, 0x80, 0x11, 0xe8, 0x11, 0x96, 0x7d, 0x35, 0x04, 0xa9, 0x59, 0x88, 0x73, 0x1a, 0x09, 0xb1,
    0x20, 0x3b, 0x43, 0x1c, 0xbe, 0x0a, 0x3e, 0x80, 0x07, 0xe2, 0x64, 0x19, 0xbf, 0x19, 0x95, 0x6b,
    0x60, 0xfc, 0x5a, 0xda, 0x1d, 0x25, 0x7e, 0x4c, 0x00, 0x5e, 0xd9, 0xd1, 0xfc, 0x2c, 0xd4, 0x9d,
    0x1c, 0xb3, 0xed, 0x34, 0xd1, 0x46, 0xb4, 0x90, 0xc0, 0x05, 0x03, 0x2c, 0x34, 0xa7, 0xa2, 0xa4,
    0xce, 0x8e, 0x06, 0x89, 0xe2, 0x65, 0x76, 0x88, 0x03, 0x53, 0x57, 0xf1, 0x6e, 0xe3, 0x98, 0xb5,
    0x68, 0x41, 0x74, 0xea, 0x6f, 0xbf, 0x00, 0xa7, 0x01, 0x08, 0x50, 0xf6, 0xa9, 0xc1, 0xc6, 0x4b,
    0xcd, 0x94, 0x4f, 0x70, 0x00, 0x7e, 0x57, 0xcd, 0x53, 0xd8, 0x2b, 0xd5, 0x7c, 0x6c, 0x15, 0xd6,
    0x01, 0xf0, 0x61, 0xfc, 0xe4, 0xd0, 0x61, 0xff, 0x73, 0xe3, 0xc5, 0x04, 0xd5, 0xd4, 0x01, 0x93,
    0xa9, 0x48, 0xbf, 0x43, 0xfb, 0x74, 0xe6, 0x89, 0x81, 0xd4, 0x30, 0x0c, 0x9e, 0xf9, 0x3a, 0xd2,
    0xd2, 0x68, 0xb0, 0x79, 0xe8, 0xb5, 0x1b, 0x99, 0x0d, 0x62, 0xcf, 0x20, 0x90, 0xa5, 0x79, 0xb8,
    0x72, 0xe3, 0xaf, 0x1a, 0xc1, 0x22, 0xbc, 0x96, 0x1d, 0x3a, 0x29, 0x93, 0x59, 0xa7, 0x0b, 0xf7,
    0x2a, 0x4b, 0x55, 0x22, 0x69, 0xaa, 0xa7, 0x91, 0xd9, 0x7e, 0x2e, 0x32, 0xc1, 0x59, 0x30, 0x35,
    0x73, 0x3d, 0x30, 0xef, 0x13, 0xb0, 0xd1, 0x15, 0x11, 0x00, 0xab, 0x49, 0x58, 0xe8, 0xe0, 0xc3,
    0x73, 0xf5, 0xf8, 0x76, 0xa7, 0x06, 0x21, 0x10, 0x01, 0x73, 0xce, 0x70, 0x94, 0xc6, 0x64, 0x87,
    0xe1, 0xdc, 0x07, 0x2f, 0x49, 0x1c, 0xeb, 0x6f, 0x01, 0xfb, 0x7c, 0xa2, 0xba, 0xc3, 0xa1, 0x7f,
    0x07, 0x53, 0x99, 0x7b, 0xca, 0x44, 0x5d, 0xaf, 0xdd, 0xe1, 0xfe, 0xab, 0x63, 0xdf, 0x19, 0xaa,
    0x8f, 0x26, 0xa0, 0x51, 0x58, 0xb6, 0x0a, 0xe4, 0x58, 0xfb, 0xe3, 0x85, 0x3f, 0xf0, 0x69, 0xa5,
    0xe3, 0xd0, 0xcb, 0xd8, 0xe3, 0xb8, 0xb0, 0x23, 0x89, 0x10, 0x1a, 0xe5, 0x72, 0x9c, 0xae, 0xda,
    0xba, 0xc8, 0x26, 0x75, 0xca, 0x43, 0xa4, 0x3c, 0x1a, 0xfe, 0xea, 0x18, 0x95, 0xc2, 0x46, 0x3b,
};

static const uint8_t sMessageEncodingTest0541_ExpectedEncoding[] =
{
    0x20, 0x25, 0x9c, 0x42, 0x80, 0x31, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x3b, 0x2a,
    0x09, 0x29, 0xeb, 0x14, 0xe4, 0xc5, 0xda, 0x5b, 0x2d, 0x09, 0x0c, 0x84, 0xb7, 0x7f, 0xa3, 0x07,
    0xd1, 0xa8, 0x4e, 0x1a, 0x1e, 0x0f, 0xa6, 0xc1, 0x4b, 0x78, 0x98, 0xbe, 0x02, 0x66, 0x16, 0x36,
    0x2a, 0x0f, 0x58, 0xe5, 0x8d, 0x8d, 0x27, 0x88, 0xa2, 0xf0, 0x91, 0x08, 0x48, 0xa4, 0xcc, 0x94,
    0x73, 0x19, 0x5f, 0x23, 0xa3, 0xd0, 0x07, 0xb6, 0xd9, 0x4a, 0x06, 0xc3, 0x81, 0xe9, 0x7f, 0x5d,
    0x86, 0xb6, 0x09, 0xc8, 0x2b, 0x1b, 0x8e, 0xab, 0x22, 0x2e, 0x8d, 0x0a, 0x9b, 0xcd, 0xfe, 0xa0,
    0x63, 0x6b, 0x2a, 0x06, 0x11, 0xc1, 0x9b, 0xb7, 0x07, 0xcf, 0xdf, 0x29, 0xe2, 0x60, 0x6d, 0x17,
    0xd0, 0x30, 0x34, 0x48, 0xaf, 0xbd, 0x36, 0x3b, 0x49, 0x19, 0x38, 0xa9, 0xcb, 0x8d, 0x5e, 0xd2,
    0xe3, 0xb0, 0xdc, 0xe4, 0x1c, 0x69, 0xd8, 0x6d, 0x6f, 0xcc, 0x62, 0xfc, 0x70, 0x01, 0x99, 0x09,
    0x69, 0xa3, 0x47, 0xee, 0xbb, 0x9c, 0xea, 0xa7, 0x14, 0x6a, 0x18, 0x85, 0x65, 0xdf, 0x2f, 0xac,
    0x47, 0x8b, 0x53, 0x10, 0xf2, 0x8c, 0xbb, 0x00, 0xd1, 0xa5, 0x7a, 0x85, 0xc9, 0x05, 0xbe, 0x73,
    0xb7, 0x41, 0x41, 0x8a, 0xa5, 0xf7, 0x2f, 0xed, 0xa3, 0x1d, 0xa4, 0x26, 0x53, 0xa8, 0x5e, 0xf1,
    0x8f, 0x3b, 0x79, 0x97, 0x31, 0xe9, 0x1d, 0x11, 0x93, 0x43, 0x4b, 0xb9, 0xfb, 0xa1, 0x67, 0x5f,
    0x59, 0xba, 0xb1, 0xb2, 0xd7, 0x9e, 0xdd, 0xdc, 0xdf, 0xce, 0xfb, 0x82, 0x9a, 0x94, 0x15, 0xdf,
    0x18, 0xcb, 0x62, 0xbd, 0xa6, 0x5b, 0x58, 0x70, 0x56, 0x2a, 0xe3, 0x65, 0x56, 0x06, 0x94, 0xeb,
    0x9e, 0xbe, 0x1c, 0x9a, 0x52, 0x3f, 0x14, 0xb1, 0x53, 0xd2, 0xa8, 0xdd, 0x67, 0xd0, 0x4a, 0x47,
    0x2d, 0x0b, 0xb7, 0xc0, 0xbf, 0x6a, 0xbc, 0x24, 0x28, 0xa7, 0xe5, 0x90, 0x3f, 0xf7, 0x60, 0xe2,
    0x9b, 0x6a, 0x1b, 0xe6, 0xda, 0xc6, 0xdc, 0x67, 0x35, 0x55, 0x6f, 0x81, 0x65, 0x0c, 0x76, 0xe2,
    0x3b, 0x82, 0xf7, 0x79, 0xed, 0xfd, 0x37, 0x35, 0xd4, 0xc4, 0xdd, 0x8e, 0xd7, 0x5c, 0x97, 0x20,
    0x90, 0x15, 0xc5, 0xd5, 0x7b, 0x4e, 0x39, 0x03, 0x9b, 0x9d, 0xb5, 0xb7, 0x29, 0xeb, 0x93, 0x4c,
    0x4d, 0xa7, 0xa4, 0x3c, 0x82, 0xf0, 0x7c, 0x7f, 0x00, 0x3b, 0x36, 0xd8, 0xa6, 0xe8, 0xe1, 0xe0,
    0x45, 0x8d, 0xca, 0xff, 0xee, 0x13, 0x08, 0xa9, 0x85, 0x4f, 0xc1, 0x7b, 0x33, 0x88, 0xb6, 0x32,
    0xd4, 0x93, 0x80, 0x08, 0x8f, 0x5e, 0xb6, 0xea, 0xc3, 0xdb, 0xc3, 0xa2, 0x73, 0x43, 0x25, 0xe3,
    0xaa, 0xc8, 0x73, 0x3b, 0x39, 0x61, 0x6e, 0x59, 0xa5, 0xc8, 0x4a, 0xdd, 0x7e, 0x11, 0xb5, 0x99,
    0x36, 0x49, 0xb2, 0x90, 0xc7, 0x29, 0x40, 0x26, 0x8d, 0xe3, 0xbb, 0xbb, 0x50, 0x30, 0x32, 0x75,
    0xc8, 0xe5, 0x73, 0x30, 0x45, 0x2c, 0x4b, 0xf5, 0xd3, 0x3c, 0x91, 0x4e, 0xd6, 0xe1, 0x3f, 0xf8,
    0x1b, 0x21, 0x9e, 0x8b, 0xc7, 0x97, 0xea, 0x93, 0xf3, 0x55, 0x03, 0x52, 0x16, 0xb7, 0xb6, 0x02,
    0x0f, 0xa1, 0xbc, 0x0b, 0x3a, 0x9d, 0x4b, 0x69, 0xdf, 0x3d, 0x0e, 0x86, 0x7b, 0x88, 0x0a, 0x60,
    0xf5, 0xb2, 0xcc, 0x17, 0xdf, 0x76, 0xc3, 0x70, 0xfb, 0xc2, 0x89, 0xc8, 0x85, 0x12, 0x18, 0x11,
    0x08, 0xa0, 0x04, 0xbe, 0x2c, 0xce, 0xbd, 0x1f, 0xcb, 0xee, 0x24, 0xb7, 0x53, 0xb4, 0x3e, 0xfc,
    0xa5, 0xca, 0x67, 0x18, 0x4d, 0x0b, 0x9a, 0xdd, 0xc2, 0xbb, 0xd6, 0x81, 0xf1, 0x63, 0xfa, 0x9f,
    0x52, 0xd3, 0x3c, 0xa7, 0x24, 0x51, 0x5f, 0x6f, 0x16, 0x6f, 0x61, 0x3d, 0xe8, 0x92, 0x1a, 0x5e,
    0x36, 0x45, 0x13, 0x5e, 0xdc, 0x46, 0xcf, 0xc7, 0xd8, 0xe0, 0xd3, 0x70, 0x73, 0x4f, 0xad, 0x21,
    0x98, 0x50, 0x84, 0xbc, 0x00, 0xaf, 0x5f, 0x28, 0xc0, 0xda, 0xa1, 0x98, 0x29, 0x30, 0xad, 0xe3,
    0x7f, 0xf4, 0xb1, 0xdd, 0x55, 0xba, 0x06, 0x9c, 0x00, 0x67, 0x87, 0x3a, 0xff, 0xb3, 0x93, 0x9f,
    0x3d, 0x2b, 0xc2, 0x15, 0x04, 0xeb, 0x61, 0x35, 0x1a, 0xb2, 0x3a, 0xcf, 0x04, 0x59, 0x0e, 0x7d,
    0x8d, 0x50, 0x66, 0x8a, 0x0b, 0xf4, 0xcb, 0x29, 0xda, 0xba, 0x48, 0x02, 0xa1, 0xea, 0xde, 0x3a,
    0x9c, 0x80, 0x34, 0xb4, 0x5d, 0xa4, 0x0b, 0x39, 0x5a, 0xd4, 0xe2, 0xb4, 0x7d, 0x46, 0x4c, 0x32,
    0xd1, 0xa2, 0x84, 0x21, 0x8f, 0x34, 0xb5, 0x60, 0x47, 0x94, 0xa6, 0x3c, 0x98, 0xe4, 0x87, 0x6a,
    0xca, 0xd0, 0x05, 0x96, 0x35, 0x23, 0x8a, 0x14, 0x7e, 0x30, 0x55, 0x87, 0x21, 0x76, 0x25, 0x4c,
    0xcf, 0x5c, 0xb8, 0x7a, 0xf7, 0x1e, 0xa4, 0x2c, 0x06, 0xa7, 0xbf, 0x11, 0xd7, 0x83, 0x7b, 0x7f,
    0x0f, 0xb9, 0xbe, 0x07, 0x11, 0x83, 0x9c, 0x74, 0xc2, 0x5c, 0x52, 0xf8, 0x2b, 0x37, 0x2e, 0x10,
    0x9c, 0x7d, 0x8a, 0x0d, 0x6f, 0x6f, 0x9a, 0xd1, 0xdc, 0xb1, 0xd5, 0x2f, 0xeb, 0x6c, 0x9e, 0xcc,
    0x30, 0x52, 0x51, 0xdd, 0x40, 0x3f, 0xc1, 0x28, 0xb2, 0x9d, 0xc9, 0xc5, 0x89, 0x2f, 0x12, 0x91,
    0xd9, 0x2b, 0x30, 0x0a, 0x39, 0x60, 0x4d, 0xe7, 0x10, 0x07, 0x0a, 0xa9, 0x39, 0xa3, 0xa3, 0x83,
    0xea, 0x30, 0x16, 0x9b, 0x0d, 0x66, 0x9f, 0xae, 0xe6, 0xef, 0xf1, 0x82, 0x7f, 0x3b, 0xe9, 0x05,
    0x20, 0x4c, 0x48, 0x62, 0xc4, 0x72, 0xde, 0xa4, 0x66, 0x58, 0x0a, 0x29, 0xb9, 0x9d, 0x65, 0xbe,
    0xcd, 0x53, 0x29, 0xde, 0xa8, 0xfb, 0xd7, 0xdf, 0x84, 0x79, 0x70, 0x6e, 0x4d, 0x2b, 0xc2, 0xf3,
    0xc6, 0x28, 0x67, 0x78, 0x49, 0x9f, 0x42, 0x68, 0x83, 0x81, 0x1a, 0xd9, 0x74, 0x43, 0x2a, 0x52,
    0xc0, 0xc0, 0x4b, 0xf8, 0xcc, 0xb0, 0xf6, 0xe5, 0x84, 0xcf, 0xc8, 0x79, 0xe6, 0xae, 0xe9, 0x60,
    0x6c, 0xd7, 0x0a, 0x05, 0x8e, 0x86, 0x22, 0x0f, 0x82, 0xd8, 0x50, 0x73, 0x5a, 0x77, 0x51, 0x67,
    0xee, 0x44, 0xa6, 0xde, 0xa1, 0xce, 0xda, 0x99, 0xdb, 0xd3, 0xf6, 0x63, 0xc5, 0x5b, 0xd4, 0x26,
    0x4b, 0x8c, 0xbe, 0x8c, 0xfe, 0xe4, 0xc4, 0x85, 0x15, 0x6d, 0x76, 0x76, 0x01, 0x56, 0xf6, 0x24,
    0xd1, 0xfc, 0x12, 0x07, 0x1a, 0xe5, 0xc8, 0xbd, 0xae, 0x67, 0x3f, 0x5c, 0x5a, 0x68, 0xd7, 0x85,
    0x35, 0xe8, 0x61, 0x3e, 0xb7, 0x57, 0x42, 0x61, 0x6a, 0x4c, 0x4a, 0x7a, 0x13, 0xbd, 0xef, 0xd2,
    0xae, 0xee, 0x96, 0x86, 0xd5, 0x88, 0x75, 0x6f, 0x48, 0x99, 0x66, 0x6b, 0x41, 0x8d, 0x29, 0x47,
    0x58, 0xe8, 0xbd, 0x95, 0x90, 0x0a, 0x4a, 0xe7, 0xf8, 0x17, 0x0e, 0x70, 0x09, 0x7d, 0xd8, 0x62,
    0x8a, 0xe1, 0x36, 0xf1, 0x7f, 0xd3, 0xff, 0x77, 0x15, 0xef, 0xbc, 0x86, 0xe0, 0x2f, 0xb3, 0x9f,
    0xe2, 0xcd, 0xce, 0xe6, 0xed, 0x76, 0x51, 0x25, 0x98, 0x17, 0x36, 0x8f, 0x30, 0x22, 0x1e, 0x95,
    0x6c, 0x76, 0xb5, 0x60, 0x1d, 0x80, 0xe2, 0x34, 0xc1, 0x27, 0xfb, 0x83, 0x63, 0x88, 0xeb, 0xf1,
    0xbc, 0x7b, 0x7c, 0x98, 0xba, 0xed, 0x23, 0x43, 0x09, 0x12, 0xe1, 0xbe, 0x94, 0x81, 0xb1, 0x3e,
    0xd7, 0x11, 0x05, 0xc6, 0xb4, 0x11, 0x39, 0x7e, 0x2c, 0x41, 0x1a, 0x0a, 0xb9, 0xdc, 0x5a, 0x5d,
    0x0e, 0xb1, 0x31, 0x2a, 0x35, 0x22, 0x82, 0x51, 0x6d, 0xa6, 0x37, 0xd6, 0x2a, 0xdd, 0x96, 0xaf,
    0xb4, 0x20, 0xcd, 0x2a, 0x37, 0xe4, 0x69, 0xda, 0xc1, 0x8e, 0x78, 0x8a, 0x99, 0x87, 0xa7, 0x49,
    0x6b, 0x1c, 0xd6, 0x94, 0xd7, 0x06, 0xe9, 0xbb, 0xd5, 0x20, 0x9a, 0xa4, 0x14, 0xc8, 0x7c, 0x3d,
    0x35, 0xd7, 0xfa, 0x7d, 0x17, 0xa6, 0x78, 0x34,
};

static const MessageEncodingTestVector sMessageEncodingTest0541 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x3180429C,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2A3B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0541_EncryptionKey,
    sMessageEncodingTest0541_Payload,
    sizeof(sMessageEncodingTest0541_Payload),
    sMessageEncodingTest0541_ExpectedEncoding,
    sizeof(sMessageEncodingTest0541_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0542_EncryptionKey =
{
    {
        0x41, 0x2c, 0x85, 0x29, 0x35, 0x7b, 0xfd, 0xd3, 0xa9, 0xe7, 0x0a, 0xc9, 0x1e, 0xad, 0xa9, 0x4d,
    }
};
static const uint8_t sMessageEncodingTest0542_Payload[] =
{
    0x17, 0x3a, 0x06, 0xc7, 0x22, 0x50, 0x91, 0x68, 0xe7, 0xa7, 0xd8, 0x49, 0x60, 0x0e, 0x7c, 0x5b,
    0x12, 0x8c, 0xa1, 0x2f, 0xdf, 0xd6, 0x0e, 0x47, 0xd7, 0xc9, 0x7f, 0x22, 0x55, 0xea, 0x90, 0x0a,
    0x87, 0x1c, 0xfa, 0xb8, 0x09, 0x4d, 0x82, 0x1d, 0x2e, 0x40, 0xe4, 0xb1, 0x73, 0xd5, 0xbc, 0xd4,
    0xf3, 0xbe, 0x2d, 0xbc, 0xee, 0x90, 0x6c, 0xdc, 0x22, 0x30, 0x0d, 0xed, 0xe5, 0xae, 0xea, 0x5d,
    0xbd, 0x7d, 0xb7, 0xca, 0xf7, 0x67, 0xe7, 0x06, 0x56, 0xdc, 0x05, 0xa8, 0x53, 0xbf, 0x0e, 0x09,
    0xdf, 0xe9, 0xe1, 0xff, 0xf3, 0xb0, 0x49, 0x81, 0xc6, 0x68, 0xfa, 0x22, 0x06, 0xee, 0x4d, 0x77,
    0x9a, 0x61, 0x9b, 0x26, 0x27, 0x9d, 0xd9, 0x50, 0x7b, 0x6b, 0x00, 0xce, 0xfa, 0x20, 0xce, 0xc5,
    0xab, 0x8e, 0xfa, 0x34, 0x99, 0xa1, 0x22, 0x32, 0xd8, 0x2d, 0xb2, 0x7f, 0xe9, 0x64, 0x47, 0x56,
    0xee, 0x1f, 0x86, 0x40, 0x3f, 0x29, 0x4e, 0x8a, 0x01, 0x59, 0x76, 0xf2, 0x06, 0x74, 0x1f, 0x8e,
    0xcc, 0x43, 0x8c, 0x48, 0xe0, 0x7c, 0x97, 0xed, 0xe0, 0x30, 0x0b, 0x92, 0x8a, 0x5b, 0xb4, 0x35,
    0x7a, 0x05, 0xd8, 0x7d, 0x95, 0xea, 0x9f, 0x0a, 0x08, 0xa3, 0x5c, 0x1f, 0x8a, 0x5f, 0x28, 0xaa,
    0x0c, 0x66, 0x20, 0x79, 0x46, 0xe9, 0x0a, 0x50, 0xcb, 0x55, 0x01, 0x9b, 0x6f, 0xc2, 0x4c, 0x03,
    0xbd, 0xec, 0xba, 0x5d, 0xcb, 0xbc, 0x22, 0x21, 0x44, 0xb4, 0x33, 0x26, 0xd5, 0xfa, 0x9e, 0x54,
    0xdb, 0x58, 0xe4, 0x16, 0x35, 0x0c, 0x7f, 0xe3, 0xce, 0x8d, 0x79, 0xd8, 0x36, 0x57, 0x7d, 0x02,
    0x52, 0x9f, 0x7d, 0xf2, 0x13, 0xfa, 0x7f, 0xce, 0xfa, 0x1d, 0x41, 0xd9, 0x9e, 0xe8, 0x13, 0x93,
    0xe1, 0x7c, 0xbb, 0x19, 0x2b, 0x4b, 0xeb, 0x6f, 0x86, 0xda, 0xe7, 0x5f, 0x9c, 0xd4, 0x84, 0x58,
    0x5c, 0xc7, 0xae, 0x66, 0xb9, 0x1a, 0xed, 0x9d, 0x73, 0xb3, 0x95, 0x72, 0x5b, 0xe0, 0xf0, 0x5b,
    0x5f, 0x52, 0xd5, 0x0a, 0xf6, 0x9f, 0x2e, 0x05, 0x64, 0x51, 0x2f, 0xd9, 0x0c, 0x94, 0x82, 0x4d,
    0xe9, 0x03, 0x40, 0x7a, 0x2d, 0x4e, 0x20, 0x88, 0xeb, 0x0c, 0xbc, 0x37, 0xdc, 0xe8, 0xfe, 0x27,
    0x3b, 0x98, 0xc2, 0xe3, 0xe3, 0x24, 0x0e, 0xe4, 0xb7, 0xa9, 0x28, 0x98, 0x5e, 0x6f, 0x1e, 0xd8,
    0xca, 0x0f, 0xf6, 0x81, 0x70, 0xe2, 0xb3, 0x16, 0xc4, 0xd7, 0x9e, 0xfd, 0x84, 0xea, 0xd6, 0x6d,
    0x4c, 0x72, 0x44, 0x9b, 0xf2, 0xb0, 0x08, 0x5e, 0x2a, 0x92, 0x3c, 0x64, 0x30, 0x5f, 0x2b, 0xcf,
    0xa7, 0xb1, 0x04, 0x46, 0xa9, 0x7f, 0x88, 0xe5, 0xc2, 0xd3, 0x10, 0x00, 0xc9, 0x60, 0x9c, 0xe1,
    0x80, 0x2a, 0x00, 0x95, 0xc1, 0x28, 0x06, 0x7a, 0x0a, 0x8b, 0x01, 0x5b, 0x80, 0xb2, 0x64, 0x8b,
    0x4a, 0xff, 0xd5, 0x27, 0xae, 0xa2, 0xe3, 0xf0, 0x1c, 0xc7, 0xfb, 0xe6, 0xe1, 0x77, 0xa0, 0x17,
    0xba, 0x26, 0xe1, 0xb2, 0xf7, 0x37, 0xe0, 0xbe, 0xca, 0xfc, 0xbd, 0x3c, 0x63, 0xa1, 0x64, 0x5f,
    0x6e, 0xa4, 0x95, 0x43, 0xb1, 0xf6, 0xde, 0x67, 0x53, 0x35, 0x28, 0xf8, 0xa9, 0x27, 0x54, 0xe6,
    0xb8, 0xf3, 0xbe, 0xd0, 0xc0, 0x80, 0x24, 0xcc, 0xd5, 0xdc, 0xcb, 0xac, 0x04, 0x88, 0xfd, 0x43,
    0xac, 0x12, 0x2f, 0xbc, 0x7a, 0x2d, 0x9f, 0x48, 0x43, 0xd9, 0x54, 0x2c, 0xbd, 0x15, 0x4c, 0x41,
    0x6b, 0x9f, 0x50, 0x67, 0x28, 0x2f, 0x24, 0x1b, 0x3e, 0xfc, 0x80, 0xc7, 0xa2, 0x09, 0x94, 0x06,
    0x8d, 0x70, 0xae, 0xbf, 0x32, 0x0e, 0x87, 0x58, 0x0a, 0x51, 0x39, 0xaa, 0x43, 0xad, 0x79, 0xc3,
    0x35, 0xf6, 0xe3, 0x87, 0xa3, 0xa4, 0xc9, 0x20, 0x93, 0x53, 0x2e, 0x25, 0xd5, 0xa7, 0xeb, 0xad,
    0xb8, 0x1c, 0xb0, 0xf4, 0x07, 0x63, 0x34, 0xa5, 0x04, 0x9d, 0x66, 0x43, 0xe6, 0x00, 0x65, 0x7d,
    0x1f, 0x2d, 0xd2, 0x21, 0x91, 0x3c, 0x77, 0x6b, 0x36, 0x8d, 0xd1, 0x9b, 0x3c, 0x8e, 0xc9, 0x5d,
    0x83, 0xe4, 0x5d, 0xa4, 0x2f, 0x62, 0xe5, 0xdc, 0x9c, 0x81, 0xb7, 0x78, 0xb1, 0x45, 0x4d, 0xa5,
    0xa7, 0x3d, 0xf9, 0x6e, 0xe4, 0xc9, 0x30, 0xcd, 0x67, 0x84, 0xc4, 0x00, 0x1f, 0x22, 0x80, 0x3e,
    0x47, 0x14, 0x73, 0x28, 0x67, 0x9d, 0x41, 0x64, 0xd7, 0x3c, 0xf0, 0x6f, 0xb0, 0x99, 0x85, 0x7b,
    0x69, 0xa1, 0x40, 0xe9, 0x73, 0xcc, 0xc5, 0x24, 0x52, 0x5f, 0xad, 0xd2, 0xfc, 0xec, 0x3a, 0x29,
    0x31, 0xd9, 0x67, 0xfa, 0x26, 0x16, 0x4b, 0xe8, 0x5d, 0x71, 0xcb, 0xfd, 0x7f, 0x1f, 0x70, 0x7a,
    0x1a, 0x9c, 0xb6, 0x46, 0x40, 0x31, 0xeb, 0x4b, 0x6f, 0x83, 0xed, 0x9a, 0xb1, 0x43, 0xbd, 0x6e,
    0xc6, 0x30, 0x7c, 0xd5, 0xd9, 0x08, 0xc2, 0x9e, 0x53, 0x0e, 0xb8, 0x50, 0x74, 0x86, 0xe1, 0x46,
    0xff, 0xc4, 0x72, 0xf0, 0x40, 0xbc, 0xc1, 0x45, 0xc9, 0x77, 0x52, 0xa8, 0xaa, 0x94, 0xd0, 0x94,
    0x1a, 0x55, 0x2b, 0x2e, 0x65, 0x4c, 0xb9, 0x75, 0x45, 0x7c, 0xee, 0xe5, 0xd3, 0x3c, 0xa0, 0x4b,
    0x14, 0x8e, 0x2d, 0xde, 0x5d, 0x4c, 0xae, 0x06, 0x86, 0x3b, 0x6b, 0x70, 0x11, 0x61, 0x3a, 0x74,
    0x0b, 0x5c, 0x74, 0x8e, 0xd0, 0xa5, 0x2f, 0x29, 0x1a, 0x4b, 0x9a, 0x9b, 0x59, 0x2b, 0xd3, 0x1b,
    0xde, 0xc6, 0x2e, 0x0b, 0xb1, 0xd2, 0x9c, 0xb0, 0xa6, 0x8c, 0xb5, 0x42, 0x8d, 0xd8, 0x53, 0xbd,
    0xdf, 0x25, 0xb0, 0x5f, 0x21, 0xff, 0xbc, 0xc4, 0x59, 0xcd, 0x7d, 0x0f, 0x88, 0x22, 0x0d, 0x96,
    0x20, 0xe3, 0x71, 0x2d, 0x9e, 0x53, 0xd8, 0x5f, 0x07, 0x3f, 0xa0, 0xac, 0xcd, 0xb6, 0xfe, 0xc3,
    0x73, 0x8d, 0x8d, 0x53, 0xd0, 0x07, 0x92, 0x6b, 0x0c, 0x11, 0xf9, 0x58, 0x88, 0x2f, 0x2d, 0x6f,
    0x85, 0xc8, 0x59, 0x86, 0x56, 0xd7, 0x9f, 0xbe, 0x40, 0x95, 0xf4, 0xa2, 0xdd, 0xbb, 0xa1, 0x18,
    0x06, 0x10, 0xc1, 0xd6, 0xdb, 0x5e, 0x3c, 0x18, 0x90, 0xad, 0xe7, 0x5d, 0xb9, 0x5a, 0x56, 0x8f,
    0xae, 0xeb, 0x07, 0x02, 0x9f, 0xde, 0x40, 0x0f, 0xf4, 0xfc, 0xb8, 0x81, 0xc4, 0x15, 0x6d, 0xaa,
    0xbc, 0x2c, 0x06, 0x57, 0x86, 0x4d, 0xbb, 0x67, 0x23, 0x84, 0x12, 0x0f, 0x81, 0x4c, 0x6d, 0xd0,
    0x39, 0x6f, 0x36, 0xb7, 0x2b, 0xfb, 0x60, 0x99, 0x08, 0xa8, 0x43, 0x1b, 0x17, 0x4a, 0x76, 0x63,
    0x2d, 0xde, 0xc6, 0xeb, 0x8f, 0x2f, 0x51, 0xfb, 0x36, 0x92, 0x60, 0xba, 0x3f, 0xaf, 0x3f, 0x1e,
    0x0e, 0x2d, 0x96, 0xf3, 0x91, 0xfe, 0x2f, 0xcf, 0xc8, 0xbc, 0xc6, 0xc8, 0xe1, 0x1f, 0x29, 0xc6,
    0x40, 0x23, 0x01, 0x49, 0x85, 0xc4, 0x37, 0xdf, 0x3b, 0xcc, 0x30, 0x5c, 0x6c, 0x5d, 0x35, 0xfd,
    0xb6, 0xea, 0xe3, 0xf5, 0xc8, 0x6c, 0x7d, 0x5d, 0xde, 0xc6, 0x48, 0x0f, 0xa7, 0xce, 0x95, 0x6c,
    0xe1, 0xf2, 0x0b, 0xfe, 0xaf, 0x8d, 0x5f, 0x47, 0x1c, 0xd3, 0xfc, 0x20, 0xce, 0x78, 0xcc, 0xe6,
    0xf7, 0xaf, 0x2d, 0x54, 0xd5, 0x32, 0x68, 0xea, 0xca, 0x7b, 0xe6, 0x53, 0x08, 0x6d, 0xf6, 0x5d,
    0xf7, 0xe5, 0x11, 0xbf, 0x74, 0x2c, 0xc4, 0xac, 0xc6, 0x70, 0x6e, 0x75, 0x9b, 0xf6, 0xc0, 0x46,
    0xfb, 0xcc, 0x12, 0xf7, 0x92, 0x8f, 0x78, 0x0c, 0xd1, 0x9d, 0x18, 0xae, 0xe4, 0x6e, 0x6b, 0xe4,
    0x88, 0xed, 0x30, 0xfd, 0x6a, 0xe2, 0xe8, 0xf8, 0x31, 0x7b, 0x70, 0xff, 0xee, 0x65, 0xce, 0xa9,
    0x92, 0x80, 0xd4, 0xa3, 0xb3, 0x26, 0x33, 0xc1, 0x70, 0xb9, 0xc9, 0x8a, 0xe8, 0x55, 0x88, 0xb0,
};

static const uint8_t sMessageEncodingTest0542_ExpectedEncoding[] =
{
    0x30, 0x25, 0x19, 0x8c, 0x43, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc8, 0x2b,
    0x84, 0xd3, 0xd7, 0x7b, 0xdd, 0x77, 0xf0, 0xc9, 0x9c, 0xa6, 0x6a, 0x3b, 0x48, 0x54, 0x19, 0x78,
    0x37, 0xbc, 0x2a, 0xb0, 0x5c, 0xd8, 0x52, 0x98, 0x4d, 0x80, 0x56, 0xcf, 0x54, 0xd6, 0x88, 0x2e,
    0xa8, 0x73, 0x46, 0x1e, 0x2d, 0x95, 0x8b, 0x2b, 0xa3, 0x24, 0x57, 0xf3, 0x97, 0xa4, 0xb6, 0x6d,
    0x70, 0xa1, 0xbf, 0xdb, 0xc5, 0x01, 0x95, 0xc6, 0xa9, 0xc0, 0x08, 0x2c, 0xce, 0xbb, 0x7c, 0x38,
    0x11, 0x15, 0x86, 0x9f, 0xcf, 0xd8, 0x62, 0xfe, 0xc3, 0x22, 0x2b, 0xc9, 0x62, 0xa7, 0xb0, 0x7d,
    0x47, 0xe1, 0xa7, 0x60, 0xb4, 0x3f, 0x75, 0x4b, 0xfb, 0xd7, 0x74, 0xeb, 0x88, 0x66, 0x61, 0xc9,
    0x92, 0xb1, 0x12, 0x15, 0x2b, 0x3a, 0x5b, 0xac, 0x48, 0x37, 0xe8, 0xa0, 0x4f, 0x14, 0x56, 0xc3,
    0xe0, 0x85, 0x93, 0x94, 0x30, 0xe4, 0xaa, 0xf1, 0xe7, 0x99, 0x7c, 0x41, 0x6e, 0xbf, 0x37, 0x88,
    0xe0, 0x4a, 0x8a, 0x5b, 0x26, 0xc0, 0x73, 0xe2, 0x89, 0x95, 0x45, 0xa7, 0x51, 0x0f, 0x6d, 0xc1,
    0x81, 0x8e, 0xb6, 0x10, 0x75, 0x52, 0x3a, 0x7c, 0x52, 0x50, 0x0a, 0xe5, 0x5f, 0x62, 0xdd, 0x15,
    0x77, 0xa1, 0x96, 0x71, 0xfc, 0x22, 0x6e, 0xc2, 0x57, 0xc7, 0x1e, 0xfe, 0xf4, 0xda, 0xe9, 0xef,
    0x22, 0x7a, 0xff, 0xbd, 0x0c, 0x73, 0x80, 0xcf, 0x0f, 0xec, 0x45, 0x0c, 0x2e, 0x8a, 0x58, 0x91,
    0xdb, 0xd7, 0x19, 0xb7, 0xf7, 0x31, 0xb4, 0xb7, 0xb3, 0x47, 0x6f, 0xa0, 0x06, 0xb4, 0x11, 0x8f,
    0x8a, 0xcc, 0xc5, 0xe3, 0x9f, 0x04, 0xfb, 0xfd, 0x98, 0xb4, 0xf6, 0xe6, 0xbb, 0xf3, 0xd4, 0xdc,
    0x4a, 0x07, 0x38, 0x1b, 0x30, 0xfc, 0xb7, 0xc5, 0xa4, 0x93, 0x43, 0xe5, 0xea, 0x4a, 0xbe, 0x19,
    0x44, 0x8b, 0x98, 0xbf, 0x4f, 0xc4, 0x66, 0xe5, 0xc2, 0xde, 0xf9, 0x14, 0x88, 0xe2, 0xe2, 0x8a,
    0x36, 0x9a, 0x3c, 0x87, 0x19, 0x65, 0x56, 0x3b, 0xbb, 0xe6, 0x5f, 0xee, 0xe5, 0x5c, 0xcc, 0x26,
    0x6b, 0xbf, 0xf2, 0xe0, 0x3b, 0x47, 0x9d, 0xf7, 0xb7, 0xc0, 0x15, 0xf0, 0x52, 0x47, 0xc7, 0xdf,
    0x02, 0x97, 0x0b, 0x00, 0xe3, 0x43, 0x1e, 0x03, 0x66, 0xcd, 0x63, 0xaa, 0x4a, 0x69, 0x39, 0x1c,
    0x62, 0xe9, 0x20, 0xc6, 0x7c, 0x49, 0x3a, 0x5c, 0xe8, 0x89, 0xf8, 0xf9, 0xc1, 0xb9, 0xb1, 0xb9,
    0xba, 0x7f, 0xcf, 0x81, 0xae, 0xb4, 0x3d, 0x0f, 0xa9, 0xde, 0xd4, 0x2e, 0x10, 0xce, 0x18, 0xf5,
    0xd3, 0xee, 0x57, 0x33, 0x32, 0x64, 0xb1, 0x5d, 0x07, 0xc6, 0x52, 0x11, 0xbe, 0x9f, 0xf9, 0x42,
    0x10, 0x2a, 0x86, 0xe1, 0x5e, 0x76, 0x3f, 0xff, 0x6f, 0x5f, 0xdb, 0xb9, 0x10, 0xcb, 0x65, 0x2b,
    0x1f, 0x0c, 0x6e, 0x8b, 0x06, 0x2a, 0x77, 0xf3, 0x48, 0x28, 0xb3, 0x78, 0xf7, 0x8f, 0xa8, 0xf0,
    0x26, 0x30, 0x0a, 0x05, 0x71, 0x31, 0xac, 0x37, 0x1c, 0xb8, 0x7a, 0x3e, 0xf2, 0xd2, 0x66, 0xda,
    0xdf, 0x2c, 0x51, 0x50, 0x0a, 0x06, 0x82, 0x97, 0x44, 0x79, 0xb1, 0xe8, 0xd6, 0xbd, 0xa0, 0xf9,
    0x3b, 0xdb, 0x2a, 0x08, 0x1e, 0x13, 0x0d, 0x99, 0xcd, 0x19, 0x60, 0x1f, 0x02, 0xb2, 0xc2, 0x48,
    0x71, 0x87, 0x3e, 0xf0, 0xa8, 0xb7, 0xdf, 0x4f, 0xd8, 0xed, 0x1c, 0xea, 0x31, 0x94, 0xae, 0x64,
    0xc9, 0x68, 0xd1, 0x34, 0xe7, 0x1e, 0x6f, 0x4c, 0xbf, 0xbc, 0x47, 0xdd, 0x1b, 0x72, 0x4a, 0x39,
    0x10, 0x9a, 0xce, 0xc4, 0x6e, 0xed, 0xc4, 0xc9, 0xd1, 0xe2, 0x53, 0x6d, 0x5c, 0x23, 0x01, 0x43,
    0x26, 0xe4, 0xf5, 0xa9, 0x59, 0xad, 0xd3, 0x07, 0x3f, 0xc5, 0x5b, 0x7f, 0x19, 0xc3, 0x75, 0x07,
    0x7a, 0x5b, 0x73, 0x7f, 0xaf, 0x8f, 0xbb, 0x00, 0xcd, 0x5a, 0x20, 0xae, 0xe1, 0x60, 0x30, 0xbd,
    0x7d, 0x93, 0x30, 0x3b, 0x57, 0x77, 0x76, 0xa2, 0x56, 0xac, 0x27, 0xb3, 0x45, 0xda, 0xaa, 0x7e,
    0x5d, 0x03, 0x52, 0xb9, 0x43, 0xc9, 0xfa, 0x60, 0xb3, 0x8a, 0x33, 0x1a, 0x9b, 0x02, 0xf8, 0x89,
    0xb9, 0xe1, 0xa3, 0x23, 0x33, 0x6f, 0xe5, 0xe5, 0x44, 0x37, 0x2d, 0x5c, 0x52, 0x63, 0xa9, 0x29,
    0xc2, 0x8b, 0x9c, 0x65, 0x32, 0xdb, 0x40, 0x13, 0x0f, 0x1d, 0x39, 0x10, 0x92, 0xbd, 0xea, 0x72,
    0xaa, 0x56, 0xdb, 0xf7, 0x6f, 0x38, 0x45, 0x17, 0x4d, 0x54, 0xcf, 0xbf, 0xd1, 0xfe, 0x59, 0x2b,
    0x44, 0x98, 0xe3, 0x83, 0xf6, 0x34, 0xd1, 0x29, 0x1d, 0x53, 0xf1, 0x0a, 0xc4, 0x97, 0x1a, 0xcf,
    0x6f, 0x27, 0xd5, 0x02, 0x70, 0x7d, 0xad, 0x8e, 0xe1, 0x1b, 0x19, 0x87, 0xac, 0xb3, 0x09, 0x37,
    0xa5, 0xab, 0x6d, 0x80, 0x98, 0x42, 0xad, 0xf7, 0xce, 0xc7, 0xb5, 0xba, 0x8b, 0xb2, 0x55, 0x67,
    0x45, 0x24, 0x80, 0x60, 0x21, 0xd8, 0xa1, 0x8a, 0x27, 0x1e, 0x39, 0x22, 0xe5, 0x49, 0x37, 0x53,
    0xb3, 0x10, 0x21, 0x87, 0x62, 0xc0, 0x17, 0xe8, 0x14, 0xec, 0xec, 0xe0, 0x06, 0xb4, 0x03, 0xd4,
    0x56, 0x81, 0xef, 0x93, 0xb6, 0xbc, 0xdb, 0x59, 0xc0, 0x41, 0xce, 0xa6, 0x14, 0x11, 0xb8, 0x72,
    0xcf, 0x2e, 0xa5, 0xf7, 0x4d, 0x54, 0x66, 0x5e, 0x3b, 0xf6, 0xf8, 0x71, 0xd2, 0x65, 0x5a, 0x5c,
    0x31, 0xbf, 0x69, 0xfa, 0x95, 0x3a, 0x5f, 0xae, 0xb4, 0xe6, 0xc4, 0x76, 0x0f, 0x3e, 0x39, 0x98,
    0x1d, 0x72, 0x55, 0xde, 0x84, 0x1e, 0x56, 0x68, 0x69, 0xbd, 0x02, 0x58, 0xa1, 0x5b, 0x7c, 0x42,
    0xf2, 0xcc, 0xbf, 0x95, 0x1a, 0x14, 0xa5, 0x7e, 0x73, 0x20, 0x92, 0x58, 0xcd, 0xfc, 0x31, 0xf2,
    0xae, 0x54, 0xa3, 0x2d, 0x5b, 0x13, 0x70, 0x10, 0x27, 0x2c, 0xb0, 0x4b, 0x6b, 0xa7, 0xbc, 0x14,
    0x80, 0x67, 0x78, 0xa6, 0x85, 0x7b, 0xe6, 0xec, 0x59, 0xe2, 0xd1, 0x43, 0x1a, 0xb2, 0xa4, 0xb3,
    0xd5, 0xae, 0x70, 0xa6, 0x7e, 0x4d, 0x68, 0xa5, 0x7d, 0x2b, 0x70, 0xc8, 0x47, 0x14, 0x38, 0x34,
    0xa4, 0x5c, 0xa0, 0x3c, 0x73, 0xa7, 0x02, 0x33, 0x06, 0x8d, 0x8c, 0x58, 0x19, 0x13, 0x24, 0xfb,
    0x5b, 0x27, 0x73, 0x93, 0x9f, 0x9f, 0x7d, 0x5b, 0x6e, 0x98, 0xb9, 0xa0, 0xcf, 0x8f, 0x94, 0xa8,
    0x89, 0x5f, 0x13, 0x37, 0x54, 0x4d, 0x62, 0xbd, 0x2f, 0xf4, 0x39, 0xb0, 0x24, 0x78, 0x04, 0x20,
    0xbb, 0xcb, 0xb4, 0x50, 0x8c, 0x04, 0x1a, 0xb3, 0x9d, 0x4e, 0x95, 0xcd, 0x17, 0x3e, 0xc7, 0x7e,
    0x2d, 0xca, 0xd5, 0xb7, 0x21, 0x18, 0x0e, 0x05, 0x1b, 0x9b, 0x37, 0x68, 0x1b, 0xf0, 0xb1, 0x19,
    0x1f, 0x95, 0x90, 0x21, 0xb5, 0xbb, 0x28, 0xef, 0x3a, 0x7e, 0xf0, 0x82, 0x52, 0xe5, 0xaa, 0xe0,
    0xc6, 0x68, 0xd0, 0x8c, 0x0c, 0xa7, 0xd9, 0x07, 0x46, 0xa5, 0xdb, 0xb1, 0x54, 0xe0, 0x0a, 0x31,
    0xcf, 0xcb, 0x01, 0xd8, 0x17, 0x39, 0xcb, 0xd2, 0x24, 0x50, 0xd4, 0xc2, 0x76, 0x9c, 0xbe, 0xcb,
    0x7c, 0x38, 0xa2, 0xb4, 0x9c, 0x82, 0x8b, 0x11, 0xf2, 0x77, 0x59, 0x64, 0x4c, 0xa9, 0x38, 0xc5,
    0xb1, 0x34, 0xab, 0xc4, 0xb8, 0x4f, 0x86, 0x5a, 0x4c, 0x65, 0x59, 0x20, 0x15, 0x65, 0x41, 0xe4,
    0xed, 0x78, 0x77, 0x7a, 0x17, 0x2f, 0x1a, 0x3e, 0x0f, 0x02, 0xa8, 0x30, 0x3c, 0xea, 0x35, 0x4c,
    0xf4, 0x15, 0x9d, 0xb0, 0x42, 0xfa, 0xa7, 0xf7, 0x74, 0xb6, 0x1d, 0x09, 0xc5, 0xa5, 0xd4, 0x1c,
    0xa2, 0x0c, 0x33, 0xa9, 0xa2, 0x50, 0x7d, 0xc6, 0x6e, 0xab, 0x72, 0x27, 0xc0, 0x53, 0xf5, 0x13,
    0x00, 0xba, 0xd4, 0xde, 0xdc, 0x87, 0x64, 0x68, 0xd1, 0xd6, 0xd0, 0x43, 0xd5, 0x98, 0xfb, 0xe9,
    0xd2, 0x58, 0xcb, 0x01, 0xd5, 0x37, 0xb7, 0xf5, 0x15, 0x58, 0xa2, 0x5a, 0x2a, 0x48, 0xaf, 0x21,
};

static const MessageEncodingTestVector sMessageEncodingTest0542 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x33438C19,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_TunneledData,
        0x2BC8,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0542_EncryptionKey,
    sMessageEncodingTest0542_Payload,
    sizeof(sMessageEncodingTest0542_Payload),
    sMessageEncodingTest0542_ExpectedEncoding,
    sizeof(sMessageEncodingTest0542_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0543_Payload[] =
{
    0xc9, 0xe2, 0x37, 0x72, 0x5c, 0x98, 0x20, 0x62, 0xfb, 0xff, 0x77, 0x5b, 0xde, 0x0c, 0x29, 0xe0,
    0xc5, 0x22, 0x33, 0xf4, 0x73, 0x95, 0x37, 0x42, 0xd7, 0x5f, 0xe4, 0x4c, 0x3e, 0xf9, 0xf1, 0x5d,
    0x87, 0x30, 0xe6, 0xf5, 0x1b, 0xb9, 0xe4, 0x6d, 0x53, 0xe1, 0xf7, 0xb5, 0xc5, 0x57, 0x79, 0xd9,
    0x06, 0xff, 0x13, 0x4b, 0x0c, 0x06, 0x47, 0x1f, 0x0f, 0x2b, 0x90, 0x45, 0x5a, 0x35, 0x0f, 0xe1,
    0xd9, 0x83, 0xb1, 0xbd, 0xfe, 0xfe, 0x43, 0x24, 0xb8, 0x93, 0x2f, 0x61, 0x85, 0xb0, 0x95, 0x20,
    0xbf, 0x69, 0x81, 0x9b, 0x3d, 0xce, 0x08, 0x83, 0xb2, 0xbf, 0xf9, 0xd8, 0x19, 0xa7, 0x88, 0xac,
    0x96, 0xf6, 0x3d, 0x7f, 0x1f, 0x35, 0x05, 0xb5, 0xaf, 0x83, 0x43, 0x86, 0xd1, 0x4a, 0x2a, 0xc9,
    0xa7, 0x68, 0xa6, 0xa9, 0x70, 0xbe, 0x67, 0xb0, 0x06, 0xd1, 0xfe, 0xeb, 0xe2, 0xa7, 0x9b, 0xd2,
    0x41, 0x91, 0xf0, 0x5d, 0xd2, 0x5f, 0x5a, 0xd0, 0x8b, 0x97, 0x58, 0x51, 0x45, 0x7a, 0x0b, 0xcf,
    0x0f, 0xd6, 0x94, 0x8c, 0xdf, 0xf2, 0xae, 0x2e, 0xe9, 0x31, 0x3d, 0xbf, 0x77, 0x58, 0x11, 0x70,
    0x3c, 0xad, 0xa9, 0x03, 0xbe, 0x46, 0x59, 0x9d, 0x2c, 0xa0, 0x3a, 0x96, 0x81, 0xd3, 0x7c, 0x35,
    0x07, 0x09, 0xb2, 0x5e, 0x2a, 0xfc, 0x36, 0x70, 0x5a, 0x00, 0xe4, 0xc0, 0x6a, 0xb2, 0xfc, 0xc7,
    0x96, 0xbd, 0x32, 0xba, 0xf0, 0xc1, 0x6b, 0x83, 0x4f, 0xdb, 0x66, 0xa8, 0x05, 0x5c, 0xc7, 0x37,
    0x53, 0x1a, 0xe1, 0xca, 0xbc, 0x63, 0xed, 0x88, 0xd7, 0x2f, 0x98, 0x4c, 0x2d, 0xe4, 0x56, 0xc0,
    0x7d, 0x57, 0x51, 0x18, 0x87, 0xa7, 0xd6, 0xb6, 0xd6, 0x9e, 0x93, 0xb7, 0x54, 0xfe, 0xa9, 0x86,
    0x66, 0x9b, 0x81, 0xd1, 0xc0, 0x48, 0x4a, 0xaa, 0xaa, 0xdc, 0xd8, 0xf2, 0x19, 0xfc, 0x77, 0xb8,
    0xcb, 0x15, 0x7d, 0x61, 0x4a, 0xc6, 0xb3, 0x2b, 0x39, 0xc2, 0x64, 0x92, 0x20, 0x8d, 0xea, 0x9a,
    0x0f, 0xa0, 0x05, 0x76, 0x36, 0x21, 0xf0, 0x4a, 0xb9, 0x56, 0xd3, 0x2f, 0xac, 0xef, 0xfa, 0x50,
    0xc0, 0x0f, 0xf6, 0x83, 0xb7, 0x0c, 0x0f, 0x2e, 0xa0, 0x1d, 0xe3, 0x4e, 0x4d, 0xb5, 0x63, 0x07,
    0xe6, 0xf4, 0x71, 0x3a, 0xce, 0xf3, 0x7a, 0xe9, 0x7f, 0xc1, 0x9f, 0x9c, 0xfd, 0x05, 0x25, 0x92,
    0xd0, 0x20, 0xb0, 0x6c, 0x18, 0x7c, 0x65, 0xcd, 0xec, 0xac, 0x19, 0xc6, 0xb9, 0x2a, 0x4d, 0xec,
    0xbe, 0xfd, 0xf0, 0xab, 0x32, 0xda, 0x05, 0xfb, 0x3f, 0xd9, 0x46, 0x84, 0x7f, 0xbe, 0x3e, 0x8d,
    0x3f, 0x96, 0x35, 0x80, 0xa2, 0xba, 0x3d, 0x5b, 0x50, 0x66, 0x64, 0x11, 0xfb, 0xba, 0x5b, 0xd5,
    0x80, 0x8b, 0x33, 0xdd, 0xa9, 0x1c, 0x86, 0x82, 0xe0, 0x20, 0x5a, 0x3b, 0x53, 0x4d, 0x9b, 0xfe,
    0x73, 0x30, 0x3e, 0x7e, 0xb3, 0xcb, 0xc3, 0x19, 0x3d, 0x85, 0x7a, 0xc7, 0xdf, 0x8f, 0xed, 0x8e,
    0x5e, 0x30, 0xa9, 0xb7, 0xbe, 0x1b, 0x55, 0xde, 0x40, 0x49, 0x38, 0x6b, 0xd8, 0x4c, 0xcd, 0xb6,
    0x6f, 0xbe, 0x80, 0x4e, 0xd4, 0xb8, 0x47, 0x62, 0xfb, 0x08, 0x98, 0xee, 0x99, 0x14, 0x5e, 0xbd,
    0x89, 0x61, 0x7e, 0xff, 0x65, 0xd2, 0x3a, 0xb1, 0xaa, 0x55, 0x35, 0x17, 0x15, 0xb0, 0x1f, 0xa3,
    0x33, 0x46, 0x0f, 0x31, 0x20, 0x9d, 0x55, 0x4a, 0x9b, 0x45, 0x9e, 0xc0, 0x78, 0x2b, 0x92, 0xd1,
    0x16, 0x16, 0xb2, 0xd4, 0x6a, 0x95, 0xea, 0xc5, 0xb2, 0xff, 0x72, 0x5a, 0xa4, 0xff, 0x39, 0xf8,
    0x2c, 0x8d, 0x76, 0x0a, 0xb7, 0x84, 0xf0, 0x8d, 0x23, 0x2a, 0xc3, 0x48, 0xf7, 0xb4, 0xf8, 0x6a,
    0xc3, 0x11, 0x6b, 0x99, 0x0a, 0xb3, 0x60, 0xe5, 0xc8, 0x7a, 0xc3, 0x90, 0x80, 0x98, 0x8d, 0x1e,
    0x41, 0x1f, 0x31, 0x7b, 0x15, 0x2a, 0x40, 0xfe, 0x27, 0x8c, 0x0d, 0xe0, 0x3b, 0xac, 0x48, 0xb2,
    0x02, 0xbf, 0x4c, 0xcf, 0x3f, 0x9f, 0xbd, 0x47, 0x9f, 0x4c, 0xc0, 0xd7, 0x79, 0xdb, 0x5f, 0x05,
    0x55, 0x78, 0x07, 0x9e, 0x0c, 0xba, 0x3e, 0xdf, 0x3f, 0xf8, 0xc0, 0x05, 0x12, 0x5b, 0x97, 0x09,
    0x07, 0x1f, 0x1a, 0x7d, 0x45, 0x75, 0xc1, 0x14, 0xed, 0x0f, 0x5e, 0xea, 0x77, 0x73, 0xdf, 0x52,
    0x73, 0x96, 0x16, 0xab, 0x94, 0x1c, 0x6e, 0x8a, 0xb8, 0xd8, 0xd7, 0x5c, 0x85, 0x15, 0xd1, 0x0f,
    0x32, 0xcf, 0x87, 0x85, 0x63, 0xcb, 0x94, 0xf8, 0xcf, 0xea, 0x50, 0x5b, 0x45, 0x01, 0x3c, 0x76,
    0x59, 0x66, 0x5a, 0xfe, 0x66, 0x8b, 0xd0, 0x4b, 0xa3, 0x8d, 0x72, 0x88, 0xcc, 0xf4, 0x32, 0xe5,
    0x45, 0x98, 0xbb, 0x30, 0x87, 0x0e, 0x11, 0xae, 0x6e, 0x3b, 0x52, 0x71, 0xaf, 0x21, 0x49, 0x16,
    0xb7, 0xde, 0x0a, 0xe6, 0xbb, 0x8c, 0xf7, 0x01, 0x7b, 0x6b, 0x22, 0x66, 0x53, 0x81, 0x74, 0xa0,
    0xb0, 0x64, 0x25, 0xec, 0xa8, 0xf4, 0x89, 0xa0, 0x57, 0xfd, 0x9f, 0x22, 0xb1, 0xb7, 0xe4, 0x42,
    0xd6, 0x74, 0x24, 0x69, 0xb1, 0x0a, 0xd2, 0x1c, 0x6e, 0x33, 0x8e, 0xb2, 0xed, 0x6d, 0x0c, 0x0e,
    0xf9, 0x82, 0x6f, 0xd0, 0xf2, 0x5b, 0x2f, 0xc6, 0xb0, 0xb1, 0x80, 0x10, 0xe4, 0x47, 0xd8, 0x54,
    0xcf, 0x73, 0x81, 0x2a, 0x08, 0x6b, 0xc0, 0xde, 0xe4, 0x94, 0x8a, 0xd8, 0x48, 0xb5, 0xf2, 0x51,
    0xde, 0x32, 0x66, 0xf9, 0x4d, 0x57, 0x8a, 0x63, 0x5c, 0x04, 0x2c, 0x5f, 0xdf, 0x6b, 0xd2, 0x12,
    0x1c, 0xa9, 0xa4, 0x58, 0xdf, 0xd3, 0xac, 0x55, 0x21, 0xf6, 0x6f, 0x5c, 0x5b, 0xbf, 0xb1, 0x39,
    0xc9, 0x8a, 0xf2, 0xdf, 0xb6, 0x11, 0x19, 0x9b, 0xa0, 0xaf, 0x2d, 0x27, 0x51, 0x57, 0x3c, 0x1b,
    0x09, 0xf7, 0xae, 0x6a, 0x50, 0xec, 0x0d, 0x7d, 0x75, 0x12, 0x79, 0x60, 0x50, 0xb8, 0xce, 0xb9,
    0xe4, 0xac, 0x32, 0x7d, 0x78, 0x63, 0xf2, 0x96, 0x58, 0x68, 0x0b, 0xd4, 0x5f, 0x66, 0x2b, 0xc7,
    0x6d, 0xad, 0x8b, 0x45, 0x0c, 0x74, 0xab, 0x2a, 0x62, 0xaa, 0x2e, 0x54, 0xc3, 0x0b, 0x30, 0xb9,
    0x3e, 0xd6, 0xa1, 0x8c, 0x96, 0x89, 0x78, 0x09, 0x2b, 0x56, 0x90, 0x7c, 0x38, 0x4b, 0xa7, 0x94,
    0xdc, 0x92, 0x66, 0x7e, 0xfe, 0x3a, 0xdd, 0x0f, 0x0d, 0xce, 0x6a, 0xca, 0x10, 0xd1, 0xf7, 0x60,
    0x65, 0xa9, 0x66, 0xc5, 0x04, 0x4b, 0x36, 0x87, 0x12, 0x6c, 0xac, 0x78, 0xe5, 0x6f, 0x01, 0xc1,
    0xe5, 0x2f, 0xab, 0xdf, 0xa3, 0xe8, 0x43, 0xd2, 0x6e, 0xe7, 0xee, 0x27, 0xd4, 0xe7, 0x9e, 0x21,
    0xad, 0x66, 0x90, 0xdd, 0x73, 0x9d, 0x13, 0x8c, 0x19, 0x76, 0xd3, 0x45, 0x06, 0x7c, 0xff, 0xed,
    0xd7, 0xfe, 0xb9, 0xaf, 0x90, 0x92, 0x46, 0xa9, 0x09, 0xbb, 0x3c, 0x1e, 0xb0, 0x2f, 0xe5, 0x1c,
    0x46, 0xce, 0x74, 0x49, 0x35, 0x54, 0xa8, 0x09, 0xb6, 0x50, 0x2c, 0x90, 0x57, 0x71, 0x2f, 0x43,
    0x1b, 0xa7, 0x97, 0x1a, 0xab, 0x8d, 0x0d, 0x19, 0x7d, 0xea, 0xad, 0xd6, 0x0b, 0x83, 0x76, 0x7d,
    0xd8, 0xce, 0x9f, 0xbe, 0x4d, 0x02, 0x3a, 0xeb, 0x82, 0x21, 0x9a, 0x45, 0x6f, 0x67, 0x19, 0x4a,
    0x96, 0x5e, 0xdc, 0xa4, 0x1e, 0xd9, 0xc3, 0x66, 0x45, 0x28, 0x6b, 0xda, 0x6d, 0xc6, 0x8b, 0x9b,
    0xbd, 0x80, 0x39, 0x3a, 0x07, 0x06, 0x40, 0x00, 0xcf, 0xb3, 0xf5, 0x28, 0x75, 0x27, 0x11, 0xec,
    0xcb, 0xf2, 0xaf, 0x48, 0xc5, 0xf9, 0xf9, 0x4a, 0x86, 0x1b, 0x32, 0x7b, 0x3d, 0x29, 0xbf, 0x58,
    0xa9, 0x02, 0xa7, 0x34, 0x5f, 0x3f, 0x6f, 0xa9, 0x28, 0x51, 0x2d, 0x09, 0x82, 0xed, 0x4b, 0x72,
};

static const uint8_t sMessageEncodingTest0543_ExpectedEncoding[] =
{
    0x00, 0x29, 0x7b, 0xc9, 0xc7, 0xcf, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc9, 0xe2,
    0x37, 0x72, 0x5c, 0x98, 0x20, 0x62, 0xfb, 0xff, 0x77, 0x5b, 0xde, 0x0c, 0x29, 0xe0, 0xc5, 0x22,
    0x33, 0xf4, 0x73, 0x95, 0x37, 0x42, 0xd7, 0x5f, 0xe4, 0x4c, 0x3e, 0xf9, 0xf1, 0x5d, 0x87, 0x30,
    0xe6, 0xf5, 0x1b, 0xb9, 0xe4, 0x6d, 0x53, 0xe1, 0xf7, 0xb5, 0xc5, 0x57, 0x79, 0xd9, 0x06, 0xff,
    0x13, 0x4b, 0x0c, 0x06, 0x47, 0x1f, 0x0f, 0x2b, 0x90, 0x45, 0x5a, 0x35, 0x0f, 0xe1, 0xd9, 0x83,
    0xb1, 0xbd, 0xfe, 0xfe, 0x43, 0x24, 0xb8, 0x93, 0x2f, 0x61, 0x85, 0xb0, 0x95, 0x20, 0xbf, 0x69,
    0x81, 0x9b, 0x3d, 0xce, 0x08, 0x83, 0xb2, 0xbf, 0xf9, 0xd8, 0x19, 0xa7, 0x88, 0xac, 0x96, 0xf6,
    0x3d, 0x7f, 0x1f, 0x35, 0x05, 0xb5, 0xaf, 0x83, 0x43, 0x86, 0xd1, 0x4a, 0x2a, 0xc9, 0xa7, 0x68,
    0xa6, 0xa9, 0x70, 0xbe, 0x67, 0xb0, 0x06, 0xd1, 0xfe, 0xeb, 0xe2, 0xa7, 0x9b, 0xd2, 0x41, 0x91,
    0xf0, 0x5d, 0xd2, 0x5f, 0x5a, 0xd0, 0x8b, 0x97, 0x58, 0x51, 0x45, 0x7a, 0x0b, 0xcf, 0x0f, 0xd6,
    0x94, 0x8c, 0xdf, 0xf2, 0xae, 0x2e, 0xe9, 0x31, 0x3d, 0xbf, 0x77, 0x58, 0x11, 0x70, 0x3c, 0xad,
    0xa9, 0x03, 0xbe, 0x46, 0x59, 0x9d, 0x2c, 0xa0, 0x3a, 0x96, 0x81, 0xd3, 0x7c, 0x35, 0x07, 0x09,
    0xb2, 0x5e, 0x2a, 0xfc, 0x36, 0x70, 0x5a, 0x00, 0xe4, 0xc0, 0x6a, 0xb2, 0xfc, 0xc7, 0x96, 0xbd,
    0x32, 0xba, 0xf0, 0xc1, 0x6b, 0x83, 0x4f, 0xdb, 0x66, 0xa8, 0x05, 0x5c, 0xc7, 0x37, 0x53, 0x1a,
    0xe1, 0xca, 0xbc, 0x63, 0xed, 0x88, 0xd7, 0x2f, 0x98, 0x4c, 0x2d, 0xe4, 0x56, 0xc0, 0x7d, 0x57,
    0x51, 0x18, 0x87, 0xa7, 0xd6, 0xb6, 0xd6, 0x9e, 0x93, 0xb7, 0x54, 0xfe, 0xa9, 0x86, 0x66, 0x9b,
    0x81, 0xd1, 0xc0, 0x48, 0x4a, 0xaa, 0xaa, 0xdc, 0xd8, 0xf2, 0x19, 0xfc, 0x77, 0xb8, 0xcb, 0x15,
    0x7d, 0x61, 0x4a, 0xc6, 0xb3, 0x2b, 0x39, 0xc2, 0x64, 0x92, 0x20, 0x8d, 0xea, 0x9a, 0x0f, 0xa0,
    0x05, 0x76, 0x36, 0x21, 0xf0, 0x4a, 0xb9, 0x56, 0xd3, 0x2f, 0xac, 0xef, 0xfa, 0x50, 0xc0, 0x0f,
    0xf6, 0x83, 0xb7, 0x0c, 0x0f, 0x2e, 0xa0, 0x1d, 0xe3, 0x4e, 0x4d, 0xb5, 0x63, 0x07, 0xe6, 0xf4,
    0x71, 0x3a, 0xce, 0xf3, 0x7a, 0xe9, 0x7f, 0xc1, 0x9f, 0x9c, 0xfd, 0x05, 0x25, 0x92, 0xd0, 0x20,
    0xb0, 0x6c, 0x18, 0x7c, 0x65, 0xcd, 0xec, 0xac, 0x19, 0xc6, 0xb9, 0x2a, 0x4d, 0xec, 0xbe, 0xfd,
    0xf0, 0xab, 0x32, 0xda, 0x05, 0xfb, 0x3f, 0xd9, 0x46, 0x84, 0x7f, 0xbe, 0x3e, 0x8d, 0x3f, 0x96,
    0x35, 0x80, 0xa2, 0xba, 0x3d, 0x5b, 0x50, 0x66, 0x64, 0x11, 0xfb, 0xba, 0x5b, 0xd5, 0x80, 0x8b,
    0x33, 0xdd, 0xa9, 0x1c, 0x86, 0x82, 0xe0, 0x20, 0x5a, 0x3b, 0x53, 0x4d, 0x9b, 0xfe, 0x73, 0x30,
    0x3e, 0x7e, 0xb3, 0xcb, 0xc3, 0x19, 0x3d, 0x85, 0x7a, 0xc7, 0xdf, 0x8f, 0xed, 0x8e, 0x5e, 0x30,
    0xa9, 0xb7, 0xbe, 0x1b, 0x55, 0xde, 0x40, 0x49, 0x38, 0x6b, 0xd8, 0x4c, 0xcd, 0xb6, 0x6f, 0xbe,
    0x80, 0x4e, 0xd4, 0xb8, 0x47, 0x62, 0xfb, 0x08, 0x98, 0xee, 0x99, 0x14, 0x5e, 0xbd, 0x89, 0x61,
    0x7e, 0xff, 0x65, 0xd2, 0x3a, 0xb1, 0xaa, 0x55, 0x35, 0x17, 0x15, 0xb0, 0x1f, 0xa3, 0x33, 0x46,
    0x0f, 0x31, 0x20, 0x9d, 0x55, 0x4a, 0x9b, 0x45, 0x9e, 0xc0, 0x78, 0x2b, 0x92, 0xd1, 0x16, 0x16,
    0xb2, 0xd4, 0x6a, 0x95, 0xea, 0xc5, 0xb2, 0xff, 0x72, 0x5a, 0xa4, 0xff, 0x39, 0xf8, 0x2c, 0x8d,
    0x76, 0x0a, 0xb7, 0x84, 0xf0, 0x8d, 0x23, 0x2a, 0xc3, 0x48, 0xf7, 0xb4, 0xf8, 0x6a, 0xc3, 0x11,
    0x6b, 0x99, 0x0a, 0xb3, 0x60, 0xe5, 0xc8, 0x7a, 0xc3, 0x90, 0x80, 0x98, 0x8d, 0x1e, 0x41, 0x1f,
    0x31, 0x7b, 0x15, 0x2a, 0x40, 0xfe, 0x27, 0x8c, 0x0d, 0xe0, 0x3b, 0xac, 0x48, 0xb2, 0x02, 0xbf,
    0x4c, 0xcf, 0x3f, 0x9f, 0xbd, 0x47, 0x9f, 0x4c, 0xc0, 0xd7, 0x79, 0xdb, 0x5f, 0x05, 0x55, 0x78,
    0x07, 0x9e, 0x0c, 0xba, 0x3e, 0xdf, 0x3f, 0xf8, 0xc0, 0x05, 0x12, 0x5b, 0x97, 0x09, 0x07, 0x1f,
    0x1a, 0x7d, 0x45, 0x75, 0xc1, 0x14, 0xed, 0x0f, 0x5e, 0xea, 0x77, 0x73, 0xdf, 0x52, 0x73, 0x96,
    0x16, 0xab, 0x94, 0x1c, 0x6e, 0x8a, 0xb8, 0xd8, 0xd7, 0x5c, 0x85, 0x15, 0xd1, 0x0f, 0x32, 0xcf,
    0x87, 0x85, 0x63, 0xcb, 0x94, 0xf8, 0xcf, 0xea, 0x50, 0x5b, 0x45, 0x01, 0x3c, 0x76, 0x59, 0x66,
    0x5a, 0xfe, 0x66, 0x8b, 0xd0, 0x4b, 0xa3, 0x8d, 0x72, 0x88, 0xcc, 0xf4, 0x32, 0xe5, 0x45, 0x98,
    0xbb, 0x30, 0x87, 0x0e, 0x11, 0xae, 0x6e, 0x3b, 0x52, 0x71, 0xaf, 0x21, 0x49, 0x16, 0xb7, 0xde,
    0x0a, 0xe6, 0xbb, 0x8c, 0xf7, 0x01, 0x7b, 0x6b, 0x22, 0x66, 0x53, 0x81, 0x74, 0xa0, 0xb0, 0x64,
    0x25, 0xec, 0xa8, 0xf4, 0x89, 0xa0, 0x57, 0xfd, 0x9f, 0x22, 0xb1, 0xb7, 0xe4, 0x42, 0xd6, 0x74,
    0x24, 0x69, 0xb1, 0x0a, 0xd2, 0x1c, 0x6e, 0x33, 0x8e, 0xb2, 0xed, 0x6d, 0x0c, 0x0e, 0xf9, 0x82,
    0x6f, 0xd0, 0xf2, 0x5b, 0x2f, 0xc6, 0xb0, 0xb1, 0x80, 0x10, 0xe4, 0x47, 0xd8, 0x54, 0xcf, 0x73,
    0x81, 0x2a, 0x08, 0x6b, 0xc0, 0xde, 0xe4, 0x94, 0x8a, 0xd8, 0x48, 0xb5, 0xf2, 0x51, 0xde, 0x32,
    0x66, 0xf9, 0x4d, 0x57, 0x8a, 0x63, 0x5c, 0x04, 0x2c, 0x5f, 0xdf, 0x6b, 0xd2, 0x12, 0x1c, 0xa9,
    0xa4, 0x58, 0xdf, 0xd3, 0xac, 0x55, 0x21, 0xf6, 0x6f, 0x5c, 0x5b, 0xbf, 0xb1, 0x39, 0xc9, 0x8a,
    0xf2, 0xdf, 0xb6, 0x11, 0x19, 0x9b, 0xa0, 0xaf, 0x2d, 0x27, 0x51, 0x57, 0x3c, 0x1b, 0x09, 0xf7,
    0xae, 0x6a, 0x50, 0xec, 0x0d, 0x7d, 0x75, 0x12, 0x79, 0x60, 0x50, 0xb8, 0xce, 0xb9, 0xe4, 0xac,
    0x32, 0x7d, 0x78, 0x63, 0xf2, 0x96, 0x58, 0x68, 0x0b, 0xd4, 0x5f, 0x66, 0x2b, 0xc7, 0x6d, 0xad,
    0x8b, 0x45, 0x0c, 0x74, 0xab, 0x2a, 0x62, 0xaa, 0x2e, 0x54, 0xc3, 0x0b, 0x30, 0xb9, 0x3e, 0xd6,
    0xa1, 0x8c, 0x96, 0x89, 0x78, 0x09, 0x2b, 0x56, 0x90, 0x7c, 0x38, 0x4b, 0xa7, 0x94, 0xdc, 0x92,
    0x66, 0x7e, 0xfe, 0x3a, 0xdd, 0x0f, 0x0d, 0xce, 0x6a, 0xca, 0x10, 0xd1, 0xf7, 0x60, 0x65, 0xa9,
    0x66, 0xc5, 0x04, 0x4b, 0x36, 0x87, 0x12, 0x6c, 0xac, 0x78, 0xe5, 0x6f, 0x01, 0xc1, 0xe5, 0x2f,
    0xab, 0xdf, 0xa3, 0xe8, 0x43, 0xd2, 0x6e, 0xe7, 0xee, 0x27, 0xd4, 0xe7, 0x9e, 0x21, 0xad, 0x66,
    0x90, 0xdd, 0x73, 0x9d, 0x13, 0x8c, 0x19, 0x76, 0xd3, 0x45, 0x06, 0x7c, 0xff, 0xed, 0xd7, 0xfe,
    0xb9, 0xaf, 0x90, 0x92, 0x46, 0xa9, 0x09, 0xbb, 0x3c, 0x1e, 0xb0, 0x2f, 0xe5, 0x1c, 0x46, 0xce,
    0x74, 0x49, 0x35, 0x54, 0xa8, 0x09, 0xb6, 0x50, 0x2c, 0x90, 0x57, 0x71, 0x2f, 0x43, 0x1b, 0xa7,
    0x97, 0x1a, 0xab, 0x8d, 0x0d, 0x19, 0x7d, 0xea, 0xad, 0xd6, 0x0b, 0x83, 0x76, 0x7d, 0xd8, 0xce,
    0x9f, 0xbe, 0x4d, 0x02, 0x3a, 0xeb, 0x82, 0x21, 0x9a, 0x45, 0x6f, 0x67, 0x19, 0x4a, 0x96, 0x5e,
    0xdc, 0xa4, 0x1e, 0xd9, 0xc3, 0x66, 0x45, 0x28, 0x6b, 0xda, 0x6d, 0xc6, 0x8b, 0x9b, 0xbd, 0x80,
    0x39, 0x3a, 0x07, 0x06, 0x40, 0x00, 0xcf, 0xb3, 0xf5, 0x28, 0x75, 0x27, 0x11, 0xec, 0xcb, 0xf2,
    0xaf, 0x48, 0xc5, 0xf9, 0xf9, 0x4a, 0x86, 0x1b, 0x32, 0x7b, 0x3d, 0x29, 0xbf, 0x58, 0xa9, 0x02,
    0xa7, 0x34, 0x5f, 0x3f, 0x6f, 0xa9, 0x28, 0x51, 0x2d, 0x09, 0x82, 0xed, 0x4b, 0x72,
};

static const MessageEncodingTestVector sMessageEncodingTest0543 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xCFC7C97B,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0543_Payload,
    sizeof(sMessageEncodingTest0543_Payload),
    sMessageEncodingTest0543_ExpectedEncoding,
    sizeof(sMessageEncodingTest0543_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0544_EncryptionKey =
{
    {
        0x00, 0xe3, 0x22, 0x36, 0xc1, 0x13, 0x0a, 0xeb, 0x6a, 0x71, 0x1a, 0xec, 0x4a, 0x06, 0x9d, 0xda,
    },
    {
        0x9c, 0x5f, 0x60, 0xee, 0xc4, 0x5f, 0xda, 0x23, 0xb2, 0x54, 0xe0, 0x8a, 0xe1, 0x65, 0xda, 0xbb,
        0x15, 0x0b, 0xca, 0x7c,
    }
};
static const uint8_t sMessageEncodingTest0544_Payload[] =
{
    0x0a, 0x4c, 0x82, 0xde, 0xc2, 0x6f, 0xde, 0x0a, 0xbf, 0x62, 0x8c, 0x89, 0x6f, 0x57, 0x5d, 0x86,
    0x84, 0xc1, 0x3c, 0x7e, 0x73, 0x91, 0x9b, 0x0c, 0x83, 0xf4, 0x37, 0x70, 0x0a, 0x01, 0xe9, 0xb7,
    0x3a, 0x71, 0x2a, 0x58, 0x93, 0x05, 0x54, 0x49, 0x36, 0x15, 0xff, 0xa9, 0xf8, 0x24, 0x65, 0xa4,
    0xba, 0x4c, 0x91, 0xff, 0x20, 0xd4, 0xbd, 0x4e, 0xc3, 0x31, 0x5b, 0x58, 0x24, 0x48, 0x52, 0x07,
    0xd3, 0x18, 0xb4, 0x2d, 0x93, 0xab, 0x20, 0x6d, 0x0d, 0x24, 0x7b, 0xbe, 0x65, 0x2b, 0x6b, 0xa5,
    0x25, 0x26, 0x7c, 0x41, 0xf8, 0xb1, 0x47, 0xec, 0xe4, 0xb3, 0xb9, 0xe7, 0xe7, 0x44, 0xac, 0xf4,
    0xe3, 0x39, 0x51, 0xf3, 0x12, 0xaf, 0xf4, 0x18, 0x7e, 0x1c, 0xe0, 0x5f, 0x3d, 0x3f, 0xc2, 0x83,
    0x80, 0x98, 0x7d, 0x31, 0x00, 0x24, 0x6b, 0xaa, 0xb8, 0xc7, 0xac, 0x1a, 0x12, 0x5b, 0x09, 0xfa,
    0x76, 0x46, 0x77, 0x71, 0x93, 0x53, 0x2b, 0xd2, 0x2b, 0xf3, 0x5a, 0x82, 0x7f, 0x4c, 0x66, 0xe3,
    0x11, 0x66, 0x72, 0x90, 0x2c, 0x07, 0x0d, 0x7b, 0x67, 0xfc, 0x17, 0x4b, 0x2f, 0x1d, 0xc0, 0xfd,
    0x2c, 0xe8, 0xbc, 0xb8, 0x18, 0x56, 0x2e, 0xe3, 0x38, 0x94, 0x66, 0xf0, 0xde, 0x4f, 0xda, 0x2c,
    0xb4, 0x23, 0xc5, 0xa5, 0x67, 0x39, 0xd5, 0xc3, 0x38, 0x22, 0xa0, 0xbb, 0x10, 0xdc, 0x35, 0xd2,
    0x44, 0x40, 0x40, 0xf6, 0xfd, 0xdd, 0xe3, 0x3a, 0xc7, 0x31, 0x2f, 0x47, 0x81, 0x8e, 0x73, 0x7f,
    0xcd, 0x83, 0xb7, 0x54, 0xd2, 0xfa, 0x36, 0x92, 0x68, 0x1b, 0x22, 0x2a, 0x7d, 0x7c, 0x07, 0xbd,
    0x34, 0x5c, 0x0d, 0x8b, 0xf6, 0x76, 0x1a, 0x34, 0x61, 0xca, 0xe0, 0xd2, 0xec, 0x22, 0x39, 0x86,
    0x66, 0xbc, 0xe2, 0xa5, 0x38, 0xa2, 0x62, 0xd2, 0xb6, 0xbf, 0xad, 0xb7, 0x34, 0x66, 0xe8, 0xa2,
    0x0f, 0xdc, 0xd9, 0x18, 0x89, 0xb6, 0x1f, 0x24, 0xd3, 0x8f, 0x9e, 0xe4, 0x18, 0xac, 0xb9, 0x8f,
    0x4b, 0x19, 0x39, 0xa6, 0xc5, 0xd4, 0x64, 0x1e, 0xd7, 0xce, 0xf2, 0x65, 0x6a, 0xb6, 0x31, 0xf4,
    0x45, 0x57, 0xa0, 0xb5, 0xe1, 0xe0, 0xfa, 0xf4, 0xaa, 0x6b, 0x34, 0x9b, 0xc9, 0x4f, 0xb8, 0x88,
    0x03, 0xd9, 0xef, 0x44, 0xa4, 0xbc, 0xa6, 0x41, 0x2d, 0xb2, 0x57, 0x02, 0x40, 0x87, 0x01, 0x41,
    0xe1, 0x64, 0xb7, 0x0a, 0x0e, 0x6c, 0x20, 0x72, 0x50, 0x0b, 0x3f, 0x7e, 0x22, 0x9c, 0x5f, 0xe6,
    0xe2, 0x86, 0x16, 0xeb, 0x27, 0xf7, 0x05, 0xc1, 0x78, 0x04, 0xf3, 0xaa, 0x59, 0xcd, 0xbd, 0xbc,
    0xf0, 0x6f, 0x04, 0xad, 0x5b, 0xb3, 0x01, 0x24, 0x53, 0x17, 0x08, 0xdf, 0xa3, 0x2d, 0x33, 0xe5,
    0xca, 0x34, 0xfa, 0xab, 0xd7, 0x38, 0xef, 0xb5, 0xea, 0x76, 0xb7, 0x67, 0x8f, 0x85, 0x02, 0xd8,
    0xa0, 0xf2, 0x45, 0x31, 0x13, 0x46, 0x3b, 0x10, 0x21, 0x0b, 0x7b, 0x28, 0x6d, 0x3b, 0xad, 0xc1,
    0xbc, 0x7c, 0x54, 0x8e, 0xbb, 0xbb, 0x3f, 0x42, 0xa1, 0xde, 0x42, 0xec, 0xa6, 0x34, 0x9c, 0x5a,
    0xff, 0x82, 0x52, 0x9b, 0x2a, 0x9e, 0xaa, 0xc0, 0xbe, 0xdb, 0x1d, 0x38, 0x17, 0x3d, 0xdd, 0x9b,
    0xf1, 0xb4, 0xbd, 0xed, 0x5f, 0x14, 0x16, 0xe9, 0x2b, 0x78, 0xdc, 0x25, 0xfb, 0x7d, 0x2f, 0xe4,
    0x76, 0xfb, 0x50, 0x08, 0xc3, 0x82, 0xf8, 0xf9, 0x0c, 0xea, 0xcd, 0xfb, 0x90, 0xac, 0xd8, 0xaf,
    0x7d, 0x3a, 0xb2, 0x39, 0xcf, 0xe1, 0x8c, 0x0b, 0xf8, 0xb3, 0x52, 0x74, 0xc6, 0x5b, 0x35, 0xd8,
    0x69, 0x85, 0x15, 0xb9, 0xef, 0x57, 0x9d, 0x04, 0x56, 0x60, 0x36, 0xee, 0x44, 0xe1, 0xa2, 0x02,
    0xc1, 0x00, 0xda, 0xe9, 0x1e, 0x37, 0x03, 0x39, 0x86, 0x86, 0x4e, 0x82, 0x5b, 0x0f, 0x1f, 0x18,
    0xef, 0xee, 0xbf, 0xfa, 0xa2, 0xb6, 0x0a, 0x34, 0x7e, 0xdf, 0x77, 0x51, 0xcd, 0xb8, 0x0c, 0xa2,
    0x3d, 0x2d, 0x03, 0x05, 0x3a, 0x23, 0x0b, 0x9e, 0xbb, 0x58, 0xd1, 0xa5, 0xf4, 0x7f, 0x5b, 0xf2,
    0x67, 0x5f, 0xb1, 0xcb, 0x4d, 0x2c, 0x01, 0x20, 0xfc, 0x4b, 0xae, 0x9f, 0x9a, 0xa0, 0xcd, 0x27,
    0xf8, 0x5c, 0x4a, 0x75, 0x1e, 0x07, 0x3b, 0x95, 0x43, 0x71, 0xb5, 0x90, 0xf3, 0xa4, 0x5a, 0x7f,
    0x7c, 0xcb, 0xbe, 0x26, 0xe1, 0xfe, 0x71, 0x4f, 0x1d, 0xbe, 0x27, 0xd4, 0x2e, 0x78, 0x9e, 0x10,
    0x39, 0xae, 0xb6, 0xfa, 0x80, 0xb1, 0x79, 0xa6, 0x16, 0x0c, 0xe3, 0xa1, 0x22, 0xdf, 0x1c, 0xcb,
    0x26, 0x05, 0x3f, 0x20, 0x01, 0x3d, 0xba, 0x23, 0xda, 0xa2, 0x8a, 0xa6, 0xaa, 0xf7, 0xaf, 0xe9,
    0x55, 0x0a, 0x04, 0x96, 0x25, 0x36, 0x70, 0x63, 0xdd, 0x96, 0xfd, 0x4e, 0xa8, 0xc7, 0x51, 0xf0,
    0x72, 0x33, 0xe8, 0x3d, 0x9d, 0x85, 0x94, 0x94, 0x76, 0x1a, 0x0c, 0x75, 0x5e, 0x5b, 0x52, 0x90,
    0x7e, 0xc7, 0xb4, 0xc3, 0xe2, 0xff, 0xec, 0x64, 0xaf, 0x72, 0xb9, 0xe1, 0xde, 0xe9, 0x2c, 0x5c,
    0xca, 0x14, 0x8c, 0x4b, 0xf6, 0x81, 0x3b, 0x20, 0xed, 0x84, 0xbb, 0xdc, 0x80, 0xfe, 0x79, 0xef,
    0x38, 0x85, 0xa0, 0xde, 0xd5, 0xe2, 0xad, 0xe7, 0x98, 0xbf, 0xc6, 0x1f, 0xad, 0x34, 0xf9, 0x72,
    0x8d, 0xeb, 0xcd, 0xcf, 0xa2, 0x4b, 0xc1, 0xfb, 0x9d, 0x59, 0xb4, 0x67, 0xdf, 0xba, 0xd8, 0xa2,
    0x82, 0x44, 0xb3, 0x4a, 0x3f, 0x5a, 0x5d, 0xa8, 0xa5, 0x40, 0xfd, 0x47, 0x50, 0x62, 0x01, 0x7a,
    0xc9, 0xfe, 0xd6, 0x61, 0x9b, 0x17, 0xa5, 0xb1, 0x3b, 0x10, 0x7a, 0x6d, 0xd4, 0xa0, 0x7d, 0x97,
    0xc4, 0x37, 0x8e, 0x98, 0xb9, 0xd4, 0xcd, 0x48, 0xd6, 0xf7, 0x08, 0x67, 0xe5, 0xba, 0x9a, 0xf4,
    0x7e, 0x0e, 0x90, 0x62, 0x8a, 0xd2, 0x17, 0xad, 0x4d, 0xcd, 0x9f, 0xf1, 0x21, 0x0e, 0xf1, 0xb3,
    0xba, 0x72, 0xd3, 0x27, 0x9b, 0x6c, 0x41, 0x7e, 0x75, 0x84, 0x0e, 0x80, 0xaa, 0xe0, 0x7f, 0x2f,
    0x7e, 0xa8, 0xb0, 0xd7, 0x5a, 0xe2, 0xd2, 0xc1, 0x03, 0x6a, 0x61, 0x63, 0x89, 0xf8, 0x86, 0xcb,
    0xb1, 0x1f, 0xf7, 0x7e, 0xd3, 0x54, 0x30, 0x9a, 0x7e, 0xc3, 0x02, 0xf9, 0xbf, 0xad, 0x26, 0x56,
    0x8b, 0x21, 0x92, 0x4f, 0xa7, 0xac, 0x58, 0x3d, 0x42, 0x86, 0x86, 0x1b, 0x03, 0x0e, 0x3e, 0x7a,
    0x73, 0x3d, 0xc8, 0x4a, 0x60, 0xb4, 0xfa, 0x08, 0x75, 0x06, 0x1c, 0x16, 0xc7, 0xe8, 0x98, 0x23,
    0x13, 0x84, 0x01, 0xfd, 0xcc, 0xb0, 0xd8, 0x93, 0xda, 0xf1, 0xd8, 0xb8, 0xe2, 0x70, 0xef, 0xde,
    0x58, 0x38, 0x05, 0xc9, 0xbf, 0x44, 0x22, 0x7c, 0x8d, 0x5e, 0xc4, 0x70, 0x7e, 0x50, 0x42, 0xb8,
    0x7b, 0x72, 0x71, 0x3d, 0x52, 0x0e, 0xb9, 0xc2, 0xdd, 0xf9, 0x52, 0x18, 0x8a, 0x16, 0x20, 0xda,
    0x08, 0x12, 0x90, 0x59, 0x2c, 0x7f, 0x54, 0xb5, 0x7c, 0xfb, 0x34, 0xee, 0xdf, 0x3a, 0xcc, 0xaa,
    0x53, 0xd5, 0x83, 0x16, 0x7e, 0x5c, 0x92, 0xb0, 0xb6, 0x0a, 0x25, 0x46, 0x3f, 0x08, 0x10, 0xac,
    0x6b, 0xd9, 0xe3, 0x87, 0x80, 0xc2, 0x62, 0x9e, 0x12, 0x72, 0x06, 0x65, 0x02, 0x00, 0x0f, 0xb6,
    0xe2, 0x5e, 0x32, 0x30, 0x73, 0x2c, 0x0e, 0x61, 0xd2, 0xcc, 0x80, 0xf1, 0xad, 0x89, 0x5b, 0x6a,
    0x26, 0xfd, 0xd5, 0x09, 0x7c, 0x9d, 0xfc, 0x7a, 0x1e, 0x9f, 0x05, 0xca, 0xd1, 0xd6, 0xb6, 0xa7,
    0x19, 0xca, 0x70, 0x60, 0x35, 0xdd, 0x94, 0x9e, 0xdf, 0x72, 0xaa, 0xdb, 0xcf, 0xcf, 0x3f, 0xf2,
    0xc0, 0x9b, 0x6f, 0x30, 0x64, 0xc1, 0xe4, 0xc4, 0x9f, 0x45, 0xb4, 0x22, 0xe5, 0x14, 0xb0, 0x80,
};

static const uint8_t sMessageEncodingTest0544_ExpectedEncoding[] =
{
    0x10, 0x29, 0x6d, 0xbf, 0x7e, 0xbd, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x8c, 0x25,
    0xbf, 0x12, 0xb4, 0x4c, 0x79, 0xc6, 0xf2, 0xba, 0x66, 0xda, 0x79, 0xb1, 0xc5, 0xdd, 0x3c, 0x99,
    0x25, 0x25, 0x86, 0xec, 0xec, 0xcb, 0x1c, 0x83, 0x32, 0xa6, 0x91, 0xb3, 0x99, 0x53, 0x6b, 0x80,
    0x55, 0x21, 0xa7, 0xa1, 0xe9, 0x2d, 0xf7, 0x8b, 0x37, 0xba, 0xa5, 0xfd, 0x26, 0x88, 0xac, 0x97,
    0xc3, 0x10, 0x42, 0xd9, 0xa4, 0x28, 0x6f, 0x6a, 0x9e, 0x56, 0xa6, 0x42, 0x72, 0x32, 0xf7, 0x8e,
    0xa9, 0x52, 0xbb, 0x68, 0x67, 0xb0, 0x23, 0xfc, 0x26, 0xfd, 0xc2, 0x5a, 0x55, 0x26, 0x59, 0x86,
    0xd8, 0xbb, 0xf9, 0x5d, 0x3a, 0x4b, 0xf1, 0x2c, 0x37, 0x8c, 0x42, 0xbe, 0xad, 0xea, 0x2a, 0x80,
    0xad, 0x4e, 0x75, 0x00, 0x08, 0xb0, 0xd4, 0x87, 0x51, 0x11, 0x49, 0xbb, 0xb5, 0x5a, 0x11, 0x00,
    0xf9, 0x4e, 0x08, 0xa4, 0x10, 0x29, 0x93, 0x28, 0x61, 0x07, 0xff, 0x10, 0x65, 0xc7, 0x8c, 0x50,
    0xd3, 0x30, 0xd5, 0x66, 0xdd, 0x2e, 0xb5, 0x87, 0x15, 0xe5, 0xfa, 0x17, 0x98, 0x24, 0x6c, 0xbc,
    0xe5, 0x5d, 0x0b, 0x28, 0xb5, 0xc8, 0x6f, 0x2f, 0x24, 0xd5, 0x31, 0x48, 0x2e, 0xb6, 0x7f, 0xee,
    0x21, 0x32, 0x0c, 0xc5, 0x8d, 0xe6, 0xaa, 0x1b, 0xe7, 0xa2, 0xde, 0x19, 0xf6, 0x64, 0x83, 0xd2,
    0xbd, 0x2f, 0x68, 0xa2, 0x72, 0x85, 0xb5, 0x26, 0x59, 0x20, 0x54, 0x2b, 0x64, 0x55, 0xe7, 0xfb,
    0x68, 0xf0, 0x1a, 0x21, 0x5e, 0x68, 0x56, 0xfa, 0x8c, 0x75, 0x9d, 0x52, 0x74, 0x0b, 0xff, 0x7b,
    0x56, 0x18, 0x8d, 0x6d, 0x2f, 0xb3, 0x46, 0xb8, 0xef, 0xe9, 0x77, 0x7b, 0x3e, 0xed, 0x26, 0x38,
    0x50, 0x84, 0xaa, 0x03, 0x97, 0x21, 0x03, 0x33, 0x47, 0x9b, 0xdc, 0x33, 0xf6, 0xd7, 0x36, 0x10,
    0x42, 0xe6, 0x21, 0x25, 0x92, 0x31, 0x64, 0x97, 0x65, 0xd4, 0x0d, 0xaf, 0x8a, 0x3f, 0xd7, 0x3c,
    0x3d, 0xaf, 0x10, 0xa1, 0x9c, 0xba, 0xb2, 0xa1, 0x4d, 0xbd, 0xb3, 0x90, 0xeb, 0x9c, 0xc4, 0xfd,
    0x1f, 0xa4, 0xb2, 0x58, 0xb5, 0x33, 0x5d, 0xbb, 0x11, 0xa9, 0x7b, 0x8f, 0x1c, 0x5e, 0x56, 0x92,
    0xda, 0x89, 0xcb, 0x20, 0xaa, 0x99, 0xe3, 0x18, 0x47, 0x96, 0x2c, 0xbd, 0x01, 0x79, 0x6d, 0x68,
    0xb6, 0xad, 0xc2, 0x17, 0x55, 0xe8, 0x15, 0xb7, 0x0a, 0x9a, 0xd0, 0xc9, 0xd8, 0xe2, 0x52, 0x20,
    0xfb, 0xf6, 0x67, 0xa4, 0xee, 0x2e, 0xe1, 0xdb, 0x0c, 0x9f, 0xb6, 0xeb, 0xf5, 0x7b, 0xbb, 0x40,
    0xe7, 0x09, 0x87, 0xed, 0xfe, 0xa5, 0x0b, 0x30, 0xf6, 0x30, 0x39, 0x2a, 0xdc, 0x34, 0x1d, 0xfa,
    0x53, 0x95, 0x5d, 0xa7, 0xcb, 0xfb, 0x27, 0x99, 0xe1, 0x80, 0x58, 0x54, 0xf0, 0xca, 0xee, 0xf7,
    0x7e, 0x8b, 0x24, 0x41, 0x4c, 0x09, 0xbc, 0xef, 0x3f, 0xf4, 0x35, 0xe4, 0x5e, 0xf9, 0x19, 0xbe,
    0xb1, 0xdd, 0x5e, 0x70, 0x39, 0x17, 0x0a, 0xad, 0xbc, 0x2c, 0x88, 0x42, 0xf7, 0xf8, 0x63, 0xc7,
    0x8d, 0x73, 0x01, 0x91, 0x35, 0xb9, 0x10, 0xbb, 0x55, 0xf4, 0x8d, 0xad, 0x39, 0x4b, 0x96, 0xa3,
    0x35, 0xe7, 0x02, 0xaf, 0x67, 0x55, 0xd4, 0xd9, 0xf5, 0xbd, 0xf7, 0xef, 0x47, 0x68, 0x6f, 0x63,
    0xd0, 0x70, 0xa3, 0x81, 0xc6, 0x20, 0x12, 0xe1, 0xe6, 0xc1, 0x4c, 0xb6, 0xe5, 0x38, 0x41, 0xde,
    0x68, 0xd0, 0x73, 0xfe, 0x32, 0x73, 0xb0, 0x05, 0xd9, 0xba, 0x8f, 0xf1, 0x1a, 0xe0, 0xa2, 0x95,
    0x17, 0xbc, 0x82, 0xb9, 0xae, 0xd7, 0x57, 0x07, 0xfb, 0xa6, 0x3f, 0xac, 0xe1, 0x35, 0x11, 0xdd,
    0xb2, 0xbd, 0xd3, 0x3d, 0x92, 0x47, 0xf5, 0x07, 0x30, 0x61, 0x86, 0xe0, 0xea, 0x51, 0x7f, 0xd4,
    0xd7, 0x24, 0x28, 0x9b, 0x97, 0xfd, 0xf3, 0x38, 0x1b, 0x98, 0x91, 0xef, 0x94, 0x7c, 0x15, 0xdc,
    0xa9, 0x97, 0xca, 0xa5, 0x70, 0x2e, 0xf9, 0x3e, 0x2f, 0x76, 0x65, 0x61, 0x60, 0x7b, 0x02, 0xd4,
    0x19, 0x17, 0xe2, 0x39, 0xb4, 0x53, 0x5f, 0x5f, 0xd0, 0xe9, 0xdf, 0x26, 0x13, 0xa1, 0x76, 0x76,
    0xf8, 0x05, 0x25, 0xbe, 0xc4, 0x51, 0x04, 0xc9, 0x93, 0x79, 0xab, 0x1e, 0x8f, 0xa5, 0xc6, 0x0d,
    0x7b, 0x69, 0xfc, 0xf9, 0xc4, 0xde, 0x40, 0xd8, 0xab, 0x70, 0xc2, 0x29, 0xc2, 0xa1, 0x2d, 0x7c,
    0x05, 0xf0, 0xc8, 0x30, 0x30, 0x4b, 0x87, 0xa0, 0x15, 0x49, 0x77, 0x30, 0xc2, 0xc3, 0xcc, 0x32,
    0x2d, 0x1e, 0x62, 0xc0, 0xdc, 0x26, 0x3c, 0xfb, 0x65, 0x85, 0x1f, 0xcd, 0xbb, 0xcd, 0x2b, 0x38,
    0x99, 0x43, 0x66, 0x64, 0x0b, 0xef, 0x1e, 0x30, 0x71, 0xbb, 0x59, 0x10, 0x20, 0xbb, 0x32, 0xa9,
    0x3f, 0x8b, 0x4b, 0xa8, 0xf7, 0x21, 0xe1, 0xc9, 0x55, 0xec, 0x4d, 0xb0, 0x84, 0xa7, 0x7d, 0xc2,
    0xbd, 0x2b, 0x1f, 0x52, 0x21, 0x7a, 0xc2, 0x60, 0x90, 0xe4, 0xe2, 0x4d, 0x2b, 0x3c, 0xac, 0x9e,
    0xc2, 0xbd, 0x97, 0xdf, 0xa3, 0x77, 0x26, 0x31, 0x2f, 0x44, 0x36, 0xce, 0x51, 0x14, 0x7d, 0x00,
    0x5a, 0x35, 0x52, 0x44, 0xdc, 0x30, 0x62, 0x38, 0x45, 0xe7, 0x5f, 0x3a, 0xc1, 0x59, 0xa8, 0x9f,
    0x58, 0xfa, 0x7e, 0x7f, 0x3f, 0x16, 0xe1, 0x23, 0x74, 0xb3, 0xa1, 0xf6, 0x48, 0xf0, 0xcb, 0x24,
    0xda, 0x52, 0x36, 0xcc, 0xb3, 0xbb, 0xc9, 0x1d, 0xe0, 0x81, 0x45, 0x9e, 0xbc, 0xd5, 0x56, 0x40,
    0xea, 0x25, 0xbe, 0x48, 0x45, 0xd3, 0x25, 0x48, 0x37, 0xc4, 0x98, 0xd6, 0x30, 0xcd, 0xec, 0x26,
    0x26, 0x10, 0x6f, 0x92, 0x1b, 0x40, 0xa0, 0x77, 0xc5, 0x43, 0x0a, 0x7c, 0x25, 0x97, 0xb9, 0x39,
    0x7b, 0xf2, 0x7c, 0xff, 0x3b, 0x21, 0xa6, 0x84, 0xed, 0xed, 0x4e, 0xae, 0x42, 0x57, 0x13, 0x09,
    0xfb, 0x03, 0x40, 0x19, 0xa6, 0x5d, 0xef, 0xa9, 0x4a, 0x34, 0xcc, 0xb6, 0xb9, 0x6a, 0xee, 0x2f,
    0x76, 0x64, 0x75, 0x94, 0x29, 0x8b, 0xad, 0x2b, 0x7f, 0xc3, 0xc2, 0xfb, 0xe2, 0xa3, 0xee, 0xff,
    0x43, 0x56, 0x82, 0x68, 0x35, 0x5f, 0x61, 0x26, 0x32, 0xa6, 0x60, 0x64, 0x48, 0x5d, 0x79, 0x5f,
    0xc7, 0x3b, 0xc4, 0xb0, 0xde, 0x27, 0x14, 0xa5, 0xda, 0xed, 0xf9, 0x93, 0xdc, 0xce, 0xef, 0xed,
    0x7e, 0x19, 0xc5, 0xb2, 0x9a, 0x6c, 0x6f, 0x5f, 0x7c, 0xaf, 0xb1, 0x47, 0xab, 0xe1, 0xe9, 0x4b,
    0xbf, 0x54, 0x0c, 0xbb, 0x7b, 0x8c, 0x3e, 0x25, 0x26, 0x4d, 0x60, 0x1c, 0x50, 0x70, 0xbe, 0x20,
    0x3f, 0x4f, 0xf5, 0x4e, 0x8f, 0xd4, 0xd3, 0xf2, 0x65, 0xa6, 0xd3, 0xa1, 0x60, 0x3b, 0x83, 0xee,
    0xda, 0x4e, 0xd6, 0xd5, 0x74, 0xeb, 0xd9, 0x98, 0x46, 0x40, 0x54, 0x33, 0x2c, 0xbd, 0xe8, 0x52,
    0x23, 0xe0, 0x34, 0x0b, 0xb7, 0xe0, 0xa4, 0xe5, 0x00, 0x2a, 0x68, 0x0b, 0x01, 0xf4, 0x7e, 0xdb,
    0x61, 0xe2, 0x36, 0x4f, 0x3b, 0x78, 0x31, 0xed, 0x8c, 0xb8, 0x8a, 0x5c, 0x9d, 0xa8, 0x38, 0xa2,
    0x98, 0x49, 0x9f, 0x2c, 0x8b, 0xa7, 0x7b, 0x0e, 0x82, 0x83, 0x2d, 0x3a, 0xa6, 0xcc, 0x0f, 0x99,
    0x7d, 0x76, 0xa3, 0x31, 0x91, 0x0b, 0xac, 0x21, 0xfc, 0x79, 0xa8, 0x57, 0x66, 0x6a, 0x6e, 0x26,
    0x00, 0x67, 0xe7, 0xf7, 0x2c, 0xd3, 0xa1, 0x82, 0xfa, 0xf8, 0xfb, 0x66, 0x53, 0x64, 0xc0, 0x4b,
    0xdb, 0xf0, 0x4f, 0xad, 0xed, 0x7b, 0x38, 0x49, 0x0c, 0x0d, 0x1f, 0x72, 0xc3, 0x26, 0x57, 0x0c,
    0xd6, 0x96, 0x37, 0x80, 0x74, 0xa6, 0x99, 0xfd, 0x91, 0x99, 0x51, 0x20, 0x06, 0x72, 0xae, 0xa2,
    0x32, 0x9c, 0x1f, 0xd5, 0xbf, 0xa0, 0x3f, 0x30, 0x15, 0x77, 0x1f, 0xba, 0x7a, 0x13, 0x09, 0xe4,
    0x65, 0x01, 0x38, 0xd4, 0x29, 0xc3, 0xf3, 0xf6, 0x9a, 0x4f, 0x6c, 0xd3, 0x9d, 0x1f, 0xf9, 0x9c,
    0x8f, 0xa0, 0x2c, 0xfb,
};

static const MessageEncodingTestVector sMessageEncodingTest0544 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xBD7EBF6D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x258C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0544_EncryptionKey,
    sMessageEncodingTest0544_Payload,
    sizeof(sMessageEncodingTest0544_Payload),
    sMessageEncodingTest0544_ExpectedEncoding,
    sizeof(sMessageEncodingTest0544_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0545_EncryptionKey =
{
    {
        0x96, 0xad, 0x8b, 0xa4, 0xc8, 0x65, 0x94, 0x48, 0xe7, 0x61, 0x1f, 0xf0, 0x15, 0x69, 0x69, 0xba,
    }
};
static const uint8_t sMessageEncodingTest0545_Payload[] =
{
    0xe1, 0x18, 0x3f, 0xaa, 0xad, 0x7b, 0x47, 0x60, 0x47, 0x7b, 0xaa, 0x8c, 0x6f, 0x4c, 0xa4, 0xa2,
    0x2d, 0x21, 0x6a, 0xb1, 0x5f, 0x63, 0xab, 0xbd, 0x99, 0xe0, 0x46, 0x1b, 0x5e, 0x6a, 0xf0, 0x56,
    0xfc, 0x29, 0x4c, 0xfb, 0xf5, 0x37, 0x82, 0x1a, 0x10, 0xd6, 0x5c, 0x27, 0xcd, 0x88, 0x5e, 0x6c,
    0x87, 0x00, 0x99, 0x00, 0x7a, 0xec, 0xb4, 0x7d, 0x63, 0x36, 0x9d, 0xb4, 0xfa, 0x8e, 0x78, 0x12,
    0x0e, 0x56, 0xd9, 0x7d, 0x4b, 0xb7, 0x21, 0x46, 0xe9, 0x32, 0x5f, 0xe1, 0xa6, 0x20, 0x08, 0xdb,
    0xa5, 0x48, 0xea, 0x00, 0x4b, 0xee, 0x1b, 0x19, 0xcf, 0x7a, 0x9d, 0x7b, 0xbd, 0x81, 0x41, 0x22,
    0xf8, 0xc1, 0xc5, 0xad, 0x51, 0x8e, 0x8b, 0x7b, 0x03, 0xa3, 0xf0, 0xa1, 0xac, 0xba, 0x30, 0xe6,
    0xec, 0x64, 0xea, 0xc5, 0x9d, 0xd7, 0x56, 0xdc, 0x2c, 0x49, 0x45, 0xf7, 0x41, 0x81, 0x9f, 0x37,
    0x03, 0x05, 0xaf, 0x84, 0x07, 0x2d, 0xca, 0xf1, 0xb4, 0xd5, 0x20, 0xe9, 0x4a, 0x56, 0xc5, 0xc0,
    0xa2, 0xb7, 0xc6, 0x40, 0x62, 0xee, 0x8e, 0x85, 0x0c, 0x21, 0x84, 0x5d, 0x2c, 0x05, 0x5f, 0x7d,
    0x42, 0x75, 0xf5, 0x9b, 0x02, 0x4f, 0xc5, 0xb1, 0x2a, 0x2a, 0x3c, 0x92, 0xa3, 0x0e, 0x97, 0x0f,
    0x14, 0x81, 0x8d, 0x3d, 0xca, 0x24, 0x5b, 0xeb, 0x24, 0x2b, 0x02, 0xc4, 0x0e, 0xb4, 0x3b, 0xbf,
    0x76, 0x91, 0xcf, 0x40, 0x8b, 0xd2, 0x57, 0xe9, 0x30, 0x89, 0x52, 0x64, 0xd0, 0xc1, 0x84, 0xf1,
    0xaa, 0xf7, 0x09, 0x78, 0x41, 0xdd, 0x05, 0xf8, 0xe3, 0xd0, 0xf5, 0x6b, 0xec, 0x3a, 0x06, 0xba,
    0xdd, 0x5e, 0x9c, 0x28, 0x1e, 0x58, 0x0e, 0x9f, 0xe9, 0xc2, 0x43, 0x15, 0x8d, 0x8c, 0x2d, 0xec,
    0x75, 0x07, 0xc6, 0x33, 0x13, 0x63, 0x04, 0xcc, 0x5f, 0xf2, 0x58, 0xbf, 0x40, 0xaa, 0xcc, 0x09,
    0x47, 0xbd, 0xde, 0x08, 0xaa, 0xf4, 0x43, 0xea, 0x6e, 0x5e, 0x0d, 0xf0, 0x74, 0x84, 0x24, 0x62,
    0xf7, 0x11, 0x5f, 0x6c, 0x9b, 0x8a, 0x34, 0x31, 0xc1, 0xce, 0xb4, 0xee, 0x4b, 0xf5, 0x8e, 0xc5,
    0x44, 0x8f, 0xb7, 0x7e, 0x97, 0x9c, 0x4f, 0x74, 0xd3, 0xb3, 0x9a, 0x09, 0xcd, 0x2d, 0x37, 0x58,
    0x0f, 0x1e, 0x15, 0x0c, 0xee, 0xbe, 0x43, 0x8f, 0x37, 0x63, 0x47, 0xc6, 0x9a, 0x7c, 0x53, 0x77,
    0xb6, 0x65, 0xb5, 0xb0, 0x03, 0x7c, 0xc1, 0xf7, 0xfa, 0x31, 0x8e, 0x78, 0x34, 0x3f, 0xc3, 0xb8,
    0x5b, 0xfc, 0xf5, 0x7a, 0x69, 0x07, 0x4d, 0xcf, 0xaa, 0x05, 0xa7, 0x0a, 0xe5, 0x0d, 0xb7, 0x3d,
    0xd5, 0x84, 0x47, 0x8c, 0x70, 0x32, 0xd4, 0xf8, 0x75, 0x23, 0x9b, 0x35, 0xc6, 0xce, 0x0d, 0xc9,
    0xb8, 0x03, 0x29, 0xf4, 0xf0, 0x48, 0x08, 0x99, 0xfb, 0xa4, 0xe0, 0xd9, 0xee, 0xb8, 0x7a, 0x67,
    0x92, 0x28, 0xb3, 0x26, 0xeb, 0xe6, 0xcf, 0xd7, 0x6a, 0x28, 0x85, 0x61, 0xf7, 0x8c, 0xe7, 0x8a,
    0x80, 0x1e, 0x58, 0x0a, 0x34, 0xa7, 0x14, 0xfc, 0x15, 0x7c, 0xd0, 0x04, 0x42, 0x60, 0xa1, 0x42,
    0xc4, 0x16, 0x90, 0x69, 0xc9, 0xbd, 0x61, 0x6a, 0x59, 0xe8, 0x3c, 0xa5, 0xf6, 0x74, 0x8d, 0x5e,
    0x5b, 0x1a, 0xf9, 0xd2, 0x55, 0x7a, 0xf0, 0x26, 0x0d, 0x1d, 0x2b, 0xe0, 0xb6, 0xbc, 0xeb, 0x13,
    0x1f, 0xee, 0x63, 0x06, 0x50, 0x62, 0xae, 0xf0, 0xbf, 0x20, 0x46, 0xbd, 0xba, 0x83, 0x58, 0x73,
    0x0f, 0xea, 0x28, 0xa8, 0x82, 0x12, 0x11, 0xfa, 0x18, 0xd8, 0xa5, 0xd8, 0xbe, 0x76, 0xb5, 0x9e,
    0x49, 0x64, 0xa1, 0x0f, 0x38, 0xd4, 0xc1, 0x5e, 0x68, 0x50, 0x0b, 0x82, 0xb0, 0xcf, 0x3c, 0x1c,
    0xd2, 0x37, 0xc1, 0x67, 0x06, 0x79, 0x3b, 0xf5, 0x83, 0x25, 0x77, 0x9c, 0x8b, 0x92, 0xee, 0xe1,
    0x8f, 0x31, 0xd0, 0x50, 0xaa, 0xf9, 0xb0, 0x2f, 0xe6, 0xe0, 0x40, 0xae, 0x08, 0x4c, 0xf0, 0x5a,
    0x2d, 0x27, 0x70, 0xcf, 0xc5, 0x66, 0x2c, 0x45, 0xa0, 0x97, 0x2f, 0xe1, 0x27, 0xbf, 0xf9, 0x23,
    0x4b, 0x33, 0x8f, 0x82, 0x39, 0xe3, 0x64, 0x58, 0xb3, 0x5d, 0xe1, 0x6a, 0xc4, 0xa5, 0xdf, 0xcd,
    0xf5, 0x95, 0x77, 0xaa, 0xbb, 0x72, 0xbc, 0x90, 0xb3, 0xef, 0xad, 0x60, 0xe7, 0xc8, 0xc1, 0x62,
    0xb5, 0x86, 0x63, 0x0a, 0xfd, 0x16, 0x41, 0x1e, 0x6c, 0x0c, 0x6c, 0x91, 0x77, 0x18, 0x88, 0xf1,
    0xe7, 0xac, 0xac, 0xb5, 0x86, 0x74, 0xfe, 0xa2, 0x4a, 0x6f, 0x3f, 0x26, 0x8f, 0x29, 0xc1, 0xa6,
    0xab, 0x35, 0x32, 0x2a, 0x37, 0x5e, 0x81, 0xd8, 0x87, 0x54, 0x6b, 0x0a, 0xe6, 0x12, 0x1a, 0x1a,
    0xd3, 0x4a, 0x7c, 0x6f, 0xf4, 0x13, 0xb8, 0xd3, 0x27, 0xa3, 0x2f, 0xe2, 0x55, 0x14, 0x1b, 0x91,
    0x66, 0xa1, 0xa6, 0xe8, 0xdd, 0x79, 0xc8, 0x31, 0xbe, 0xd6, 0x50, 0x93, 0x28, 0x62, 0xd8, 0x7d,
    0x13, 0xdf, 0x3a, 0x05, 0x89, 0x4f, 0x7b, 0x93, 0xe1, 0xe5, 0x00, 0x96, 0x48, 0xf6, 0x3c, 0x86,
    0x95, 0x0d, 0x31, 0xbe, 0x12, 0x96, 0xdf, 0x4c, 0x68, 0xc1, 0xbd, 0x6e, 0x57, 0xf9, 0x5d, 0x04,
    0x82, 0xbb, 0x37, 0x2c, 0x80, 0xac, 0xfa, 0xad, 0xd2, 0x80, 0xe0, 0xea, 0xbf, 0xbe, 0x61, 0x70,
    0xf7, 0xb9, 0x64, 0x85, 0xaf, 0x72, 0x9b, 0x38, 0xdb, 0x4c, 0x21, 0xd0, 0xe7, 0x88, 0xb4, 0xb8,
    0xbb, 0x5e, 0xd4, 0x05, 0x02, 0xc6, 0x1a, 0x90, 0x86, 0x4f, 0x83, 0x22, 0xdd, 0xa0, 0xee, 0x2b,
    0x7f, 0x4c, 0x86, 0x51, 0x65, 0x22, 0x0c, 0x22, 0xd5, 0xee, 0xcf, 0x44, 0x75, 0x1d, 0x34, 0xf6,
    0x73, 0x18, 0x2e, 0x8c, 0x4c, 0xd9, 0x05, 0x08, 0x07, 0x0f, 0x33, 0x91, 0xb1, 0x0b, 0x50, 0xf5,
    0x4f, 0x7b, 0x6b, 0x33, 0x06, 0x56, 0x66, 0x18, 0x6f, 0xc6, 0x80, 0x2b, 0x78, 0x15, 0xae, 0x0a,
    0x02, 0xab, 0x3e, 0xd7, 0x38, 0xab, 0x02, 0x54, 0x99, 0x84, 0x56, 0xbb, 0x6d, 0x12, 0x0e, 0xf8,
    0x3b, 0xdb, 0x2a, 0x6d, 0x18, 0xca, 0xde, 0x34, 0x7c, 0xcd, 0xde, 0xcc, 0x34, 0x7a, 0x05, 0x00,
    0x6c, 0x84, 0xf0, 0x1b, 0x53, 0x99, 0x68, 0xeb, 0xf7, 0x75, 0x6f, 0x07, 0x04, 0x27, 0xfd, 0xa7,
    0xcb, 0xad, 0x37, 0xd2, 0x45, 0x33, 0x2b, 0x50, 0xa0, 0x86, 0xe1, 0x78, 0x9f, 0xcc, 0xa1, 0xe7,
    0xbe, 0x19, 0x3b, 0x9c, 0xae, 0xa3, 0x41, 0xea, 0x25, 0x7a, 0xc0, 0x92, 0xd5, 0xff, 0x5a, 0xc4,
    0x14, 0xf3, 0xd7, 0x2a, 0xe8, 0x89, 0xd0, 0x16, 0x5e, 0x27, 0xef, 0x4b, 0x73, 0x84, 0x2a, 0x24,
    0x91, 0xd4, 0x40, 0x12, 0x99, 0x42, 0x2d, 0xf5, 0x05, 0x81, 0xe5, 0xe2, 0x5a, 0x71, 0x58, 0xe9,
    0xcf, 0x47, 0xa3, 0xc2, 0x33, 0x5d, 0x98, 0x38, 0x3d, 0x5c, 0x8e, 0xbb, 0x8b, 0x11, 0x78, 0xec,
    0x44, 0x52, 0xe6, 0x7d, 0x89, 0x02, 0x37, 0xbd, 0xe7, 0x81, 0x27, 0xf7, 0x9b, 0x83, 0xe9, 0x30,
    0xbd, 0x53, 0x4b, 0x0b, 0x3c, 0x1c, 0x5e, 0x56, 0x11, 0x2b, 0xae, 0xd7, 0x7e, 0x11, 0x97, 0x20,
    0x93, 0x10, 0x52, 0xc2, 0xd7, 0x7c, 0x73, 0xa8, 0x74, 0x4f, 0x87, 0x12, 0x48, 0x75, 0x93, 0x6e,
    0x73, 0xe3, 0xa0, 0xff, 0x9a, 0x42, 0xe1, 0x42, 0x9d, 0x40, 0x45, 0xf6, 0x16, 0xc3, 0x33, 0xe0,
    0x03, 0x96, 0xb9, 0xfa, 0xcf, 0x90, 0x86, 0xa4, 0x02, 0xcc, 0x4b, 0xc4, 0x73, 0x18, 0xfe, 0xf3,
    0x1a, 0x68, 0xa4, 0x83, 0x4f, 0xf3, 0x10, 0x72, 0x54, 0xc8, 0x13, 0x10, 0x95, 0x73, 0x93, 0xf7,
    0xe3, 0xd9, 0xb2, 0x51, 0xc8, 0x85, 0x3a, 0x69, 0x6d, 0x87, 0x8c, 0xd9, 0x79, 0x42, 0xa8, 0x03,
};

static const uint8_t sMessageEncodingTest0545_ExpectedEncoding[] =
{
    0x20, 0x29, 0x0d, 0xdc, 0x0f, 0x9f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xbd, 0x27,
    0x69, 0x89, 0xc6, 0x91, 0x4b, 0x62, 0x2a, 0x03, 0xfa, 0x87, 0xc2, 0x65, 0x32, 0xba, 0x9d, 0x89,
    0x25, 0x16, 0x7f, 0x30, 0x84, 0x54, 0xac, 0x53, 0xb4, 0xd2, 0x83, 0xce, 0x04, 0x63, 0xda, 0xca,
    0xe1, 0x18, 0x28, 0x5c, 0xa6, 0x7b, 0xc2, 0xe3, 0xb8, 0xa8, 0x3e, 0x48, 0x6a, 0x0d, 0x97, 0xb7,
    0xd0, 0x60, 0xea, 0x3d, 0x39, 0xa1, 0xbc, 0xf7, 0x47, 0xd8, 0x02, 0x30, 0x75, 0x41, 0xf9, 0x00,
    0x9d, 0x76, 0x79, 0xa1, 0x8d, 0xd0, 0x6f, 0x29, 0xbf, 0x92, 0xba, 0xdb, 0x1a, 0x35, 0xac, 0x6f,
    0xb6, 0x33, 0xb4, 0x10, 0x17, 0x8a, 0x2d, 0x39, 0x4d, 0x94, 0x6f, 0x5f, 0x82, 0x6d, 0x2d, 0x8a,
    0x38, 0xc6, 0xb9, 0x6a, 0xd2, 0x35, 0x60, 0x42, 0xda, 0x2a, 0xca, 0x09, 0x07, 0x80, 0xc9, 0xf6,
    0x4e, 0xdc, 0x95, 0x39, 0xa6, 0x31, 0xee, 0x7f, 0xb0, 0x01, 0x8a, 0x48, 0x9a, 0xcf, 0x46, 0xa0,
    0xe1, 0xa1, 0x56, 0xd7, 0x1a, 0xe0, 0xca, 0x32, 0xb4, 0x45, 0x41, 0x5f, 0x83, 0xb4, 0x93, 0x41,
    0x23, 0xa8, 0x76, 0xf8, 0x9b, 0xdf, 0x1b, 0xb1, 0xc1, 0x7e, 0xf5, 0x07, 0x97, 0x1f, 0x5f, 0xc7,
    0x7d, 0x79, 0xa7, 0x9e, 0x87, 0x18, 0x56, 0x75, 0xc7, 0x8e, 0x58, 0x50, 0xdd, 0xaf, 0xba, 0xe8,
    0xa8, 0x5f, 0x7a, 0x8d, 0x9a, 0x66, 0x73, 0xdb, 0x44, 0x14, 0x73, 0x45, 0xab, 0x6a, 0x65, 0x15,
    0xb5, 0xe3, 0xf3, 0xb1, 0x00, 0x0e, 0x0a, 0x6d, 0xf3, 0x3f, 0xe5, 0x8b, 0x26, 0xe3, 0x50, 0xc3,
    0x6c, 0xe3, 0x43, 0xb9, 0x53, 0x2d, 0x2f, 0x92, 0x76, 0x1d, 0x89, 0x20, 0xd1, 0xc3, 0xe3, 0x52,
    0xb9, 0xb8, 0x57, 0x84, 0x58, 0xd5, 0x8b, 0xe0, 0x76, 0x79, 0x20, 0x15, 0x07, 0x47, 0x1c, 0xdd,
    0x8d, 0xb9, 0xd4, 0xa6, 0xa1, 0x22, 0xb1, 0x39, 0x56, 0x56, 0xe7, 0x6f, 0x0e, 0x8e, 0x7a, 0x02,
    0xa0, 0x27, 0x41, 0x6e, 0xaf, 0xee, 0xc8, 0x79, 0xfa, 0x7e, 0xf0, 0xa2, 0x1c, 0x3e, 0x20, 0xa5,
    0x76, 0xd9, 0xdd, 0xae, 0x07, 0x77, 0x84, 0x0f, 0x7f, 0xfb, 0x4a, 0x70, 0xd4, 0xd9, 0x05, 0x20,
    0x22, 0x96, 0x18, 0xbe, 0xe5, 0x50, 0xa4, 0x3e, 0x66, 0xa6, 0xcb, 0xcd, 0x04, 0x79, 0x70, 0x1e,
    0xbf, 0x5a, 0x20, 0xd8, 0x73, 0x9a, 0x80, 0xe7, 0x74, 0x0f, 0x14, 0x94, 0x7c, 0xe8, 0x46, 0xd6,
    0xe6, 0x6c, 0x13, 0xfa, 0x1a, 0x2b, 0x1a, 0xa9, 0xd3, 0x8d, 0x88, 0x72, 0xc1, 0x7e, 0x95, 0xd9,
    0xf4, 0xef, 0x26, 0x10, 0x60, 0x74, 0xf5, 0x78, 0x9b, 0xa8, 0x19, 0xa4, 0x64, 0x04, 0x99, 0x2e,
    0x9f, 0x52, 0xb8, 0xd3, 0x42, 0x09, 0xb8, 0xb8, 0x9d, 0x68, 0xd0, 0x5a, 0x86, 0xf6, 0xc5, 0xd8,
    0xa6, 0x3c, 0x61, 0x9a, 0xa0, 0x41, 0xe5, 0xfb, 0xa0, 0xf8, 0x4a, 0x77, 0x13, 0x03, 0x4f, 0x9b,
    0xe8, 0xfe, 0x9b, 0x51, 0xfa, 0xed, 0x0c, 0x92, 0x66, 0x21, 0xcb, 0xf4, 0xef, 0x01, 0x6c, 0xe9,
    0xcf, 0x30, 0xae, 0xde, 0xfc, 0x33, 0xa1, 0x92, 0x26, 0xb0, 0xb9, 0x7f, 0xf0, 0x22, 0x2e, 0xfa,
    0x97, 0x74, 0xe3, 0x26, 0x63, 0x9c, 0x8b, 0xb8, 0x19, 0x46, 0x9b, 0xb5, 0x46, 0xaf, 0xc8, 0x0b,
    0x90, 0x3e, 0xc5, 0x69, 0x5a, 0x0f, 0x21, 0x56, 0x31, 0x0c, 0x58, 0xac, 0xb7, 0x49, 0xb8, 0x40,
    0x16, 0xca, 0x57, 0x84, 0xaa, 0x4a, 0x6f, 0xf5, 0xda, 0xd5, 0xcc, 0xca, 0xc9, 0xd6, 0x18, 0x2e,
    0x7a, 0x22, 0x7f, 0xcc, 0x26, 0x8a, 0xd9, 0x88, 0x04, 0x69, 0x51, 0xae, 0x41, 0x42, 0x8f, 0x29,
    0x1d, 0x2f, 0xcf, 0x20, 0x25, 0x84, 0xac, 0x14, 0x72, 0xb0, 0x31, 0xfb, 0x6d, 0xc9, 0x73, 0x31,
    0x70, 0x9d, 0xcf, 0xe9, 0xcd, 0xec, 0x84, 0xde, 0xa1, 0xff, 0x49, 0xe4, 0x1f, 0xdc, 0x78, 0x2b,
    0x10, 0x05, 0x8c, 0x40, 0xbf, 0x73, 0x7e, 0xc6, 0x72, 0x7f, 0x1f, 0xe2, 0x77, 0x42, 0x24, 0x2c,
    0xfd, 0x4b, 0x28, 0x71, 0x61, 0x9c, 0x79, 0x47, 0xec, 0xeb, 0x42, 0xcc, 0xb3, 0xc5, 0xef, 0x8f,
    0xd8, 0xb9, 0x48, 0x63, 0x89, 0x74, 0x68, 0x95, 0x4b, 0x56, 0x2d, 0x38, 0x3b, 0xaa, 0x3a, 0xb8,
    0x27, 0x68, 0xd3, 0xe2, 0x4f, 0xc2, 0xf5, 0x56, 0x28, 0x37, 0x2a, 0x19, 0xda, 0x65, 0x93, 0x9b,
    0x3b, 0xda, 0xdf, 0x09, 0x73, 0xa3, 0x5f, 0x12, 0x00, 0xb1, 0x75, 0x24, 0x8a, 0x9a, 0xb5, 0xf5,
    0xd6, 0x23, 0xf8, 0xe4, 0xfe, 0x9d, 0x96, 0xb5, 0xc1, 0x2a, 0x91, 0xf3, 0x75, 0x3c, 0x24, 0xed,
    0xee, 0x29, 0xc3, 0x09, 0x30, 0x44, 0xaa, 0x49, 0x2d, 0xdb, 0x56, 0x93, 0x52, 0x1d, 0x4a, 0xb9,
    0xf3, 0xe4, 0x5b, 0x0f, 0x87, 0x47, 0xa9, 0xb0, 0xcd, 0xe6, 0x8d, 0x91, 0xe8, 0xcf, 0xd5, 0x19,
    0xb1, 0xcb, 0x3e, 0x09, 0x77, 0xbd, 0xe2, 0xe1, 0xf8, 0x6b, 0xba, 0x50, 0xaa, 0xe1, 0xe2, 0x79,
    0xb7, 0x8b, 0x35, 0xad, 0x45, 0xb3, 0xdc, 0xb6, 0x8d, 0x1f, 0x8e, 0x64, 0xf8, 0xab, 0xb1, 0xdd,
    0xbf, 0xb9, 0xf0, 0x21, 0x3d, 0x26, 0xe3, 0xc9, 0x90, 0x64, 0xe0, 0xf6, 0x6a, 0x82, 0xd2, 0x5a,
    0x79, 0x7a, 0xa0, 0x87, 0x3b, 0x43, 0x8e, 0xb6, 0xd2, 0x07, 0xfb, 0x39, 0xce, 0xa0, 0xad, 0x8a,
    0x68, 0xe1, 0x4d, 0xbb, 0x98, 0xf9, 0x11, 0x8b, 0xb1, 0x9e, 0x14, 0x95, 0x40, 0x93, 0x70, 0x3f,
    0x7d, 0x05, 0x7f, 0xfa, 0x91, 0x47, 0xea, 0x76, 0x62, 0x95, 0x55, 0xa7, 0x71, 0x38, 0xd7, 0x02,
    0x35, 0x9d, 0xb0, 0xcb, 0x84, 0xcc, 0x6a, 0x8a, 0xa4, 0x81, 0x71, 0xf0, 0x4c, 0x85, 0xbd, 0xbc,
    0x97, 0xc3, 0x68, 0x3f, 0x1e, 0x74, 0xf1, 0xae, 0x07, 0x9e, 0x3f, 0x15, 0xae, 0x48, 0xcf, 0xf8,
    0x7d, 0xb3, 0x91, 0xa8, 0xbb, 0xae, 0x4b, 0x8e, 0x08, 0x05, 0xc0, 0x51, 0xea, 0xaf, 0x17, 0x48,
    0x2c, 0xdb, 0x86, 0xa6, 0xc7, 0xfe, 0x4f, 0x2a, 0x71, 0xbe, 0x1a, 0xdf, 0xc2, 0x54, 0xf5, 0xf6,
    0xc9, 0xa2, 0xba, 0xb5, 0xdd, 0x31, 0xe4, 0xd3, 0xa7, 0x2d, 0x65, 0xa1, 0xa8, 0x43, 0xdc, 0x49,
    0xb4, 0xa0, 0x48, 0x06, 0x9a, 0x82, 0xa8, 0xd4, 0x2f, 0x22, 0x07, 0x0c, 0x95, 0x3a, 0x0a, 0x64,
    0x33, 0x4b, 0x5c, 0xc5, 0x95, 0xeb, 0xed, 0x49, 0x91, 0x86, 0xe6, 0xb0, 0xaf, 0x76, 0x78, 0xb8,
    0xe3, 0xa3, 0x19, 0xb7, 0x30, 0x5d, 0x6e, 0x03, 0xe1, 0xc5, 0xb1, 0x8a, 0x5b, 0x49, 0xf1, 0xe7,
    0x4e, 0x99, 0x2b, 0x8e, 0xb5, 0x1e, 0xd3, 0xc4, 0x42, 0x9c, 0x10, 0x1d, 0x21, 0xce, 0x98, 0x30,
    0xe1, 0x98, 0x7c, 0xcd, 0x61, 0x21, 0x15, 0x2f, 0x60, 0xff, 0xba, 0x7d, 0x8e, 0x07, 0xc5, 0x1c,
    0xf7, 0x5d, 0xaf, 0x2b, 0x21, 0x79, 0x2a, 0xe5, 0x71, 0x36, 0x70, 0xca, 0x75, 0xfa, 0x55, 0xfa,
    0xca, 0xe3, 0x63, 0xf9, 0x5f, 0x3c, 0x9c, 0x54, 0xc3, 0xa9, 0xcb, 0x80, 0x62, 0xcd, 0xff, 0xf3,
    0x08, 0x08, 0x8d, 0x52, 0x49, 0x04, 0x7c, 0x40, 0x45, 0xdc, 0x58, 0xc2, 0xc7, 0x3b, 0x64, 0x78,
    0x0a, 0xf5, 0xab, 0xe2, 0x28, 0xa7, 0x82, 0x3d, 0x2a, 0x9b, 0xe5, 0x5a, 0xf7, 0x4f, 0x30, 0x94,
    0x2c, 0xf2, 0xdb, 0xa7, 0x62, 0x48, 0x67, 0xf1, 0xa7, 0xa9, 0x89, 0x75, 0x61, 0x82, 0x34, 0xea,
    0x3b, 0xca, 0xa7, 0xf5, 0xb8, 0x6d, 0xb1, 0x57, 0x51, 0xed, 0x95, 0x74, 0xcc, 0x9e, 0xb8, 0xcd,
    0x63, 0x13, 0x5e, 0xd5, 0xc4, 0x55, 0xce, 0x65, 0xbd, 0x50, 0xf2, 0x77, 0x55, 0x1e, 0xe1, 0x98,
    0x64, 0xf5, 0x0e, 0x9d, 0x64, 0x41, 0x78, 0xf5, 0x48, 0xe8, 0xd6, 0xbb, 0xa7, 0xcd, 0xda, 0x8f,
    0x4e, 0x21, 0x0c, 0xb9, 0x4e, 0xd7, 0x7b, 0xbd,
};

static const MessageEncodingTestVector sMessageEncodingTest0545 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x9F0FDC0D,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x27BD,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0545_EncryptionKey,
    sMessageEncodingTest0545_Payload,
    sizeof(sMessageEncodingTest0545_Payload),
    sMessageEncodingTest0545_ExpectedEncoding,
    sizeof(sMessageEncodingTest0545_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0546_EncryptionKey =
{
    {
        0x00, 0x1a, 0xb2, 0xbf, 0x41, 0xda, 0x8b, 0x34, 0xee, 0x54, 0x82, 0x41, 0x18, 0x1f, 0xee, 0x81,
    }
};
static const uint8_t sMessageEncodingTest0546_Payload[] =
{
    0x2d, 0xc2, 0x93, 0xc8, 0x69, 0x4f, 0xf0, 0x65, 0x8b, 0xfd, 0x4c, 0x7d, 0xfc, 0xe2, 0x19, 0x2c,
    0x43, 0xd2, 0x54, 0x88, 0xf2, 0x5c, 0x1d, 0x29, 0x1c, 0x33, 0xa0, 0xf0, 0x99, 0x72, 0x08, 0x9c,
    0x4e, 0xec, 0x34, 0x67, 0x91, 0x73, 0xe6, 0x79, 0xcb, 0x9b, 0x1c, 0xd6, 0xf4, 0x08, 0xd7, 0xb3,
    0x6d, 0x1e, 0xbc, 0xc8, 0x79, 0x7c, 0xf0, 0x5e, 0xbc, 0xf4, 0x66, 0xab, 0xaf, 0x65, 0x28, 0x50,
    0x84, 0x25, 0xce, 0xd4, 0xa2, 0x8e, 0x74, 0xc9, 0x2d, 0xe7, 0x98, 0x51, 0x01, 0xc3, 0xd2, 0x64,
    0xb7, 0x28, 0xa5, 0x2c, 0xac, 0xbf, 0xf9, 0x72, 0x6b, 0x0c, 0xa5, 0x42, 0x63, 0x98, 0xde, 0x0a,
    0x8a, 0x4a, 0xc1, 0x45, 0x90, 0xc9, 0x2a, 0x1a, 0x40, 0xe2, 0x96, 0xa7, 0x80, 0x39, 0x63, 0xdc,
    0xb5, 0xc0, 0x8a, 0x4c, 0x40, 0x20, 0xb4, 0xf1, 0x48, 0x18, 0x50, 0x2f, 0x39, 0xbe, 0xaa, 0x0d,
    0x7f, 0xc6, 0x65, 0x19, 0x10, 0x90, 0x4f, 0xd8, 0x83, 0x1c, 0x0e, 0xb2, 0x89, 0x92, 0xd1, 0xab,
    0x7f, 0xc4, 0x26, 0x6c, 0x72, 0xbc, 0x74, 0xb7, 0x0e, 0xd7, 0x7a, 0xa8, 0x11, 0x42, 0x7b, 0x54,
    0x72, 0xae, 0xe5, 0x17, 0xd4, 0xf4, 0x48, 0xc5, 0x8c, 0x3c, 0x77, 0x8f, 0xbe, 0x26, 0x7a, 0x97,
    0xc0, 0x6b, 0xa7, 0xd4, 0x9f, 0x7f, 0xe2, 0x70, 0xb9, 0xbb, 0xb2, 0xe9, 0x93, 0xce, 0x7b, 0xb4,
    0x28, 0x2c, 0xe4, 0x7c, 0xb4, 0x5b, 0xeb, 0x17, 0xc4, 0x4d, 0x12, 0xf4, 0x14, 0xde, 0xff, 0x19,
    0xe8, 0x50, 0xf5, 0x7d, 0xef, 0x95, 0x86, 0x75, 0xb9, 0x03, 0xf3, 0x77, 0xb0, 0x41, 0x00, 0xee,
    0xa6, 0x0e, 0xe0, 0x8e, 0xdd, 0x56, 0xa7, 0xc1, 0x18, 0x29, 0x5a, 0x0a, 0x3a, 0x4a, 0x4c, 0x47,
    0xcc, 0x02, 0x6e, 0x9e, 0xfe, 0x0f, 0x49, 0xcd, 0xbe, 0xb3, 0xc1, 0x64, 0xb1, 0x4e, 0xda, 0xd9,
    0xbb, 0x84, 0xe2, 0xc9, 0xbd, 0xc7, 0x41, 0xcf, 0x00, 0x21, 0x31, 0xed, 0x10, 0x0b, 0xa7, 0xc7,
    0xb4, 0x87, 0x0e, 0xcd, 0x6b, 0x96, 0x44, 0x82, 0x2f, 0x54, 0xbf, 0xcf, 0x39, 0xff, 0xc4, 0x37,
    0x89, 0xd6, 0xa1, 0x7d, 0x2c, 0xd9, 0x7a, 0xa6, 0x4f, 0x40, 0x22, 0x83, 0x45, 0xbd, 0xf2, 0x2a,
    0x9d, 0x37, 0xf0, 0xbd, 0x7a, 0xee, 0xdd, 0x26, 0xcd, 0x0f, 0x6d, 0xf4, 0x8e, 0x9c, 0x9d, 0x8c,
    0x46, 0x02, 0x4f, 0xc3, 0x23, 0x38, 0x12, 0xf6, 0xd7, 0x0a, 0x0b, 0x72, 0xfc, 0x24, 0xe8, 0xe7,
    0x3b, 0x0b, 0x0c, 0xc7, 0x6c, 0x78, 0xe6, 0x0a, 0x9c, 0x99, 0x9b, 0x31, 0x43, 0xc4, 0x92, 0x7b,
    0x93, 0xa4, 0xb6, 0x27, 0xeb, 0x6e, 0x3e, 0xfd, 0x73, 0xc3, 0xe3, 0xf4, 0x11, 0xa7, 0xc1, 0xc1,
    0x93, 0xc0, 0x0c, 0xb1, 0x0d, 0xd9, 0xbc, 0x94, 0x8a, 0x65, 0x57, 0x6c, 0x09, 0x57, 0x5e, 0x3a,
    0x49, 0x97, 0xa4, 0x21, 0x5b, 0x84, 0x93, 0xfb, 0x8e, 0x95, 0x74, 0x99, 0xed, 0xa6, 0x29, 0x21,
    0xcc, 0x63, 0x2f, 0xce, 0x31, 0x1a, 0xfe, 0x8c, 0x67, 0x9c, 0xc4, 0xf6, 0xef, 0x48, 0xa2, 0x77,
    0xd6, 0xa5, 0xf4, 0x4f, 0x5a, 0x27, 0x98, 0x1b, 0xf0, 0xd4, 0x7e, 0xec, 0x48, 0xd0, 0x62, 0x81,
    0xe4, 0x6d, 0x19, 0xd0, 0x44, 0x09, 0x7d, 0x86, 0xf3, 0x15, 0xd9, 0x0d, 0xd2, 0x5f, 0x25, 0x75,
    0x2e, 0x0e, 0x91, 0xc0, 0x20, 0xdd, 0xbe, 0x7a, 0xbe, 0xf6, 0x59, 0xc6, 0x82, 0x78, 0xa0, 0xf1,
    0x65, 0xbf, 0xbb, 0x2c, 0xae, 0xf6, 0xfc, 0x9a, 0xe3, 0x8c, 0x09, 0x52, 0x09, 0xe7, 0x84, 0x2e,
    0xb2, 0x55, 0x42, 0x52, 0x9e, 0xa8, 0xaa, 0xd4, 0xe4, 0xad, 0x8b, 0x60, 0xa2, 0x6f, 0x86, 0xf9,
    0x29, 0xce, 0x4b, 0xe2, 0xa8, 0x76, 0x25, 0xf2, 0xec, 0x7c, 0x35, 0x09, 0x50, 0x8c, 0xcd, 0x2a,
    0x16, 0x66, 0x32, 0x6f, 0x85, 0x72, 0x19, 0xe0, 0x36, 0x8c, 0x1e, 0xa2, 0xbf, 0xae, 0x58, 0x1e,
    0x44, 0xd3, 0xcb, 0x98, 0x0e, 0x95, 0x71, 0xb6, 0xe6, 0xf0, 0x2c, 0x98, 0xd1, 0x14, 0x58, 0xc3,
    0x0d, 0x2a, 0x57, 0x84, 0x3e, 0xb3, 0xb3, 0xe3, 0xf4, 0xba, 0xa9, 0x9b, 0x85, 0x55, 0x9e, 0x77,
    0x65, 0x74, 0x1c, 0x43, 0xb1, 0xb6, 0xa0, 0x1a, 0x23, 0x3a, 0xab, 0x0a, 0x59, 0xf8, 0x72, 0xe8,
    0xd2, 0x1d, 0xa7, 0xdf, 0x67, 0x76, 0xbf, 0xa0, 0x06, 0x3f, 0x66, 0x28, 0x75, 0x9e, 0x1a, 0x76,
    0xc8, 0x96, 0x09, 0x99, 0x4f, 0x81, 0xa8, 0x91, 0x8f, 0x8b, 0xce, 0xd6, 0x9c, 0x53, 0x7f, 0xcc,
    0x14, 0x30, 0xe6, 0x09, 0x3f, 0xa0, 0x6b, 0x22, 0x34, 0x95, 0x40, 0x21, 0xfe, 0x89, 0xc9, 0x6c,
    0x40, 0x76, 0xc0, 0x17, 0xd9, 0xc4, 0x2d, 0x6e, 0x5b, 0x63, 0x85, 0xf1, 0xfc, 0x77, 0x24, 0xc2,
    0xbb, 0x34, 0x21, 0xf1, 0xdd, 0xaa, 0x29, 0x3d, 0x11, 0xad, 0x01, 0x99, 0x0d, 0xb6, 0xb0, 0xb3,
    0x3e, 0xb1, 0x7a, 0x42, 0xd3, 0x87, 0x5d, 0x7f, 0xdd, 0xab, 0xd8, 0x26, 0x62, 0x6c, 0x12, 0x10,
    0xaf, 0x38, 0x50, 0x6a, 0xe6, 0x68, 0x4d, 0xef, 0xff, 0xe3, 0x1a, 0xb0, 0xb2, 0xaa, 0x16, 0x73,
    0xa2, 0xd9, 0x22, 0x61, 0x98, 0xd0, 0xcf, 0x00, 0xb1, 0x0a, 0x72, 0x78, 0x0f, 0x5e, 0xa1, 0x95,
    0x46, 0xf6, 0x20, 0xc2, 0x99, 0x15, 0x83, 0x0c, 0xeb, 0x68, 0x50, 0xb1, 0xdf, 0x2a, 0x5f, 0x6a,
    0x96, 0x5b, 0x98, 0x85, 0xef, 0xfc, 0x7a, 0x14, 0xab, 0x2c, 0x72, 0xf6, 0x51, 0xdf, 0xaa, 0x8e,
    0x80, 0xaf, 0x00, 0x82, 0x42, 0xad, 0xda, 0xf1, 0x60, 0x96, 0x41, 0x89, 0x9f, 0xf4, 0x01, 0x39,
    0xb7, 0x54, 0xd1, 0xfc, 0x79, 0x7f, 0x0a, 0x90, 0x0b, 0xcc, 0x87, 0xba, 0xb5, 0x9e, 0xf4, 0x18,
    0x5d, 0x54, 0xad, 0xa6, 0x64, 0xb8, 0x2b, 0x37, 0x72, 0x52, 0xdf, 0x74, 0xb9, 0xa6, 0x5a, 0xf7,
    0xc2, 0x35, 0xc4, 0x9b, 0x30, 0xb9, 0x16, 0x92, 0x25, 0x8b, 0xb5, 0xe1, 0xcd, 0x4f, 0xc2, 0x41,
    0xfd, 0x65, 0x09, 0xf7, 0x18, 0xb0, 0xf9, 0x19, 0x96, 0x86, 0x0b, 0xb7, 0x7b, 0xb4, 0x60, 0x69,
    0xbd, 0xc5, 0x90, 0x31, 0x56, 0xe4, 0xf4, 0x72, 0x53, 0x40, 0xf6, 0x49, 0xe9, 0x74, 0xf9, 0xbd,
    0x0b, 0xb3, 0xd6, 0xb5, 0x96, 0xfd, 0xae, 0xbe, 0x06, 0xe2, 0x08, 0x93, 0xf0, 0xc5, 0x15, 0x86,
    0x9c, 0x1f, 0x43, 0x9e, 0xdf, 0x6c, 0xff, 0x0f, 0xf8, 0xb4, 0x44, 0xd2, 0x88, 0xf7, 0xab, 0x8b,
    0xde, 0x4f, 0xb5, 0x26, 0xdf, 0xd9, 0x36, 0x81, 0x01, 0xe8, 0x5b, 0x9b, 0x8d, 0x3e, 0x66, 0x93,
    0x06, 0xa8, 0x85, 0x97, 0xae, 0x2c, 0xd3, 0xf0, 0x07, 0xfc, 0xf5, 0x29, 0xf5, 0xca, 0xba, 0xdb,
    0x68, 0x46, 0x5d, 0xf3, 0xfe, 0xbe, 0x78, 0x3e, 0x6d, 0xab, 0x94, 0xef, 0x87, 0xaa, 0x4e, 0xc8,
    0x0d, 0x77, 0x35, 0xc9, 0x4c, 0x00, 0xc6, 0xbf, 0xd0, 0xdd, 0x6e, 0xaa, 0xdc, 0x2d, 0x65, 0xd8,
    0xf5, 0xa4, 0x95, 0x2e, 0xe4, 0x01, 0x8d, 0x3e, 0x47, 0xbb, 0xe1, 0xfc, 0x49, 0xa3, 0xf7, 0x80,
    0x87, 0xdf, 0x49, 0x75, 0xe4, 0x1a, 0x27, 0x36, 0x3e, 0x35, 0xaa, 0x1f, 0x79, 0xcd, 0x7e, 0x41,
    0xcf, 0xe9, 0x1e, 0xe0, 0x8e, 0xb7, 0xf1, 0x1b, 0xd1, 0x90, 0x87, 0xdb, 0xcd, 0x6f, 0xce, 0x21,
    0x4a, 0xa0, 0x56, 0xd9, 0x55, 0x7c, 0x0f, 0x38, 0xe7, 0x81, 0x3e, 0xb1, 0x89, 0xbb, 0x2f, 0x76,
    0xb5, 0x07, 0x77, 0x21, 0xf9, 0x52, 0x09, 0x3a, 0x5b, 0x55, 0x75, 0x65, 0x5c, 0xc9, 0x41, 0xf9,
    0x31, 0x20, 0xac, 0xb6, 0x3d, 0xa1, 0x75, 0x28, 0x06, 0x0e, 0x46, 0xc4, 0xf8, 0xc2, 0x92, 0x2d,
};

static const uint8_t sMessageEncodingTest0546_ExpectedEncoding[] =
{
    0x30, 0x29, 0x2e, 0xf6, 0x9d, 0xac, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x16, 0x2c,
    0xb6, 0x77, 0x9d, 0xe6, 0x86, 0xcf, 0x44, 0xa3, 0x83, 0x0c, 0x72, 0xfa, 0x53, 0xd0, 0x5f, 0x81,
    0xb4, 0xf9, 0x10, 0x8b, 0xe7, 0x4b, 0xf3, 0xda, 0xa4, 0xcd, 0xed, 0x5d, 0x19, 0xd4, 0x41, 0x92,
    0x9e, 0x91, 0xd6, 0x12, 0x23, 0x04, 0x4d, 0xfc, 0x86, 0xa7, 0xa0, 0x0e, 0x83, 0xba, 0x4d, 0x48,
    0x04, 0x41, 0x90, 0xc9, 0xd8, 0x61, 0x8c, 0xf2, 0xbf, 0xb6, 0x98, 0x04, 0xa2, 0x13, 0xd6, 0x86,
    0x6a, 0xfe, 0x39, 0xb2, 0xef, 0xae, 0x7e, 0x16, 0x30, 0x37, 0x58, 0xbd, 0x56, 0xa1, 0x84, 0x1e,
    0x44, 0xf7, 0x0a, 0xa0, 0x16, 0xe9, 0x14, 0x68, 0x01, 0x91, 0xb9, 0x97, 0x79, 0xd0, 0xdf, 0x18,
    0x32, 0x32, 0xa8, 0x4b, 0x40, 0x28, 0x1a, 0x44, 0x95, 0x41, 0x4a, 0x75, 0x38, 0x26, 0x57, 0x2d,
    0x4d, 0x65, 0x90, 0x2b, 0xf6, 0x2c, 0x64, 0x44, 0xe5, 0xdc, 0xc6, 0x6e, 0x5e, 0xfc, 0x00, 0x1e,
    0x4b, 0x00, 0x3d, 0xa4, 0x04, 0xbf, 0x45, 0x90, 0x47, 0x59, 0xd6, 0x2b, 0xb6, 0x5c, 0xec, 0x9f,
    0x64, 0x11, 0x71, 0xae, 0x74, 0xf4, 0xdd, 0xc5, 0x9c, 0x5b, 0x06, 0x42, 0xbd, 0xd9, 0x28, 0xb8,
    0x66, 0x6e, 0x3c, 0x59, 0xae, 0xec, 0xb7, 0xdf, 0x29, 0xdf, 0x6f, 0xe9, 0xf3, 0x94, 0xd9, 0x3b,
    0x05, 0x05, 0xa6, 0x93, 0x3f, 0x8f, 0x95, 0x0f, 0xe7, 0xc6, 0x85, 0x31, 0xd3, 0x11, 0x8e, 0xc2,
    0x23, 0x99, 0xff, 0x73, 0xb3, 0xf4, 0x47, 0x95, 0x1d, 0x3e, 0x69, 0xa1, 0xd1, 0x6d, 0x1d, 0x39,
    0x38, 0x11, 0x2a, 0x1e, 0x69, 0xaf, 0xa7, 0x42, 0x5e, 0x9b, 0x2e, 0x66, 0x70, 0xa0, 0x7d, 0x23,
    0xd1, 0x60, 0x36, 0xd8, 0x84, 0x5c, 0xab, 0x17, 0x05, 0x7d, 0xc5, 0x26, 0xc3, 0x7e, 0xe2, 0x63,
    0x05, 0x79, 0x5b, 0xb5, 0x60, 0x54, 0xcf, 0xa2, 0x17, 0x8e, 0x9d, 0xdf, 0xb8, 0x0e, 0xe2, 0xea,
    0xd3, 0x15, 0xfa, 0x60, 0x24, 0x20, 0x73, 0xc1, 0x7a, 0xc7, 0x7e, 0x3e, 0xc2, 0x5f, 0xc0, 0xe2,
    0x9f, 0xff, 0x9d, 0xea, 0xc6, 0x71, 0x75, 0x1d, 0x0b, 0x21, 0x53, 0x48, 0x39, 0xac, 0xeb, 0x3a,
    0xdb, 0x80, 0x8f, 0x7a, 0x23, 0x86, 0xad, 0x09, 0xed, 0x18, 0xa7, 0x7a, 0xf6, 0xfd, 0xd5, 0x1d,
    0x56, 0x6f, 0x33, 0x84, 0xd3, 0x27, 0x57, 0xc3, 0xd4, 0xe4, 0xed, 0x96, 0xd4, 0x98, 0x82, 0x15,
    0x12, 0xd8, 0x06, 0x02, 0x8f, 0x50, 0x07, 0x5e, 0x3e, 0x25, 0x53, 0x26, 0xda, 0x14, 0xb0, 0x0b,
    0xf8, 0x49, 0xd5, 0x11, 0x5e, 0xdd, 0x3a, 0xc2, 0x36, 0x38, 0x67, 0xcb, 0x43, 0x2b, 0x52, 0x18,
    0x19, 0xb8, 0x6c, 0x1e, 0x08, 0x3e, 0xce, 0x83, 0x75, 0xb1, 0xb1, 0x1b, 0x15, 0xc1, 0xc4, 0x98,
    0x4b, 0xfd, 0x1f, 0x9e, 0x8c, 0x0c, 0x26, 0xcb, 0x40, 0x3a, 0x61, 0xb8, 0xab, 0x74, 0xa1, 0x25,
    0xdd, 0xd8, 0x0d, 0x65, 0xe4, 0x93, 0x36, 0xda, 0x67, 0xfb, 0x36, 0xc5, 0xa1, 0x60, 0xa1, 0x41,
    0xe1, 0xad, 0xcd, 0xcb, 0x62, 0x42, 0x03, 0xaa, 0xe5, 0xbb, 0x46, 0xca, 0xf8, 0xf3, 0x2a, 0x25,
    0xf7, 0x60, 0xab, 0xf7, 0x38, 0x45, 0xc8, 0xfa, 0x50, 0x53, 0xfb, 0xec, 0xb9, 0xbf, 0x57, 0xf3,
    0xb8, 0x73, 0xc4, 0xe2, 0x83, 0x8c, 0x7b, 0x87, 0x52, 0x1e, 0xa6, 0xb2, 0xbc, 0xe2, 0xdc, 0x0f,
    0x23, 0xc1, 0x01, 0x4e, 0xc0, 0x34, 0x35, 0x7e, 0xa3, 0xd5, 0x31, 0x37, 0x2b, 0x69, 0xde, 0xd3,
    0x36, 0xe0, 0x46, 0xa2, 0xd8, 0xd5, 0xa6, 0x8b, 0xc9, 0x13, 0x01, 0x65, 0xea, 0x1d, 0xde, 0x57,
    0xc4, 0x9e, 0xd3, 0x15, 0xdf, 0x45, 0xba, 0x4a, 0xf2, 0x46, 0xfe, 0xbc, 0x5b, 0xc4, 0x25, 0x33,
    0x57, 0x4a, 0x91, 0x94, 0x7e, 0x17, 0xa3, 0xea, 0xa6, 0xd2, 0xfa, 0xd4, 0x5a, 0x2e, 0xac, 0x89,
    0x48, 0xf4, 0x43, 0x80, 0xb8, 0x8b, 0x32, 0xf8, 0x60, 0xdb, 0xb1, 0x55, 0xca, 0x5f, 0x4c, 0x82,
    0xbd, 0x43, 0x2f, 0x24, 0x6e, 0xa6, 0x54, 0xc9, 0x65, 0x29, 0xe3, 0xfa, 0x4f, 0x12, 0x86, 0xca,
    0x61, 0x86, 0x97, 0x55, 0x2e, 0xe6, 0x6e, 0xf5, 0x6f, 0x6e, 0x7e, 0xcf, 0xb5, 0x7c, 0x78, 0x35,
    0xa7, 0xe0, 0x1b, 0x82, 0x3b, 0x0d, 0xb7, 0x64, 0xa8, 0x67, 0x65, 0xaa, 0xc7, 0x7f, 0x60, 0xac,
    0xa7, 0xed, 0x31, 0x1b, 0xc4, 0xd8, 0xc7, 0xd5, 0xac, 0x0f, 0x51, 0x6b, 0x2e, 0x2c, 0x71, 0x54,
    0x70, 0x93, 0x13, 0xdc, 0x58, 0x4a, 0xf6, 0xfd, 0xfc, 0xa0, 0xe1, 0x92, 0xfa, 0x32, 0x99, 0xc5,
    0xe9, 0xea, 0x04, 0x24, 0xe3, 0xdc, 0x87, 0x4f, 0xcc, 0xaf, 0xc4, 0x43, 0xfa, 0x00, 0x42, 0x82,
    0x47, 0x9a, 0x38, 0x75, 0x08, 0xd7, 0xa3, 0xea, 0xc1, 0xdf, 0x13, 0x68, 0x96, 0x46, 0xd4, 0x46,
    0x73, 0x75, 0x6f, 0xce, 0xc9, 0x01, 0x77, 0x89, 0x17, 0x7c, 0x4a, 0xe6, 0x05, 0x8f, 0xd5, 0xc0,
    0xda, 0xf5, 0xfb, 0x35, 0xc3, 0xa3, 0x38, 0x39, 0x9c, 0x91, 0x81, 0x90, 0x2f, 0x3c, 0x12, 0xb3,
    0x2f, 0x13, 0x39, 0x14, 0xc5, 0x90, 0x9a, 0x4a, 0x56, 0x6f, 0xcb, 0xcf, 0xa1, 0x5a, 0x5f, 0x08,
    0x17, 0x40, 0x28, 0xd9, 0x7a, 0xe7, 0xbb, 0x69, 0xfd, 0x35, 0x43, 0x15, 0x69, 0x23, 0xb1, 0xfb,
    0x03, 0xdc, 0xf5, 0x1c, 0x58, 0x17, 0x9a, 0x7c, 0x75, 0x87, 0xbd, 0x53, 0x84, 0x76, 0x7e, 0x85,
    0xd5, 0xcb, 0x89, 0xa7, 0x83, 0x37, 0x15, 0x2d, 0x6a, 0x72, 0x10, 0xc7, 0xbf, 0x71, 0x1c, 0x6b,
    0x69, 0x3b, 0xca, 0xf1, 0xca, 0x2c, 0xe2, 0xdb, 0x12, 0xc8, 0x14, 0x4d, 0x2d, 0x0f, 0x28, 0x1f,
    0x02, 0x7f, 0x7d, 0xd4, 0x11, 0x43, 0xd4, 0x13, 0x6f, 0x82, 0x53, 0x3b, 0x58, 0x43, 0xc7, 0x93,
    0x03, 0x7f, 0xd6, 0x26, 0x37, 0x4b, 0x13, 0x67, 0xc1, 0xf2, 0xe6, 0x4e, 0xd4, 0x7e, 0x5e, 0x7e,
    0x6d, 0x0a, 0xcd, 0x54, 0x0d, 0x3e, 0x1d, 0x8f, 0xcb, 0x63, 0xdd, 0x61, 0x6d, 0x9d, 0xe9, 0x8e,
    0xa3, 0xc9, 0x19, 0xae, 0x7d, 0x9f, 0x78, 0x80, 0x61, 0xb1, 0xeb, 0x0f, 0x72, 0x35, 0xb7, 0x62,
    0xaa, 0x39, 0xc2, 0xb6, 0xc0, 0x81, 0x0a, 0x4b, 0xc1, 0x12, 0x5f, 0xbb, 0x97, 0x73, 0x25, 0x41,
    0xfe, 0x8e, 0x78, 0x7d, 0xa0, 0xe4, 0xc6, 0x75, 0x54, 0xb1, 0xd9, 0x6f, 0x60, 0x8b, 0x7e, 0x8e,
    0x96, 0xbc, 0x79, 0x8c, 0xdd, 0xa8, 0x94, 0x92, 0xc0, 0x65, 0xd8, 0xb6, 0x18, 0xdf, 0xef, 0x13,
    0x08, 0x4e, 0x5b, 0xba, 0xc9, 0xcd, 0x06, 0xd1, 0xfd, 0x52, 0xce, 0xc0, 0x30, 0x97, 0xf1, 0x45,
    0xa3, 0xfd, 0x07, 0x68, 0x89, 0x4b, 0x7c, 0xdb, 0x7d, 0x5c, 0xf6, 0x88, 0xa7, 0x81, 0x58, 0x0a,
    0x62, 0x37, 0xa1, 0xbb, 0x67, 0x21, 0x5e, 0x29, 0xfd, 0xf1, 0x27, 0x03, 0x00, 0xe6, 0xad, 0xa8,
    0x86, 0x4e, 0x00, 0x68, 0xc3, 0xd2, 0x04, 0xd4, 0x0f, 0xd1, 0x04, 0x45, 0x10, 0x4e, 0xa0, 0x32,
    0xf7, 0xdd, 0xfc, 0x9d, 0xfb, 0xd5, 0xcf, 0x8a, 0x07, 0x1e, 0x1f, 0x61, 0x80, 0x09, 0x69, 0xe7,
    0xe3, 0x3c, 0x4f, 0x55, 0xd8, 0xa4, 0x57, 0x08, 0x47, 0x1d, 0x86, 0x0c, 0x41, 0x37, 0xb3, 0x7e,
    0x35, 0xf8, 0x91, 0x7b, 0x74, 0x64, 0x6d, 0x11, 0xfd, 0xea, 0x6d, 0xc7, 0xcf, 0xef, 0x28, 0xed,
    0xf6, 0xef, 0x68, 0x53, 0xb4, 0xbc, 0xd4, 0x52, 0x8e, 0x7d, 0x09, 0x0e, 0x26, 0x31, 0x1c, 0xdc,
    0x77, 0x84, 0x4a, 0x3e, 0xbb, 0x38, 0x80, 0x01, 0x54, 0xa1, 0xe2, 0x2f, 0xd6, 0x32, 0xc5, 0xcf,
    0x47, 0x03, 0x78, 0xaf, 0x40, 0x55, 0xb2, 0xe2, 0xa3, 0xbf, 0x1f, 0xaa, 0x85, 0x23, 0x43, 0xfb,
    0xba, 0x74, 0x21, 0xec, 0xd1, 0xc2, 0xe7, 0x40, 0xd3, 0xd6, 0xe5, 0x14, 0x37, 0xac, 0xa3, 0x1d,
};

static const MessageEncodingTestVector sMessageEncodingTest0546 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAC9DF62E,
        kWeaveHeaderFlag_DestNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2C16,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0546_EncryptionKey,
    sMessageEncodingTest0546_Payload,
    sizeof(sMessageEncodingTest0546_Payload),
    sMessageEncodingTest0546_ExpectedEncoding,
    sizeof(sMessageEncodingTest0546_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0547_Payload[] =
{
    0xaf, 0x85, 0x8d, 0xec, 0x10, 0xd0, 0x37, 0xe6, 0xe7, 0xc1, 0xb4, 0x9a, 0xdc, 0xf3, 0x78, 0xfb,
    0x81, 0x7e, 0xf6, 0xdb, 0x7b, 0x92, 0x20, 0x9a, 0x53, 0x61, 0x30, 0xf4, 0x87, 0xbd, 0xf7, 0x11,
    0xb0, 0xff, 0x54, 0x09, 0xc0, 0x6c, 0x86, 0xf3, 0x82, 0xd9, 0x8d, 0x1e, 0x49, 0x94, 0xa5, 0x25,
    0x6c, 0x75, 0xeb, 0x8d, 0x61, 0xaf, 0x94, 0x5e, 0x19, 0x36, 0xd9, 0xe6, 0x8f, 0x07, 0xd2, 0x0e,
    0x44, 0x9a, 0x08, 0xb2, 0x73, 0x3a, 0xa0, 0xd3, 0x9c, 0xfc, 0xaa, 0xfc, 0x80, 0x92, 0x14, 0xcc,
    0x88, 0xd5, 0x78, 0x29, 0x45, 0x81, 0x2f, 0x9e, 0x49, 0xde, 0x9a, 0x3b, 0x3c, 0x4b, 0xfc, 0x33,
    0x79, 0xb7, 0xb5, 0x0d, 0xb9, 0x0d, 0x47, 0x93, 0xf8, 0x29, 0xe4, 0xc4, 0x03, 0x8f, 0x23, 0x4c,
    0x15, 0x8f, 0xe4, 0x61, 0xc9, 0x81, 0x0a, 0x00, 0x14, 0xb6, 0x08, 0x3d, 0x55, 0x69, 0x2b, 0xdc,
    0xc3, 0x3c, 0x5a, 0x3e, 0x04, 0xab, 0x45, 0xd9, 0xf2, 0xbf, 0xba, 0xd1, 0x13, 0x02, 0xd4, 0xe2,
    0xa1, 0x7a, 0x5b, 0xd9, 0x59, 0xdc, 0x7b, 0x88, 0x57, 0x21, 0x38, 0xbe, 0xf1, 0xac, 0xb4, 0x4e,
    0x91, 0x66, 0xb8, 0x18, 0x43, 0x47, 0xbe, 0x2d, 0x75, 0xa5, 0x8f, 0x3d, 0x3d, 0x54, 0x3e, 0x4f,
    0x7f, 0xec, 0xca, 0x01, 0xfb, 0xf4, 0x0a, 0xb7, 0x62, 0xd8, 0xd0, 0x59, 0x95, 0x90, 0xc0, 0x98,
    0xb1, 0x21, 0x29, 0x29, 0x74, 0xb3, 0x26, 0x72, 0xed, 0x8b, 0xa5, 0x6a, 0xd7, 0x30, 0x8d, 0x7d,
    0xa8, 0x0a, 0xab, 0x1e, 0x66, 0x5c, 0x99, 0xf2, 0x79, 0xb5, 0xa8, 0x05, 0xe3, 0xff, 0x12, 0x2b,
    0x32, 0x42, 0xe3, 0x0b, 0x8f, 0x61, 0x37, 0x7d, 0xbc, 0xc2, 0x8a, 0x49, 0xb6, 0x13, 0xd7, 0xa9,
    0x02, 0xfb, 0x15, 0x76, 0x4e, 0x1b, 0x87, 0xec, 0x0d, 0xbd, 0xbd, 0x96, 0xd2, 0xa3, 0x05, 0x86,
    0x9c, 0xac, 0x0a, 0x73, 0xc1, 0x71, 0xf8, 0xf0, 0x5d, 0xac, 0xc7, 0x42, 0x24, 0xa9, 0xc2, 0x83,
    0x94, 0xab, 0x14, 0x8f, 0x12, 0xf2, 0xd4, 0x82, 0xeb, 0xab, 0xc2, 0x2a, 0x91, 0xae, 0x0a, 0xd6,
    0x9a, 0xf6, 0xa6, 0x1d, 0x64, 0x75, 0x1a, 0xfb, 0x94, 0x1c, 0xe7, 0x89, 0x94, 0x22, 0x27, 0x89,
    0x79, 0x06, 0x47, 0xc5, 0xcc, 0xf7, 0xe8, 0xd0, 0xdf, 0x10, 0x72, 0x4d, 0x5c, 0xb4, 0x8f, 0x67,
    0x68, 0x69, 0xcf, 0x3d, 0x53, 0x61, 0xcb, 0x91, 0x24, 0x94, 0x8c, 0xd4, 0x8e, 0x26, 0x6f, 0x16,
    0x08, 0xee, 0x6c, 0xf1, 0xf3, 0xc0, 0x82, 0x79, 0x4f, 0x37, 0x39, 0xe7, 0x06, 0x9c, 0x84, 0x08,
    0xef, 0xed, 0xc3, 0x06, 0x63, 0x06, 0x11, 0x7b, 0x66, 0x40, 0x72, 0xbb, 0x7f, 0x42, 0xa8, 0x8a,
    0x18, 0x22, 0x57, 0x87, 0x47, 0xc8, 0x4b, 0xe3, 0xe5, 0xae, 0x55, 0x41, 0x47, 0x19, 0x68, 0x1b,
    0x89, 0x94, 0xa0, 0xca, 0x22, 0xdb, 0x26, 0x2a, 0x96, 0x25, 0x59, 0x4d, 0xb2, 0xb7, 0x92, 0xef,
    0xce, 0x42, 0x65, 0x75, 0xca, 0x4c, 0x71, 0x13, 0xfb, 0x2b, 0x11, 0x82, 0xa0, 0x38, 0xdc, 0x90,
    0xd4, 0xcb, 0x0c, 0xd0, 0x9c, 0xf2, 0x3f, 0x10, 0xcf, 0x42, 0xad, 0xbb, 0xaf, 0xbf, 0xe7, 0x0f,
    0x39, 0xaf, 0x9d, 0xaf, 0x02, 0x61, 0x87, 0x14, 0x05, 0xb6, 0x11, 0xba, 0xa4, 0x79, 0xa4, 0x19,
    0x8e, 0x0b, 0x22, 0x51, 0x76, 0x4d, 0x40, 0x00, 0x69, 0x54, 0x36, 0x98, 0xfb, 0xee, 0x23, 0x87,
    0xfc, 0x3b, 0x24, 0x58, 0x6a, 0xb1, 0xef, 0x49, 0xca, 0x2e, 0x1c, 0x97, 0xab, 0x30, 0x40, 0xd9,
    0xa2, 0x60, 0xab, 0x5f, 0x8c, 0x67, 0x26, 0xa7, 0x50, 0x2e, 0x64, 0x4a, 0x9e, 0x46, 0x2a, 0x60,
    0x9f, 0x45, 0x93, 0xd4, 0x5b, 0x2b, 0x2d, 0x0c, 0xf2, 0x3f, 0xdc, 0x70, 0x54, 0x5e, 0xfd, 0x51,
    0x9c, 0x9a, 0xdc, 0x2f, 0xfe, 0x09, 0x97, 0x36, 0x61, 0xd8, 0x99, 0x3e, 0xfb, 0xdc, 0x5e, 0xa5,
    0x94, 0x31, 0xa6, 0x40, 0x54, 0xe1, 0x6f, 0x5e, 0x8a, 0x1a, 0xd1, 0x62, 0xb8, 0xce, 0x52, 0x54,
    0x59, 0xdd, 0x5c, 0x4f, 0xec, 0xe0, 0x67, 0x14, 0xe8, 0xfb, 0x39, 0xf9, 0xdd, 0x2f, 0x21, 0x5f,
    0x38, 0x29, 0x06, 0xb6, 0x7c, 0x39, 0x70, 0xc3, 0x37, 0xcc, 0x05, 0x4c, 0x45, 0x93, 0x5a, 0x2f,
    0x03, 0xed, 0x44, 0x64, 0xc9, 0x0a, 0x75, 0xd1, 0xcb, 0x27, 0xb0, 0xfc, 0x8f, 0x62, 0x36, 0x56,
    0x39, 0xdd, 0x30, 0xfa, 0xf6, 0xd9, 0x36, 0xce, 0xbf, 0xef, 0xba, 0x54, 0xaf, 0x3b, 0xf2, 0xfb,
    0x26, 0x30, 0xb0, 0xf5, 0xb6, 0x7a, 0xa9, 0x36, 0xaf, 0xa4, 0xaa, 0xa7, 0xc6, 0x6d, 0x7e, 0xe2,
    0xec, 0x70, 0x90, 0xab, 0x78, 0x7f, 0xd1, 0x52, 0x4d, 0x62, 0xf2, 0x1b, 0xa1, 0x74, 0x03, 0x33,
    0xbf, 0x59, 0x53, 0x22, 0x5c, 0xbb, 0x9d, 0x02, 0x1b, 0xb8, 0x62, 0xae, 0x0b, 0x81, 0x4e, 0x72,
    0x1e, 0xb7, 0x71, 0xef, 0xcb, 0x86, 0xce, 0x10, 0x67, 0x4f, 0xda, 0x02, 0x3e, 0x7e, 0x3a, 0xce,
    0x19, 0xf2, 0x77, 0x0c, 0xf4, 0xd2, 0x6a, 0x65, 0xca, 0x4a, 0x0f, 0x52, 0x46, 0x59, 0xbb, 0xf5,
    0x1b, 0x02, 0x8b, 0xb0, 0xde, 0xd1, 0x66, 0x2c, 0x28, 0x33, 0x24, 0x6e, 0x09, 0x36, 0x5a, 0x2b,
    0x52, 0x84, 0xcd, 0x9d, 0xf9, 0x46, 0x90, 0x4d, 0xfe, 0x06, 0xaa, 0xb7, 0x30, 0xb4, 0x75, 0x04,
    0x16, 0x92, 0xb6, 0xa8, 0x1d, 0x75, 0x31, 0x87, 0x39, 0x9b, 0x33, 0x1e, 0xaa, 0x7a, 0xa7, 0x7c,
    0xd3, 0xbb, 0xe1, 0x95, 0x00, 0xab, 0x77, 0x2a, 0x1b, 0x46, 0x17, 0xc3, 0x2f, 0xef, 0x9b, 0x3d,
    0x6a, 0xf4, 0x49, 0xd1, 0xde, 0x06, 0x19, 0x45, 0x68, 0xbb, 0x4b, 0x2a, 0x72, 0xba, 0xc7, 0xed,
    0x3e, 0x6d, 0x71, 0x0f, 0xe4, 0x4f, 0xb1, 0xd9, 0xdc, 0x3d, 0xa3, 0x74, 0x2b, 0x13, 0x93, 0xbb,
    0x66, 0xa8, 0x46, 0xf9, 0xad, 0x86, 0x17, 0x6d, 0xd7, 0x90, 0x7c, 0x6a, 0x1c, 0x57, 0x34, 0xc2,
    0xc0, 0x57, 0x37, 0x47, 0xd8, 0x89, 0x70, 0x08, 0x49, 0x13, 0xf3, 0x7a, 0x35, 0xef, 0xe6, 0xef,
    0x71, 0x8d, 0xb3, 0x4c, 0x36, 0x2b, 0x6a, 0x60, 0xe4, 0x40, 0xe4, 0xff, 0x95, 0x4b, 0x63, 0x02,
    0xd0, 0x6b, 0x61, 0x8f, 0xb2, 0x84, 0xe5, 0xe9, 0x8f, 0x34, 0x9b, 0x3c, 0xa9, 0xf2, 0x36, 0x47,
    0x57, 0x08, 0xc5, 0x0b, 0xfd, 0x2e, 0x6b, 0x1a, 0x52, 0x07, 0xab, 0xdf, 0xf1, 0x19, 0x0e, 0x63,
    0xf1, 0xc8, 0xe3, 0x49, 0xda, 0x24, 0x7b, 0x70, 0x24, 0x3c, 0x51, 0x00, 0x69, 0x78, 0x4d, 0xab,
    0xb8, 0xad, 0x06, 0xe1, 0xb7, 0xfc, 0x41, 0xb7, 0x03, 0x46, 0xb6, 0x13, 0xf6, 0x9f, 0xe0, 0xb5,
    0xce, 0x52, 0xde, 0x84, 0xab, 0x20, 0xb1, 0x4e, 0xdc, 0x39, 0xb5, 0x38, 0xa6, 0xe8, 0xf7, 0x21,
    0x25, 0xd4, 0x47, 0xf7, 0x9b, 0xb9, 0xc6, 0xec, 0x9a, 0xd9, 0x54, 0x7e, 0x64, 0x19, 0x7d, 0xfb,
    0x2b, 0xf8, 0xdf, 0xa2, 0xf2, 0xe5, 0xbb, 0x09, 0xd7, 0x24, 0xbb, 0x40, 0xe4, 0x5c, 0xe3, 0xaf,
    0x17, 0xe3, 0xeb, 0x32, 0xd0, 0xcc, 0x89, 0xb2, 0xcc, 0xf9, 0x94, 0x03, 0x04, 0xfb, 0xa0, 0x4d,
    0xa5, 0xb4, 0x2c, 0x6a, 0x2e, 0x2f, 0xd8, 0xe9, 0x8b, 0x99, 0x0a, 0x46, 0x6a, 0xe3, 0x94, 0x96,
    0xf6, 0x36, 0x23, 0x99, 0xd7, 0x89, 0x81, 0x17, 0xa2, 0xb9, 0xcb, 0xb1, 0xe5, 0xc0, 0x16, 0xb2,
    0xb7, 0x5f, 0x7a, 0x40, 0xda, 0x6f, 0xab, 0xc0, 0xaa, 0x5b, 0xf9, 0xfe, 0x2a, 0xb4, 0x87, 0x67,
    0x79, 0x44, 0x35, 0x03, 0x62, 0x6b, 0x42, 0x3f, 0xb5, 0x72, 0xb9, 0xe8, 0xdb, 0xce, 0x4c, 0x3e,
};

static const uint8_t sMessageEncodingTest0547_ExpectedEncoding[] =
{
    0x00, 0x21, 0x4b, 0x5c, 0x54, 0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xaf, 0x85,
    0x8d, 0xec, 0x10, 0xd0, 0x37, 0xe6, 0xe7, 0xc1, 0xb4, 0x9a, 0xdc, 0xf3, 0x78, 0xfb, 0x81, 0x7e,
    0xf6, 0xdb, 0x7b, 0x92, 0x20, 0x9a, 0x53, 0x61, 0x30, 0xf4, 0x87, 0xbd, 0xf7, 0x11, 0xb0, 0xff,
    0x54, 0x09, 0xc0, 0x6c, 0x86, 0xf3, 0x82, 0xd9, 0x8d, 0x1e, 0x49, 0x94, 0xa5, 0x25, 0x6c, 0x75,
    0xeb, 0x8d, 0x61, 0xaf, 0x94, 0x5e, 0x19, 0x36, 0xd9, 0xe6, 0x8f, 0x07, 0xd2, 0x0e, 0x44, 0x9a,
    0x08, 0xb2, 0x73, 0x3a, 0xa0, 0xd3, 0x9c, 0xfc, 0xaa, 0xfc, 0x80, 0x92, 0x14, 0xcc, 0x88, 0xd5,
    0x78, 0x29, 0x45, 0x81, 0x2f, 0x9e, 0x49, 0xde, 0x9a, 0x3b, 0x3c, 0x4b, 0xfc, 0x33, 0x79, 0xb7,
    0xb5, 0x0d, 0xb9, 0x0d, 0x47, 0x93, 0xf8, 0x29, 0xe4, 0xc4, 0x03, 0x8f, 0x23, 0x4c, 0x15, 0x8f,
    0xe4, 0x61, 0xc9, 0x81, 0x0a, 0x00, 0x14, 0xb6, 0x08, 0x3d, 0x55, 0x69, 0x2b, 0xdc, 0xc3, 0x3c,
    0x5a, 0x3e, 0x04, 0xab, 0x45, 0xd9, 0xf2, 0xbf, 0xba, 0xd1, 0x13, 0x02, 0xd4, 0xe2, 0xa1, 0x7a,
    0x5b, 0xd9, 0x59, 0xdc, 0x7b, 0x88, 0x57, 0x21, 0x38, 0xbe, 0xf1, 0xac, 0xb4, 0x4e, 0x91, 0x66,
    0xb8, 0x18, 0x43, 0x47, 0xbe, 0x2d, 0x75, 0xa5, 0x8f, 0x3d, 0x3d, 0x54, 0x3e, 0x4f, 0x7f, 0xec,
    0xca, 0x01, 0xfb, 0xf4, 0x0a, 0xb7, 0x62, 0xd8, 0xd0, 0x59, 0x95, 0x90, 0xc0, 0x98, 0xb1, 0x21,
    0x29, 0x29, 0x74, 0xb3, 0x26, 0x72, 0xed, 0x8b, 0xa5, 0x6a, 0xd7, 0x30, 0x8d, 0x7d, 0xa8, 0x0a,
    0xab, 0x1e, 0x66, 0x5c, 0x99, 0xf2, 0x79, 0xb5, 0xa8, 0x05, 0xe3, 0xff, 0x12, 0x2b, 0x32, 0x42,
    0xe3, 0x0b, 0x8f, 0x61, 0x37, 0x7d, 0xbc, 0xc2, 0x8a, 0x49, 0xb6, 0x13, 0xd7, 0xa9, 0x02, 0xfb,
    0x15, 0x76, 0x4e, 0x1b, 0x87, 0xec, 0x0d, 0xbd, 0xbd, 0x96, 0xd2, 0xa3, 0x05, 0x86, 0x9c, 0xac,
    0x0a, 0x73, 0xc1, 0x71, 0xf8, 0xf0, 0x5d, 0xac, 0xc7, 0x42, 0x24, 0xa9, 0xc2, 0x83, 0x94, 0xab,
    0x14, 0x8f, 0x12, 0xf2, 0xd4, 0x82, 0xeb, 0xab, 0xc2, 0x2a, 0x91, 0xae, 0x0a, 0xd6, 0x9a, 0xf6,
    0xa6, 0x1d, 0x64, 0x75, 0x1a, 0xfb, 0x94, 0x1c, 0xe7, 0x89, 0x94, 0x22, 0x27, 0x89, 0x79, 0x06,
    0x47, 0xc5, 0xcc, 0xf7, 0xe8, 0xd0, 0xdf, 0x10, 0x72, 0x4d, 0x5c, 0xb4, 0x8f, 0x67, 0x68, 0x69,
    0xcf, 0x3d, 0x53, 0x61, 0xcb, 0x91, 0x24, 0x94, 0x8c, 0xd4, 0x8e, 0x26, 0x6f, 0x16, 0x08, 0xee,
    0x6c, 0xf1, 0xf3, 0xc0, 0x82, 0x79, 0x4f, 0x37, 0x39, 0xe7, 0x06, 0x9c, 0x84, 0x08, 0xef, 0xed,
    0xc3, 0x06, 0x63, 0x06, 0x11, 0x7b, 0x66, 0x40, 0x72, 0xbb, 0x7f, 0x42, 0xa8, 0x8a, 0x18, 0x22,
    0x57, 0x87, 0x47, 0xc8, 0x4b, 0xe3, 0xe5, 0xae, 0x55, 0x41, 0x47, 0x19, 0x68, 0x1b, 0x89, 0x94,
    0xa0, 0xca, 0x22, 0xdb, 0x26, 0x2a, 0x96, 0x25, 0x59, 0x4d, 0xb2, 0xb7, 0x92, 0xef, 0xce, 0x42,
    0x65, 0x75, 0xca, 0x4c, 0x71, 0x13, 0xfb, 0x2b, 0x11, 0x82, 0xa0, 0x38, 0xdc, 0x90, 0xd4, 0xcb,
    0x0c, 0xd0, 0x9c, 0xf2, 0x3f, 0x10, 0xcf, 0x42, 0xad, 0xbb, 0xaf, 0xbf, 0xe7, 0x0f, 0x39, 0xaf,
    0x9d, 0xaf, 0x02, 0x61, 0x87, 0x14, 0x05, 0xb6, 0x11, 0xba, 0xa4, 0x79, 0xa4, 0x19, 0x8e, 0x0b,
    0x22, 0x51, 0x76, 0x4d, 0x40, 0x00, 0x69, 0x54, 0x36, 0x98, 0xfb, 0xee, 0x23, 0x87, 0xfc, 0x3b,
    0x24, 0x58, 0x6a, 0xb1, 0xef, 0x49, 0xca, 0x2e, 0x1c, 0x97, 0xab, 0x30, 0x40, 0xd9, 0xa2, 0x60,
    0xab, 0x5f, 0x8c, 0x67, 0x26, 0xa7, 0x50, 0x2e, 0x64, 0x4a, 0x9e, 0x46, 0x2a, 0x60, 0x9f, 0x45,
    0x93, 0xd4, 0x5b, 0x2b, 0x2d, 0x0c, 0xf2, 0x3f, 0xdc, 0x70, 0x54, 0x5e, 0xfd, 0x51, 0x9c, 0x9a,
    0xdc, 0x2f, 0xfe, 0x09, 0x97, 0x36, 0x61, 0xd8, 0x99, 0x3e, 0xfb, 0xdc, 0x5e, 0xa5, 0x94, 0x31,
    0xa6, 0x40, 0x54, 0xe1, 0x6f, 0x5e, 0x8a, 0x1a, 0xd1, 0x62, 0xb8, 0xce, 0x52, 0x54, 0x59, 0xdd,
    0x5c, 0x4f, 0xec, 0xe0, 0x67, 0x14, 0xe8, 0xfb, 0x39, 0xf9, 0xdd, 0x2f, 0x21, 0x5f, 0x38, 0x29,
    0x06, 0xb6, 0x7c, 0x39, 0x70, 0xc3, 0x37, 0xcc, 0x05, 0x4c, 0x45, 0x93, 0x5a, 0x2f, 0x03, 0xed,
    0x44, 0x64, 0xc9, 0x0a, 0x75, 0xd1, 0xcb, 0x27, 0xb0, 0xfc, 0x8f, 0x62, 0x36, 0x56, 0x39, 0xdd,
    0x30, 0xfa, 0xf6, 0xd9, 0x36, 0xce, 0xbf, 0xef, 0xba, 0x54, 0xaf, 0x3b, 0xf2, 0xfb, 0x26, 0x30,
    0xb0, 0xf5, 0xb6, 0x7a, 0xa9, 0x36, 0xaf, 0xa4, 0xaa, 0xa7, 0xc6, 0x6d, 0x7e, 0xe2, 0xec, 0x70,
    0x90, 0xab, 0x78, 0x7f, 0xd1, 0x52, 0x4d, 0x62, 0xf2, 0x1b, 0xa1, 0x74, 0x03, 0x33, 0xbf, 0x59,
    0x53, 0x22, 0x5c, 0xbb, 0x9d, 0x02, 0x1b, 0xb8, 0x62, 0xae, 0x0b, 0x81, 0x4e, 0x72, 0x1e, 0xb7,
    0x71, 0xef, 0xcb, 0x86, 0xce, 0x10, 0x67, 0x4f, 0xda, 0x02, 0x3e, 0x7e, 0x3a, 0xce, 0x19, 0xf2,
    0x77, 0x0c, 0xf4, 0xd2, 0x6a, 0x65, 0xca, 0x4a, 0x0f, 0x52, 0x46, 0x59, 0xbb, 0xf5, 0x1b, 0x02,
    0x8b, 0xb0, 0xde, 0xd1, 0x66, 0x2c, 0x28, 0x33, 0x24, 0x6e, 0x09, 0x36, 0x5a, 0x2b, 0x52, 0x84,
    0xcd, 0x9d, 0xf9, 0x46, 0x90, 0x4d, 0xfe, 0x06, 0xaa, 0xb7, 0x30, 0xb4, 0x75, 0x04, 0x16, 0x92,
    0xb6, 0xa8, 0x1d, 0x75, 0x31, 0x87, 0x39, 0x9b, 0x33, 0x1e, 0xaa, 0x7a, 0xa7, 0x7c, 0xd3, 0xbb,
    0xe1, 0x95, 0x00, 0xab, 0x77, 0x2a, 0x1b, 0x46, 0x17, 0xc3, 0x2f, 0xef, 0x9b, 0x3d, 0x6a, 0xf4,
    0x49, 0xd1, 0xde, 0x06, 0x19, 0x45, 0x68, 0xbb, 0x4b, 0x2a, 0x72, 0xba, 0xc7, 0xed, 0x3e, 0x6d,
    0x71, 0x0f, 0xe4, 0x4f, 0xb1, 0xd9, 0xdc, 0x3d, 0xa3, 0x74, 0x2b, 0x13, 0x93, 0xbb, 0x66, 0xa8,
    0x46, 0xf9, 0xad, 0x86, 0x17, 0x6d, 0xd7, 0x90, 0x7c, 0x6a, 0x1c, 0x57, 0x34, 0xc2, 0xc0, 0x57,
    0x37, 0x47, 0xd8, 0x89, 0x70, 0x08, 0x49, 0x13, 0xf3, 0x7a, 0x35, 0xef, 0xe6, 0xef, 0x71, 0x8d,
    0xb3, 0x4c, 0x36, 0x2b, 0x6a, 0x60, 0xe4, 0x40, 0xe4, 0xff, 0x95, 0x4b, 0x63, 0x02, 0xd0, 0x6b,
    0x61, 0x8f, 0xb2, 0x84, 0xe5, 0xe9, 0x8f, 0x34, 0x9b, 0x3c, 0xa9, 0xf2, 0x36, 0x47, 0x57, 0x08,
    0xc5, 0x0b, 0xfd, 0x2e, 0x6b, 0x1a, 0x52, 0x07, 0xab, 0xdf, 0xf1, 0x19, 0x0e, 0x63, 0xf1, 0xc8,
    0xe3, 0x49, 0xda, 0x24, 0x7b, 0x70, 0x24, 0x3c, 0x51, 0x00, 0x69, 0x78, 0x4d, 0xab, 0xb8, 0xad,
    0x06, 0xe1, 0xb7, 0xfc, 0x41, 0xb7, 0x03, 0x46, 0xb6, 0x13, 0xf6, 0x9f, 0xe0, 0xb5, 0xce, 0x52,
    0xde, 0x84, 0xab, 0x20, 0xb1, 0x4e, 0xdc, 0x39, 0xb5, 0x38, 0xa6, 0xe8, 0xf7, 0x21, 0x25, 0xd4,
    0x47, 0xf7, 0x9b, 0xb9, 0xc6, 0xec, 0x9a, 0xd9, 0x54, 0x7e, 0x64, 0x19, 0x7d, 0xfb, 0x2b, 0xf8,
    0xdf, 0xa2, 0xf2, 0xe5, 0xbb, 0x09, 0xd7, 0x24, 0xbb, 0x40, 0xe4, 0x5c, 0xe3, 0xaf, 0x17, 0xe3,
    0xeb, 0x32, 0xd0, 0xcc, 0x89, 0xb2, 0xcc, 0xf9, 0x94, 0x03, 0x04, 0xfb, 0xa0, 0x4d, 0xa5, 0xb4,
    0x2c, 0x6a, 0x2e, 0x2f, 0xd8, 0xe9, 0x8b, 0x99, 0x0a, 0x46, 0x6a, 0xe3, 0x94, 0x96, 0xf6, 0x36,
    0x23, 0x99, 0xd7, 0x89, 0x81, 0x17, 0xa2, 0xb9, 0xcb, 0xb1, 0xe5, 0xc0, 0x16, 0xb2, 0xb7, 0x5f,
    0x7a, 0x40, 0xda, 0x6f, 0xab, 0xc0, 0xaa, 0x5b, 0xf9, 0xfe, 0x2a, 0xb4, 0x87, 0x67, 0x79, 0x44,
    0x35, 0x03, 0x62, 0x6b, 0x42, 0x3f, 0xb5, 0x72, 0xb9, 0xe8, 0xdb, 0xce, 0x4c, 0x3e,
};

static const MessageEncodingTestVector sMessageEncodingTest0547 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x60545C4B,
        kWeaveHeaderFlag_DestNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0547_Payload,
    sizeof(sMessageEncodingTest0547_Payload),
    sMessageEncodingTest0547_ExpectedEncoding,
    sizeof(sMessageEncodingTest0547_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0548_EncryptionKey =
{
    {
        0x66, 0xa8, 0x6e, 0x56, 0xdc, 0xe0, 0x42, 0xfa, 0x8e, 0x1f, 0xfe, 0xb5, 0xf0, 0x16, 0x4d, 0x18,
    },
    {
        0xed, 0xa4, 0x1c, 0x2c, 0x8c, 0x8b, 0xd7, 0x6d, 0xef, 0x44, 0x6e, 0xa3, 0x72, 0xef, 0x78, 0x22,
        0x3c, 0xa9, 0x45, 0x23,
    }
};
static const uint8_t sMessageEncodingTest0548_Payload[] =
{
    0x59, 0x47, 0x63, 0x08, 0x79, 0x94, 0xc3, 0x2d, 0xec, 0x4e, 0x09, 0xa4, 0x3d, 0xfc, 0xbc, 0x7c,
    0x72, 0x24, 0x3a, 0x9a, 0xf1, 0xd6, 0x43, 0x49, 0x49, 0xfd, 0x64, 0xf4, 0xb0, 0x0b, 0x93, 0xb2,
    0xcb, 0xe4, 0x27, 0x80, 0xe1, 0x11, 0x1d, 0x65, 0xa2, 0x55, 0x4a, 0xb6, 0x11, 0x64, 0x41, 0x30,
    0x89, 0x0c, 0xe8, 0xc5, 0x97, 0xd2, 0x32, 0x82, 0xea, 0x62, 0xdd, 0xe0, 0x66, 0x20, 0x84, 0x12,
    0xc5, 0x10, 0xed, 0x8d, 0xa1, 0xe7, 0x08, 0x7c, 0x7c, 0xbd, 0x1c, 0x95, 0x71, 0x18, 0x91, 0x73,
    0x70, 0xe9, 0x50, 0xff, 0x70, 0x95, 0xb4, 0x60, 0x55, 0x11, 0x5a, 0xbe, 0x78, 0x75, 0xeb, 0x5d,
    0xa9, 0x8f, 0x46, 0x89, 0xa8, 0x42, 0xcb, 0x54, 0x1f, 0x85, 0xf7, 0xc2, 0x20, 0x1e, 0x6c, 0xc6,
    0x81, 0x5b, 0x08, 0xed, 0x09, 0x1d, 0xf9, 0x55, 0x7d, 0xfb, 0xc5, 0x42, 0x93, 0x23, 0xd3, 0xa7,
    0x8a, 0x58, 0x1f, 0xef, 0xc9, 0xf6, 0x89, 0xc5, 0x1a, 0xb2, 0xd0, 0xa7, 0xd5, 0x6c, 0x2f, 0x3c,
    0x35, 0x00, 0xde, 0xd1, 0x0a, 0x0f, 0x37, 0x7f, 0x9f, 0x53, 0xe3, 0x6d, 0xdc, 0x51, 0xe7, 0x14,
    0xa5, 0xce, 0xa4, 0x3a, 0xc5, 0xfa, 0x52, 0xa9, 0x71, 0xd3, 0xbf, 0xfc, 0xa5, 0x56, 0x6c, 0xe7,
    0xd4, 0x35, 0xe2, 0x31, 0x57, 0xf6, 0x2a, 0xad, 0x51, 0x3e, 0xad, 0xbf, 0x2b, 0xd6, 0x16, 0x4b,
    0x27, 0x18, 0x45, 0xc4, 0x62, 0x19, 0xe9, 0x3b, 0xb8, 0x25, 0xd8, 0x6f, 0x58, 0x46, 0xe7, 0xe7,
    0x65, 0x93, 0xf3, 0xe8, 0x2a, 0x42, 0x17, 0xe6, 0x9a, 0x5c, 0x72, 0x71, 0x71, 0x70, 0x8d, 0x44,
    0xd6, 0x3c, 0x03, 0x32, 0x7a, 0xfb, 0xc5, 0x67, 0xb5, 0x45, 0x94, 0xc3, 0xf6, 0x6b, 0xa6, 0xaa,
    0xa1, 0x94, 0x36, 0x03, 0xef, 0x0f, 0x03, 0x2b, 0x9e, 0xe1, 0x44, 0x06, 0x61, 0xe1, 0x9b, 0xef,
    0x4c, 0x24, 0xea, 0xdc, 0x95, 0xd4, 0x34, 0x5e, 0xfc, 0x61, 0xb3, 0x89, 0xdb, 0x67, 0x6c, 0xb1,
    0x91, 0xc0, 0xbc, 0xd3, 0x71, 0x9d, 0x03, 0xf0, 0xf8, 0xf4, 0xbf, 0xd5, 0xec, 0x12, 0x3b, 0x65,
    0xdc, 0x1f, 0x82, 0xad, 0x3c, 0xf4, 0xfc, 0x9a, 0x82, 0x17, 0x18, 0x5d, 0x09, 0xcd, 0x62, 0x53,
    0xac, 0x25, 0x87, 0x2d, 0xd5, 0x4c, 0x17, 0xe1, 0xc2, 0xb1, 0x8f, 0x4b, 0x7e, 0x7d, 0xfc, 0xd4,
    0x1e, 0x55, 0xc2, 0x17, 0x0d, 0x2f, 0xe9, 0xd4, 0x1a, 0x60, 0x88, 0xc1, 0x8f, 0x8d, 0x8e, 0x51,
    0xa6, 0x59, 0xb6, 0x78, 0x0e, 0x38, 0x16, 0x7f, 0xd2, 0x3a, 0x72, 0x8f, 0x95, 0x8d, 0x9a, 0xa9,
    0x72, 0xf5, 0x88, 0xde, 0x21, 0x5d, 0x3f, 0x86, 0x42, 0x40, 0x4a, 0x74, 0x85, 0xa3, 0x17, 0xb8,
    0x64, 0x43, 0x4f, 0x94, 0xce, 0xae, 0x68, 0xc3, 0xd0, 0xe7, 0xd7, 0xcd, 0xb3, 0x3b, 0x26, 0x1b,
    0x85, 0x79, 0xbd, 0x77, 0x82, 0x0b, 0xf4, 0x55, 0xec, 0x00, 0x0c, 0xe5, 0x45, 0x94, 0x31, 0x89,
    0x1f, 0xfc, 0x2f, 0xcd, 0x48, 0x6e, 0x4d, 0x28, 0xaf, 0x79, 0x27, 0xc1, 0x51, 0xb9, 0xcb, 0xd6,
    0x41, 0x61, 0xce, 0x16, 0xaf, 0xbd, 0x7d, 0x8a, 0xc3, 0xea, 0xcc, 0x55, 0xb0, 0xe1, 0x89, 0x02,
    0x02, 0xf8, 0xa9, 0x60, 0xff, 0x7f, 0x2c, 0xba, 0xbf, 0x46, 0x85, 0x8c, 0x3e, 0xce, 0x07, 0xc3,
    0x14, 0x4a, 0x18, 0x97, 0xbb, 0x77, 0x4d, 0x5e, 0xf8, 0x2b, 0xc7, 0x77, 0x1a, 0x9a, 0xfa, 0xa6,
    0xcd, 0x79, 0x07, 0x68, 0x6a, 0xf6, 0xbc, 0x17, 0x9c, 0x83, 0x8d, 0x36, 0x81, 0xd9, 0x34, 0xd2,
    0xa3, 0xe2, 0x76, 0x9b, 0x46, 0x76, 0x1d, 0xd0, 0x88, 0xd5, 0x08, 0x77, 0x6c, 0xea, 0x5c, 0x98,
    0x7a, 0xd6, 0x8b, 0xa8, 0xca, 0x0d, 0x69, 0xc2, 0xb1, 0x8c, 0x85, 0x7d, 0x68, 0x6c, 0xdd, 0xb1,
    0x28, 0xbb, 0xc1, 0x09, 0xc5, 0xf7, 0xa9, 0x94, 0x21, 0xc0, 0xa7, 0x1c, 0xf7, 0xee, 0x17, 0x94,
    0x39, 0x1e, 0xb2, 0xf7, 0x0f, 0xb6, 0x10, 0x2e, 0xe5, 0x75, 0x32, 0x36, 0x22, 0xc2, 0xc4, 0xe1,
    0x16, 0xe2, 0x73, 0x16, 0xb4, 0xde, 0xcd, 0xb7, 0x2e, 0x27, 0x5c, 0xed, 0x3a, 0x61, 0x7b, 0xfc,
    0x1e, 0xab, 0x39, 0x4e, 0xd9, 0x5f, 0x9a, 0xf8, 0xf0, 0xdb, 0x18, 0xd1, 0x92, 0xa2, 0x1a, 0xa2,
    0x41, 0x9b, 0xd3, 0x8d, 0x89, 0xd0, 0xe7, 0x19, 0x04, 0x4b, 0x35, 0x3e, 0xf7, 0xc7, 0x60, 0xdf,
    0x5d, 0x60, 0xd8, 0xe8, 0x52, 0xdb, 0xea, 0xb1, 0xf3, 0xfb, 0x5f, 0xc7, 0x9f, 0xb0, 0x73, 0xf0,
    0x0f, 0x8f, 0x95, 0x80, 0x40, 0xc6, 0x65, 0xea, 0x01, 0x46, 0x79, 0x34, 0x80, 0x5c, 0x44, 0x34,
    0xe3, 0x5a, 0xf0, 0xb5, 0xa0, 0xc7, 0xf3, 0xb3, 0xb2, 0x01, 0x9b, 0xb3, 0x7c, 0x4f, 0x8b, 0xdf,
    0xa8, 0x66, 0x09, 0xc1, 0x74, 0x53, 0x62, 0x65, 0xba, 0xf8, 0x6c, 0x71, 0xe1, 0xeb, 0x34, 0x96,
    0x1a, 0x63, 0x67, 0x12, 0x40, 0x73, 0x8b, 0xaa, 0xc3, 0x92, 0x7b, 0x23, 0xb2, 0x4b, 0x59, 0x69,
    0x1c, 0x50, 0x46, 0x33, 0x01, 0xef, 0x0d, 0x8d, 0x5c, 0x21, 0x29, 0x28, 0x49, 0x34, 0x84, 0xb6,
    0x9b, 0x15, 0x15, 0x19, 0xab, 0x19, 0x7b, 0x18, 0x6c, 0x3b, 0xb0, 0x56, 0xf1, 0x19, 0x29, 0x60,
    0x0c, 0x59, 0x7e, 0xcb, 0xaa, 0xbd, 0x90, 0xc7, 0x88, 0xae, 0xb1, 0x67, 0x0e, 0xb8, 0x70, 0xb9,
    0xdb, 0xa5, 0x6c, 0x33, 0x24, 0xb2, 0xd3, 0x61, 0x87, 0x8b, 0x1c, 0xb0, 0xd6, 0xf9, 0x0d, 0x5b,
    0x61, 0x46, 0xe8, 0x43, 0x8f, 0xbe, 0xec, 0x88, 0x1a, 0x98, 0x76, 0xa6, 0x23, 0x32, 0xed, 0xda,
    0x57, 0xd3, 0x7d, 0x7e, 0x42, 0x1e, 0x41, 0xb5, 0x32, 0xc0, 0xfb, 0xfd, 0x70, 0xf3, 0xc2, 0xd1,
    0x7f, 0x9c, 0x75, 0x15, 0xac, 0x55, 0x74, 0x4b, 0xf8, 0x42, 0x1c, 0x60, 0x5c, 0x47, 0x11, 0x26,
    0x61, 0x45, 0x8a, 0x3b, 0xc1, 0xa2, 0xa0, 0xd3, 0x94, 0x1a, 0x23, 0xc3, 0x99, 0xf2, 0x3c, 0x39,
    0x07, 0x1b, 0xb7, 0xa6, 0x68, 0x58, 0x5c, 0x85, 0x2c, 0xd3, 0x42, 0x6b, 0xcb, 0x69, 0x6b, 0x8c,
    0x3a, 0x03, 0xc0, 0xd9, 0x0e, 0xa9, 0x67, 0x7d, 0x08, 0xfb, 0x34, 0xb7, 0xb0, 0xc1, 0xab, 0x0a,
    0x41, 0x8b, 0x25, 0x2e, 0xb0, 0x2a, 0xe0, 0x67, 0xa7, 0xa1, 0x3c, 0x70, 0xe3, 0x8a, 0x10, 0x2f,
    0x57, 0xd6, 0x2e, 0xa9, 0xd5, 0xee, 0x10, 0x84, 0xe5, 0xf7, 0xed, 0xd8, 0x08, 0xa1, 0xc2, 0xa4,
    0xbc, 0x57, 0x05, 0xcc, 0x9b, 0xc0, 0x01, 0xba, 0x27, 0x0d, 0x8d, 0xab, 0x95, 0xbc, 0x98, 0x65,
    0x35, 0xe4, 0xc5, 0x85, 0xf7, 0xa0, 0x5b, 0x0b, 0xc0, 0x1b, 0x44, 0x05, 0x9b, 0xf2, 0x00, 0x1f,
    0x70, 0x6c, 0x1b, 0x40, 0x0e, 0x76, 0x8e, 0xe8, 0x47, 0xe6, 0x1e, 0x32, 0x3d, 0x07, 0x03, 0x45,
    0x5d, 0xf4, 0x39, 0xf7, 0x47, 0xe2, 0xa5, 0xe5, 0x07, 0xc7, 0x35, 0x8f, 0x8d, 0x8b, 0xb7, 0xec,
    0xc9, 0x2a, 0xc1, 0x10, 0xa6, 0x3b, 0x43, 0xea, 0x5f, 0x17, 0xcf, 0x2e, 0xc2, 0x6d, 0x32, 0x4d,
    0x38, 0x69, 0xcd, 0x1c, 0x21, 0xc7, 0x08, 0x11, 0x75, 0xf5, 0x6e, 0x2a, 0xe9, 0x47, 0x84, 0x93,
    0x5e, 0x81, 0x96, 0xf4, 0x4f, 0xa2, 0xfe, 0xb1, 0x4f, 0xea, 0x4e, 0x46, 0xbb, 0x8d, 0x3c, 0xcb,
    0xba, 0x41, 0x82, 0x4e, 0x0b, 0xd6, 0xc4, 0x10, 0x04, 0x5a, 0x92, 0x68, 0xb3, 0x4d, 0x20, 0x6d,
    0xd4, 0x4f, 0xc7, 0xc4, 0x7f, 0x56, 0x55, 0x0e, 0x93, 0xb0, 0xef, 0xf2, 0xab, 0x05, 0xff, 0xe2,
    0xa3, 0x88, 0x37, 0x29, 0x2f, 0x78, 0xc8, 0x51, 0xa7, 0xca, 0x8e, 0x3c, 0xc9, 0xd2, 0x01, 0xfa,
};

static const uint8_t sMessageEncodingTest0548_ExpectedEncoding[] =
{
    0x10, 0x21, 0xa4, 0x0f, 0x44, 0x72, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xea, 0x29,
    0xdd, 0x9d, 0xaa, 0xa4, 0xb4, 0x36, 0x1b, 0x5d, 0x98, 0x74, 0x7f, 0xc8, 0xa2, 0xc2, 0x9f, 0x4a,
    0xe2, 0x51, 0x07, 0x82, 0xe6, 0x7e, 0x65, 0xf2, 0x1e, 0x64, 0x73, 0x9e, 0x05, 0x14, 0x58, 0x1c,
    0xed, 0x2f, 0xb0, 0x64, 0xca, 0x3e, 0xf9, 0x89, 0xf0, 0x8d, 0xcb, 0xcb, 0xe4, 0x87, 0x07, 0xb8,
    0xcd, 0xed, 0xec, 0x95, 0xeb, 0x90, 0x5c, 0xb0, 0x3c, 0xb6, 0x55, 0x0e, 0x33, 0xea, 0xcd, 0x53,
    0xed, 0x1b, 0x22, 0x13, 0x11, 0x41, 0xb1, 0x7b, 0x1f, 0x23, 0x6e, 0x27, 0x49, 0xae, 0x79, 0x04,
    0xfd, 0x7a, 0x77, 0xdd, 0x50, 0xb4, 0x33, 0x9d, 0xfa, 0xf7, 0x92, 0xdb, 0x83, 0xe3, 0x1f, 0x39,
    0xe3, 0x15, 0x61, 0x8d, 0x4b, 0x04, 0x5b, 0xa2, 0x31, 0x75, 0x2e, 0xe4, 0x64, 0x70, 0xd6, 0x8a,
    0x13, 0x4c, 0x1d, 0x0c, 0x8a, 0x55, 0xf3, 0x38, 0x9f, 0x48, 0x02, 0xfd, 0x72, 0x29, 0xca, 0x81,
    0xd3, 0x19, 0xcf, 0x43, 0xd4, 0xff, 0x21, 0xb7, 0xbc, 0x81, 0x71, 0x8d, 0x61, 0x19, 0xc5, 0xaf,
    0x5c, 0xd6, 0xf1, 0xaa, 0xf7, 0xe5, 0x6f, 0xe6, 0x82, 0x7d, 0xe4, 0xce, 0x5c, 0xbe, 0x3c, 0xa8,
    0x34, 0xed, 0x08, 0x76, 0xbc, 0x4d, 0x1e, 0xcc, 0x1a, 0xc2, 0x99, 0xdc, 0x1e, 0x8b, 0xe4, 0xd7,
    0xab, 0xd5, 0xab, 0x3b, 0xdf, 0x42, 0x8a, 0xbf, 0xfd, 0xe2, 0x30, 0x5a, 0x70, 0x89, 0xeb, 0xaa,
    0x42, 0x3f, 0xba, 0x15, 0x01, 0x9d, 0x5e, 0xdb, 0xd6, 0xe5, 0x7c, 0xf0, 0xd1, 0x67, 0x83, 0x94,
    0x51, 0x27, 0x7b, 0x4d, 0x2f, 0x78, 0x0b, 0xa6, 0xb7, 0xda, 0x6c, 0xc9, 0x57, 0x8b, 0x28, 0x2e,
    0x9e, 0xa3, 0x5f, 0xfe, 0x8d, 0x73, 0x6c, 0xc1, 0x90, 0x66, 0x2e, 0xce, 0x4f, 0xf1, 0x51, 0x98,
    0x88, 0x60, 0x47, 0x2c, 0xa1, 0xb3, 0x6e, 0x0a, 0x98, 0xa8, 0xb8, 0x97, 0xb1, 0xa7, 0x01, 0x23,
    0xf1, 0x14, 0xda, 0xce, 0x86, 0x73, 0x9e, 0x25, 0x92, 0xa7, 0xba, 0x39, 0x8d, 0xa6, 0x88, 0x08,
    0xe5, 0x43, 0x68, 0xc1, 0xc1, 0x0b, 0x20, 0x88, 0x1e, 0x7e, 0xec, 0x83, 0xd2, 0x85, 0xbc, 0x92,
    0x7b, 0x61, 0x63, 0x70, 0x17, 0xbe, 0xf8, 0xf9, 0xdb, 0x25, 0xfd, 0x3b, 0x1f, 0xd4, 0x10, 0x38,
    0x53, 0x2f, 0xc0, 0xcb, 0x33, 0xa2, 0x2a, 0x7b, 0xe9, 0xfe, 0xd2, 0x5c, 0xa5, 0x8e, 0xa2, 0x20,
    0x1c, 0x17, 0x15, 0xd9, 0xac, 0xf8, 0x9e, 0xda, 0xd6, 0xa8, 0xf4, 0x76, 0xd9, 0x39, 0x40, 0x16,
    0x73, 0xd4, 0xaa, 0xb0, 0xcb, 0xe9, 0x3e, 0x2a, 0x92, 0x76, 0x0e, 0x19, 0x39, 0x6a, 0x3a, 0xf7,
    0xb9, 0x98, 0x31, 0x32, 0xad, 0xaf, 0x28, 0xb0, 0x44, 0xcb, 0xe5, 0x27, 0x28, 0xd0, 0x62, 0xd4,
    0x20, 0xb4, 0x0f, 0xef, 0x69, 0x62, 0xc8, 0xd7, 0x1f, 0x9b, 0x03, 0xa1, 0x70, 0x3e, 0x57, 0xa6,
    0x05, 0xf5, 0xeb, 0xe8, 0xe7, 0xec, 0xd3, 0xcf, 0xda, 0xc3, 0x1e, 0x3b, 0x24, 0x3c, 0x0e, 0xda,
    0x0d, 0xe5, 0x5e, 0xaa, 0x04, 0x25, 0x4a, 0xbe, 0x58, 0xeb, 0x7b, 0x95, 0x90, 0x7c, 0x9d, 0x2d,
    0x75, 0xcc, 0xad, 0x9a, 0x0b, 0x1a, 0xbf, 0x75, 0x5b, 0x20, 0x59, 0xf9, 0x00, 0xcc, 0x5c, 0x31,
    0xd3, 0x6f, 0x37, 0x4c, 0xc8, 0xb1, 0x26, 0x73, 0x9a, 0xb8, 0x5d, 0xd5, 0x84, 0xbb, 0x27, 0xcf,
    0xa9, 0xa3, 0xa3, 0x7d, 0x95, 0x92, 0x1e, 0xde, 0x96, 0x3c, 0x1e, 0x39, 0x58, 0x5c, 0x9e, 0x81,
    0x2f, 0xb7, 0xd2, 0x0b, 0xfe, 0x4a, 0x41, 0x02, 0x09, 0x5e, 0xa2, 0x17, 0xfa, 0x4c, 0xdf, 0x77,
    0x09, 0xc7, 0xaf, 0x80, 0xdd, 0x5b, 0xa6, 0x70, 0x82, 0x18, 0x6f, 0x52, 0xe8, 0xc2, 0xaf, 0xd7,
    0x9a, 0x3b, 0x46, 0xd1, 0xa3, 0x7c, 0xff, 0x5f, 0xb5, 0x6c, 0xe8, 0x0e, 0xbc, 0x2f, 0xd4, 0xbc,
    0xa5, 0xf6, 0x09, 0x11, 0x82, 0xeb, 0x26, 0x66, 0xee, 0x36, 0xaf, 0x32, 0xd3, 0xf6, 0x43, 0x17,
    0x19, 0x3a, 0x7d, 0x43, 0xd5, 0x76, 0x3c, 0xaa, 0x55, 0x33, 0xde, 0xe2, 0x3b, 0xbf, 0xd0, 0x47,
    0x3a, 0x71, 0x81, 0xa6, 0xb3, 0xa1, 0x5b, 0x6c, 0x10, 0x1b, 0x4e, 0xcf, 0x02, 0xfe, 0x23, 0x6c,
    0xf7, 0xc7, 0x23, 0x6a, 0x40, 0x7f, 0x36, 0x6f, 0x52, 0x44, 0x2f, 0xdf, 0x0b, 0xb5, 0xba, 0x93,
    0x01, 0x1f, 0xb1, 0x0b, 0x61, 0x9f, 0xc1, 0x43, 0x64, 0xe6, 0xbb, 0x0d, 0xdf, 0x30, 0x02, 0x6e,
    0x51, 0x8c, 0x93, 0xb5, 0xe8, 0xae, 0xee, 0xd8, 0x5f, 0x8b, 0xfa, 0x69, 0xa5, 0x5f, 0x00, 0x02,
    0xf0, 0xa8, 0x47, 0x19, 0x2c, 0x41, 0xd8, 0x0c, 0x87, 0x50, 0x3d, 0x7f, 0x04, 0x8a, 0xf4, 0x45,
    0x21, 0xbc, 0x5c, 0x74, 0x15, 0x10, 0x5b, 0x67, 0x36, 0xb9, 0xb5, 0xb2, 0xce, 0xc2, 0xe0, 0x30,
    0x3d, 0x90, 0xfa, 0x77, 0xe3, 0x37, 0xb9, 0xa6, 0xbc, 0xeb, 0x1d, 0x91, 0x96, 0x0f, 0x74, 0x06,
    0x23, 0x2a, 0x0f, 0xac, 0x93, 0x93, 0x4f, 0x8b, 0xc5, 0xbd, 0xb8, 0xea, 0xe4, 0x06, 0x7c, 0xfb,
    0xbd, 0xc4, 0x84, 0x78, 0x42, 0x57, 0x64, 0x92, 0xf4, 0x7a, 0xba, 0xdd, 0xb2, 0x3c, 0x29, 0xfd,
    0x7c, 0x09, 0x2e, 0xbf, 0xe2, 0x49, 0x49, 0xe2, 0xc0, 0xdd, 0x7e, 0x87, 0x22, 0xc9, 0xf1, 0x74,
    0x46, 0xce, 0xbd, 0xcd, 0x9d, 0x04, 0xc4, 0x9b, 0xd3, 0x95, 0x64, 0xc5, 0xb7, 0x5d, 0xda, 0x3d,
    0x07, 0x7d, 0xbc, 0xbb, 0xaf, 0x1b, 0xa4, 0xdc, 0x55, 0x8e, 0x47, 0xce, 0x23, 0x26, 0xd9, 0xdb,
    0xff, 0xb4, 0xfc, 0xf5, 0x0d, 0xeb, 0xbf, 0x1a, 0xb9, 0x76, 0x88, 0xae, 0x6d, 0x96, 0x00, 0x59,
    0x67, 0xee, 0x06, 0x40, 0x0a, 0x58, 0xfc, 0xb5, 0xc2, 0x67, 0x2e, 0x93, 0x3f, 0xd1, 0x40, 0x9e,
    0xa2, 0x6c, 0xb5, 0xab, 0x29, 0xb2, 0x7c, 0x17, 0x59, 0xd6, 0x6a, 0x2a, 0x8a, 0x7e, 0x79, 0x80,
    0x9a, 0xb9, 0xd6, 0xd2, 0x20, 0x6f, 0xe5, 0x60, 0xa9, 0x58, 0x88, 0x2d, 0xda, 0xfa, 0xdd, 0x59,
    0x3f, 0x7e, 0xce, 0x54, 0xe9, 0xfb, 0x79, 0xed, 0x95, 0x9d, 0x31, 0x93, 0x94, 0x7e, 0xd2, 0x52,
    0x43, 0xd6, 0x90, 0xd1, 0x98, 0x6e, 0x65, 0x92, 0x62, 0x67, 0x1b, 0x88, 0x4d, 0x1f, 0x65, 0xea,
    0xf9, 0x95, 0x05, 0xd3, 0x58, 0x4a, 0xee, 0x13, 0x6a, 0xcb, 0x55, 0x16, 0x9e, 0x41, 0x17, 0xb7,
    0x3c, 0x8c, 0x87, 0xc1, 0xa2, 0xe5, 0xe4, 0x0e, 0x1b, 0xfc, 0x74, 0x1f, 0x12, 0x78, 0xa6, 0xe3,
    0x74, 0x79, 0x61, 0x4d, 0xf3, 0xd5, 0x1f, 0x7d, 0x5c, 0x49, 0x92, 0x56, 0x51, 0xe1, 0x3e, 0x06,
    0x8f, 0x00, 0xbb, 0xff, 0x26, 0x9c, 0xea, 0x01, 0x34, 0x32, 0x85, 0x74, 0x3a, 0x18, 0xac, 0x3d,
    0xdc, 0x76, 0x4d, 0x55, 0xae, 0x08, 0x38, 0x7a, 0x92, 0xdd, 0x6f, 0x0e, 0x03, 0x6a, 0x39, 0x00,
    0x84, 0x96, 0x6a, 0x69, 0xad, 0x3b, 0x25, 0x60, 0xa5, 0xa1, 0x2a, 0xd8, 0xac, 0x60, 0x33, 0x1e,
    0x94, 0xbf, 0xf2, 0xf3, 0xf4, 0x76, 0x17, 0xef, 0x07, 0x77, 0xf8, 0x1b, 0x92, 0x31, 0x67, 0xe3,
    0x54, 0xee, 0x77, 0xf4, 0x6c, 0x12, 0xa6, 0x21, 0x81, 0x33, 0x13, 0x0d, 0x46, 0xc1, 0xc9, 0x9b,
    0x37, 0xfa, 0xb4, 0x7a, 0xe8, 0x7f, 0xc7, 0xbb, 0x78, 0xca, 0xab, 0x8b, 0xe2, 0x56, 0x9b, 0xe5,
    0x43, 0x2d, 0xcd, 0x18, 0xab, 0xea, 0x6e, 0xb0, 0xff, 0xc6, 0x63, 0xe0, 0x9f, 0x77, 0xcd, 0xea,
    0x94, 0x6a, 0x46, 0xe6, 0xad, 0xc1, 0x23, 0xa6, 0xe2, 0xe0, 0x99, 0x2b, 0xa7, 0xaa, 0xf8, 0x51,
    0x0f, 0x24, 0x7e, 0xe5, 0x9c, 0x62, 0xb6, 0x91, 0x90, 0xd7, 0xe9, 0x6d, 0x5e, 0xb0, 0x44, 0x15,
    0x66, 0x75, 0xd9, 0xc0, 0xbf, 0x85, 0x1b, 0x02, 0x89, 0xd3, 0xe0, 0xa6, 0xb4, 0xf1, 0xf1, 0x1e,
    0xef, 0x94, 0x8e, 0x99,
};

static const MessageEncodingTestVector sMessageEncodingTest0548 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x72440FA4,
        kWeaveHeaderFlag_DestNodeId,
        0x29EA,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0548_EncryptionKey,
    sMessageEncodingTest0548_Payload,
    sizeof(sMessageEncodingTest0548_Payload),
    sMessageEncodingTest0548_ExpectedEncoding,
    sizeof(sMessageEncodingTest0548_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0549_EncryptionKey =
{
    {
        0x56, 0x21, 0xb5, 0x1c, 0x68, 0x07, 0x78, 0x9a, 0x6f, 0xf1, 0xfa, 0x41, 0xa7, 0xb7, 0xc4, 0x4b,
    }
};
static const uint8_t sMessageEncodingTest0549_Payload[] =
{
    0x37, 0x45, 0x0d, 0x5f, 0x90, 0x49, 0x28, 0x66, 0x07, 0xae, 0x35, 0x79, 0x24, 0x60, 0x4b, 0xa7,
    0x40, 0x34, 0x1e, 0xba, 0x55, 0x6d, 0x52, 0xee, 0x23, 0x78, 0x91, 0xb8, 0xe4, 0xae, 0x11, 0xe3,
    0xc5, 0x38, 0xfd, 0x67, 0xd3, 0x98, 0xfc, 0xfa, 0x28, 0x1e, 0x40, 0x69, 0x58, 0x9a, 0x0e, 0xf7,
    0xb8, 0xf5, 0x20, 0xab, 0xda, 0x12, 0xd7, 0xed, 0x1b, 0x42, 0xe8, 0xca, 0xc4, 0xff, 0x46, 0x79,
    0xd1, 0xcc, 0x45, 0x99, 0x22, 0x3a, 0x75, 0x4a, 0xfa, 0x56, 0xf9, 0xda, 0x5b, 0x35, 0xe4, 0xcf,
    0xed, 0x2d, 0xbd, 0x51, 0x79, 0xd6, 0x95, 0x6f, 0x46, 0xa7, 0x6d, 0x1d, 0x82, 0x59, 0xdd, 0x91,
    0x97, 0x58, 0x28, 0x93, 0x62, 0x81, 0x8e, 0xd1, 0x9a, 0x3f, 0xab, 0xaf, 0xe0, 0x7f, 0x5b, 0x8b,
    0x8f, 0x5e, 0x43, 0xdb, 0xe3, 0x63, 0x92, 0xf8, 0x14, 0x11, 0xfb, 0xfc, 0x77, 0xd8, 0xd3, 0x16,
    0x34, 0xd9, 0x7a, 0x74, 0xf5, 0x72, 0xe9, 0xef, 0x14, 0xe5, 0xb8, 0xde, 0x2f, 0x3a, 0x38, 0x1e,
    0xcc, 0x06, 0x32, 0x4a, 0x59, 0x02, 0x08, 0x22, 0xac, 0x4b, 0xa5, 0xdd, 0xcc, 0xe4, 0x04, 0xc6,
    0x26, 0xf5, 0x94, 0xf6, 0xcf, 0x65, 0x02, 0x5b, 0x0a, 0xfe, 0x9d, 0xef, 0x51, 0x11, 0xd1, 0xfb,
    0x0d, 0x8f, 0xb7, 0x83, 0x0d, 0x7a, 0xf8, 0x5f, 0x6b, 0xe7, 0xf6, 0xc8, 0x6f, 0xb2, 0x8c, 0xb6,
    0x5a, 0x80, 0xfe, 0x85, 0x46, 0x69, 0x1e, 0xda, 0x67, 0x48, 0xb9, 0x5e, 0xf5, 0x0e, 0x9a, 0xae,
    0x63, 0xf2, 0x68, 0x3b, 0x59, 0x0f, 0x72, 0xc3, 0x7f, 0x73, 0x24, 0xc7, 0x0e, 0xe0, 0x8e, 0xe0,
    0x32, 0x0d, 0x9c, 0xf6, 0x08, 0xeb, 0x1a, 0x19, 0xc4, 0x7e, 0xc7, 0x8b, 0x02, 0x31, 0xdb, 0xe0,
    0x9b, 0xc0, 0x29, 0xd7, 0x68, 0x12, 0x44, 0x7a, 0x7a, 0x69, 0x70, 0x98, 0x46, 0x3e, 0x7f, 0xf9,
    0xff, 0x10, 0xea, 0x33, 0xc4, 0x72, 0x1b, 0xb8, 0x3e, 0xd4, 0x6b, 0xb8, 0xaf, 0xaa, 0x90, 0xa0,
    0xcb, 0x6c, 0x79, 0xc1, 0x91, 0x00, 0x02, 0x13, 0xfc, 0x9c, 0xd8, 0x38, 0x34, 0xb0, 0x82, 0x61,
    0x3a, 0x09, 0x90, 0x67, 0x0f, 0x22, 0x41, 0x13, 0xcb, 0x04, 0x90, 0xcc, 0xab, 0x10, 0xe8, 0x8f,
    0xbe, 0x09, 0x4d, 0x83, 0xa3, 0xdc, 0x35, 0x5b, 0xb6, 0x5f, 0xdc, 0xb0, 0xaf, 0xad, 0x67, 0x92,
    0x46, 0x4d, 0x35, 0x4b, 0x24, 0x06, 0xdf, 0x6e, 0x2a, 0x72, 0x67, 0x53, 0xea, 0x24, 0x11, 0x39,
    0x44, 0x11, 0xd8, 0x12, 0x30, 0xb8, 0x59, 0x6e, 0x02, 0xf4, 0xfc, 0x4d, 0x7d, 0xa7, 0x06, 0xe2,
    0x28, 0x66, 0xce, 0x88, 0x27, 0xb2, 0x3c, 0x82, 0x1e, 0xc3, 0xdc, 0x29, 0xa5, 0xca, 0x55, 0x27,
    0x22, 0x69, 0x38, 0x44, 0x96, 0x7b, 0xe2, 0x06, 0x12, 0x99, 0x1f, 0x60, 0xcf, 0x59, 0x9c, 0x80,
    0xeb, 0x39, 0x21, 0x0e, 0xeb, 0x3c, 0xaf, 0x17, 0x33, 0xae, 0x69, 0x79, 0x70, 0x92, 0x52, 0xf8,
    0x37, 0xab, 0xb3, 0x6b, 0xdf, 0xcf, 0x9c, 0xd4, 0x0c, 0xc2, 0x2f, 0xd6, 0x73, 0x78, 0xb8, 0xee,
    0x79, 0x55, 0x2e, 0xf6, 0x57, 0xc2, 0xad, 0xf4, 0xc3, 0x12, 0x45, 0x7e, 0x7c, 0x2e, 0xca, 0x61,
    0xe5, 0x77, 0xd2, 0xb6, 0x6e, 0xae, 0x33, 0xde, 0x3e, 0x63, 0x2d, 0x4d, 0x40, 0xe1, 0x44, 0x15,
    0xf6, 0x30, 0x5b, 0xa3, 0x31, 0x54, 0xee, 0xee, 0x0d, 0x6c, 0x9e, 0x0f, 0x5c, 0x00, 0x87, 0x8d,
    0x82, 0x29, 0xb3, 0xc6, 0x50, 0x8d, 0xfd, 0xad, 0x1e, 0xe6, 0x2e, 0x24, 0xca, 0x0b, 0x48, 0x80,
    0xde, 0x42, 0x7c, 0x6d, 0xf1, 0x13, 0xed, 0xa6, 0x71, 0xce, 0x8f, 0xac, 0x9e, 0x94, 0x58, 0x2c,
    0xb2, 0xe5, 0x40, 0xe9, 0x8a, 0x41, 0xb5, 0x85, 0x9c, 0x21, 0x52, 0x7a, 0xf8, 0xcb, 0x17, 0x50,
    0xc8, 0xb2, 0x0b, 0x81, 0x69, 0x70, 0xc6, 0xe0, 0xcc, 0xd3, 0x1a, 0x93, 0x01, 0xc5, 0x58, 0x25,
    0x42, 0xa4, 0x6b, 0x54, 0x17, 0xf3, 0x4e, 0x6d, 0xf9, 0x62, 0x0b, 0x5c, 0x4d, 0x98, 0x18, 0x9d,
    0xb1, 0x62, 0x39, 0xf8, 0xff, 0x93, 0xc4, 0xc8, 0x91, 0xa0, 0xf0, 0x24, 0x6e, 0x80, 0x68, 0xbd,
    0x10, 0x2a, 0xbd, 0xb7, 0xa0, 0x56, 0xab, 0xf6, 0x13, 0x19, 0xba, 0x87, 0x2d, 0x3e, 0xc6, 0x67,
    0x03, 0x65, 0x49, 0x69, 0xbf, 0x12, 0x32, 0x69, 0x0e, 0x47, 0xf5, 0xc5, 0xf1, 0xca, 0x49, 0x1f,
    0xf7, 0x81, 0xe0, 0x50, 0x84, 0x98, 0xcc, 0x90, 0x82, 0x17, 0x87, 0x2b, 0x00, 0xee, 0x3f, 0x14,
    0x31, 0x2f, 0xd3, 0xef, 0xa7, 0x51, 0x36, 0xa7, 0x38, 0x5c, 0x71, 0x93, 0xe4, 0x8f, 0xcb, 0xe4,
    0x90, 0x50, 0x39, 0x85, 0x35, 0x14, 0xba, 0xad, 0xcc, 0x13, 0x66, 0x55, 0xf4, 0xa1, 0x62, 0x87,
    0x0a, 0xeb, 0xef, 0xc3, 0x46, 0x37, 0x0a, 0x58, 0x41, 0xcb, 0x38, 0xd7, 0x21, 0x57, 0xed, 0x8a,
    0x90, 0x4f, 0x8b, 0x29, 0x15, 0xa3, 0x67, 0xf4, 0x09, 0x8a, 0x2c, 0x32, 0x9d, 0xf9, 0x5d, 0x8f,
    0x68, 0xac, 0x32, 0x76, 0xa2, 0x82, 0x8b, 0xe3, 0x5d, 0xe0, 0x71, 0xea, 0xf1, 0x00, 0xd9, 0x02,
    0xd5, 0x3d, 0xa4, 0xe7, 0x5a, 0x15, 0xd7, 0xcd, 0x81, 0x6e, 0xd6, 0x79, 0xea, 0xcc, 0x50, 0x1d,
    0x71, 0x68, 0x84, 0x93, 0xef, 0x9d, 0xab, 0xe0, 0x23, 0x40, 0x0f, 0x82, 0xfb, 0x32, 0xba, 0xaa,
    0x75, 0x9e, 0x76, 0xfe, 0x09, 0x5f, 0x37, 0x66, 0xa8, 0x6d, 0xb1, 0x5d, 0xf3, 0x0c, 0xf1, 0x41,
    0xfb, 0x0b, 0x3e, 0xe9, 0x23, 0xdd, 0x4d, 0xec, 0x76, 0x76, 0x80, 0x25, 0x2f, 0xce, 0xae, 0xb1,
    0x23, 0xa1, 0xe0, 0x12, 0x4a, 0x70, 0x81, 0xa8, 0x5c, 0xc0, 0x48, 0xe4, 0xd5, 0xad, 0xa2, 0x35,
    0xb6, 0x32, 0xa0, 0xad, 0xba, 0x0b, 0xb2, 0x59, 0x50, 0x33, 0x8d, 0x72, 0x88, 0xfb, 0x07, 0x33,
    0x54, 0x44, 0xcd, 0x14, 0xbb, 0x65, 0x37, 0x48, 0x0e, 0xce, 0x8d, 0xdf, 0x63, 0xc6, 0xbc, 0xf4,
    0x10, 0x41, 0x6b, 0x7e, 0xeb, 0xca, 0x18, 0xe1, 0x27, 0x80, 0x93, 0xf5, 0x0d, 0xcd, 0xeb, 0x81,
    0x26, 0xef, 0x43, 0xce, 0xf5, 0xd4, 0x64, 0xc1, 0x3d, 0x09, 0x2e, 0x39, 0xb7, 0x12, 0x94, 0x75,
    0x0f, 0x96, 0x37, 0xd1, 0xb0, 0x32, 0x4a, 0xec, 0xf9, 0xc6, 0xd3, 0xfa, 0x34, 0xde, 0x2c, 0x87,
    0x2e, 0x94, 0x1b, 0x2e, 0x3e, 0x62, 0xe3, 0x90, 0xdb, 0xdd, 0x37, 0xd7, 0x15, 0xab, 0xfd, 0xdf,
    0x11, 0x7f, 0x4e, 0x92, 0xa8, 0x34, 0x14, 0x50, 0x32, 0xc2, 0x4c, 0x6c, 0xcf, 0x3f, 0x84, 0x89,
    0x5c, 0xc4, 0x77, 0x86, 0x67, 0x95, 0x64, 0xbf, 0x88, 0x6f, 0x0e, 0xc2, 0x2a, 0x2b, 0xbf, 0x81,
    0x1b, 0x71, 0x11, 0x47, 0xeb, 0x67, 0x79, 0x40, 0x67, 0xb4, 0x2a, 0x78, 0x64, 0x32, 0x8a, 0x5f,
    0x6b, 0xed, 0xc5, 0x24, 0x42, 0x35, 0x04, 0xc4, 0xa5, 0x5a, 0x36, 0x4a, 0x4a, 0x97, 0x87, 0x30,
    0xb2, 0x40, 0xc8, 0xe1, 0x8f, 0x9e, 0xb3, 0xe2, 0x46, 0xed, 0x3c, 0xb6, 0xcf, 0x7b, 0x05, 0x6c,
    0xa2, 0x59, 0x67, 0x41, 0xb7, 0xfb, 0xde, 0x7a, 0x99, 0xc7, 0x81, 0x78, 0x13, 0xb5, 0x32, 0x80,
    0x4a, 0xcc, 0xb8, 0xe2, 0x29, 0x41, 0xfb, 0xcc, 0x61, 0xa8, 0x5f, 0x41, 0x1d, 0x3e, 0x65, 0xa3,
    0xa8, 0x60, 0x3f, 0x5e, 0x08, 0xa0, 0x25, 0x6b, 0x5a, 0x3e, 0xad, 0x14, 0xf1, 0x86, 0x6f, 0x3d,
    0xdb, 0x31, 0x8a, 0x4c, 0x80, 0x60, 0x97, 0x71, 0xed, 0x1d, 0x62, 0x34, 0x82, 0x31, 0xa7, 0x58,
    0x14, 0x0e, 0x07, 0x36, 0xc8, 0x96, 0x38, 0x16, 0x9c, 0xce, 0x67, 0x80, 0xb4, 0xb5, 0x90, 0x87,
};

static const uint8_t sMessageEncodingTest0549_ExpectedEncoding[] =
{
    0x20, 0x21, 0x7e, 0x4c, 0x39, 0x25, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe0, 0x25,
    0xb2, 0x98, 0x33, 0x15, 0xab, 0x02, 0x1b, 0x47, 0x30, 0xf9, 0x12, 0xe1, 0xa5, 0xdf, 0x81, 0xa9,
    0xe5, 0x2b, 0x0f, 0xcc, 0xe4, 0xd3, 0xd4, 0x5c, 0x27, 0x17, 0xbb, 0xcb, 0xe1, 0xcd, 0xd8, 0x7c,
    0x66, 0x2b, 0x34, 0x01, 0x90, 0xdb, 0xfa, 0x18, 0x47, 0xac, 0xd1, 0xa7, 0x08, 0xea, 0x1f, 0x41,
    0xaf, 0xb8, 0x5a, 0xe7, 0x9e, 0x6d, 0x5f, 0x84, 0x5e, 0xca, 0x0e, 0x0d, 0x4b, 0x6c, 0xe8, 0x0f,
    0xd4, 0xb6, 0x2a, 0x79, 0x84, 0x4b, 0x0a, 0x45, 0xf2, 0xfa, 0x44, 0x80, 0xd0, 0xf3, 0x84, 0xe5,
    0x20, 0x79, 0x80, 0xc2, 0xdb, 0x71, 0x13, 0xeb, 0xd5, 0x2b, 0xa8, 0x27, 0x23, 0xd1, 0xa7, 0xc2,
    0x63, 0x18, 0x4f, 0xa7, 0xd0, 0x95, 0xa7, 0xd6, 0xf4, 0xed, 0x44, 0xa8, 0x22, 0x5e, 0x8b, 0x0c,
    0x4d, 0xc9, 0xfd, 0xe7, 0xc7, 0x05, 0x4f, 0x63, 0x36, 0x88, 0xd8, 0x4a, 0x01, 0x44, 0x15, 0x41,
    0xb7, 0xce, 0x2f, 0x85, 0x23, 0x3e, 0x90, 0xb5, 0x62, 0xe4, 0x31, 0x1a, 0x3c, 0xb5, 0x9f, 0x40,
    0x43, 0xea, 0x7d, 0x54, 0xa4, 0xce, 0x87, 0xe3, 0xb7, 0x4f, 0x4f, 0x21, 0x29, 0xe5, 0x43, 0x17,
    0x33, 0x87, 0xfc, 0x1f, 0x62, 0x79, 0x3a, 0x37, 0x01, 0x0c, 0x9c, 0x54, 0x32, 0x72, 0x21, 0xd1,
    0xe7, 0x1c, 0x3a, 0xb8, 0xe0, 0xfe, 0x82, 0xe6, 0x41, 0x59, 0x54, 0x3f, 0x38, 0xe0, 0xb7, 0xc0,
    0x54, 0x0b, 0xb2, 0x5f, 0xcc, 0xaa, 0x17, 0xa3, 0x6c, 0xa5, 0x24, 0x10, 0xe7, 0x92, 0xf5, 0x17,
    0x93, 0xcd, 0x22, 0x16, 0x96, 0x11, 0x72, 0x1a, 0x6b, 0x54, 0x6d, 0x69, 0x6f, 0x31, 0x3b, 0x68,
    0xc8, 0x1a, 0xe8, 0xc1, 0xf2, 0x44, 0xc1, 0x23, 0x83, 0xe0, 0x7d, 0xe4, 0xea, 0xca, 0x94, 0x9d,
    0xde, 0x57, 0x21, 0xde, 0x3f, 0x75, 0x88, 0xd7, 0x80, 0x1f, 0x4e, 0xd5, 0x23, 0xcc, 0x66, 0x9e,
    0x13, 0xd7, 0xdd, 0x16, 0x75, 0xe7, 0xee, 0x1a, 0xcc, 0x67, 0x57, 0x16, 0x6b, 0x4d, 0x68, 0x75,
    0x04, 0xaf, 0x18, 0xdc, 0x8d, 0x54, 0x80, 0x38, 0xc7, 0xb0, 0x8a, 0x4e, 0x76, 0xa7, 0xd7, 0xc6,
    0xf9, 0x03, 0x03, 0x91, 0x40, 0x69, 0x23, 0x18, 0xd4, 0x51, 0xe7, 0xb2, 0x98, 0x87, 0x95, 0xa6,
    0xa7, 0xd8, 0x46, 0x0f, 0xf8, 0x26, 0x2c, 0x67, 0x11, 0x5d, 0x31, 0xd0, 0xf5, 0xb1, 0x86, 0xe7,
    0x9f, 0x8a, 0xfb, 0x52, 0xac, 0x78, 0x5f, 0x46, 0x8e, 0x6a, 0xfa, 0x3c, 0xcc, 0x20, 0x19, 0xfc,
    0xf1, 0x7a, 0xc7, 0x93, 0xed, 0x15, 0x76, 0x09, 0xcc, 0xa9, 0x9c, 0x02, 0x64, 0xde, 0x4a, 0x4a,
    0xd5, 0xf3, 0x5d, 0x68, 0x38, 0xc5, 0xe5, 0xd1, 0x52, 0x28, 0x82, 0xb9, 0xf2, 0xec, 0x47, 0x16,
    0x26, 0x3c, 0x94, 0x25, 0x30, 0x7c, 0x2c, 0xa6, 0x7f, 0x0a, 0x86, 0xff, 0x9d, 0x5b, 0xe0, 0x37,
    0xcd, 0xa7, 0x4e, 0x45, 0x15, 0x74, 0xdc, 0x17, 0x25, 0x40, 0x89, 0xd5, 0xa9, 0xec, 0x05, 0xcc,
    0x79, 0xf9, 0x37, 0x99, 0x96, 0x66, 0x0f, 0x78, 0x8f, 0xf4, 0x74, 0xce, 0x5f, 0x1e, 0x6b, 0x0a,
    0x59, 0x04, 0xd4, 0x98, 0xe6, 0x53, 0x44, 0xeb, 0x60, 0xde, 0x83, 0x33, 0x79, 0x71, 0xaa, 0xd6,
    0xb9, 0xed, 0x1e, 0x66, 0x96, 0xb7, 0xb5, 0x12, 0xef, 0x68, 0x46, 0xbd, 0xe4, 0x7f, 0xae, 0xb9,
    0x32, 0xd2, 0x5c, 0x0c, 0x41, 0xfa, 0x6d, 0x75, 0x50, 0xad, 0x78, 0x5d, 0x1b, 0xa3, 0xfd, 0x2d,
    0x02, 0x4d, 0x2f, 0x5f, 0x09, 0x3e, 0xed, 0xba, 0xe4, 0x2d, 0xcc, 0x51, 0xca, 0x54, 0x91, 0xdb,
    0xc4, 0xbc, 0x5b, 0x6a, 0x4d, 0xe2, 0xbb, 0x28, 0xa3, 0xfb, 0x42, 0xd8, 0x31, 0x69, 0x5d, 0x76,
    0x14, 0x60, 0xa2, 0x30, 0xa0, 0x43, 0x38, 0xf8, 0xa3, 0x63, 0x24, 0xd2, 0xff, 0xe8, 0x8f, 0xf4,
    0x51, 0x05, 0x6e, 0x90, 0x73, 0xc0, 0x9f, 0x23, 0xd8, 0x44, 0x65, 0x42, 0x58, 0x65, 0xce, 0x35,
    0x5e, 0xa0, 0xc6, 0xf8, 0xb7, 0xbe, 0x74, 0xe3, 0x39, 0x6c, 0x14, 0x80, 0x58, 0x9a, 0xda, 0xd3,
    0xdd, 0xa9, 0x8a, 0xcf, 0xd0, 0x75, 0xe4, 0x4c, 0xc8, 0x01, 0x00, 0x7f, 0xf4, 0x8b, 0x8c, 0x7d,
    0x45, 0x42, 0x65, 0x89, 0x40, 0x11, 0x56, 0xb9, 0xbd, 0x8e, 0x4c, 0x68, 0x86, 0xd8, 0x5f, 0x07,
    0xf6, 0xed, 0x35, 0x78, 0x23, 0x59, 0xf8, 0xe3, 0x5f, 0xa4, 0x9c, 0x35, 0x34, 0x6c, 0xe6, 0xc1,
    0x16, 0xf0, 0xd2, 0xb6, 0xfe, 0x19, 0xc3, 0xa7, 0x81, 0xac, 0xed, 0x46, 0x3f, 0xf9, 0xce, 0x16,
    0xd6, 0xcd, 0x30, 0x60, 0xb5, 0x29, 0x20, 0x9e, 0x30, 0xce, 0xad, 0x54, 0x42, 0xd2, 0x55, 0xc9,
    0x24, 0xdb, 0xc3, 0x32, 0x9e, 0xeb, 0x0c, 0x1a, 0x61, 0xbe, 0xe9, 0x30, 0xc8, 0xb8, 0x09, 0x79,
    0xbf, 0xea, 0xf9, 0xb1, 0x6a, 0xc3, 0x17, 0x85, 0xab, 0xcc, 0x8d, 0xe0, 0xea, 0xee, 0x4c, 0x58,
    0x9c, 0xe3, 0x33, 0x99, 0x39, 0x41, 0xdd, 0x00, 0x8b, 0x8f, 0x64, 0x58, 0xec, 0x00, 0x1a, 0xee,
    0xe1, 0x1c, 0x8e, 0x52, 0xa1, 0x9c, 0x8b, 0x00, 0xc4, 0xe4, 0x4d, 0xb3, 0x2d, 0x12, 0x42, 0x72,
    0x62, 0xb4, 0x51, 0xf9, 0xf5, 0x20, 0x3f, 0x89, 0xea, 0xad, 0xd9, 0xa4, 0x1e, 0x36, 0xcb, 0x79,
    0xc0, 0xc1, 0x27, 0xc8, 0x17, 0x25, 0xd1, 0x6b, 0xf8, 0x11, 0xb2, 0x24, 0xf2, 0x92, 0x48, 0xb3,
    0xe3, 0x75, 0xc7, 0x93, 0x0d, 0x7c, 0xb6, 0x47, 0x86, 0x02, 0xe9, 0x58, 0x3e, 0x1c, 0x1a, 0x4e,
    0x75, 0x30, 0x23, 0xb3, 0x27, 0x8b, 0x62, 0x18, 0xca, 0xa1, 0x42, 0x3e, 0x40, 0xd6, 0x02, 0x15,
    0x53, 0xcc, 0x83, 0x52, 0xe6, 0xd0, 0xf9, 0x09, 0x21, 0xd8, 0x93, 0xc1, 0xd7, 0xf7, 0xc5, 0xbb,
    0x23, 0x57, 0x35, 0x49, 0xab, 0xeb, 0xc1, 0x35, 0xbd, 0xa3, 0x0a, 0xb8, 0x1a, 0x15, 0x31, 0x7c,
    0x2a, 0x5f, 0xd6, 0x89, 0xce, 0x7f, 0xf0, 0x2b, 0x42, 0xb8, 0x11, 0xcb, 0x3f, 0x4c, 0x37, 0x0b,
    0x35, 0x49, 0x05, 0xd7, 0x1a, 0x56, 0xe2, 0xca, 0xa0, 0x89, 0x41, 0xbc, 0x35, 0x1c, 0xab, 0x95,
    0x55, 0x96, 0x5f, 0xb9, 0x8e, 0xcc, 0x60, 0xf6, 0x6b, 0xb4, 0xb5, 0xaa, 0x5b, 0xba, 0x1c, 0x6a,
    0x82, 0xf5, 0x30, 0xbc, 0xc5, 0xbd, 0x57, 0x41, 0xe6, 0x91, 0x5a, 0x4d, 0xbf, 0x4e, 0x94, 0xa5,
    0x76, 0x41, 0x19, 0xe2, 0xdc, 0x07, 0x37, 0xfd, 0x80, 0x78, 0x86, 0xde, 0x01, 0x1a, 0xdd, 0xda,
    0x04, 0x5b, 0x1c, 0x00, 0x5d, 0xdd, 0x6d, 0x14, 0xc0, 0x06, 0xbb, 0x62, 0x95, 0x29, 0x62, 0xb4,
    0x84, 0xab, 0x60, 0xab, 0xa0, 0xfc, 0xf9, 0x1a, 0x89, 0x92, 0x19, 0xcc, 0x1f, 0x39, 0xaf, 0x18,
    0x8e, 0x34, 0x95, 0x0b, 0x8b, 0x21, 0x59, 0x50, 0x2d, 0x0d, 0x7c, 0x28, 0xe1, 0x4c, 0x00, 0x52,
    0xdd, 0x9c, 0xe8, 0x62, 0x88, 0x82, 0x12, 0x1d, 0x02, 0x6b, 0x7a, 0xd4, 0xfa, 0xd1, 0xdf, 0xdc,
    0x06, 0x3b, 0x1e, 0x18, 0x18, 0xf9, 0x08, 0x5d, 0x95, 0x30, 0x11, 0x10, 0xd3, 0x68, 0x1f, 0xd8,
    0xb6, 0x3b, 0xca, 0x5a, 0x27, 0xbb, 0xe1, 0x9c, 0x21, 0x57, 0x44, 0x42, 0xc3, 0xb8, 0x75, 0xe8,
    0x28, 0x63, 0x5d, 0x87, 0x7c, 0xb4, 0xfc, 0xf3, 0xbc, 0x3c, 0xfd, 0x0b, 0xca, 0x8c, 0xd0, 0xca,
    0x29, 0x48, 0x7c, 0xad, 0xe4, 0xac, 0x52, 0x1c, 0xa1, 0x63, 0x69, 0x13, 0x82, 0x52, 0x4f, 0x14,
    0x75, 0x2d, 0xc7, 0xa2, 0x54, 0x96, 0x89, 0xdf, 0xe2, 0x78, 0x08, 0x10, 0xb9, 0xf1, 0x9f, 0x03,
    0x73, 0x35, 0xa8, 0x8d, 0x88, 0x67, 0x03, 0x5a, 0x95, 0x6c, 0xc1, 0xf7, 0xe2, 0xaa, 0x5b, 0x5b,
    0x18, 0xa4, 0x6c, 0x8b, 0xc0, 0x5a, 0x3a, 0x7e,
};

static const MessageEncodingTestVector sMessageEncodingTest0549 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x25394C7E,
        kWeaveHeaderFlag_DestNodeId,
        0x25E0,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0549_EncryptionKey,
    sMessageEncodingTest0549_Payload,
    sizeof(sMessageEncodingTest0549_Payload),
    sMessageEncodingTest0549_ExpectedEncoding,
    sizeof(sMessageEncodingTest0549_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0550_EncryptionKey =
{
    {
        0xbf, 0x68, 0xef, 0xaf, 0x2b, 0xa5, 0x99, 0x5f, 0x10, 0x2e, 0xa5, 0x6f, 0x20, 0x8b, 0xaa, 0xa0,
    }
};
static const uint8_t sMessageEncodingTest0550_Payload[] =
{
    0xc7, 0x8c, 0xf7, 0x23, 0x22, 0x5c, 0xd9, 0x54, 0x79, 0x17, 0xa5, 0x18, 0x60, 0xfa, 0x3d, 0xa4,
    0x25, 0x3e, 0x18, 0x17, 0x4d, 0xac, 0x80, 0x3e, 0x85, 0xe6, 0x4d, 0xd3, 0xd5, 0x59, 0x92, 0xe7,
    0x2a, 0x99, 0xbc, 0x6f, 0x60, 0x4a, 0x01, 0xe1, 0x6a, 0xcb, 0x6d, 0x1c, 0x9e, 0xd0, 0xcc, 0x48,
    0x1b, 0x3a, 0x57, 0x3f, 0xb0, 0x50, 0x37, 0xb6, 0x4c, 0x80, 0x8f, 0x61, 0xa1, 0x33, 0xec, 0xaf,
    0xe3, 0x76, 0x86, 0xf9, 0xe0, 0x02, 0xbd, 0xe7, 0x5a, 0xb9, 0xe3, 0x33, 0x84, 0xb9, 0xb9, 0xa4,
    0x02, 0x52, 0x80, 0xa0, 0xbf, 0x31, 0xe4, 0xc3, 0x04, 0xe0, 0x4f, 0x25, 0x0a, 0x2f, 0x84, 0x0c,
    0xad, 0x22, 0x3a, 0x67, 0x8a, 0x71, 0xa0, 0x7e, 0xbf, 0xef, 0xab, 0x0e, 0xa8, 0xc8, 0xf4, 0xb9,
    0xbc, 0x5b, 0x24, 0xf6, 0xb2, 0x32, 0xea, 0x75, 0x5a, 0x93, 0x1d, 0xea, 0x72, 0x95, 0x81, 0x45,
    0x9d, 0xe4, 0x83, 0x8e, 0x8f, 0xb0, 0xdd, 0x56, 0xd9, 0xf7, 0x1a, 0x2b, 0xe8, 0x08, 0xe6, 0xe9,
    0x13, 0xcd, 0x0e, 0x41, 0xd3, 0x7c, 0x94, 0xe5, 0xe8, 0xe5, 0xe0, 0xf6, 0x04, 0xa3, 0x44, 0x17,
    0xdb, 0xd1, 0xd6, 0xed, 0x05, 0xf4, 0xf0, 0xe3, 0xc2, 0xc4, 0x08, 0xae, 0x7f, 0x49, 0x40, 0x5c,
    0xa5, 0x92, 0x58, 0xa2, 0x75, 0x5f, 0x3f, 0x1f, 0x5e, 0x8d, 0x26, 0x3d, 0x76, 0x32, 0xa2, 0x5c,
    0x93, 0x17, 0x47, 0xe4, 0xad, 0xfb, 0xcb, 0x82, 0xc0, 0xc8, 0xb2, 0xa6, 0x4d, 0xf4, 0x77, 0x56,
    0xc1, 0x85, 0x53, 0x6f, 0x91, 0x0a, 0xb4, 0x48, 0x01, 0x48, 0xf8, 0x35, 0x2e, 0x2c, 0xd0, 0xdf,
    0x09, 0x07, 0xbc, 0xea, 0xbc, 0x3e, 0x5e, 0x25, 0x38, 0x8d, 0x62, 0xdd, 0x7f, 0xf4, 0x07, 0x7a,
    0x71, 0x55, 0x63, 0xfd, 0xa5, 0x65, 0x80, 0xd8, 0x92, 0xe2, 0x3e, 0x69, 0x22, 0x43, 0x19, 0x23,
    0x9d, 0x6a, 0xc1, 0x3e, 0x95, 0x7e, 0xa2, 0x1d, 0x58, 0x0a, 0xc0, 0x02, 0x25, 0x0a, 0x20, 0x88,
    0xec, 0x70, 0x50, 0x42, 0xc6, 0x73, 0x31, 0xdd, 0xf0, 0x46, 0x9d, 0xba, 0x43, 0xd7, 0xaa, 0x72,
    0x7b, 0xf4, 0x7f, 0x09, 0x47, 0x86, 0xb4, 0x7b, 0x70, 0x06, 0xc7, 0xf9, 0x7c, 0x11, 0xa8, 0xeb,
    0xa9, 0xef, 0x73, 0xdf, 0x01, 0x32, 0x28, 0x94, 0x21, 0xee, 0xec, 0x1d, 0x07, 0x49, 0xdb, 0x0c,
    0x17, 0xb5, 0x49, 0x7e, 0x80, 0xe6, 0x59, 0xf4, 0xe9, 0x85, 0xbe, 0x7e, 0xe6, 0x1f, 0x5c, 0x1a,
    0x60, 0xd1, 0xf7, 0x02, 0xe2, 0x88, 0xf8, 0x63, 0xef, 0xf6, 0x59, 0xd8, 0x5c, 0x0b, 0x6b, 0x3e,
    0xaf, 0x3b, 0x13, 0x30, 0x7b, 0x3c, 0x70, 0x93, 0x80, 0xcc, 0xef, 0x8a, 0x6c, 0xa1, 0x2f, 0x20,
    0x96, 0xf3, 0xf5, 0x14, 0x63, 0x62, 0x89, 0x5f, 0xb0, 0xe9, 0xa4, 0x53, 0x0a, 0x25, 0x0e, 0xa7,
    0x29, 0x16, 0xe0, 0x6d, 0xca, 0x05, 0xce, 0xd8, 0x72, 0xcf, 0x5c, 0x9b, 0x22, 0xb3, 0x56, 0xbf,
    0xd3, 0xcb, 0xd6, 0x50, 0x75, 0xa8, 0xd7, 0x48, 0x8a, 0xab, 0x3d, 0x5a, 0x61, 0x7e, 0xe9, 0x84,
    0x48, 0x1f, 0x1d, 0xd7, 0xbb, 0x1b, 0xd0, 0x13, 0x0a, 0xdb, 0xbc, 0xe8, 0x2c, 0xdf, 0xe1, 0x05,
    0xfc, 0x6f, 0x59, 0xb0, 0x30, 0xbc, 0x80, 0x40, 0x54, 0xae, 0xe3, 0x2c, 0xc4, 0x84, 0x18, 0xda,
    0x2e, 0xbb, 0xae, 0x19, 0x56, 0x86, 0x5b, 0x03, 0x00, 0x40, 0x58, 0x03, 0x67, 0x0f, 0xe4, 0x00,
    0xee, 0x03, 0xf5, 0x9a, 0x16, 0x98, 0x65, 0xa3, 0x90, 0x4f, 0x6d, 0x1e, 0x96, 0x73, 0x46, 0x51,
    0xe5, 0x37, 0xee, 0x06, 0x98, 0xc9, 0xbc, 0x7a, 0x04, 0x7e, 0x45, 0xea, 0x65, 0x0c, 0xe7, 0xcb,
    0xa4, 0x19, 0x1f, 0x52, 0x1b, 0x29, 0xdc, 0xb1, 0x67, 0xee, 0x31, 0x76, 0x20, 0x12, 0x4b, 0x1d,
    0xee, 0x4a, 0x3e, 0x88, 0x65, 0xe8, 0xab, 0x47, 0xf7, 0x50, 0xb9, 0xe2, 0xe0, 0x75, 0x91, 0xcd,
    0x0a, 0x49, 0x10, 0xfd, 0xb0, 0x62, 0x7b, 0x73, 0x9e, 0x3f, 0xa5, 0xfc, 0x99, 0x97, 0x8a, 0x7a,
    0x23, 0xe2, 0xa2, 0x32, 0xba, 0x14, 0xb2, 0xcf, 0x23, 0x5a, 0x09, 0x26, 0x36, 0x17, 0x33, 0xfb,
    0x11, 0x30, 0xd9, 0xcb, 0x23, 0x66, 0x7a, 0xac, 0x69, 0x24, 0x2e, 0x76, 0xc8, 0x49, 0x5d, 0x0a,
    0xac, 0xd6, 0x5d, 0x63, 0x0c, 0x37, 0xdf, 0x0c, 0x40, 0x7e, 0x66, 0x83, 0xa8, 0x6a, 0xaf, 0xf9,
    0xed, 0x81, 0xa1, 0xab, 0xe9, 0xdb, 0xf2, 0xe2, 0xff, 0xa7, 0x3f, 0xb1, 0x48, 0x29, 0x8a, 0x6d,
    0x30, 0x1c, 0xca, 0x7d, 0xac, 0x94, 0x95, 0x1b, 0xa2, 0x07, 0x92, 0xbf, 0x34, 0x2b, 0x82, 0x5b,
    0xcb, 0xb6, 0xe4, 0xd0, 0xce, 0x76, 0x00, 0x5f, 0xa3, 0x0a, 0x29, 0xec, 0x18, 0x48, 0x24, 0x75,
    0xd3, 0xed, 0xb9, 0x6e, 0x78, 0x6f, 0xfd, 0x7d, 0x9e, 0x1c, 0xab, 0xf5, 0xec, 0x7b, 0x24, 0xfa,
    0x26, 0x90, 0xf8, 0x1a, 0x76, 0x80, 0xa2, 0xed, 0x58, 0x74, 0x60, 0x86, 0x30, 0x8a, 0x04, 0xc0,
    0x7f, 0xe1, 0x53, 0x5a, 0x11, 0xfe, 0xc4, 0x37, 0xc8, 0xef, 0x34, 0x42, 0x59, 0xbc, 0x88, 0x80,
    0xbd, 0x01, 0x7e, 0x19, 0x8d, 0xdb, 0x8b, 0x2d, 0xd7, 0x94, 0x39, 0xa9, 0xb1, 0x20, 0x83, 0x69,
    0xf8, 0x97, 0x71, 0x63, 0x2f, 0xb2, 0x79, 0xe5, 0x6c, 0xff, 0x7d, 0x01, 0x11, 0xb6, 0x2f, 0xd7,
    0xc0, 0x39, 0x1b, 0x33, 0xa6, 0x6d, 0x9e, 0x6b, 0x0d, 0x8b, 0xc2, 0x7c, 0xde, 0xa7, 0xa9, 0xcb,
    0x6a, 0xb4, 0x12, 0x71, 0xa2, 0x34, 0x5a, 0x3c, 0xf7, 0xa1, 0xcb, 0x16, 0x76, 0x9d, 0xa7, 0xeb,
    0x2b, 0x32, 0x90, 0xd7, 0x32, 0x14, 0x7f, 0x34, 0xad, 0xe6, 0xbf, 0xd9, 0x8a, 0x86, 0x9a, 0x5e,
    0x9b, 0x7c, 0x03, 0xba, 0x37, 0x47, 0xf7, 0xd3, 0xbb, 0x19, 0x0b, 0xd8, 0x57, 0xb9, 0x68, 0x70,
    0xe6, 0x77, 0x03, 0xce, 0xba, 0x28, 0xe7, 0x8a, 0x50, 0x1b, 0xc9, 0x31, 0x8f, 0x8b, 0x12, 0xdd,
    0x74, 0x81, 0x5c, 0xe0, 0xe8, 0x8d, 0x21, 0x9e, 0x88, 0xca, 0xc7, 0x5f, 0xce, 0x81, 0x56, 0x29,
    0x56, 0xce, 0xb6, 0xad, 0xbb, 0xa8, 0x93, 0x50, 0xf5, 0xc8, 0xdf, 0x71, 0x94, 0x1d, 0xff, 0x71,
    0x46, 0x49, 0xe7, 0x24, 0x75, 0xa9, 0x89, 0x37, 0xbd, 0x39, 0x2a, 0x62, 0xfd, 0x0c, 0xb8, 0x49,
    0x5f, 0x34, 0x58, 0x80, 0x66, 0x14, 0x28, 0xdb, 0xa0, 0x59, 0x3b, 0x3b, 0xad, 0x47, 0x48, 0xe1,
    0xb5, 0x73, 0x8a, 0xc2, 0x80, 0xd6, 0xa4, 0x11, 0x2d, 0x2f, 0xb9, 0xc3, 0x94, 0x79, 0xfb, 0xad,
    0x7d, 0xb1, 0xe5, 0x74, 0xba, 0xc3, 0x93, 0xf0, 0xf5, 0x75, 0x4e, 0x01, 0x54, 0x01, 0x7b, 0x83,
    0x90, 0x3e, 0x03, 0xd6, 0x48, 0x96, 0x81, 0x9c, 0xcd, 0x6d, 0x41, 0x20, 0x74, 0xb9, 0x06, 0xc9,
    0x04, 0xe6, 0xa7, 0x0d, 0x1a, 0x2a, 0xeb, 0xc1, 0xe2, 0x11, 0x24, 0x13, 0x0e, 0x80, 0xb7, 0x88,
    0x52, 0x32, 0xf1, 0xf9, 0xb4, 0xc5, 0x5b, 0xe5, 0x66, 0x35, 0x99, 0x8e, 0x40, 0x75, 0xff, 0x9f,
    0x25, 0x91, 0xd5, 0xde, 0x4b, 0x8c, 0x61, 0x52, 0xd6, 0xf1, 0x61, 0xaa, 0x01, 0x0d, 0x7e, 0x84,
    0x48, 0xa2, 0x44, 0x60, 0xb3, 0x09, 0xa4, 0x4b, 0x6e, 0x29, 0xe0, 0x7a, 0xb5, 0x66, 0xbc, 0x10,
    0xfc, 0x58, 0x06, 0x39, 0x22, 0xc7, 0xb2, 0x8a, 0x2d, 0xa8, 0x35, 0x41, 0xde, 0x98, 0x49, 0xc6,
    0x81, 0x8b, 0x7f, 0x21, 0x95, 0xf4, 0x38, 0x4a, 0x20, 0xbf, 0x30, 0xe8, 0x94, 0x87, 0x99, 0x88,
    0x62, 0x53, 0x95, 0x7f, 0x03, 0xa0, 0x85, 0x1a, 0x52, 0x0d, 0x7d, 0x2f, 0xa0, 0x23, 0xaa, 0x76,
};

static const uint8_t sMessageEncodingTest0550_ExpectedEncoding[] =
{
    0x30, 0x21, 0x6c, 0x47, 0x19, 0x0f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xc7, 0x25,
    0xe3, 0xf4, 0x4f, 0x6c, 0x6b, 0x05, 0xa3, 0x28, 0xb7, 0x2e, 0x6b, 0x8c, 0x66, 0xd4, 0xc9, 0xe8,
    0xdf, 0x86, 0xad, 0xcf, 0xcd, 0xc4, 0x0c, 0x2b, 0xb8, 0xd4, 0x90, 0x70, 0x4d, 0xb9, 0x0c, 0xbd,
    0xdc, 0x7a, 0xfa, 0xf3, 0x91, 0xe5, 0xfb, 0xb6, 0x65, 0xa5, 0x27, 0xbc, 0xf2, 0xc6, 0x2f, 0x7c,
    0x54, 0xc2, 0x9a, 0x04, 0x89, 0x6a, 0xb0, 0xf2, 0x93, 0x40, 0x0b, 0xc8, 0x98, 0x71, 0xfd, 0x10,
    0x59, 0x7d, 0x13, 0x9c, 0x76, 0x65, 0x61, 0x5c, 0xa1, 0x4e, 0x4e, 0xd9, 0x8c, 0x98, 0x8e, 0x09,
    0x5d, 0x23, 0xf9, 0x15, 0x81, 0x5c, 0x2a, 0x2d, 0x6f, 0x5b, 0x7f, 0x22, 0xa4, 0xe1, 0x81, 0x17,
    0xf6, 0x8a, 0xc4, 0x10, 0x1c, 0x26, 0xb1, 0xf4, 0x55, 0x4a, 0x7b, 0xf6, 0xc4, 0xc3, 0x64, 0x4e,
    0x51, 0x58, 0xb0, 0xb4, 0x93, 0x11, 0xc1, 0x74, 0xb5, 0xc9, 0x60, 0x93, 0xaa, 0x28, 0x3f, 0xb7,
    0x7a, 0xdd, 0xe5, 0xdf, 0x84, 0x70, 0x64, 0x7e, 0x5e, 0xf1, 0x14, 0x62, 0x6f, 0x98, 0x4f, 0xeb,
    0xf7, 0x48, 0x4c, 0x73, 0x85, 0xa7, 0xc5, 0x1b, 0xf4, 0x98, 0xda, 0x8c, 0xed, 0x48, 0xac, 0xd9,
    0x97, 0xe4, 0x9e, 0x8c, 0x4c, 0x82, 0x3d, 0x85, 0x72, 0x9f, 0x55, 0x17, 0x7d, 0xd5, 0x42, 0xee,
    0x49, 0x13, 0xb6, 0x0d, 0xfd, 0x09, 0x44, 0x63, 0xea, 0x86, 0xfe, 0xe4, 0xcf, 0xf4, 0xc9, 0x9e,
    0x19, 0x6a, 0x3f, 0xac, 0x70, 0xa5, 0x6f, 0xb2, 0x6d, 0xfa, 0x61, 0xb2, 0x1c, 0x74, 0x91, 0x3a,
    0xb0, 0x3e, 0x68, 0x73, 0x95, 0xa9, 0xc5, 0xd9, 0x5c, 0x1a, 0x17, 0x3f, 0xfa, 0x56, 0xe9, 0x88,
    0x9e, 0xca, 0x6b, 0x98, 0x3a, 0x84, 0xba, 0xba, 0xf8, 0xb0, 0x3b, 0xa0, 0xd7, 0xd7, 0x78, 0xab,
    0x92, 0x2d, 0xa2, 0xc2, 0x3e, 0x63, 0x8f, 0xfd, 0xe2, 0x1c, 0x58, 0x87, 0x03, 0xf8, 0x0e, 0xeb,
    0x82, 0xf0, 0xf8, 0xe0, 0xda, 0xc4, 0xac, 0xf8, 0xb8, 0x93, 0xdb, 0xa3, 0xc7, 0x9c, 0x29, 0xad,
    0x4a, 0x15, 0x57, 0x23, 0x22, 0xd9, 0x18, 0x17, 0x00, 0x94, 0x5d, 0xda, 0xff, 0x80, 0x0b, 0xdb,
    0x02, 0x19, 0x90, 0xcd, 0x1e, 0xb9, 0x43, 0x28, 0xd1, 0x78, 0xc1, 0x25, 0x93, 0x4a, 0x87, 0x3e,
    0xa4, 0x26, 0x3a, 0x4c, 0x26, 0x58, 0x80, 0x86, 0x8c, 0x13, 0x09, 0x98, 0xc2, 0x4b, 0x53, 0x93,
    0x9c, 0xee, 0x11, 0xd7, 0xa6, 0x19, 0x77, 0x7a, 0xd1, 0x96, 0x63, 0x00, 0xa1, 0x9d, 0xd4, 0xa4,
    0x53, 0xff, 0x65, 0x24, 0xbb, 0x4f, 0x1e, 0xd3, 0xdf, 0x09, 0x02, 0x2c, 0x70, 0xba, 0xbb, 0x9d,
    0xe1, 0x7e, 0x84, 0xcc, 0x3d, 0x6d, 0x66, 0xad, 0xdf, 0xf8, 0xfb, 0xae, 0xfc, 0x35, 0x1a, 0x5d,
    0x97, 0x7f, 0x0b, 0xc6, 0x02, 0x01, 0x05, 0x09, 0xfc, 0x96, 0x1b, 0xfd, 0xf9, 0xb8, 0xc7, 0xb8,
    0xce, 0xd0, 0xcd, 0x60, 0x31, 0xee, 0x85, 0xe9, 0xe9, 0xa7, 0x82, 0xf5, 0x6d, 0xec, 0x48, 0x53,
    0x6c, 0xa3, 0x7e, 0x5f, 0x7c, 0xc0, 0x90, 0xe3, 0xd7, 0x52, 0xaa, 0x61, 0xb0, 0xa4, 0xce, 0x07,
    0x36, 0x65, 0x6d, 0xdc, 0x4c, 0x2c, 0x15, 0x81, 0x32, 0xa6, 0x85, 0x51, 0xab, 0x5a, 0xd0, 0x01,
    0xa0, 0x51, 0x1d, 0xe7, 0x16, 0x06, 0xd6, 0x0e, 0x57, 0x7f, 0x60, 0xa4, 0xda, 0xc2, 0xb6, 0x24,
    0xae, 0xe7, 0xe2, 0x4b, 0x50, 0xe7, 0x71, 0x40, 0xee, 0xf0, 0x84, 0x40, 0x57, 0x64, 0x5e, 0x76,
    0x66, 0x26, 0x53, 0x29, 0x45, 0xcb, 0x63, 0xb9, 0x87, 0xa0, 0xb3, 0x79, 0x9d, 0x2a, 0x85, 0xf6,
    0xf7, 0xf7, 0x6a, 0x65, 0xa6, 0xe2, 0xd6, 0x13, 0xb9, 0xf1, 0x11, 0xe7, 0x35, 0x4f, 0xbc, 0xf0,
    0x1d, 0x03, 0x42, 0xd0, 0xfa, 0xa7, 0x86, 0x1b, 0x11, 0x44, 0x2f, 0x61, 0x4e, 0x15, 0xd9, 0x23,
    0xed, 0xcc, 0xaf, 0x61, 0x00, 0x0f, 0x52, 0xa4, 0x7a, 0xde, 0xe1, 0xab, 0x45, 0xe2, 0xa0, 0x7f,
    0x71, 0x93, 0xc7, 0xae, 0x93, 0xc3, 0xd7, 0xe1, 0x85, 0xf6, 0xf3, 0x05, 0x39, 0x83, 0x30, 0xc6,
    0x01, 0x29, 0x58, 0xb1, 0x92, 0x58, 0xc3, 0x80, 0x14, 0x9d, 0xa3, 0x38, 0xa2, 0x75, 0xa2, 0x91,
    0x6f, 0x35, 0x68, 0xc6, 0x1c, 0xe0, 0x19, 0xfd, 0xed, 0x81, 0x39, 0xf0, 0x56, 0x57, 0x3c, 0x8e,
    0xab, 0xfc, 0xed, 0xa6, 0x2b, 0xa9, 0x24, 0xb0, 0x6f, 0x41, 0x2d, 0xe8, 0xbe, 0x51, 0x8e, 0xa8,
    0x01, 0xff, 0xbf, 0x99, 0x21, 0x47, 0x4d, 0x3b, 0xc5, 0xba, 0x6d, 0x21, 0x90, 0x24, 0x6b, 0xc2,
    0xd8, 0xce, 0x1a, 0xf9, 0xc8, 0x42, 0x7f, 0xc3, 0x53, 0x6d, 0x3b, 0xb8, 0x11, 0xa8, 0x7e, 0xf1,
    0x54, 0xff, 0xdd, 0xcc, 0x9f, 0x26, 0x84, 0x64, 0xb6, 0x75, 0x2d, 0xcc, 0xa1, 0x14, 0x04, 0xc5,
    0x00, 0x9f, 0x57, 0x0d, 0x57, 0x17, 0x76, 0x22, 0x9e, 0x5b, 0x68, 0xce, 0x50, 0x73, 0xac, 0x95,
    0xe0, 0xc9, 0xc8, 0xf6, 0xbd, 0xe2, 0x19, 0xd1, 0xa0, 0xa2, 0xd8, 0x20, 0x3f, 0xde, 0xb8, 0xec,
    0x57, 0xc1, 0x77, 0x4b, 0xd9, 0xb7, 0x89, 0x1a, 0xc7, 0x6e, 0x02, 0x67, 0x97, 0x4d, 0x54, 0xc1,
    0xd7, 0x1d, 0x74, 0xd2, 0xb0, 0xe6, 0xc2, 0xcc, 0x58, 0x74, 0x9e, 0x9f, 0x2d, 0x32, 0x02, 0xf1,
    0x50, 0x58, 0x17, 0xd8, 0x0c, 0xd4, 0xd6, 0x7d, 0xac, 0x87, 0xf8, 0x56, 0x12, 0xe8, 0xa0, 0xc7,
    0xe5, 0x7b, 0xf0, 0xc5, 0x4f, 0x0d, 0x39, 0x4f, 0xfc, 0x31, 0x8f, 0x9b, 0x61, 0xe8, 0x76, 0xd0,
    0x14, 0xac, 0x3a, 0xd3, 0xa8, 0x4c, 0x77, 0x24, 0xe9, 0xd2, 0x43, 0x7e, 0x56, 0x80, 0x20, 0xd8,
    0x92, 0xba, 0xa5, 0x58, 0x55, 0x95, 0x2e, 0x65, 0xd2, 0x2d, 0x54, 0xe4, 0x78, 0x31, 0xdd, 0x57,
    0x2b, 0xe7, 0xee, 0x0b, 0xd1, 0x93, 0x21, 0x3a, 0xc1, 0x60, 0xf7, 0xc1, 0x25, 0x1b, 0x01, 0x7f,
    0x80, 0xfd, 0x84, 0x28, 0x0a, 0xf2, 0x99, 0xfb, 0xe6, 0x43, 0xee, 0xb8, 0xb0, 0xa4, 0x73, 0xbf,
    0x46, 0x34, 0x7a, 0xb0, 0x80, 0x64, 0xb5, 0xeb, 0x8c, 0xe3, 0x32, 0xe6, 0x17, 0x4a, 0xa7, 0xdc,
    0x2f, 0xc0, 0x21, 0xb0, 0x78, 0x19, 0xc0, 0xb2, 0xef, 0xb8, 0xe4, 0x2e, 0x85, 0x6e, 0xaf, 0xa5,
    0x13, 0xcb, 0x39, 0x66, 0x26, 0x38, 0x89, 0x8e, 0x38, 0x99, 0x14, 0xb4, 0x13, 0xca, 0x7b, 0xb7,
    0xef, 0xdc, 0x0e, 0x3f, 0x52, 0x40, 0xf4, 0x35, 0xc1, 0x21, 0xe1, 0xf2, 0x20, 0xb4, 0x37, 0x95,
    0x3e, 0xba, 0x62, 0x81, 0x91, 0x35, 0xe0, 0x8a, 0xf1, 0x3c, 0x8a, 0xc8, 0x0b, 0x67, 0x59, 0xd1,
    0x46, 0x1f, 0x03, 0x24, 0xcf, 0x39, 0x54, 0x66, 0xc6, 0x5d, 0x7b, 0x60, 0x14, 0xa1, 0xbe, 0x51,
    0x0a, 0xeb, 0xb6, 0x4a, 0x84, 0xe0, 0xf7, 0xf3, 0x5f, 0x96, 0x70, 0x81, 0x2a, 0xda, 0xb3, 0x0a,
    0xc2, 0x1e, 0xf1, 0x21, 0xe4, 0xd1, 0x31, 0x23, 0x05, 0x79, 0xbe, 0xcf, 0x1f, 0x97, 0x85, 0xcd,
    0xba, 0x92, 0x4b, 0xf7, 0xd0, 0x62, 0x98, 0x64, 0x76, 0x2b, 0xa0, 0x45, 0xd3, 0xce, 0x27, 0xe4,
    0x41, 0x22, 0x19, 0xce, 0x1a, 0x8d, 0xcd, 0xb4, 0x4e, 0xec, 0x04, 0xfa, 0x26, 0xda, 0x93, 0xfb,
    0x3d, 0x34, 0x4b, 0xfd, 0x70, 0xe7, 0x9c, 0xd7, 0x8d, 0x4f, 0xeb, 0x7b, 0xee, 0x94, 0x3f, 0x46,
    0x8a, 0x62, 0x9e, 0x70, 0x59, 0x12, 0x94, 0x30, 0x25, 0xa6, 0x36, 0x28, 0x97, 0x63, 0x77, 0x05,
    0x88, 0x0e, 0x83, 0x85, 0xe4, 0x65, 0xbb, 0x6f, 0x31, 0x54, 0x98, 0xfe, 0x49, 0x60, 0xf7, 0x0c,
    0xa2, 0x77, 0xa9, 0xa4, 0x84, 0xb1, 0x0f, 0xd9, 0x10, 0x3e, 0xea, 0x81, 0xcb, 0xbd, 0x24, 0x07,
    0x35, 0xbf, 0x12, 0x1b, 0x4a, 0x5f, 0x93, 0x24, 0x70, 0x6c, 0xad, 0x54, 0xfe, 0x7e, 0x16, 0x19,
};

static const MessageEncodingTestVector sMessageEncodingTest0550 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0F19476C,
        kWeaveHeaderFlag_DestNodeId,
        0x25C7,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0550_EncryptionKey,
    sMessageEncodingTest0550_Payload,
    sizeof(sMessageEncodingTest0550_Payload),
    sMessageEncodingTest0550_ExpectedEncoding,
    sizeof(sMessageEncodingTest0550_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0551_Payload[] =
{
    0x23, 0x57, 0x26, 0x89, 0xa9, 0xd8, 0x0c, 0x98, 0xcd, 0xde, 0x48, 0x77, 0xbd, 0x3f, 0x1d, 0x6d,
    0xad, 0x0b, 0xbc, 0xec, 0x66, 0x71, 0xc3, 0x05, 0xd0, 0x46, 0x31, 0x9e, 0x2b, 0xe6, 0xd4, 0xc2,
    0x65, 0x0c, 0x66, 0x41, 0xbd, 0x6d, 0xcf, 0x1d, 0x4a, 0x00, 0xb7, 0xf0, 0xad, 0x9e, 0x9a, 0xe1,
    0x4a, 0xa4, 0x79, 0x21, 0x2d, 0x98, 0x21, 0xd6, 0x33, 0xb3, 0x88, 0xbb, 0x6f, 0x51, 0x04, 0x6c,
    0xb5, 0xe8, 0x2e, 0xdf, 0xe7, 0xc4, 0xc0, 0x48, 0x74, 0xd7, 0x8b, 0x9c, 0xfa, 0xa0, 0xa8, 0x45,
    0x39, 0xac, 0xdb, 0xa1, 0x4a, 0x1f, 0xe7, 0x1f, 0x75, 0xa6, 0xc8, 0x66, 0xf2, 0x95, 0x67, 0xf1,
    0xa2, 0x96, 0x6d, 0x5d, 0xc6, 0x3b, 0x19, 0x76, 0x4c, 0x95, 0x0d, 0xfc, 0x05, 0xa9, 0xf4, 0x45,
    0x56, 0x33, 0xf2, 0x7f, 0x30, 0x9e, 0x93, 0x94, 0xf2, 0x9d, 0xa6, 0xe6, 0x8a, 0x42, 0xc7, 0x3f,
    0x86, 0x42, 0x45, 0xff, 0x7a, 0x98, 0x65, 0x19, 0x99, 0xc3, 0x8b, 0x83, 0xc6, 0xf5, 0x8b, 0x0f,
    0x20, 0x6a, 0xb9, 0x3a, 0xb9, 0x58, 0x84, 0xd0, 0xea, 0x77, 0x16, 0xcf, 0x33, 0xfa, 0xb9, 0x63,
    0x7e, 0xf5, 0xfe, 0xb2, 0xaa, 0xf9, 0x7d, 0x91, 0xe1, 0x12, 0xc2, 0x6d, 0x67, 0x1e, 0xf4, 0x79,
    0xcd, 0xf7, 0xdf, 0x07, 0xf5, 0xe8, 0x86, 0xce, 0x20, 0x0b, 0x9b, 0x09, 0xa8, 0x42, 0xb6, 0x3c,
    0x7b, 0xe7, 0x03, 0xbc, 0x11, 0x7b, 0xbf, 0x88, 0x47, 0x85, 0x79, 0xd0, 0xdf, 0x92, 0xbb, 0x9d,
    0xdd, 0x11, 0x46, 0x98, 0xc5, 0x1d, 0x08, 0x62, 0x8c, 0xb4, 0x56, 0x9e, 0xea, 0x61, 0x27, 0xc5,
    0x18, 0x9c, 0xc8, 0xa6, 0x1c, 0x62, 0x99, 0xa4, 0xc0, 0xea, 0xa0, 0xa5, 0x1d, 0x3d, 0x6e, 0xec,
    0x8f, 0xab, 0xbb, 0x03, 0x45, 0x64, 0xd1, 0x67, 0x48, 0xd7, 0x6a, 0x87, 0x4d, 0x29, 0xa0, 0x2f,
    0x63, 0x5c, 0x1d, 0x21, 0x97, 0xa9, 0x09, 0x88, 0xd1, 0x1b, 0xc5, 0x90, 0x84, 0x50, 0x1c, 0x98,
    0xc3, 0xe2, 0x05, 0x5e, 0xca, 0xde, 0x4d, 0x64, 0x66, 0xec, 0x94, 0xbb, 0x2b, 0x9e, 0x91, 0x4b,
    0xec, 0x65, 0x83, 0x04, 0xb0, 0xba, 0xf5, 0x8c, 0x88, 0xf6, 0x3c, 0x54, 0x1b, 0x38, 0x43, 0x82,
    0x41, 0xba, 0x55, 0xc9, 0xfd, 0x56, 0x0e, 0x86, 0x19, 0xc8, 0x7c, 0x15, 0x57, 0x00, 0x98, 0x2c,
    0xb1, 0x75, 0x79, 0x69, 0xf6, 0xb7, 0xbf, 0x77, 0x3f, 0x2f, 0x4c, 0x3c, 0x0e, 0x8d, 0x36, 0x87,
    0xb9, 0xe6, 0xd0, 0x67, 0xc5, 0x57, 0x2a, 0x36, 0x6a, 0xdf, 0x33, 0x56, 0x3b, 0xc0, 0x2f, 0x66,
    0xfa, 0x28, 0xac, 0x1f, 0xf2, 0xc4, 0x99, 0x9c, 0x0e, 0xbd, 0x2e, 0xc5, 0x07, 0x70, 0x2b, 0x5f,
    0x1f, 0x49, 0x90, 0xa6, 0x36, 0x94, 0xc8, 0x51, 0x19, 0xfc, 0x8c, 0xc6, 0x09, 0x76, 0x3e, 0x64,
    0x2e, 0x70, 0xd5, 0xf4, 0x36, 0xcd, 0x37, 0x41, 0x6e, 0xdc, 0xee, 0xb3, 0xcb, 0x48, 0xf9, 0x4e,
    0x2a, 0x8b, 0xdc, 0xcb, 0x50, 0xf7, 0x35, 0xf1, 0xd4, 0xee, 0xe4, 0x2d, 0xf8, 0x69, 0x80, 0x50,
    0x61, 0x7c, 0x18, 0xc1, 0x86, 0x03, 0x0f, 0x5e, 0xe9, 0x59, 0xf8, 0xff, 0x05, 0x58, 0xfa, 0xb5,
    0x7d, 0xba, 0xab, 0xc7, 0x4e, 0xac, 0xf0, 0x94, 0x2b, 0x05, 0x08, 0xc7, 0x72, 0x95, 0xda, 0x36,
    0x7b, 0x6b, 0xac, 0xef, 0x51, 0xc2, 0x13, 0x3b, 0xe3, 0x07, 0xc5, 0x22, 0x1a, 0x02, 0x4b, 0xda,
    0x9f, 0xdd, 0xa6, 0x85, 0x01, 0xdd, 0x9d, 0x1f, 0xee, 0xb9, 0x59, 0x1e, 0x0f, 0xfb, 0x05, 0xbb,
    0x4e, 0x73, 0x91, 0xb6, 0xee, 0xc1, 0x5f, 0xa1, 0x29, 0xaa, 0x88, 0x00, 0x14, 0xfa, 0xf4, 0x8f,
    0x3d, 0x7c, 0x63, 0xa7, 0xa6, 0xd5, 0x33, 0x3c, 0x76, 0x5d, 0x48, 0x8c, 0x74, 0xa9, 0x94, 0x83,
    0x0f, 0x22, 0x73, 0xe2, 0x0b, 0xa3, 0x83, 0x79, 0x63, 0x4f, 0x44, 0xd2, 0x16, 0x08, 0x98, 0x9b,
    0x08, 0x1f, 0x8f, 0x39, 0xa2, 0x9b, 0xff, 0x27, 0xc4, 0x39, 0xcb, 0xfd, 0xbf, 0xe7, 0x0b, 0x10,
    0x00, 0x1a, 0x38, 0xa4, 0x4e, 0x62, 0x51, 0x13, 0x33, 0x22, 0x6e, 0x0c, 0x89, 0x51, 0x3e, 0x9d,
    0xb2, 0x6d, 0xcc, 0xe2, 0x1b, 0xe1, 0xf8, 0x3f, 0xdc, 0x09, 0xa1, 0x50, 0xfb, 0x0e, 0x56, 0x46,
    0x1a, 0x83, 0x8b, 0x07, 0xf6, 0x8d, 0xb7, 0x57, 0x4a, 0xbe, 0xc4, 0x2f, 0x89, 0xda, 0xec, 0x84,
    0xf3, 0x33, 0x5d, 0x6f, 0x6b, 0xc7, 0x54, 0xf5, 0xc9, 0x95, 0x2f, 0x8e, 0x43, 0x85, 0x2a, 0xb2,
    0x96, 0xe3, 0x55, 0x72, 0x2e, 0x2e, 0xb5, 0xaa, 0x76, 0x35, 0x37, 0xa0, 0x2c, 0x4a, 0xd3, 0xb3,
    0xe2, 0xb8, 0x27, 0xea, 0x3e, 0x4f, 0xf9, 0x7b, 0x62, 0xee, 0x83, 0xf3, 0xee, 0xa2, 0x70, 0xa6,
    0x42, 0xb3, 0x3d, 0x51, 0x60, 0x1a, 0x5d, 0x5f, 0x75, 0x8b, 0xb7, 0xd8, 0x8a, 0x5e, 0x21, 0x86,
    0xbe, 0x72, 0x5c, 0xe1, 0xbb, 0x05, 0xe6, 0xc6, 0xe3, 0x35, 0xd5, 0x19, 0x8e, 0x2d, 0xe2, 0x78,
    0x98, 0x99, 0xf8, 0x53, 0x59, 0xa0, 0x44, 0xa8, 0xbe, 0x3d, 0x18, 0x24, 0xbb, 0x2c, 0xac, 0x2f,
    0xe7, 0x8c, 0xef, 0x0e, 0xe0, 0xc8, 0xa3, 0x48, 0xa9, 0xdb, 0x11, 0xf1, 0xab, 0x16, 0x5f, 0xfe,
    0x32, 0xf6, 0xdc, 0x86, 0x69, 0x84, 0xa0, 0x9b, 0x90, 0x4c, 0x55, 0x26, 0x8e, 0x15, 0x91, 0xc4,
    0x28, 0x40, 0x0e, 0x02, 0xed, 0xc9, 0x6f, 0x85, 0x96, 0x35, 0xbd, 0xa5, 0x23, 0xc1, 0xfb, 0x88,
    0xfa, 0x13, 0x5b, 0x0c, 0x69, 0x6d, 0xa7, 0x65, 0x36, 0xb2, 0x6d, 0x19, 0x55, 0xd4, 0x8a, 0x54,
    0x1e, 0x14, 0x31, 0x5a, 0x64, 0x9c, 0x54, 0xf8, 0x77, 0xbe, 0x81, 0x8c, 0xd7, 0x10, 0x02, 0x1e,
    0x13, 0x5e, 0x0e, 0x38, 0x23, 0xff, 0xf4, 0x26, 0x9c, 0x71, 0x70, 0xa6, 0x70, 0x7a, 0xdb, 0x76,
    0x35, 0x16, 0xdf, 0xf1, 0x7b, 0x45, 0x32, 0x8a, 0xaa, 0x8f, 0xc6, 0x84, 0xc5, 0xa2, 0x9e, 0x95,
    0x27, 0x9a, 0xb8, 0xe6, 0x56, 0x48, 0xe4, 0x32, 0x0d, 0xa8, 0xfb, 0x0b, 0x01, 0x2d, 0x42, 0x51,
    0x50, 0xdd, 0x26, 0x41, 0x31, 0xdd, 0xe1, 0xd8, 0xcd, 0x56, 0xa4, 0xe1, 0x19, 0x40, 0xb4, 0xda,
    0x6e, 0xbc, 0x15, 0x0f, 0xce, 0x84, 0xcd, 0x7f, 0xf3, 0xe0, 0xd7, 0xab, 0x9d, 0x35, 0xf7, 0xb0,
    0xac, 0x6c, 0x43, 0x1c, 0x09, 0xa8, 0x9d, 0xab, 0xf3, 0xc4, 0x56, 0xd3, 0x08, 0x14, 0x5b, 0x30,
    0x54, 0xa5, 0xd7, 0xb5, 0x67, 0x24, 0x98, 0x24, 0x48, 0x61, 0xdd, 0x07, 0xa8, 0x83, 0x75, 0x5a,
    0x3d, 0x80, 0x3c, 0x7c, 0x35, 0xad, 0x76, 0x25, 0xdb, 0x21, 0x63, 0x04, 0xac, 0xa8, 0x66, 0x22,
    0x47, 0x82, 0x9e, 0xd4, 0xa1, 0xdd, 0x87, 0x0d, 0xd5, 0xaf, 0x59, 0x78, 0x4f, 0x1e, 0x95, 0x59,
    0x53, 0xb2, 0x5a, 0xa6, 0x52, 0x11, 0x4a, 0xc8, 0x23, 0xca, 0x81, 0xdf, 0x24, 0xef, 0xff, 0x2f,
    0x64, 0x02, 0x6a, 0x89, 0xf8, 0xfa, 0xa0, 0xc8, 0x44, 0x7d, 0x40, 0x2b, 0xcb, 0x4a, 0x56, 0x6c,
    0xd5, 0xde, 0xdb, 0x8e, 0xbb, 0x5e, 0xe6, 0x9f, 0x75, 0xf3, 0xa9, 0x0a, 0x5e, 0xf0, 0x2a, 0xc5,
    0x8c, 0xda, 0x5a, 0x43, 0xba, 0x4e, 0xc1, 0x07, 0xa6, 0x15, 0x10, 0x4e, 0xa0, 0x5e, 0xad, 0x0c,
    0x79, 0xd5, 0xcd, 0xd8, 0x1f, 0x7b, 0x21, 0x4c, 0xab, 0x1a, 0x65, 0x8f, 0x39, 0x79, 0x8a, 0x77,
    0x42, 0x87, 0x3a, 0x11, 0x96, 0x78, 0xfb, 0x2d, 0x83, 0x25, 0x42, 0xbf, 0x0c, 0x62, 0x6c, 0x1a,
    0xf1, 0x19, 0x9f, 0x1d, 0x9d, 0xaf, 0x41, 0x64, 0xc3, 0xce, 0x8c, 0xf8, 0xe8, 0x78, 0xe7, 0x2f,
};

static const uint8_t sMessageEncodingTest0551_ExpectedEncoding[] =
{
    0x00, 0x26, 0xe9, 0xc9, 0x1e, 0xf2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x23, 0x57,
    0x26, 0x89, 0xa9, 0xd8, 0x0c, 0x98, 0xcd, 0xde, 0x48, 0x77, 0xbd, 0x3f, 0x1d, 0x6d, 0xad, 0x0b,
    0xbc, 0xec, 0x66, 0x71, 0xc3, 0x05, 0xd0, 0x46, 0x31, 0x9e, 0x2b, 0xe6, 0xd4, 0xc2, 0x65, 0x0c,
    0x66, 0x41, 0xbd, 0x6d, 0xcf, 0x1d, 0x4a, 0x00, 0xb7, 0xf0, 0xad, 0x9e, 0x9a, 0xe1, 0x4a, 0xa4,
    0x79, 0x21, 0x2d, 0x98, 0x21, 0xd6, 0x33, 0xb3, 0x88, 0xbb, 0x6f, 0x51, 0x04, 0x6c, 0xb5, 0xe8,
    0x2e, 0xdf, 0xe7, 0xc4, 0xc0, 0x48, 0x74, 0xd7, 0x8b, 0x9c, 0xfa, 0xa0, 0xa8, 0x45, 0x39, 0xac,
    0xdb, 0xa1, 0x4a, 0x1f, 0xe7, 0x1f, 0x75, 0xa6, 0xc8, 0x66, 0xf2, 0x95, 0x67, 0xf1, 0xa2, 0x96,
    0x6d, 0x5d, 0xc6, 0x3b, 0x19, 0x76, 0x4c, 0x95, 0x0d, 0xfc, 0x05, 0xa9, 0xf4, 0x45, 0x56, 0x33,
    0xf2, 0x7f, 0x30, 0x9e, 0x93, 0x94, 0xf2, 0x9d, 0xa6, 0xe6, 0x8a, 0x42, 0xc7, 0x3f, 0x86, 0x42,
    0x45, 0xff, 0x7a, 0x98, 0x65, 0x19, 0x99, 0xc3, 0x8b, 0x83, 0xc6, 0xf5, 0x8b, 0x0f, 0x20, 0x6a,
    0xb9, 0x3a, 0xb9, 0x58, 0x84, 0xd0, 0xea, 0x77, 0x16, 0xcf, 0x33, 0xfa, 0xb9, 0x63, 0x7e, 0xf5,
    0xfe, 0xb2, 0xaa, 0xf9, 0x7d, 0x91, 0xe1, 0x12, 0xc2, 0x6d, 0x67, 0x1e, 0xf4, 0x79, 0xcd, 0xf7,
    0xdf, 0x07, 0xf5, 0xe8, 0x86, 0xce, 0x20, 0x0b, 0x9b, 0x09, 0xa8, 0x42, 0xb6, 0x3c, 0x7b, 0xe7,
    0x03, 0xbc, 0x11, 0x7b, 0xbf, 0x88, 0x47, 0x85, 0x79, 0xd0, 0xdf, 0x92, 0xbb, 0x9d, 0xdd, 0x11,
    0x46, 0x98, 0xc5, 0x1d, 0x08, 0x62, 0x8c, 0xb4, 0x56, 0x9e, 0xea, 0x61, 0x27, 0xc5, 0x18, 0x9c,
    0xc8, 0xa6, 0x1c, 0x62, 0x99, 0xa4, 0xc0, 0xea, 0xa0, 0xa5, 0x1d, 0x3d, 0x6e, 0xec, 0x8f, 0xab,
    0xbb, 0x03, 0x45, 0x64, 0xd1, 0x67, 0x48, 0xd7, 0x6a, 0x87, 0x4d, 0x29, 0xa0, 0x2f, 0x63, 0x5c,
    0x1d, 0x21, 0x97, 0xa9, 0x09, 0x88, 0xd1, 0x1b, 0xc5, 0x90, 0x84, 0x50, 0x1c, 0x98, 0xc3, 0xe2,
    0x05, 0x5e, 0xca, 0xde, 0x4d, 0x64, 0x66, 0xec, 0x94, 0xbb, 0x2b, 0x9e, 0x91, 0x4b, 0xec, 0x65,
    0x83, 0x04, 0xb0, 0xba, 0xf5, 0x8c, 0x88, 0xf6, 0x3c, 0x54, 0x1b, 0x38, 0x43, 0x82, 0x41, 0xba,
    0x55, 0xc9, 0xfd, 0x56, 0x0e, 0x86, 0x19, 0xc8, 0x7c, 0x15, 0x57, 0x00, 0x98, 0x2c, 0xb1, 0x75,
    0x79, 0x69, 0xf6, 0xb7, 0xbf, 0x77, 0x3f, 0x2f, 0x4c, 0x3c, 0x0e, 0x8d, 0x36, 0x87, 0xb9, 0xe6,
    0xd0, 0x67, 0xc5, 0x57, 0x2a, 0x36, 0x6a, 0xdf, 0x33, 0x56, 0x3b, 0xc0, 0x2f, 0x66, 0xfa, 0x28,
    0xac, 0x1f, 0xf2, 0xc4, 0x99, 0x9c, 0x0e, 0xbd, 0x2e, 0xc5, 0x07, 0x70, 0x2b, 0x5f, 0x1f, 0x49,
    0x90, 0xa6, 0x36, 0x94, 0xc8, 0x51, 0x19, 0xfc, 0x8c, 0xc6, 0x09, 0x76, 0x3e, 0x64, 0x2e, 0x70,
    0xd5, 0xf4, 0x36, 0xcd, 0x37, 0x41, 0x6e, 0xdc, 0xee, 0xb3, 0xcb, 0x48, 0xf9, 0x4e, 0x2a, 0x8b,
    0xdc, 0xcb, 0x50, 0xf7, 0x35, 0xf1, 0xd4, 0xee, 0xe4, 0x2d, 0xf8, 0x69, 0x80, 0x50, 0x61, 0x7c,
    0x18, 0xc1, 0x86, 0x03, 0x0f, 0x5e, 0xe9, 0x59, 0xf8, 0xff, 0x05, 0x58, 0xfa, 0xb5, 0x7d, 0xba,
    0xab, 0xc7, 0x4e, 0xac, 0xf0, 0x94, 0x2b, 0x05, 0x08, 0xc7, 0x72, 0x95, 0xda, 0x36, 0x7b, 0x6b,
    0xac, 0xef, 0x51, 0xc2, 0x13, 0x3b, 0xe3, 0x07, 0xc5, 0x22, 0x1a, 0x02, 0x4b, 0xda, 0x9f, 0xdd,
    0xa6, 0x85, 0x01, 0xdd, 0x9d, 0x1f, 0xee, 0xb9, 0x59, 0x1e, 0x0f, 0xfb, 0x05, 0xbb, 0x4e, 0x73,
    0x91, 0xb6, 0xee, 0xc1, 0x5f, 0xa1, 0x29, 0xaa, 0x88, 0x00, 0x14, 0xfa, 0xf4, 0x8f, 0x3d, 0x7c,
    0x63, 0xa7, 0xa6, 0xd5, 0x33, 0x3c, 0x76, 0x5d, 0x48, 0x8c, 0x74, 0xa9, 0x94, 0x83, 0x0f, 0x22,
    0x73, 0xe2, 0x0b, 0xa3, 0x83, 0x79, 0x63, 0x4f, 0x44, 0xd2, 0x16, 0x08, 0x98, 0x9b, 0x08, 0x1f,
    0x8f, 0x39, 0xa2, 0x9b, 0xff, 0x27, 0xc4, 0x39, 0xcb, 0xfd, 0xbf, 0xe7, 0x0b, 0x10, 0x00, 0x1a,
    0x38, 0xa4, 0x4e, 0x62, 0x51, 0x13, 0x33, 0x22, 0x6e, 0x0c, 0x89, 0x51, 0x3e, 0x9d, 0xb2, 0x6d,
    0xcc, 0xe2, 0x1b, 0xe1, 0xf8, 0x3f, 0xdc, 0x09, 0xa1, 0x50, 0xfb, 0x0e, 0x56, 0x46, 0x1a, 0x83,
    0x8b, 0x07, 0xf6, 0x8d, 0xb7, 0x57, 0x4a, 0xbe, 0xc4, 0x2f, 0x89, 0xda, 0xec, 0x84, 0xf3, 0x33,
    0x5d, 0x6f, 0x6b, 0xc7, 0x54, 0xf5, 0xc9, 0x95, 0x2f, 0x8e, 0x43, 0x85, 0x2a, 0xb2, 0x96, 0xe3,
    0x55, 0x72, 0x2e, 0x2e, 0xb5, 0xaa, 0x76, 0x35, 0x37, 0xa0, 0x2c, 0x4a, 0xd3, 0xb3, 0xe2, 0xb8,
    0x27, 0xea, 0x3e, 0x4f, 0xf9, 0x7b, 0x62, 0xee, 0x83, 0xf3, 0xee, 0xa2, 0x70, 0xa6, 0x42, 0xb3,
    0x3d, 0x51, 0x60, 0x1a, 0x5d, 0x5f, 0x75, 0x8b, 0xb7, 0xd8, 0x8a, 0x5e, 0x21, 0x86, 0xbe, 0x72,
    0x5c, 0xe1, 0xbb, 0x05, 0xe6, 0xc6, 0xe3, 0x35, 0xd5, 0x19, 0x8e, 0x2d, 0xe2, 0x78, 0x98, 0x99,
    0xf8, 0x53, 0x59, 0xa0, 0x44, 0xa8, 0xbe, 0x3d, 0x18, 0x24, 0xbb, 0x2c, 0xac, 0x2f, 0xe7, 0x8c,
    0xef, 0x0e, 0xe0, 0xc8, 0xa3, 0x48, 0xa9, 0xdb, 0x11, 0xf1, 0xab, 0x16, 0x5f, 0xfe, 0x32, 0xf6,
    0xdc, 0x86, 0x69, 0x84, 0xa0, 0x9b, 0x90, 0x4c, 0x55, 0x26, 0x8e, 0x15, 0x91, 0xc4, 0x28, 0x40,
    0x0e, 0x02, 0xed, 0xc9, 0x6f, 0x85, 0x96, 0x35, 0xbd, 0xa5, 0x23, 0xc1, 0xfb, 0x88, 0xfa, 0x13,
    0x5b, 0x0c, 0x69, 0x6d, 0xa7, 0x65, 0x36, 0xb2, 0x6d, 0x19, 0x55, 0xd4, 0x8a, 0x54, 0x1e, 0x14,
    0x31, 0x5a, 0x64, 0x9c, 0x54, 0xf8, 0x77, 0xbe, 0x81, 0x8c, 0xd7, 0x10, 0x02, 0x1e, 0x13, 0x5e,
    0x0e, 0x38, 0x23, 0xff, 0xf4, 0x26, 0x9c, 0x71, 0x70, 0xa6, 0x70, 0x7a, 0xdb, 0x76, 0x35, 0x16,
    0xdf, 0xf1, 0x7b, 0x45, 0x32, 0x8a, 0xaa, 0x8f, 0xc6, 0x84, 0xc5, 0xa2, 0x9e, 0x95, 0x27, 0x9a,
    0xb8, 0xe6, 0x56, 0x48, 0xe4, 0x32, 0x0d, 0xa8, 0xfb, 0x0b, 0x01, 0x2d, 0x42, 0x51, 0x50, 0xdd,
    0x26, 0x41, 0x31, 0xdd, 0xe1, 0xd8, 0xcd, 0x56, 0xa4, 0xe1, 0x19, 0x40, 0xb4, 0xda, 0x6e, 0xbc,
    0x15, 0x0f, 0xce, 0x84, 0xcd, 0x7f, 0xf3, 0xe0, 0xd7, 0xab, 0x9d, 0x35, 0xf7, 0xb0, 0xac, 0x6c,
    0x43, 0x1c, 0x09, 0xa8, 0x9d, 0xab, 0xf3, 0xc4, 0x56, 0xd3, 0x08, 0x14, 0x5b, 0x30, 0x54, 0xa5,
    0xd7, 0xb5, 0x67, 0x24, 0x98, 0x24, 0x48, 0x61, 0xdd, 0x07, 0xa8, 0x83, 0x75, 0x5a, 0x3d, 0x80,
    0x3c, 0x7c, 0x35, 0xad, 0x76, 0x25, 0xdb, 0x21, 0x63, 0x04, 0xac, 0xa8, 0x66, 0x22, 0x47, 0x82,
    0x9e, 0xd4, 0xa1, 0xdd, 0x87, 0x0d, 0xd5, 0xaf, 0x59, 0x78, 0x4f, 0x1e, 0x95, 0x59, 0x53, 0xb2,
    0x5a, 0xa6, 0x52, 0x11, 0x4a, 0xc8, 0x23, 0xca, 0x81, 0xdf, 0x24, 0xef, 0xff, 0x2f, 0x64, 0x02,
    0x6a, 0x89, 0xf8, 0xfa, 0xa0, 0xc8, 0x44, 0x7d, 0x40, 0x2b, 0xcb, 0x4a, 0x56, 0x6c, 0xd5, 0xde,
    0xdb, 0x8e, 0xbb, 0x5e, 0xe6, 0x9f, 0x75, 0xf3, 0xa9, 0x0a, 0x5e, 0xf0, 0x2a, 0xc5, 0x8c, 0xda,
    0x5a, 0x43, 0xba, 0x4e, 0xc1, 0x07, 0xa6, 0x15, 0x10, 0x4e, 0xa0, 0x5e, 0xad, 0x0c, 0x79, 0xd5,
    0xcd, 0xd8, 0x1f, 0x7b, 0x21, 0x4c, 0xab, 0x1a, 0x65, 0x8f, 0x39, 0x79, 0x8a, 0x77, 0x42, 0x87,
    0x3a, 0x11, 0x96, 0x78, 0xfb, 0x2d, 0x83, 0x25, 0x42, 0xbf, 0x0c, 0x62, 0x6c, 0x1a, 0xf1, 0x19,
    0x9f, 0x1d, 0x9d, 0xaf, 0x41, 0x64, 0xc3, 0xce, 0x8c, 0xf8, 0xe8, 0x78, 0xe7, 0x2f,
};

static const MessageEncodingTestVector sMessageEncodingTest0551 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xF21EC9E9,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0551_Payload,
    sizeof(sMessageEncodingTest0551_Payload),
    sMessageEncodingTest0551_ExpectedEncoding,
    sizeof(sMessageEncodingTest0551_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0552_EncryptionKey =
{
    {
        0x47, 0x5e, 0xff, 0x70, 0x7c, 0xbf, 0x20, 0xf4, 0x62, 0x49, 0xdc, 0xe7, 0x53, 0x83, 0xe0, 0x94,
    },
    {
        0x62, 0x08, 0x0a, 0xb8, 0xc9, 0x43, 0xd3, 0x8a, 0x6c, 0xbf, 0xad, 0x47, 0xd7, 0x7a, 0xff, 0x0a,
        0x45, 0xa8, 0x20, 0x82,
    }
};
static const uint8_t sMessageEncodingTest0552_Payload[] =
{
    0x3e, 0x9a, 0x19, 0x3a, 0x6e, 0xf7, 0x37, 0xfe, 0x8b, 0x68, 0x93, 0xbc, 0x78, 0xfd, 0xbf, 0xf5,
    0x94, 0xe4, 0xb9, 0xa8, 0x54, 0x94, 0x3e, 0x7d, 0xd6, 0x27, 0x46, 0x8f, 0x2a, 0xba, 0x91, 0x08,
    0x97, 0x94, 0xe4, 0xf6, 0xbf, 0x76, 0xb6, 0xd1, 0x67, 0xdf, 0xa2, 0xc2, 0x70, 0x1e, 0x4c, 0x3f,
    0x8d, 0x1f, 0x9b, 0xb2, 0x23, 0xd8, 0xaa, 0x5b, 0x3a, 0x03, 0x1c, 0xd3, 0x3c, 0x4b, 0xd5, 0x41,
    0x2e, 0xbf, 0x51, 0x55, 0xf8, 0x19, 0x48, 0xce, 0x48, 0x15, 0x69, 0xa3, 0x09, 0xfe, 0x4b, 0xb1,
    0x7c, 0xe3, 0x17, 0xbf, 0x66, 0x11, 0x7d, 0x7d, 0x5e, 0x2f, 0x69, 0x74, 0x70, 0xca, 0x3c, 0xfd,
    0x50, 0xe4, 0x66, 0x9c, 0x7b, 0xf4, 0xdb, 0xe0, 0xdf, 0x6e, 0x89, 0x4b, 0xa8, 0x8f, 0xcf, 0xb1,
    0x55, 0x08, 0x4c, 0x72, 0xe6, 0xb9, 0x52, 0x77, 0x95, 0x29, 0xbb, 0xd5, 0x6b, 0x9c, 0x88, 0x21,
    0x6d, 0x26, 0x15, 0xca, 0xf5, 0x63, 0x25, 0x2a, 0x19, 0x55, 0xac, 0xc7, 0xc0, 0x99, 0x8d, 0xc2,
    0xc8, 0x39, 0x1f, 0xca, 0x7e, 0x4f, 0x3e, 0x4d, 0xd1, 0x5f, 0x16, 0x3e, 0x61, 0xa9, 0x64, 0x5d,
    0x90, 0x99, 0xdd, 0x3c, 0x92, 0xe6, 0x53, 0x43, 0xf4, 0xe9, 0x00, 0x43, 0x47, 0x71, 0x25, 0x6e,
    0x45, 0x52, 0xae, 0x04, 0xad, 0x87, 0xb9, 0x37, 0xb5, 0xbe, 0xf3, 0x73, 0xcf, 0x14, 0xb9, 0x4d,
    0xb7, 0x8d, 0xeb, 0x75, 0x0d, 0x9a, 0x88, 0x01, 0x6e, 0x83, 0x12, 0xa3, 0x52, 0xf7, 0x76, 0xee,
    0xa3, 0x37, 0xb7, 0x1e, 0x06, 0x60, 0x66, 0x25, 0x1f, 0xcc, 0xb1, 0x62, 0x05, 0x8e, 0x24, 0xc2,
    0x98, 0xcf, 0xc5, 0x5e, 0x2d, 0xe1, 0xbf, 0x36, 0xcd, 0x1c, 0xdb, 0x16, 0x7d, 0x7a, 0x02, 0x24,
    0xab, 0x3d, 0x12, 0x42, 0x6e, 0x46, 0x51, 0x0b, 0x20, 0x82, 0x17, 0x83, 0xd5, 0x70, 0x68, 0x6b,
    0xa0, 0xa0, 0x29, 0x70, 0xf2, 0xe5, 0x3f, 0x89, 0xc3, 0x96, 0x27, 0x63, 0x71, 0x71, 0x20, 0x15,
    0x4c, 0xb3, 0x9d, 0x03, 0xae, 0x1a, 0x7f, 0xa4, 0x6a, 0x46, 0x2c, 0x1b, 0x0b, 0xaa, 0x92, 0xb2,
    0xc3, 0x96, 0x2a, 0xcc, 0x55, 0xa5, 0x5f, 0xa2, 0x05, 0x03, 0x4f, 0xbb, 0x55, 0x82, 0x07, 0xb7,
    0x7a, 0x68, 0xbb, 0xe5, 0xe8, 0x04, 0x02, 0x74, 0x1a, 0x69, 0x0a, 0x81, 0x1f, 0xd4, 0x39, 0x7c,
    0x13, 0x85, 0x9d, 0x29, 0x1b, 0x46, 0xe6, 0xa6, 0x05, 0xac, 0xb8, 0x3e, 0x28, 0xf0, 0x42, 0x48,
    0xfa, 0xb0, 0x99, 0x00, 0x6e, 0xe3, 0x7d, 0xca, 0x5c, 0xb7, 0x4f, 0x0c, 0x73, 0x26, 0xf8, 0xcc,
    0xab, 0x54, 0x7a, 0x7f, 0xd2, 0xfe, 0xf9, 0x60, 0xf7, 0x0b, 0x7c, 0x02, 0x03, 0xbe, 0x3d, 0x76,
    0x34, 0xbf, 0x38, 0xb9, 0x1f, 0xa1, 0xd9, 0x9f, 0x63, 0x35, 0x1f, 0xe9, 0xaa, 0x6a, 0x7b, 0xd8,
    0x40, 0xe4, 0x44, 0x2f, 0x44, 0x04, 0x70, 0xed, 0xcd, 0xfa, 0xaa, 0xc3, 0x54, 0x7f, 0xe9, 0x61,
    0x7d, 0xc2, 0x99, 0x22, 0x9e, 0x80, 0x53, 0x57, 0x96, 0x3c, 0x66, 0x27, 0x9d, 0x3e, 0x8e, 0xb1,
    0x09, 0x96, 0x4a, 0xec, 0x5b, 0x66, 0x08, 0xdd, 0xf5, 0x96, 0xca, 0xd7, 0x1a, 0x11, 0x3c, 0x0f,
    0xc1, 0xc0, 0x1f, 0x2f, 0xc8, 0x5c, 0x31, 0xaa, 0x33, 0xa4, 0xb6, 0x8e, 0x42, 0xfa, 0xde, 0x46,
    0xac, 0xc3, 0x4c, 0xa8, 0x49, 0x84, 0x26, 0x0f, 0x2d, 0x41, 0xc1, 0xf5, 0xb0, 0x4e, 0x09, 0xb1,
    0x35, 0x67, 0x72, 0xd7, 0xb2, 0x32, 0x47, 0x47, 0x35, 0x46, 0xf1, 0x67, 0xaa, 0x7a, 0x14, 0x3a,
    0x61, 0x48, 0x7b, 0x67, 0xfb, 0xbd, 0x9c, 0xcc, 0xa9, 0x35, 0x2b, 0x50, 0xdd, 0x0d, 0xff, 0xef,
    0xb7, 0xc9, 0x11, 0xf0, 0x9e, 0xce, 0x22, 0xcb, 0x92, 0x08, 0x55, 0x6c, 0x0e, 0xc5, 0x2c, 0xbb,
    0x5c, 0x56, 0x02, 0xdd, 0xb7, 0x1c, 0x19, 0xf8, 0xe0, 0x14, 0xd1, 0x8a, 0x1a, 0x4a, 0xf5, 0xbf,
    0x6e, 0x3d, 0xa5, 0x63, 0x1b, 0x6d, 0xc5, 0x85, 0x1a, 0xa8, 0xc8, 0x76, 0x6e, 0x0e, 0x84, 0xda,
    0x4c, 0x4a, 0x4f, 0x4c, 0x63, 0x10, 0x75, 0x09, 0x33, 0x20, 0x79, 0x4b, 0x07, 0x40, 0xc7, 0x32,
    0x1d, 0x11, 0x64, 0xd8, 0x45, 0x85, 0xbf, 0x30, 0x12, 0x9c, 0x62, 0x86, 0x0c, 0x70, 0xd0, 0xa0,
    0x88, 0x57, 0x68, 0x81, 0xe7, 0x53, 0x3c, 0x6e, 0xc1, 0xef, 0x1f, 0xc8, 0x41, 0x46, 0x25, 0x35,
    0xe1, 0x1d, 0x2e, 0x91, 0x6f, 0xb1, 0xe5, 0x16, 0x88, 0xf8, 0x81, 0x86, 0x75, 0x8d, 0xa4, 0x42,
    0x55, 0x07, 0x0a, 0x8b, 0x83, 0xa3, 0xa5, 0x64, 0xe1, 0x50, 0x98, 0x8e, 0x45, 0x81, 0x7f, 0x0d,
    0x1c, 0x94, 0xfd, 0xed, 0xd5, 0x53, 0x83, 0x91, 0x73, 0x16, 0x87, 0x29, 0xe3, 0x07, 0x92, 0x09,
    0x81, 0x13, 0x3c, 0xf2, 0x39, 0x0f, 0x8c, 0x3c, 0x96, 0xe5, 0x78, 0x57, 0x5e, 0x35, 0x51, 0xa4,
    0x93, 0x96, 0xab, 0xc0, 0xdb, 0x52, 0xdf, 0x8d, 0xee, 0x56, 0xa5, 0x80, 0x39, 0x4a, 0xbe, 0x50,
    0xc3, 0x00, 0x66, 0x7c, 0x59, 0xf4, 0x0a, 0xb2, 0x0b, 0xeb, 0xba, 0x67, 0x64, 0x48, 0x61, 0x09,
    0xbd, 0x33, 0xed, 0x51, 0x2a, 0x1a, 0x0b, 0x6e, 0x4d, 0x4e, 0x5c, 0x17, 0x7e, 0xf1, 0xd6, 0x7f,
    0xac, 0xfd, 0x46, 0xd5, 0x16, 0xa2, 0x0b, 0x86, 0x97, 0x39, 0x70, 0x4f, 0x5d, 0xf8, 0x79, 0xbd,
    0xe4, 0xb1, 0x09, 0x55, 0x93, 0x58, 0x5f, 0xd0, 0x82, 0x2b, 0x18, 0x6d, 0xce, 0xd4, 0xcc, 0x59,
    0x41, 0x86, 0x9f, 0x85, 0x48, 0x60, 0x49, 0xce, 0x21, 0x06, 0x5f, 0xc8, 0x75, 0x29, 0x82, 0xeb,
    0xf2, 0xf2, 0xd7, 0xe4, 0x68, 0xf3, 0x8b, 0xff, 0x37, 0x0e, 0xb2, 0x31, 0x8d, 0x22, 0x7f, 0x9f,
    0xea, 0xf2, 0x7e, 0x0e, 0xf5, 0x36, 0xb6, 0x9a, 0x26, 0x21, 0x67, 0x33, 0xbf, 0xa4, 0x3a, 0x71,
    0x4b, 0x37, 0xbc, 0xcf, 0xd1, 0xe7, 0x84, 0xab, 0x45, 0x1a, 0xcb, 0xc1, 0x30, 0xed, 0x9b, 0x39,
    0x6a, 0x6f, 0x3e, 0x63, 0x8a, 0xec, 0xb3, 0x76, 0xac, 0x12, 0x90, 0xc2, 0xbc, 0xfa, 0xf9, 0x0b,
    0x3e, 0x73, 0x45, 0x95, 0x47, 0x74, 0x7f, 0xc8, 0xf3, 0x1f, 0xb3, 0xb5, 0xe2, 0x25, 0xf5, 0x24,
    0x0d, 0x1f, 0x5a, 0x5a, 0xa3, 0x00, 0x29, 0x64, 0x7d, 0xc4, 0xbf, 0xc7, 0xaa, 0x67, 0x73, 0xcc,
    0x4f, 0xd8, 0xd8, 0x96, 0xc5, 0xb2, 0x9b, 0x69, 0x04, 0x47, 0xbd, 0x67, 0x83, 0xe0, 0x3b, 0xaa,
    0xea, 0x0e, 0x7d, 0x29, 0xd2, 0x54, 0x25, 0xe3, 0x18, 0x65, 0xe4, 0xb5, 0x39, 0x41, 0xef, 0xfa,
    0x99, 0xb2, 0xc3, 0xfe, 0x60, 0x5a, 0xf7, 0x59, 0x27, 0x44, 0xff, 0x52, 0xef, 0x83, 0xd0, 0xee,
    0xfb, 0x48, 0xf8, 0x3f, 0x9b, 0xb0, 0x87, 0x0c, 0x0f, 0xd8, 0x10, 0x07, 0xb6, 0x05, 0xaf, 0xa0,
    0xe5, 0x9d, 0x3f, 0xef, 0x2e, 0x0c, 0xa7, 0x07, 0xe2, 0x57, 0x83, 0x70, 0xf8, 0x15, 0x10, 0x55,
    0x29, 0x6d, 0x5a, 0xb5, 0xc0, 0x30, 0x25, 0xc3, 0x71, 0x6f, 0xed, 0xaf, 0x8d, 0xd1, 0xb4, 0x2d,
    0xff, 0x48, 0x85, 0xe6, 0x73, 0x03, 0x60, 0xc5, 0x80, 0x47, 0x0c, 0xdc, 0x7e, 0xef, 0x92, 0xb1,
    0x88, 0xf2, 0xfa, 0x93, 0xc5, 0x05, 0x06, 0x3c, 0xb0, 0xe8, 0x03, 0xa7, 0xf4, 0xf6, 0x4b, 0x46,
    0x59, 0x74, 0xbf, 0x27, 0xf3, 0x5f, 0x84, 0x7e, 0x75, 0xa8, 0xa3, 0xa5, 0x25, 0xf3, 0xaa, 0xe4,
    0xc5, 0xbe, 0x57, 0xb3, 0xda, 0xd1, 0x2d, 0xfc, 0xfa, 0x9f, 0x41, 0x62, 0xaa, 0x1d, 0x4e, 0x60,
    0x54, 0x6c, 0x9f, 0x73, 0xfd, 0x0d, 0x48, 0x5b, 0xba, 0xe6, 0x6d, 0x90, 0xea, 0x59, 0x15, 0x93,
};

static const uint8_t sMessageEncodingTest0552_ExpectedEncoding[] =
{
    0x10, 0x26, 0xc7, 0x2e, 0x11, 0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf4, 0x2b,
    0xf3, 0xc2, 0x93, 0x27, 0xb2, 0xfb, 0x69, 0x6e, 0xe9, 0x2a, 0x6d, 0xef, 0x10, 0x5b, 0x8a, 0x3c,
    0x31, 0xea, 0x5b, 0x50, 0xed, 0x03, 0x5c, 0xe5, 0x40, 0xc9, 0x06, 0xfb, 0xe2, 0xc1, 0xa3, 0x91,
    0x59, 0x55, 0x26, 0x3a, 0x72, 0x55, 0xbf, 0x53, 0x34, 0x1e, 0x31, 0x5b, 0x42, 0xd5, 0x82, 0xc1,
    0xd6, 0x4d, 0xe1, 0x22, 0xc2, 0xfc, 0x7a, 0x95, 0x75, 0xbc, 0x29, 0x57, 0x5f, 0xa5, 0x5f, 0x25,
    0x9c, 0xc3, 0x9d, 0xd7, 0x90, 0xb4, 0x88, 0x90, 0x02, 0xa7, 0x6e, 0x60, 0xad, 0x9a, 0xac, 0x66,
    0xb6, 0xd9, 0x6b, 0x0c, 0xa1, 0x57, 0xe1, 0x9a, 0x87, 0x68, 0x63, 0x43, 0x28, 0xa7, 0x11, 0x52,
    0x28, 0xc0, 0x3f, 0xff, 0xe5, 0x0e, 0x7e, 0xf9, 0x5f, 0x2c, 0xa9, 0x0d, 0xfe, 0x24, 0x38, 0x92,
    0xe0, 0x77, 0x14, 0x5f, 0xa1, 0xd7, 0x7e, 0x64, 0x23, 0xaa, 0x25, 0x37, 0xe9, 0xcd, 0x01, 0xfb,
    0x6a, 0x8f, 0x45, 0xb9, 0xd3, 0xdb, 0xf5, 0xa9, 0x7b, 0x48, 0xa7, 0xd1, 0xd8, 0x87, 0xfd, 0x80,
    0x4b, 0x78, 0xd1, 0x29, 0x59, 0xf6, 0xd5, 0xef, 0x0c, 0xfe, 0xf8, 0x79, 0xd2, 0xca, 0xf8, 0x73,
    0x48, 0xa9, 0x11, 0xa9, 0x92, 0xcb, 0x41, 0x85, 0xff, 0x2c, 0xf4, 0xa8, 0x98, 0x80, 0x27, 0x4f,
    0xce, 0x95, 0x96, 0x96, 0xd1, 0xf0, 0xa7, 0x31, 0xab, 0xbb, 0x95, 0xe8, 0xb4, 0xeb, 0x1a, 0x21,
    0x9f, 0xf7, 0x5e, 0x93, 0xce, 0xd0, 0xc1, 0x30, 0x79, 0xac, 0x63, 0x6f, 0x51, 0xe9, 0x8e, 0xbb,
    0xf2, 0x1d, 0xa1, 0xf6, 0x4d, 0xce, 0x12, 0x7e, 0x9a, 0x8c, 0xf4, 0xc8, 0xad, 0xa8, 0xac, 0x23,
    0xb6, 0x31, 0x99, 0x47, 0xf7, 0xdd, 0x51, 0x6a, 0x49, 0x01, 0x62, 0xc9, 0x23, 0x93, 0x6c, 0x41,
    0xbd, 0x42, 0x0b, 0x59, 0x9f, 0xb4, 0x6f, 0xd0, 0x50, 0x77, 0x79, 0x9b, 0xa2, 0x12, 0x29, 0xdf,
    0xe0, 0x78, 0x25, 0x79, 0x67, 0x16, 0xb7, 0xc6, 0x6a, 0xbb, 0xec, 0xdd, 0x60, 0x45, 0x7b, 0xd5,
    0x49, 0x74, 0x43, 0xcb, 0x44, 0x25, 0x6b, 0x58, 0x69, 0xb4, 0x70, 0xa6, 0x9a, 0xd8, 0x74, 0xd2,
    0xf0, 0x89, 0x24, 0x58, 0x60, 0x90, 0x18, 0x5c, 0x85, 0xc4, 0xf8, 0x15, 0xa8, 0x65, 0xa4, 0x0f,
    0x7f, 0xf2, 0xa1, 0x96, 0x9e, 0x65, 0x04, 0xe6, 0x22, 0x45, 0xf7, 0xda, 0x7e, 0xbc, 0x1b, 0x2d,
    0x0d, 0xde, 0x02, 0xbb, 0x89, 0x89, 0xd5, 0x73, 0xa4, 0xd6, 0x5f, 0xdd, 0xfe, 0xf9, 0x2c, 0xce,
    0x0d, 0x15, 0x5a, 0x00, 0x00, 0xf8, 0x91, 0x4d, 0xf2, 0x27, 0x08, 0x88, 0x0c, 0xd5, 0x8a, 0x0f,
    0x73, 0x2f, 0x87, 0x85, 0xbe, 0xb8, 0x59, 0xf0, 0x83, 0xa3, 0x58, 0x1b, 0x26, 0x97, 0x07, 0x80,
    0x42, 0x58, 0x8a, 0x8b, 0x28, 0xd1, 0x88, 0x15, 0xaa, 0x9b, 0x1a, 0x32, 0xe4, 0x56, 0xd3, 0x08,
    0xad, 0x3a, 0xf6, 0xdb, 0xdd, 0x54, 0x36, 0xef, 0xfb, 0x9a, 0x03, 0x91, 0xcc, 0x9e, 0x7a, 0x0c,
    0x27, 0x19, 0x92, 0x43, 0x1e, 0xac, 0xc4, 0x95, 0x3c, 0xfe, 0xb9, 0xa2, 0xd7, 0xb3, 0x0d, 0xc7,
    0xe9, 0xa7, 0x6f, 0xf4, 0x7b, 0x24, 0x77, 0x57, 0x0e, 0x65, 0x19, 0x2e, 0x9b, 0xbb, 0x47, 0x41,
    0xf2, 0xeb, 0xd3, 0xdb, 0x12, 0x62, 0x5a, 0x13, 0xf3, 0x97, 0x0e, 0x76, 0x7b, 0xf7, 0xbb, 0x61,
    0x6c, 0x44, 0x4e, 0x96, 0x36, 0x27, 0xb4, 0xa3, 0x2e, 0xe3, 0xb1, 0xea, 0x74, 0x66, 0x3a, 0xfd,
    0xc8, 0x27, 0xb1, 0xfc, 0xb5, 0xc9, 0x93, 0xcb, 0xcc, 0x24, 0x17, 0x55, 0x06, 0xe7, 0xc8, 0x3e,
    0xbb, 0x35, 0x6f, 0xc6, 0xd7, 0x7c, 0xab, 0xf9, 0xa3, 0x4d, 0x82, 0x09, 0xb2, 0x81, 0x4a, 0xe2,
    0x99, 0x31, 0x0f, 0x29, 0x8b, 0xaf, 0x0f, 0xe0, 0xad, 0x3b, 0x77, 0xeb, 0xf2, 0x0f, 0xe9, 0x5d,
    0x77, 0xcb, 0x4e, 0xce, 0xe7, 0x45, 0xe4, 0x02, 0xab, 0x86, 0x9c, 0xf9, 0xfc, 0xbc, 0x4b, 0xa2,
    0x5c, 0xe3, 0x90, 0x92, 0x3b, 0x4e, 0x04, 0x65, 0x61, 0x20, 0xf2, 0x87, 0x4a, 0xf8, 0x8f, 0xb7,
    0x0a, 0x11, 0x97, 0x21, 0xd9, 0xa1, 0xfd, 0x04, 0xb9, 0x6e, 0x68, 0x67, 0x53, 0x7b, 0x3f, 0xc9,
    0x47, 0xc3, 0xa2, 0xfd, 0x83, 0x2a, 0xf7, 0xdd, 0x50, 0x0f, 0xac, 0xc5, 0xd4, 0x72, 0x93, 0x3e,
    0x5b, 0x11, 0x45, 0xf8, 0xb6, 0x26, 0xe3, 0x4f, 0x1c, 0xb5, 0xa1, 0xf1, 0xcf, 0x1a, 0xc6, 0x99,
    0x84, 0x2b, 0xd1, 0x78, 0x8e, 0x5e, 0xac, 0xb3, 0xab, 0xd3, 0x4a, 0x2d, 0x1b, 0x6b, 0x8c, 0xee,
    0xdb, 0x6f, 0x55, 0xe4, 0xba, 0x7f, 0x8f, 0xb6, 0x60, 0xb5, 0x5f, 0x1f, 0xd5, 0x9c, 0xa0, 0x6b,
    0xd1, 0x6e, 0x66, 0x2e, 0xec, 0x3e, 0x2d, 0x40, 0x7b, 0x9e, 0x97, 0xfb, 0x17, 0xfe, 0x5d, 0x18,
    0x78, 0x1e, 0x1b, 0x83, 0x14, 0x95, 0x2d, 0xb3, 0x82, 0x1c, 0x5a, 0xbf, 0x2a, 0x1d, 0x13, 0xe6,
    0x94, 0x8d, 0x10, 0xd0, 0xf4, 0xfb, 0x88, 0xb9, 0xff, 0xc0, 0x7e, 0x4d, 0x4a, 0xdd, 0x8a, 0x9c,
    0xb7, 0xa2, 0xb4, 0xd1, 0x4d, 0x93, 0x6b, 0x0c, 0x2a, 0x75, 0x61, 0x0c, 0x00, 0xb6, 0x69, 0xc6,
    0xa8, 0x32, 0xbc, 0x4c, 0xfe, 0x7c, 0x85, 0xdd, 0x80, 0x34, 0x14, 0x1d, 0xaa, 0x88, 0x43, 0x0c,
    0x28, 0x3b, 0xa7, 0x4e, 0x59, 0x9e, 0x8f, 0x80, 0x30, 0x2d, 0xf5, 0x6c, 0xbf, 0x79, 0xcc, 0x30,
    0xac, 0x23, 0x45, 0x46, 0x15, 0x26, 0xa8, 0x39, 0x7d, 0x14, 0xac, 0x8f, 0x31, 0xf4, 0x8d, 0x43,
    0xa9, 0xb3, 0xb7, 0x15, 0x5b, 0xb4, 0x5d, 0x08, 0x86, 0x7c, 0x12, 0xd3, 0x09, 0x3f, 0xf1, 0x68,
    0x54, 0x94, 0x59, 0x09, 0x6d, 0xbf, 0x40, 0xeb, 0xb5, 0x91, 0x01, 0xb2, 0x4e, 0xb9, 0x49, 0xd4,
    0x3b, 0x1b, 0x59, 0xcb, 0x8a, 0x73, 0xe3, 0xe4, 0xff, 0xe3, 0xd4, 0x8c, 0x27, 0xb7, 0x17, 0x45,
    0xcf, 0x11, 0xea, 0xb6, 0x1d, 0xcd, 0x85, 0xd7, 0xb9, 0x64, 0x90, 0x8c, 0x99, 0x2f, 0xda, 0x57,
    0x32, 0xcc, 0xa7, 0x63, 0xcd, 0xb2, 0xa4, 0xe0, 0x12, 0x33, 0xea, 0x34, 0x0d, 0xdd, 0x6d, 0x86,
    0x25, 0xdc, 0xd2, 0xd3, 0xe4, 0x1d, 0x60, 0x48, 0xb5, 0x1d, 0xab, 0x89, 0x39, 0x56, 0xb5, 0xcb,
    0xf3, 0xed, 0x02, 0xce, 0xec, 0x66, 0x33, 0xc2, 0x34, 0xc5, 0xd0, 0x38, 0x20, 0x58, 0x74, 0x59,
    0x0b, 0x9e, 0x66, 0xf4, 0x8e, 0x71, 0x85, 0xf0, 0xe0, 0x8e, 0x6d, 0x7c, 0x83, 0x0a, 0x03, 0x6f,
    0x65, 0xb3, 0x3f, 0x20, 0x05, 0xb8, 0x70, 0x6d, 0x06, 0xf0, 0x1b, 0x7d, 0xff, 0x58, 0x6f, 0x95,
    0x2c, 0x3d, 0x75, 0x8c, 0x91, 0x23, 0x9a, 0x7f, 0x38, 0xc1, 0x5d, 0xed, 0x4a, 0x0a, 0xf3, 0xd1,
    0x81, 0x15, 0xc1, 0x1f, 0xac, 0x44, 0xcf, 0x3d, 0x08, 0x7b, 0xf0, 0x9c, 0x77, 0xf7, 0xe1, 0x15,
    0x6d, 0xdb, 0x07, 0x3f, 0xa1, 0xac, 0xce, 0x15, 0x2c, 0x64, 0xd2, 0xd7, 0x52, 0x79, 0x46, 0xa2,
    0x0d, 0xf6, 0xe7, 0xf8, 0x75, 0x7a, 0x7e, 0x07, 0x38, 0xed, 0x7b, 0xe7, 0x34, 0x4b, 0x9a, 0xb6,
    0xc5, 0x8b, 0x6f, 0x3b, 0xed, 0x2c, 0x1f, 0xb2, 0xba, 0xa7, 0xa7, 0x0e, 0x18, 0x37, 0x96, 0xa2,
    0xdb, 0x33, 0x0a, 0x87, 0x07, 0x23, 0x55, 0xa0, 0x85, 0x9b, 0x5f, 0x9b, 0x39, 0x39, 0xd7, 0x9f,
    0xee, 0xe7, 0xe9, 0xd8, 0x54, 0x10, 0x0b, 0x29, 0x06, 0xe3, 0x35, 0x5d, 0x42, 0xbd, 0x47, 0xae,
    0xe7, 0x39, 0xc6, 0x74, 0xb9, 0x53, 0xc9, 0x1d, 0xd6, 0xe3, 0xe0, 0x15, 0xfc, 0xac, 0xb9, 0xe3,
    0x41, 0x96, 0x85, 0x8d, 0x8a, 0x30, 0xb1, 0xc4, 0xb7, 0xe9, 0x67, 0x0d, 0xac, 0x6f, 0xb8, 0xc9,
    0x85, 0x08, 0xdd, 0x4f, 0x7b, 0x42, 0x8c, 0x59, 0x8a, 0x05, 0xcc, 0x64, 0x80, 0x61, 0x5d, 0x3c,
    0x73, 0x24, 0x75, 0x47,
};

static const MessageEncodingTestVector sMessageEncodingTest0552 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB4112EC7,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2BF4,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0552_EncryptionKey,
    sMessageEncodingTest0552_Payload,
    sizeof(sMessageEncodingTest0552_Payload),
    sMessageEncodingTest0552_ExpectedEncoding,
    sizeof(sMessageEncodingTest0552_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0553_EncryptionKey =
{
    {
        0x94, 0x39, 0x64, 0x1a, 0xaf, 0xac, 0x36, 0xb2, 0xe0, 0xf2, 0xd9, 0x4d, 0x30, 0xba, 0xbe, 0x31,
    }
};
static const uint8_t sMessageEncodingTest0553_Payload[] =
{
    0xf7, 0xaf, 0xa6, 0xd6, 0x34, 0x7b, 0x62, 0xc1, 0xdb, 0x0d, 0x2a, 0xf4, 0x37, 0x65, 0xb4, 0x8f,
    0xd4, 0x2d, 0x23, 0x57, 0xf8, 0xbc, 0x7c, 0x11, 0x31, 0x82, 0x33, 0xa7, 0xc7, 0xf4, 0xcb, 0x3e,
    0x04, 0x33, 0x13, 0x61, 0x92, 0x7f, 0x2a, 0x6d, 0xd0, 0x6a, 0xa6, 0xba, 0x50, 0xda, 0x77, 0x74,
    0xa8, 0x36, 0xcf, 0x03, 0xc4, 0x0e, 0x3a, 0xd0, 0x6f, 0x14, 0x14, 0xe6, 0x90, 0xd8, 0x26, 0xcd,
    0x57, 0x67, 0x1f, 0xaa, 0x78, 0x54, 0xa8, 0xb5, 0x9b, 0xd0, 0x22, 0x94, 0x8f, 0x25, 0x3b, 0x4e,
    0x02, 0xfe, 0x39, 0x98, 0x8d, 0x83, 0x83, 0x64, 0x33, 0x7e, 0x61, 0x3a, 0xd1, 0xdd, 0x05, 0xc6,
    0xdb, 0x35, 0xad, 0xea, 0x7d, 0x96, 0x48, 0xbb, 0x03, 0xf4, 0xb1, 0x0d, 0x9d, 0xdc, 0xcf, 0x4a,
    0xb7, 0x6d, 0xe2, 0xeb, 0x6b, 0x03, 0xe8, 0xd5, 0x17, 0x24, 0xd5, 0xaf, 0xb4, 0xd2, 0x0e, 0x78,
    0xc9, 0xd7, 0x5d, 0x35, 0x5f, 0xd9, 0x9c, 0xc3, 0x92, 0x90, 0xef, 0x4d, 0xd3, 0xfd, 0x42, 0x2e,
    0x4d, 0x51, 0x0b, 0x6b, 0xf7, 0xa0, 0xc2, 0xa3, 0xfe, 0x7a, 0x3e, 0x86, 0x32, 0xd6, 0x67, 0x4e,
    0xf3, 0x52, 0xdd, 0x26, 0x8c, 0x96, 0xcb, 0x49, 0x5f, 0x0c, 0xcd, 0xc7, 0x62, 0x57, 0x85, 0x7e,
    0xf3, 0x88, 0x4d, 0x6a, 0x46, 0xd9, 0x20, 0xfd, 0xc6, 0x29, 0x6e, 0xab, 0x48, 0x4d, 0x44, 0x78,
    0xb4, 0x5b, 0x9f, 0xc8, 0x4a, 0xdf, 0xf1, 0x8e, 0x49, 0xef, 0x6b, 0x9d, 0xc6, 0xaa, 0x82, 0xf9,
    0x79, 0x37, 0x9e, 0x5f, 0x54, 0x75, 0xfe, 0x05, 0xf5, 0xc7, 0xbd, 0x5e, 0xac, 0x15, 0x78, 0x7f,
    0x76, 0xeb, 0x6a, 0xa5, 0x40, 0xd7, 0x4a, 0x39, 0xbc, 0x73, 0x68, 0xb2, 0xaa, 0x36, 0x33, 0x7b,
    0x3d, 0xb5, 0xa8, 0x3e, 0xe0, 0x3f, 0xa0, 0xb8, 0xe3, 0xd4, 0x50, 0xd8, 0x9c, 0x21, 0x39, 0xce,
    0x43, 0x43, 0x90, 0x58, 0xc8, 0x66, 0xc2, 0x33, 0xbd, 0x3a, 0x90, 0x25, 0x5d, 0xbd, 0xd1, 0x65,
    0xf7, 0x4a, 0xf8, 0x03, 0x5f, 0x85, 0x32, 0x51, 0x7e, 0x0a, 0x2d, 0x77, 0x22, 0x20, 0xdd, 0x81,
    0x95, 0x7b, 0xb3, 0xf2, 0x65, 0x0c, 0x1b, 0x98, 0xde, 0x19, 0x6c, 0xc9, 0x03, 0x3a, 0x28, 0x4f,
    0x37, 0xac, 0xb4, 0xc7, 0xc0, 0xed, 0x9d, 0x46, 0x88, 0x00, 0x43, 0x77, 0x30, 0x79, 0xa9, 0x7b,
    0xcb, 0x38, 0x09, 0x7b, 0x15, 0xac, 0xd0, 0x5f, 0xad, 0xb0, 0xd5, 0x43, 0x13, 0x59, 0xd2, 0xcc,
    0xd1, 0x8c, 0xe9, 0x72, 0x08, 0x66, 0xfc, 0x0a, 0xbb, 0x66, 0xcc, 0xc4, 0x59, 0xb1, 0xef, 0x51,
    0x18, 0x13, 0x36, 0xf6, 0x45, 0x00, 0xde, 0xce, 0x23, 0x3b, 0x0a, 0xcf, 0x67, 0xa7, 0x79, 0x44,
    0x0e, 0xc9, 0xdf, 0x5f, 0x95, 0xb2, 0xf8, 0x66, 0x05, 0x48, 0x36, 0x00, 0xbf, 0xfa, 0xb1, 0x50,
    0x81, 0xc0, 0x94, 0xfb, 0x5a, 0xcc, 0xbc, 0xb9, 0xc5, 0x74, 0x67, 0xe8, 0x10, 0x36, 0x4b, 0xf6,
    0x20, 0xcd, 0x73, 0x90, 0x1b, 0xb6, 0xc2, 0x2a, 0x03, 0x40, 0x72, 0x1b, 0x0a, 0x83, 0x8b, 0xe7,
    0x84, 0x97, 0xcc, 0xcc, 0xc3, 0x30, 0x16, 0xf2, 0xd6, 0xed, 0x42, 0xd3, 0x21, 0xef, 0x17, 0xbe,
    0x76, 0xae, 0xc7, 0x20, 0xd5, 0x31, 0xa8, 0x1c, 0x22, 0xf6, 0x5f, 0x7e, 0x72, 0xc1, 0xbf, 0xe2,
    0xe4, 0x07, 0x4f, 0x06, 0x9b, 0x10, 0xc2, 0xac, 0x68, 0x8c, 0xd7, 0x80, 0x19, 0xed, 0xc2, 0x99,
    0xb5, 0x20, 0x50, 0xed, 0xcb, 0xfd, 0x54, 0xf0, 0x94, 0xb2, 0x96, 0x99, 0x27, 0xff, 0x9f, 0x67,
    0x5e, 0xa1, 0x08, 0xd4, 0xd1, 0xc5, 0xcb, 0xf1, 0xb1, 0x0a, 0xfd, 0x37, 0x67, 0x6a, 0xae, 0x47,
    0x46, 0x48, 0xf4, 0xe7, 0xca, 0xff, 0x7a, 0x18, 0xa3, 0xcd, 0x3f, 0x5f, 0xf1, 0x8a, 0x68, 0x31,
    0xc5, 0xf6, 0xf9, 0x79, 0xd9, 0x91, 0x40, 0xd0, 0x8b, 0x1e, 0x8c, 0x2c, 0x12, 0x32, 0x2e, 0xb8,
    0xa2, 0x8f, 0xe1, 0xe7, 0x35, 0xa6, 0xf7, 0xdb, 0xe6, 0x69, 0x3a, 0xd8, 0x2e, 0x32, 0x85, 0x93,
    0x3c, 0xef, 0x72, 0x57, 0x35, 0xd1, 0xea, 0xd9, 0xdd, 0xf1, 0xde, 0xa6, 0x30, 0xfa, 0xc9, 0xbf,
    0x40, 0x7f, 0x55, 0x1e, 0xb0, 0x7a, 0xd0, 0x80, 0xb4, 0x00, 0x99, 0xd8, 0x77, 0xbc, 0xbd, 0xb2,
    0x93, 0x8a, 0xab, 0x04, 0xc3, 0x34, 0xcb, 0x2a, 0x40, 0x61, 0xa4, 0x46, 0x44, 0x45, 0x53, 0x11,
    0xb0, 0xfe, 0x0c, 0xe6, 0x23, 0x91, 0x38, 0xf6, 0x92, 0xae, 0x66, 0x0c, 0xba, 0x54, 0xe4, 0xeb,
    0xbb, 0x71, 0x8f, 0x12, 0xde, 0x31, 0xbc, 0x3b, 0x20, 0xc2, 0x9b, 0xa7, 0x3b, 0x8f, 0xcd, 0x80,
    0x74, 0x45, 0xc4, 0x3e, 0x01, 0x8a, 0x0c, 0xa5, 0x18, 0x06, 0xde, 0x7c, 0x9e, 0x66, 0x9b, 0x07,
    0x45, 0x24, 0x35, 0x54, 0x8e, 0x1b, 0x53, 0x33, 0xb2, 0x89, 0x61, 0xb0, 0xd8, 0xb9, 0xb6, 0x9a,
    0x63, 0x39, 0x11, 0xa1, 0xf1, 0xc2, 0xb7, 0xda, 0x92, 0x46, 0x6e, 0xca, 0x60, 0x5d, 0xd1, 0x4b,
    0x11, 0x14, 0x2b, 0xff, 0x93, 0x97, 0xf8, 0x03, 0xf6, 0x64, 0xf3, 0x53, 0x36, 0x7f, 0x5e, 0x73,
    0x91, 0x2d, 0xa3, 0x90, 0x03, 0xf9, 0x45, 0x2d, 0xe2, 0x6a, 0xf3, 0xc7, 0xf7, 0xc4, 0xc3, 0xea,
    0x3c, 0x40, 0xd8, 0x5b, 0x4f, 0x7c, 0x93, 0x32, 0xa5, 0xaa, 0x7a, 0xeb, 0x79, 0x8e, 0xd7, 0x75,
    0xc8, 0x84, 0x58, 0x0a, 0x69, 0x76, 0x35, 0xd8, 0xbf, 0x73, 0x8d, 0x67, 0x68, 0x64, 0x2f, 0x16,
    0xb6, 0x29, 0x41, 0xd4, 0x53, 0xc4, 0xd4, 0xf7, 0xa2, 0x20, 0xbe, 0x45, 0xb6, 0x8d, 0xa4, 0x1b,
    0xbe, 0x61, 0xca, 0x7f, 0xd1, 0xb8, 0x6a, 0x61, 0x9c, 0xff, 0x0a, 0x00, 0xdf, 0x0b, 0xd8, 0xef,
    0x10, 0x3d, 0x3d, 0xa5, 0x9b, 0xf7, 0x43, 0x8f, 0xa4, 0xbe, 0x76, 0xfb, 0xb3, 0x4a, 0x6a, 0xbd,
    0xc5, 0x70, 0x6b, 0xa1, 0xb2, 0x29, 0x38, 0xd2, 0x05, 0x41, 0x14, 0x68, 0x96, 0x9f, 0x4b, 0xde,
    0x51, 0xb8, 0x51, 0x74, 0x00, 0x1b, 0xa5, 0xbb, 0x35, 0x4b, 0x97, 0xad, 0x94, 0x13, 0xb7, 0x4e,
    0x62, 0x08, 0x64, 0x69, 0x82, 0x4f, 0xc1, 0xef, 0x02, 0x9f, 0x5b, 0x92, 0x33, 0x77, 0xf2, 0x04,
    0xf3, 0x47, 0x52, 0x3a, 0xac, 0x1a, 0x3a, 0x52, 0x46, 0x1f, 0x8d, 0xcb, 0xb8, 0x9c, 0x73, 0x59,
    0x3f, 0xf2, 0x63, 0xed, 0xd1, 0x1f, 0x31, 0xe1, 0x2f, 0xef, 0x9d, 0x7b, 0x5c, 0xce, 0x67, 0xed,
    0x8e, 0xb1, 0xff, 0xf8, 0xd4, 0x7f, 0x0e, 0x25, 0xd6, 0x9b, 0x63, 0x51, 0x90, 0x15, 0x25, 0xe4,
    0xec, 0x95, 0x81, 0xa8, 0x9f, 0x34, 0xf9, 0xa0, 0xeb, 0xbd, 0x09, 0x82, 0xd3, 0x5a, 0x6e, 0xc5,
    0x7e, 0x8c, 0xde, 0xfe, 0x27, 0x37, 0x60, 0x5c, 0x8b, 0xa4, 0x1f, 0xde, 0x24, 0xdf, 0x5f, 0x66,
    0xfb, 0x7e, 0xb8, 0x82, 0x5a, 0xe4, 0x56, 0x98, 0x96, 0xa6, 0x3b, 0x30, 0xdc, 0x0d, 0x0b, 0xdf,
    0xb0, 0x41, 0x21, 0xae, 0x7d, 0x99, 0xaa, 0x9c, 0xf8, 0xf9, 0x6f, 0xeb, 0x75, 0xe8, 0x92, 0x4e,
    0xb0, 0x50, 0x63, 0xda, 0xc8, 0x16, 0x94, 0x39, 0xf3, 0x37, 0xca, 0x1a, 0x49, 0xf0, 0xb4, 0x0b,
    0x4c, 0xbb, 0xa9, 0x0a, 0x93, 0xde, 0xfa, 0x04, 0x1f, 0x57, 0x4e, 0x5a, 0x29, 0xba, 0x83, 0x49,
    0x7b, 0xe3, 0xd9, 0x31, 0xdb, 0xaf, 0x3e, 0x30, 0x40, 0x9f, 0xf8, 0xf7, 0xcb, 0x6b, 0x3f, 0xb3,
    0xc1, 0x2c, 0xbe, 0xdd, 0x68, 0xfb, 0x28, 0x5e, 0x43, 0x4b, 0x7f, 0xa0, 0xb5, 0xae, 0x90, 0x21,
    0x8b, 0xdb, 0xd9, 0xb0, 0x36, 0xd7, 0x5f, 0xd3, 0xc5, 0x3f, 0x71, 0xfe, 0x2a, 0x35, 0x72, 0xfb,
};

static const uint8_t sMessageEncodingTest0553_ExpectedEncoding[] =
{
    0x20, 0x26, 0x04, 0xeb, 0x13, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x2d, 0x2f,
    0x79, 0x19, 0x7b, 0x87, 0xe0, 0x12, 0x1b, 0xa4, 0x8e, 0x9c, 0xee, 0x35, 0xa3, 0xf8, 0x6f, 0x31,
    0x28, 0x0a, 0x1c, 0x8c, 0x9b, 0x3c, 0x8c, 0x4a, 0xf7, 0x2f, 0xa2, 0x07, 0x18, 0xf9, 0xe7, 0xce,
    0x0c, 0xec, 0xd9, 0x2d, 0xe1, 0xe4, 0x80, 0x01, 0xbc, 0xda, 0x2d, 0x55, 0x88, 0xde, 0x2d, 0xda,
    0x8e, 0x69, 0x56, 0x2f, 0x7d, 0x0d, 0x81, 0xa9, 0xde, 0xc2, 0x2f, 0x8c, 0xeb, 0x38, 0x5a, 0xf5,
    0xb0, 0xe0, 0x4f, 0x40, 0x12, 0xd3, 0x31, 0x31, 0x36, 0x86, 0x6d, 0xdb, 0xd5, 0xa8, 0x7e, 0xbf,
    0xae, 0xe4, 0xf8, 0xb7, 0x46, 0x90, 0x4b, 0x14, 0x89, 0xa3, 0xc9, 0xc7, 0x96, 0x2c, 0x00, 0xc6,
    0xeb, 0xb3, 0xf3, 0x5c, 0x0b, 0x8c, 0x78, 0x24, 0xa2, 0x66, 0x31, 0xeb, 0xec, 0xe3, 0x7a, 0xcd,
    0x47, 0xa9, 0x89, 0x96, 0x4f, 0xe1, 0x9c, 0x63, 0x15, 0x10, 0x05, 0xf2, 0x41, 0x68, 0x20, 0xac,
    0x32, 0xe5, 0xb7, 0x7c, 0x3b, 0x6f, 0x8f, 0x5a, 0x9d, 0xb8, 0xec, 0x25, 0x16, 0xf4, 0xed, 0x55,
    0x28, 0x15, 0x79, 0x34, 0x1d, 0x1c, 0xea, 0x35, 0xe0, 0x51, 0x65, 0xcd, 0x5b, 0x9a, 0x1b, 0xb4,
    0x53, 0xac, 0x11, 0xa6, 0xd3, 0xfe, 0x9f, 0xda, 0x7f, 0xf0, 0x21, 0xcb, 0xc5, 0x15, 0xda, 0xf8,
    0xf4, 0xa5, 0x64, 0x19, 0x73, 0x55, 0x50, 0x75, 0x0c, 0x80, 0x4a, 0x44, 0x01, 0xf6, 0xcb, 0xc5,
    0x81, 0x2a, 0xde, 0xfc, 0x84, 0x01, 0x24, 0x51, 0xdf, 0x9d, 0xe5, 0xed, 0xd9, 0x96, 0x8e, 0x26,
    0x69, 0x9a, 0xce, 0xfb, 0x76, 0xa6, 0xc1, 0xe3, 0x1a, 0xb1, 0xf6, 0xfc, 0xde, 0x07, 0x90, 0x7c,
    0xb8, 0x9b, 0xc1, 0x96, 0x62, 0x1a, 0x24, 0xca, 0x66, 0x29, 0xd6, 0x15, 0x09, 0xa2, 0x44, 0x2b,
    0x53, 0xab, 0x0d, 0x8e, 0x88, 0xb9, 0x3f, 0xe8, 0x41, 0x10, 0x84, 0xd6, 0x80, 0xb1, 0xca, 0x0d,
    0x11, 0xed, 0xd1, 0x45, 0x84, 0x8f, 0x82, 0xf1, 0xe9, 0x06, 0x02, 0x8d, 0x1f, 0x33, 0xdd, 0x3a,
    0x3a, 0xb1, 0x89, 0x50, 0x75, 0x2d, 0xe9, 0x5d, 0x4f, 0xd9, 0x39, 0xfa, 0x81, 0xdb, 0xa2, 0xad,
    0x65, 0x92, 0x50, 0xdd, 0x0e, 0x13, 0x57, 0xf3, 0xc7, 0xc0, 0x08, 0x53, 0xea, 0x3e, 0x2c, 0x1e,
    0x98, 0x77, 0xcc, 0x74, 0xd3, 0xf7, 0x1e, 0xd6, 0x59, 0x42, 0x1c, 0xdc, 0x19, 0x95, 0xa4, 0x82,
    0xe1, 0xd6, 0x8a, 0xa8, 0xdc, 0x1c, 0xff, 0xb1, 0xa4, 0xd6, 0x0d, 0xa4, 0x9d, 0xe3, 0xc7, 0x8d,
    0x0d, 0x0b, 0x51, 0xbc, 0x5f, 0x12, 0x06, 0x7f, 0xa0, 0xcd, 0x7b, 0x05, 0x41, 0x99, 0xf1, 0xa5,
    0x56, 0x18, 0x91, 0x0e, 0xc2, 0xe1, 0xc0, 0xfa, 0x77, 0x39, 0xbf, 0xdd, 0xdd, 0xfa, 0x35, 0x25,
    0xc6, 0xae, 0x67, 0x57, 0x4e, 0x2c, 0x8f, 0x68, 0x09, 0xbe, 0xc2, 0x25, 0x13, 0xc1, 0xb5, 0x0a,
    0x04, 0x99, 0x93, 0xe4, 0xde, 0x0f, 0x1b, 0x24, 0x20, 0xc7, 0x7a, 0xc5, 0x46, 0x85, 0xc3, 0xcb,
    0x5f, 0x79, 0x2e, 0xf9, 0x89, 0xf2, 0xde, 0xcb, 0x85, 0x43, 0x74, 0xf3, 0xf6, 0x2f, 0x24, 0xb8,
    0x8e, 0x67, 0x4b, 0x84, 0x26, 0x59, 0x4f, 0xcf, 0x20, 0x29, 0xa1, 0x1b, 0x89, 0xfa, 0x52, 0x9a,
    0x00, 0xcd, 0xfd, 0xda, 0xe6, 0x24, 0x43, 0x5b, 0x67, 0xc6, 0xff, 0x52, 0x54, 0x0d, 0xfc, 0x43,
    0xbd, 0x9c, 0xa4, 0x58, 0xda, 0x84, 0xae, 0x8b, 0xff, 0xa4, 0xef, 0x83, 0xda, 0x8c, 0xaf, 0x26,
    0x6e, 0x28, 0x4a, 0x0f, 0xee, 0x0a, 0xe8, 0xd5, 0xd8, 0xeb, 0xd3, 0x8f, 0xed, 0x1e, 0x27, 0x34,
    0xf1, 0xe4, 0xdc, 0x08, 0xc6, 0x60, 0xa4, 0x36, 0x07, 0x56, 0x16, 0xb2, 0xa2, 0x4c, 0xc5, 0xb2,
    0x0c, 0x95, 0x68, 0xdc, 0x53, 0x21, 0xa7, 0xf6, 0x42, 0xa9, 0xf1, 0x9f, 0xb4, 0x17, 0xa4, 0xc7,
    0x63, 0x1c, 0xf2, 0x21, 0x38, 0x79, 0xcd, 0xc1, 0xa9, 0x68, 0x5a, 0xd9, 0x94, 0xd5, 0x15, 0x42,
    0xea, 0xd6, 0x96, 0x99, 0x3a, 0x3d, 0xe4, 0x8b, 0xed, 0xb7, 0x40, 0x03, 0x1f, 0xdd, 0xf0, 0xbb,
    0xb1, 0x14, 0xb0, 0x77, 0xde, 0x8e, 0xeb, 0x1f, 0xd3, 0x53, 0x79, 0xac, 0xb5, 0xdd, 0xf1, 0x12,
    0x10, 0x8f, 0x22, 0xa4, 0x1b, 0x5f, 0x4b, 0x89, 0x18, 0xea, 0x94, 0x56, 0x9c, 0xc2, 0xa2, 0xa1,
    0x35, 0x90, 0xbf, 0x35, 0x02, 0xd0, 0x45, 0x53, 0xe0, 0xd0, 0x4d, 0xe4, 0xaf, 0x97, 0x46, 0x7e,
    0x44, 0xd0, 0x82, 0xbc, 0xb3, 0x9f, 0xb7, 0xe4, 0x1d, 0x6a, 0x48, 0xb4, 0x1a, 0x24, 0x43, 0xcd,
    0xd4, 0x00, 0x2e, 0x06, 0xcf, 0xed, 0x5a, 0x54, 0x5f, 0x63, 0x0b, 0x8b, 0xe7, 0xe3, 0xb2, 0x99,
    0xdf, 0x94, 0xb0, 0xd4, 0x52, 0x83, 0xc2, 0x2d, 0x29, 0x8f, 0x74, 0x00, 0x4a, 0xc7, 0xb1, 0x94,
    0xf6, 0x93, 0xb0, 0x96, 0x8f, 0x74, 0x65, 0x5f, 0x1c, 0xad, 0xdc, 0x06, 0xbe, 0x06, 0xae, 0x76,
    0x19, 0x86, 0xe0, 0xaa, 0x34, 0xca, 0xa5, 0xfd, 0xc3, 0x12, 0xf3, 0x7c, 0xa7, 0x12, 0x80, 0xf3,
    0xd0, 0xd9, 0x06, 0x9c, 0xef, 0x78, 0x74, 0x98, 0x82, 0x05, 0x1c, 0x05, 0xfb, 0xe0, 0xac, 0x1b,
    0xcc, 0xc0, 0xe3, 0x63, 0x5d, 0x76, 0x3d, 0x98, 0x8a, 0x48, 0xa9, 0xbd, 0xd1, 0x09, 0x8a, 0x56,
    0x1f, 0xa5, 0xe6, 0x58, 0xb2, 0x2f, 0x7c, 0xf2, 0xfd, 0x85, 0xda, 0x7f, 0x74, 0xd8, 0x0f, 0xcb,
    0x59, 0xfa, 0x7b, 0xbd, 0x5c, 0xbe, 0xce, 0xa9, 0xd6, 0xf5, 0x22, 0x27, 0x1e, 0x6e, 0x5e, 0x00,
    0xf0, 0xf3, 0x1d, 0xeb, 0xa4, 0x2c, 0x19, 0xd6, 0xe6, 0x1c, 0x0d, 0x84, 0x2b, 0x3a, 0xb3, 0x2d,
    0x5a, 0xd2, 0xd4, 0xe9, 0x8b, 0xc3, 0xea, 0x5b, 0xdd, 0xac, 0xe3, 0x78, 0x76, 0xaf, 0x8e, 0x9b,
    0xae, 0xb4, 0x0d, 0x93, 0x11, 0xc6, 0xfe, 0x25, 0x0d, 0x50, 0xcb, 0x5a, 0x3c, 0x11, 0x4f, 0x6c,
    0x34, 0x80, 0x72, 0x58, 0xc2, 0xa4, 0x06, 0x5d, 0xe4, 0xc5, 0xe9, 0xcc, 0x89, 0xa1, 0x53, 0xd9,
    0xac, 0xf6, 0x54, 0x3b, 0x3e, 0x45, 0xda, 0x4e, 0xb4, 0xf6, 0x02, 0x5d, 0xb7, 0xd7, 0x22, 0x5f,
    0x2b, 0x69, 0x67, 0x15, 0xf2, 0x0c, 0x87, 0xae, 0xf5, 0x62, 0x37, 0x58, 0x74, 0x0e, 0x11, 0xe7,
    0x37, 0x45, 0xdf, 0xea, 0xb0, 0x8d, 0x0e, 0xe4, 0x70, 0x82, 0xf3, 0x24, 0x86, 0xc4, 0xe8, 0x45,
    0xc8, 0x79, 0x81, 0xd4, 0x72, 0x1d, 0x77, 0x68, 0x93, 0x8f, 0x17, 0xd2, 0xd4, 0x22, 0xd2, 0xef,
    0xc1, 0xca, 0xb2, 0xaa, 0x22, 0xfe, 0x03, 0xe0, 0x55, 0x14, 0x02, 0x86, 0xf8, 0xcf, 0x35, 0x87,
    0x69, 0x26, 0xd4, 0x17, 0xd2, 0x1a, 0x96, 0x8a, 0x82, 0x17, 0xfe, 0x91, 0xdf, 0x63, 0x12, 0x04,
    0x27, 0x4d, 0xee, 0x68, 0xd0, 0x5c, 0x82, 0xb6, 0x7a, 0x4f, 0xc1, 0xa9, 0x7a, 0xdc, 0xb0, 0x3c,
    0x45, 0x11, 0x7c, 0xe8, 0xaf, 0x1a, 0xad, 0x17, 0xbe, 0xe4, 0xe3, 0x7d, 0xdf, 0x91, 0xac, 0x5c,
    0x2e, 0x51, 0x82, 0x1e, 0x8e, 0xfe, 0xd5, 0x88, 0x9d, 0x79, 0x94, 0xa7, 0xd9, 0x20, 0x1e, 0x28,
    0x6c, 0xee, 0xb0, 0x8b, 0xe2, 0x7c, 0x8c, 0x38, 0xec, 0x75, 0xf9, 0xa7, 0x23, 0xb7, 0x9b, 0x31,
    0x1a, 0x03, 0xd5, 0x5e, 0x5c, 0x44, 0x25, 0xd3, 0xcc, 0x22, 0x3a, 0x3b, 0x46, 0x78, 0xa7, 0x34,
    0x0c, 0x5d, 0x0d, 0xa4, 0x81, 0xc4, 0xd2, 0x5b, 0x8e, 0x66, 0x50, 0xa8, 0x0c, 0xd5, 0x48, 0x78,
    0x57, 0x62, 0xd4, 0xf9, 0x6a, 0x92, 0xfc, 0x60, 0x38, 0xb7, 0x88, 0xff, 0x05, 0x7c, 0x33, 0x14,
    0xaf, 0x4b, 0xfe, 0x27, 0x49, 0x4d, 0xf7, 0x24, 0x3a, 0x46, 0x9e, 0x66, 0xf6, 0xca, 0x85, 0x27,
    0xcf, 0x70, 0x51, 0xa0, 0x70, 0x94, 0xdf, 0x89,
};

static const MessageEncodingTestVector sMessageEncodingTest0553 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xFC13EB04,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2F2D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0553_EncryptionKey,
    sMessageEncodingTest0553_Payload,
    sizeof(sMessageEncodingTest0553_Payload),
    sMessageEncodingTest0553_ExpectedEncoding,
    sizeof(sMessageEncodingTest0553_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0554_EncryptionKey =
{
    {
        0xca, 0xb1, 0x04, 0x59, 0xdb, 0xd0, 0x40, 0xf4, 0x35, 0x2b, 0xa6, 0x7b, 0x71, 0xdf, 0xa8, 0xa8,
    }
};
static const uint8_t sMessageEncodingTest0554_Payload[] =
{
    0xf9, 0xc5, 0xa3, 0xb1, 0xd4, 0x0a, 0x7b, 0x1c, 0xa8, 0xed, 0x2b, 0x4d, 0x8c, 0xac, 0x86, 0x72,
    0x59, 0x82, 0xa7, 0x61, 0x1c, 0x32, 0xcb, 0x56, 0x2b, 0x41, 0x0e, 0x87, 0xc7, 0xbb, 0x5b, 0x2f,
    0x76, 0xc5, 0x8e, 0x1e, 0x74, 0x08, 0x7d, 0x29, 0x98, 0xc3, 0x5f, 0x0f, 0x3f, 0x1e, 0x9f, 0x39,
    0x19, 0xee, 0x32, 0xb3, 0x92, 0x85, 0xbf, 0x67, 0xc4, 0xb0, 0xe1, 0xd3, 0xec, 0x5b, 0x4b, 0x61,
    0xcd, 0xcc, 0x6e, 0x15, 0xcd, 0x40, 0x50, 0xc9, 0x9e, 0xc6, 0xdd, 0x44, 0x61, 0xf2, 0x5e, 0x4d,
    0x28, 0x95, 0xaf, 0xe4, 0x27, 0x5d, 0xbf, 0x25, 0xc2, 0x8a, 0x46, 0xbd, 0xb7, 0x3e, 0x62, 0x11,
    0x14, 0x2b, 0x34, 0xb9, 0xcd, 0xd5, 0xec, 0xbd, 0xfb, 0x7f, 0x5d, 0xbb, 0xf3, 0x46, 0xeb, 0x75,
    0x20, 0x3c, 0xda, 0x54, 0x73, 0x9c, 0x10, 0x59, 0x9a, 0x24, 0xfd, 0x5d, 0x12, 0x24, 0x6d, 0x75,
    0x56, 0xd4, 0x57, 0x2e, 0x9c, 0x7a, 0x4c, 0x18, 0x58, 0xec, 0x2e, 0x3e, 0xcd, 0x3d, 0xd7, 0x99,
    0x0d, 0xe0, 0xa1, 0xb9, 0x46, 0x80, 0x61, 0x5d, 0x20, 0x7f, 0x4e, 0x72, 0x95, 0xdc, 0xfc, 0xc3,
    0x84, 0xbb, 0xc7, 0x0d, 0xb2, 0xa5, 0xb8, 0x96, 0x1e, 0xc2, 0xdf, 0x2c, 0x2b, 0x88, 0x71, 0x33,
    0x05, 0xd6, 0xce, 0x81, 0xc3, 0x95, 0xa5, 0xfa, 0xc6, 0x31, 0xa5, 0x76, 0xc4, 0xe2, 0x80, 0xf8,
    0xff, 0x8e, 0xee, 0x6e, 0x2c, 0xd2, 0xe5, 0x9e, 0x9f, 0xd7, 0xd7, 0xa4, 0x9a, 0x76, 0x61, 0x34,
    0x37, 0xd4, 0x45, 0x0c, 0x2c, 0x55, 0xe9, 0xd1, 0x3a, 0x9c, 0x22, 0x80, 0x04, 0x6a, 0x2d, 0x5d,
    0xa3, 0x82, 0x3e, 0x34, 0x7c, 0xde, 0x8e, 0x2a, 0xde, 0x21, 0x1e, 0x3d, 0x89, 0x3a, 0xd8, 0x62,
    0x39, 0x21, 0x4a, 0xb2, 0xdf, 0x6b, 0xef, 0xfc, 0xc2, 0x57, 0x82, 0xa8, 0x21, 0xdb, 0x0e, 0x0b,
    0xf4, 0x66, 0xfa, 0x2e, 0xed, 0xca, 0x26, 0xc0, 0x30, 0xdb, 0xbf, 0x03, 0x73, 0xc0, 0xf6, 0x4c,
    0x3c, 0x88, 0x0d, 0x44, 0x45, 0x07, 0xe3, 0x0c, 0x02, 0x7a, 0x12, 0x9f, 0xa6, 0x3f, 0x43, 0x52,
    0xd8, 0x52, 0x06, 0x6f, 0xb3, 0xd7, 0x64, 0x2f, 0xd5, 0xce, 0x2a, 0x2b, 0xf6, 0x07, 0x08, 0x75,
    0x05, 0x5f, 0xc7, 0x8e, 0x5c, 0x47, 0x10, 0x4f, 0xb3, 0xe2, 0x06, 0x8f, 0x81, 0xfb, 0x23, 0xc9,
    0xab, 0x1b, 0x63, 0x3d, 0x55, 0x41, 0x65, 0x1d, 0xb7, 0x55, 0xd1, 0xc6, 0xd6, 0xa7, 0x4c, 0xe7,
    0xe4, 0xc3, 0xef, 0xd3, 0x73, 0xa5, 0x5c, 0xe9, 0x44, 0x0b, 0x42, 0xfd, 0xa9, 0x6e, 0x65, 0x4c,
    0x74, 0x29, 0xe9, 0x6a, 0x36, 0xb4, 0xe6, 0x21, 0xfa, 0x78, 0x2c, 0x40, 0x23, 0x95, 0xe8, 0x4f,
    0x64, 0x5f, 0x24, 0x55, 0x62, 0xe4, 0x4b, 0xee, 0xd1, 0xe9, 0x22, 0xc2, 0x67, 0xac, 0x79, 0x45,
    0x47, 0x95, 0x17, 0x4f, 0xc8, 0x1d, 0x91, 0x0b, 0xde, 0x2b, 0x45, 0x92, 0xa4, 0xfd, 0x85, 0x91,
    0xf0, 0xae, 0xb0, 0xc9, 0x4d, 0x11, 0x05, 0x06, 0xb2, 0xfe, 0x6e, 0x0e, 0x95, 0xa2, 0xc3, 0x15,
    0x59, 0x3d, 0x85, 0x55, 0x90, 0xc5, 0x7b, 0xc1, 0x50, 0x24, 0x5c, 0x4e, 0x6d, 0x58, 0x55, 0x96,
    0x72, 0x79, 0xa1, 0x70, 0x4f, 0x0e, 0x2e, 0xbf, 0x2e, 0x68, 0xc9, 0xa6, 0x0a, 0x20, 0xcb, 0x98,
    0x3b, 0x26, 0x10, 0x45, 0x97, 0xb1, 0x80, 0x98, 0xb8, 0x93, 0xeb, 0x73, 0xa5, 0x94, 0x9e, 0x87,
    0xce, 0x6c, 0x4c, 0x12, 0x63, 0x7a, 0x84, 0xa2, 0x1c, 0x56, 0xc3, 0x61, 0x7a, 0xc9, 0x41, 0x11,
    0x54, 0x88, 0xaa, 0xf6, 0x13, 0xe3, 0x4f, 0x8c, 0x6b, 0xdb, 0x81, 0xd1, 0x64, 0x01, 0x97, 0xa5,
    0x6b, 0xdf, 0xa5, 0x8c, 0x3a, 0x91, 0x3d, 0x7d, 0x74, 0x10, 0xec, 0x69, 0x0d, 0xde, 0xab, 0x90,
    0xef, 0x8d, 0xc1, 0x83, 0x36, 0x4e, 0x12, 0xc5, 0x66, 0xf3, 0x6f, 0xdc, 0xf5, 0xab, 0x73, 0x53,
    0x0e, 0x09, 0xb1, 0x93, 0x04, 0x2a, 0x83, 0x24, 0x80, 0x49, 0xf2, 0x58, 0x70, 0x90, 0x7d, 0xe3,
    0x4e, 0xb8, 0x66, 0xca, 0xfd, 0xf8, 0x21, 0x8d, 0x89, 0xd1, 0x29, 0xac, 0x45, 0x0c, 0xbd, 0x29,
    0x09, 0x31, 0xdf, 0x31, 0xf4, 0x6a, 0x53, 0x46, 0x4f, 0x9c, 0xa0, 0x79, 0x44, 0xa7, 0x9e, 0x7b,
    0xe5, 0x7e, 0x98, 0xe7, 0xbe, 0x8a, 0xd0, 0x4f, 0x7f, 0x73, 0xa8, 0x5c, 0x28, 0x89, 0x16, 0x3d,
    0x57, 0x43, 0x98, 0x4e, 0xcf, 0x26, 0x31, 0x40, 0x8b, 0x25, 0xec, 0x1c, 0xd5, 0x40, 0xfe, 0x94,
    0x0a, 0x57, 0xea, 0xf3, 0x50, 0xfa, 0x0e, 0x19, 0x74, 0xde, 0xd8, 0x97, 0x17, 0xf7, 0x1e, 0xc8,
    0x1a, 0xc9, 0xd3, 0xca, 0x9e, 0x93, 0xea, 0x8e, 0x99, 0x6e, 0x1d, 0xfe, 0x5c, 0x80, 0xb2, 0x4b,
    0xb4, 0x8a, 0x9c, 0xda, 0x54, 0xb4, 0x45, 0x9a, 0xdd, 0x75, 0x35, 0xc3, 0x5f, 0x8d, 0xd3, 0x14,
    0x1d, 0xe6, 0x70, 0x88, 0x4b, 0x56, 0x67, 0xab, 0xb9, 0xb7, 0x60, 0x13, 0x1d, 0x6d, 0xb0, 0x6c,
    0xfd, 0x10, 0x0f, 0x28, 0xd2, 0xbd, 0x52, 0x08, 0xc7, 0x7e, 0x15, 0xc8, 0x4f, 0x02, 0xf9, 0xd0,
    0x6b, 0x54, 0xef, 0x8a, 0x65, 0x26, 0x56, 0x52, 0xff, 0xc1, 0x01, 0x07, 0xa6, 0x1c, 0x28, 0x32,
    0xbf, 0x2e, 0x07, 0x8a, 0x09, 0xd0, 0x05, 0x61, 0xcd, 0x00, 0xdc, 0x7a, 0x3c, 0x1a, 0x65, 0xb5,
    0x8a, 0x0a, 0xe7, 0x6d, 0x6a, 0xe7, 0xac, 0x2b, 0x1d, 0x57, 0xae, 0xff, 0xdd, 0xb7, 0xfd, 0xf9,
    0xd7, 0x40, 0x5e, 0xfa, 0x52, 0xf0, 0x1e, 0x1a, 0xd7, 0xac, 0x03, 0xf7, 0x1d, 0x55, 0xe6, 0x16,
    0x25, 0x27, 0xfc, 0xb0, 0xc3, 0x01, 0x7d, 0x24, 0x1e, 0xf3, 0x32, 0x0a, 0x2f, 0xb1, 0x52, 0x4c,
    0x84, 0xd6, 0x69, 0xae, 0x40, 0xc7, 0x03, 0x21, 0x3f, 0x95, 0xfe, 0x13, 0x02, 0x9d, 0x15, 0x24,
    0xc8, 0xef, 0xf1, 0xc4, 0xa4, 0x05, 0x79, 0x0c, 0x09, 0xa1, 0xa4, 0xd9, 0x63, 0xe9, 0x1c, 0x9f,
    0x68, 0x56, 0x45, 0xca, 0x27, 0xb1, 0xa3, 0xa3, 0xd8, 0xd0, 0xa3, 0x8f, 0x8a, 0x91, 0xe6, 0x65,
    0x48, 0x74, 0xd9, 0x1e, 0xe2, 0xde, 0x32, 0xb2, 0x7b, 0x03, 0x7f, 0x3c, 0xe3, 0x53, 0xa4, 0xf1,
    0x4c, 0x88, 0x49, 0x56, 0xcd, 0x59, 0x5d, 0x47, 0x9d, 0x28, 0xac, 0x29, 0x26, 0x03, 0xa6, 0xda,
    0xc5, 0x0d, 0x4f, 0x93, 0x51, 0x6c, 0x1d, 0x57, 0x7d, 0x77, 0xb2, 0x15, 0x12, 0x49, 0xe7, 0x25,
    0x82, 0x91, 0xb6, 0x7c, 0x9b, 0x1c, 0xde, 0x54, 0xae, 0x4d, 0x8e, 0xcb, 0xce, 0x91, 0xd1, 0x24,
    0xfb, 0x21, 0xc4, 0xb4, 0x6c, 0x03, 0x88, 0x05, 0xa1, 0x72, 0x9d, 0x42, 0x30, 0x4b, 0xab, 0x0b,
    0xfa, 0xbe, 0xcc, 0x63, 0x68, 0x25, 0x24, 0x24, 0x93, 0x46, 0x75, 0xed, 0x3b, 0x14, 0x7b, 0x84,
    0xb5, 0x67, 0x90, 0x8e, 0x7b, 0x19, 0x98, 0x7c, 0xaa, 0x85, 0x82, 0x74, 0x6f, 0xfc, 0xb7, 0x9f,
    0xf2, 0xbc, 0x2a, 0x88, 0xee, 0x17, 0xca, 0x1b, 0x3d, 0x7c, 0x74, 0xd4, 0xd9, 0x0f, 0xed, 0x7b,
    0x07, 0x71, 0xc0, 0xa0, 0x1f, 0x32, 0x7a, 0x89, 0x31, 0x11, 0x63, 0xd9, 0x05, 0xf1, 0x49, 0x9e,
    0xe6, 0x02, 0x7a, 0x56, 0xc3, 0x4a, 0x89, 0x27, 0x7f, 0xd7, 0x74, 0xea, 0xb1, 0x07, 0xcf, 0x2d,
    0x64, 0x88, 0x51, 0x22, 0xaa, 0xa0, 0x9b, 0xc7, 0xeb, 0x58, 0x2d, 0xe6, 0xfa, 0xc5, 0x13, 0x98,
    0xc9, 0x02, 0x74, 0x93, 0xb5, 0xe2, 0x50, 0x8d, 0x4a, 0x64, 0x1d, 0x4a, 0x2d, 0x04, 0x3f, 0x02,
    0xa5, 0xdc, 0x7d, 0xe1, 0x06, 0x13, 0xf0, 0x27, 0xfb, 0xca, 0x69, 0xda, 0x9e, 0x27, 0x03, 0x10,
};

static const uint8_t sMessageEncodingTest0554_ExpectedEncoding[] =
{
    0x30, 0x26, 0x5f, 0x6a, 0xd6, 0x31, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x7b, 0x2d,
    0x17, 0x3d, 0x88, 0x3f, 0xc6, 0xe0, 0x90, 0xf7, 0x9c, 0x1e, 0x83, 0x8f, 0xad, 0x79, 0x9c, 0xed,
    0x38, 0x0c, 0x3a, 0x62, 0x8d, 0x41, 0xec, 0x5e, 0x3b, 0xd4, 0x9c, 0xa2, 0x59, 0x54, 0x0d, 0x2f,
    0xd2, 0xe4, 0x6b, 0xc9, 0x72, 0x7e, 0x63, 0xf6, 0x03, 0x4f, 0x05, 0xf5, 0xa1, 0xc4, 0x3f, 0xda,
    0xf1, 0x32, 0x51, 0xf0, 0x70, 0x99, 0x98, 0x18, 0x8e, 0xc6, 0x78, 0x91, 0xc8, 0xbc, 0xff, 0xd3,
    0xd1, 0xe6, 0xd4, 0xdc, 0xfa, 0xd2, 0x5d, 0xf6, 0x46, 0xcd, 0x8b, 0xbb, 0x4b, 0x40, 0xed, 0xca,
    0xe3, 0x95, 0xa2, 0x04, 0x71, 0x68, 0x54, 0x76, 0x58, 0xe2, 0x6e, 0x07, 0xbd, 0x05, 0xb6, 0x34,
    0x3b, 0x78, 0xcc, 0x34, 0x86, 0x2b, 0x4f, 0x19, 0x9a, 0x07, 0xb4, 0x5a, 0x0e, 0x1d, 0x44, 0xbe,
    0x91, 0x3c, 0x93, 0x86, 0x62, 0x60, 0x7e, 0xe7, 0xba, 0xc8, 0xfa, 0x9d, 0xac, 0xf3, 0x53, 0xb3,
    0x1b, 0xdb, 0xab, 0x21, 0xf7, 0x75, 0x1c, 0x64, 0xfc, 0x67, 0x56, 0xca, 0xaf, 0x4a, 0x9a, 0xcf,
    0xd1, 0x3d, 0x6b, 0xb8, 0xe9, 0x96, 0xab, 0xfe, 0x14, 0x67, 0xd6, 0x75, 0xab, 0x96, 0x81, 0x2a,
    0xcd, 0xf9, 0xd3, 0xc1, 0x33, 0x8a, 0x93, 0x33, 0x8c, 0xa2, 0x90, 0xa4, 0x3a, 0x5a, 0xfc, 0xc4,
    0xd3, 0xd3, 0xa3, 0x2d, 0x69, 0x4b, 0x0f, 0x6a, 0xa4, 0xdd, 0x25, 0xfa, 0x19, 0x32, 0x81, 0xde,
    0xf0, 0x56, 0xaf, 0xd6, 0x3b, 0x84, 0xf5, 0x9c, 0x08, 0x45, 0xcb, 0x23, 0x9e, 0x5b, 0xbc, 0x5e,
    0xab, 0x74, 0x7f, 0x01, 0xcb, 0xa3, 0x2b, 0x8d, 0x34, 0x5f, 0x71, 0xc8, 0xb7, 0xbc, 0xa1, 0xab,
    0x25, 0x2b, 0xb9, 0xe8, 0x45, 0xf8, 0x10, 0x07, 0xa8, 0x5c, 0xc7, 0x75, 0xf7, 0x55, 0x01, 0xba,
    0x02, 0xbc, 0xa0, 0xd1, 0x0d, 0xc2, 0xed, 0x6a, 0x26, 0x56, 0x49, 0x21, 0xba, 0x31, 0xd9, 0xc0,
    0x34, 0xf4, 0x07, 0x90, 0xda, 0xca, 0x49, 0xaa, 0x86, 0x60, 0x08, 0x65, 0xe9, 0x5a, 0xa8, 0x13,
    0x2f, 0x5d, 0xe6, 0xfa, 0x94, 0x82, 0x81, 0xa0, 0x85, 0xcb, 0x2d, 0xca, 0x78, 0x2b, 0x53, 0x5c,
    0xc0, 0x29, 0x77, 0xdd, 0x28, 0x69, 0xf9, 0x4c, 0x99, 0xd2, 0x8e, 0x64, 0x80, 0x8c, 0xe3, 0x85,
    0x1c, 0xcb, 0xae, 0x90, 0x7a, 0x78, 0xf1, 0xca, 0xe5, 0xfc, 0xb1, 0xb2, 0xe7, 0xb8, 0x39, 0x8d,
    0x35, 0x4e, 0x7c, 0xe3, 0x8d, 0xff, 0x96, 0xdf, 0x30, 0x18, 0x53, 0x64, 0xa8, 0x0e, 0x05, 0xf2,
    0xb1, 0x63, 0xdc, 0x24, 0xf8, 0xea, 0xcd, 0x94, 0x19, 0x0b, 0x2e, 0xdd, 0x43, 0x4b, 0x77, 0xc2,
    0x0c, 0xf0, 0x5a, 0xb3, 0xe1, 0xfb, 0xfd, 0xf7, 0xa5, 0x70, 0x78, 0x78, 0x3c, 0x82, 0x6e, 0xed,
    0x1b, 0x71, 0x35, 0x20, 0x73, 0xab, 0x61, 0x84, 0x45, 0x0e, 0x31, 0x94, 0x25, 0xca, 0x9d, 0x0c,
    0xd4, 0xc6, 0xdb, 0x2c, 0x61, 0x0f, 0x98, 0x38, 0x77, 0x77, 0xbb, 0x58, 0xa4, 0xde, 0x36, 0xe9,
    0xd4, 0x81, 0xdf, 0xad, 0x42, 0x8b, 0xb5, 0xb6, 0xcf, 0xc7, 0xf9, 0xe0, 0x0b, 0xce, 0xf4, 0x89,
    0xb9, 0xde, 0xcc, 0x93, 0x33, 0x20, 0x89, 0x08, 0x70, 0xb3, 0x44, 0x24, 0x1a, 0x17, 0x72, 0xe1,
    0xc9, 0x62, 0xdd, 0x96, 0x99, 0x97, 0x14, 0x4b, 0x43, 0x5f, 0xe4, 0x11, 0xa9, 0x10, 0x98, 0xb7,
    0x96, 0x6a, 0x98, 0x20, 0xee, 0x55, 0x8a, 0x42, 0x37, 0xd3, 0x73, 0x17, 0x72, 0x5a, 0xe1, 0x10,
    0x21, 0xd2, 0xc2, 0xe8, 0x90, 0x8c, 0x06, 0xfc, 0x99, 0x3a, 0xc1, 0xa0, 0x1a, 0xcf, 0x75, 0x7f,
    0x07, 0xb2, 0x76, 0x3f, 0x68, 0xd8, 0xfc, 0xea, 0x59, 0x22, 0x22, 0x07, 0x63, 0xdb, 0x5e, 0x0e,
    0xfd, 0x39, 0x1c, 0x5e, 0x59, 0x1b, 0xae, 0xcd, 0xae, 0x6f, 0xc3, 0xa7, 0xe0, 0x6c, 0x66, 0xf3,
    0x64, 0x4d, 0x1b, 0x6b, 0x09, 0xe9, 0x19, 0xa5, 0x89, 0x38, 0x43, 0xd8, 0x71, 0x52, 0x91, 0x7f,
    0xcf, 0x6a, 0x8a, 0x6d, 0x7c, 0xd8, 0x72, 0x9e, 0x58, 0x61, 0xe1, 0x66, 0x7a, 0x48, 0x88, 0x98,
    0x9b, 0xbc, 0x99, 0x7b, 0x49, 0xd6, 0x55, 0x9a, 0x06, 0x7c, 0x17, 0x5e, 0xfe, 0x94, 0x48, 0x5c,
    0x6a, 0xb2, 0xe7, 0xb5, 0x23, 0x66, 0x0e, 0xcb, 0xd1, 0x74, 0xf0, 0x43, 0x17, 0x77, 0x29, 0x33,
    0x35, 0xb2, 0x82, 0x0a, 0xa1, 0xdf, 0xa0, 0x91, 0x29, 0x5d, 0x15, 0xcb, 0x19, 0xf7, 0x34, 0x5a,
    0x2d, 0x9b, 0xae, 0x09, 0x4c, 0x7a, 0x6f, 0x55, 0xbc, 0xe5, 0x20, 0x43, 0xe3, 0x7e, 0x4f, 0x9e,
    0x30, 0x7c, 0xf9, 0xe3, 0x02, 0xbd, 0x2d, 0xb3, 0x36, 0xf3, 0x04, 0x75, 0x8e, 0x74, 0xaa, 0xa9,
    0x79, 0x41, 0x17, 0xeb, 0x57, 0x90, 0x13, 0x44, 0x28, 0x1d, 0x93, 0x80, 0xd2, 0x9d, 0x4b, 0x8a,
    0x43, 0x7c, 0xb6, 0x3e, 0xd6, 0xb3, 0x82, 0xbb, 0x0d, 0x64, 0x98, 0xe0, 0x6e, 0x4e, 0xeb, 0xb6,
    0xf9, 0x50, 0x5f, 0x7b, 0x87, 0x6d, 0x0b, 0x94, 0x71, 0xf4, 0xdd, 0xc8, 0x17, 0xf9, 0x8f, 0xad,
    0xa4, 0x03, 0x18, 0xe0, 0xeb, 0xc2, 0x00, 0xc8, 0x9e, 0x74, 0x12, 0x4f, 0x95, 0x98, 0xce, 0x50,
    0x3c, 0xfc, 0x17, 0x87, 0x43, 0x63, 0xaa, 0x18, 0x0f, 0x8e, 0x74, 0xe7, 0xab, 0x12, 0x1d, 0x25,
    0x5b, 0xae, 0xd0, 0x52, 0xa1, 0xa3, 0x22, 0xea, 0x89, 0xf8, 0x0d, 0xc6, 0x65, 0x35, 0x8b, 0xcc,
    0xf0, 0x44, 0xb3, 0xef, 0xba, 0x4a, 0xfb, 0x65, 0x44, 0x73, 0x3d, 0x71, 0xf6, 0x9d, 0x62, 0xbd,
    0x4e, 0xd7, 0x88, 0x88, 0x82, 0x26, 0x81, 0x02, 0x8c, 0x94, 0x74, 0x5e, 0x02, 0x1d, 0xd4, 0x3e,
    0xe2, 0xa3, 0xf3, 0x0d, 0x2d, 0xd9, 0x99, 0xad, 0x71, 0x8d, 0xa6, 0x5f, 0xca, 0x2b, 0x64, 0x52,
    0x8f, 0x6a, 0x11, 0x95, 0xda, 0x33, 0x89, 0xf5, 0xdb, 0x18, 0xcf, 0xdf, 0x2f, 0xba, 0xcc, 0x59,
    0x83, 0x41, 0x3d, 0x02, 0x3e, 0x7f, 0x06, 0xe4, 0x02, 0xc4, 0xcf, 0xb4, 0x2d, 0x9b, 0x18, 0xdd,
    0xfd, 0xa0, 0x14, 0xf5, 0x65, 0xad, 0x73, 0x85, 0xa4, 0xbf, 0x28, 0x33, 0xee, 0xb3, 0x9d, 0x6f,
    0xe8, 0xa5, 0x0d, 0x06, 0xa6, 0xee, 0xb5, 0xd4, 0x75, 0x53, 0x8f, 0x50, 0x4d, 0x6f, 0x45, 0x83,
    0x3f, 0x69, 0x05, 0xda, 0xc9, 0x61, 0xe1, 0xbd, 0x37, 0x2b, 0xb2, 0x78, 0x76, 0x22, 0x44, 0x4f,
    0x8f, 0x35, 0x0f, 0xbf, 0x34, 0x60, 0xdb, 0xbb, 0xc8, 0x62, 0xcf, 0x4b, 0xa5, 0x37, 0xf1, 0xbd,
    0xf1, 0xac, 0xc2, 0xae, 0x68, 0x22, 0x9a, 0xab, 0x27, 0xa4, 0xef, 0x4b, 0x90, 0xae, 0xb8, 0x04,
    0xce, 0x01, 0x07, 0xa2, 0x8b, 0xc2, 0x3c, 0xc8, 0x81, 0x8a, 0x13, 0x71, 0x84, 0xf9, 0xff, 0x07,
    0x75, 0xfd, 0xa4, 0x31, 0xbc, 0x8a, 0x06, 0xbd, 0x1a, 0x5a, 0xc6, 0x85, 0x9b, 0x0c, 0x5f, 0x83,
    0x27, 0xfa, 0xb6, 0x76, 0xca, 0x29, 0xc9, 0x71, 0xd4, 0xb8, 0xe7, 0x62, 0x06, 0x3a, 0xaf, 0x5e,
    0xce, 0x85, 0xdc, 0x3c, 0x7a, 0xb3, 0x69, 0x19, 0x65, 0xa6, 0xd5, 0xd0, 0x53, 0x66, 0x1e, 0xa2,
    0x75, 0x44, 0xef, 0x36, 0x06, 0x60, 0x1a, 0x9a, 0x8c, 0xdf, 0xa0, 0xe2, 0xd5, 0x6b, 0xdb, 0x83,
    0x4e, 0x9e, 0xb2, 0x07, 0x0c, 0x3a, 0xd7, 0xd7, 0x46, 0xd5, 0xec, 0x76, 0x71, 0x58, 0x83, 0xcb,
    0xbd, 0xcf, 0xd2, 0x4b, 0xfb, 0xd4, 0xf1, 0x92, 0xbb, 0xef, 0xc5, 0x45, 0x02, 0x3e, 0x2f, 0xaf,
    0xd6, 0x51, 0xe9, 0xa5, 0x2d, 0x85, 0x3b, 0x05, 0x17, 0x48, 0xf0, 0x49, 0xb9, 0x64, 0xdb, 0xf1,
    0xe4, 0x8b, 0xe4, 0x4b, 0xd1, 0x5e, 0x7d, 0x8d, 0x49, 0x24, 0x2d, 0x93, 0x2f, 0x97, 0xeb, 0x01,
    0x92, 0xa9, 0xaf, 0xde, 0xa5, 0x91, 0xb9, 0x9b, 0x5b, 0xfb, 0x1a, 0x1e, 0xb6, 0x38, 0xbd, 0xf2,
};

static const MessageEncodingTestVector sMessageEncodingTest0554 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x31D66A5F,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_TunneledData,
        0x2D7B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0554_EncryptionKey,
    sMessageEncodingTest0554_Payload,
    sizeof(sMessageEncodingTest0554_Payload),
    sMessageEncodingTest0554_ExpectedEncoding,
    sizeof(sMessageEncodingTest0554_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0555_Payload[] =
{
    0xf9, 0xef, 0x2c, 0x25, 0x5a, 0xc5, 0x03, 0x3f, 0x97, 0x29, 0x24, 0x9e, 0x08, 0x21, 0x59, 0x48,
    0x9f, 0x79, 0xb8, 0x91, 0x4e, 0x77, 0x06, 0xdd, 0x16, 0x4f, 0xd7, 0x7f, 0x3c, 0x31, 0xf0, 0x98,
    0xeb, 0x29, 0x9b, 0x42, 0x68, 0x1c, 0xe0, 0xaa, 0xec, 0x60, 0xa5, 0x95, 0x6d, 0xbf, 0x31, 0xaf,
    0x9c, 0x93, 0xb4, 0x17, 0xd5, 0xcf, 0x7c, 0x21, 0x51, 0x31, 0x61, 0xcb, 0x1e, 0x2f, 0xbf, 0xd0,
    0x1a, 0x07, 0xb5, 0x6d, 0x3e, 0x55, 0x29, 0x75, 0xe2, 0xca, 0xc5, 0xeb, 0xab, 0x33, 0x2b, 0x3a,
    0x57, 0x7a, 0xf0, 0x78, 0x11, 0x6a, 0xf7, 0x66, 0xf7, 0x5d, 0xb2, 0x8c, 0x75, 0xec, 0x42, 0x6d,
    0x6a, 0xb4, 0xc2, 0x39, 0x8f, 0x62, 0x90, 0x9c, 0x60, 0x57, 0x83, 0x6d, 0xdf, 0xb5, 0xe3, 0x05,
    0xa4, 0xd9, 0xfd, 0xe9, 0x6b, 0x10, 0xeb, 0xab, 0x40, 0xc1, 0xc8, 0x34, 0xf5, 0x06, 0x27, 0x2f,
    0x85, 0x0b, 0x41, 0x30, 0x7d, 0xb6, 0x4b, 0xab, 0xdc, 0x27, 0x72, 0x31, 0xec, 0x0e, 0x61, 0xe1,
    0x3b, 0x80, 0xb1, 0x5e, 0x75, 0x94, 0xb5, 0x17, 0x40, 0xc0, 0x24, 0xa7, 0x72, 0x4a, 0x44, 0x0e,
    0x34, 0x2b, 0xb6, 0xf2, 0x24, 0xd4, 0x81, 0xb4, 0x7f, 0xd6, 0x64, 0xd8, 0x2c, 0xcf, 0x69, 0xd0,
    0x9e, 0x8e, 0xa2, 0xce, 0x47, 0x9e, 0x35, 0x52, 0xb7, 0x7c, 0x43, 0x8d, 0x6f, 0xcf, 0x9e, 0x47,
    0x76, 0x20, 0x78, 0xbc, 0xf8, 0x0f, 0x58, 0xa6, 0x43, 0xec, 0xfb, 0xe8, 0x32, 0x56, 0x6c, 0x6a,
    0xcf, 0x19, 0x34, 0xf7, 0xa5, 0x1c, 0x08, 0xa1, 0xd5, 0x09, 0xe5, 0xe6, 0x72, 0x02, 0xe9, 0x60,
    0x3b, 0x35, 0x92, 0xa1, 0x7d, 0x4b, 0x0c, 0x13, 0x85, 0xad, 0x85, 0xd1, 0xf7, 0xf0, 0xd9, 0xe2,
    0xc6, 0x55, 0x39, 0x47, 0x81, 0x4f, 0x09, 0xc6, 0x57, 0x73, 0x7c, 0x11, 0x5c, 0x28, 0x3e, 0xcd,
    0x39, 0x67, 0x3d, 0xa3, 0x63, 0x4e, 0x02, 0x94, 0xf2, 0xe8, 0x65, 0x16, 0x86, 0x3a, 0xbe, 0x0a,
    0x60, 0xe5, 0x1a, 0xe6, 0x2f, 0xd9, 0x57, 0x2b, 0x49, 0xf8, 0xc4, 0x42, 0x61, 0x91, 0x15, 0x90,
    0x6b, 0x0f, 0x28, 0xf4, 0x9f, 0x3c, 0xb7, 0x03, 0xda, 0xc7, 0x92, 0x3a, 0xa9, 0xc3, 0xe1, 0x6a,
    0x59, 0xa1, 0xd2, 0x18, 0xdc, 0xed, 0x90, 0xe0, 0x61, 0x05, 0x4b, 0xef, 0x3b, 0x19, 0x6d, 0x0e,
    0x35, 0x03, 0x8f, 0x91, 0x68, 0x67, 0xbb, 0x99, 0xd4, 0xb2, 0x70, 0x9b, 0x12, 0x08, 0xa4, 0xd8,
    0xa6, 0xe4, 0x27, 0xbe, 0xb0, 0x7a, 0xd7, 0x30, 0x17, 0xf8, 0x23, 0x31, 0xd7, 0x0e, 0xe7, 0xd9,
    0x43, 0x49, 0x86, 0xb1, 0xc0, 0x13, 0xed, 0x96, 0xa3, 0x22, 0x69, 0xab, 0xe1, 0xac, 0xfc, 0x86,
    0xf1, 0x17, 0x06, 0x52, 0xc2, 0x4f, 0x42, 0x75, 0xeb, 0x2f, 0xa3, 0x92, 0xee, 0xfe, 0x33, 0x93,
    0xc0, 0x07, 0x30, 0x09, 0xaa, 0xd3, 0xed, 0x27, 0xc7, 0x33, 0x26, 0x1b, 0x06, 0x4c, 0xba, 0x9b,
    0xfe, 0xca, 0x08, 0x67, 0x63, 0x09, 0x5e, 0x30, 0x2c, 0x5c, 0x5f, 0xd1, 0x66, 0x8d, 0x35, 0x22,
    0xc2, 0x70, 0xc6, 0x1c, 0x9a, 0x79, 0x5a, 0x73, 0x7d, 0xec, 0xac, 0x2a, 0x81, 0x51, 0x2f, 0x55,
    0xb9, 0x82, 0x1b, 0x47, 0x5a, 0xc5, 0x7b, 0x40, 0x87, 0xfc, 0x43, 0x1d, 0xcd, 0xa0, 0x1c, 0xaf,
    0xca, 0xc7, 0x69, 0x70, 0xb3, 0xb4, 0x30, 0x62, 0x35, 0xf5, 0x8b, 0x59, 0x05, 0xdb, 0xba, 0xcc,
    0x56, 0xe8, 0x86, 0xf9, 0x47, 0x4a, 0x78, 0xd3, 0xb8, 0xad, 0xc7, 0xf9, 0xe3, 0x20, 0xb8, 0xb5,
    0xa1, 0x95, 0xcf, 0x97, 0x48, 0xe1, 0x8d, 0x36, 0x01, 0x39, 0xd7, 0x85, 0x4a, 0x47, 0x67, 0xe2,
    0x1c, 0xa0, 0xcc, 0x96, 0xe4, 0xdb, 0x08, 0xe1, 0x82, 0x83, 0xa0, 0x02, 0x03, 0x5b, 0x14, 0xf5,
    0x7b, 0x24, 0xd8, 0xfa, 0x0b, 0x5c, 0xbb, 0xb2, 0x01, 0xb1, 0x7d, 0x9a, 0x99, 0x4c, 0x0c, 0x8e,
    0x98, 0xd9, 0x2c, 0x22, 0x37, 0x43, 0xfb, 0x1e, 0xea, 0x6d, 0x71, 0xe9, 0x12, 0x90, 0x8b, 0x08,
    0x80, 0x7e, 0x4a, 0x4d, 0x09, 0xe7, 0x18, 0x95, 0x46, 0x77, 0x90, 0x44, 0xab, 0xe9, 0xd8, 0x2a,
    0x5f, 0xeb, 0xd8, 0x2f, 0xa7, 0xdf, 0xd8, 0xf0, 0xca, 0xb2, 0xd1, 0x2c, 0x02, 0x80, 0xfb, 0xda,
    0x50, 0x29, 0x98, 0x56, 0x0e, 0x17, 0xe8, 0xd4, 0x1c, 0x59, 0x91, 0x4d, 0x18, 0x24, 0xf9, 0x0d,
    0x22, 0x15, 0x88, 0x0d, 0xc2, 0xf7, 0x45, 0x54, 0xde, 0x50, 0x14, 0x3f, 0xbd, 0xcd, 0x90, 0xd3,
    0xae, 0x2e, 0xa8, 0xa2, 0x3d, 0x17, 0xea, 0x25, 0x98, 0x8f, 0x86, 0x98, 0xde, 0x62, 0xdc, 0xc7,
    0xe5, 0xf7, 0xde, 0xab, 0xab, 0xdd, 0x96, 0xd2, 0x7a, 0x6a, 0x7e, 0xde, 0xff, 0x51, 0x2f, 0x3e,
    0x76, 0xd4, 0xf9, 0xea, 0x15, 0x8b, 0xac, 0x98, 0xa3, 0xaa, 0xee, 0x2c, 0xcd, 0x36, 0x7d, 0x40,
    0x8d, 0x0e, 0x0f, 0x3c, 0x91, 0x0a, 0x2a, 0x4c, 0xd4, 0xc6, 0x86, 0x2c, 0x5f, 0xc3, 0xcd, 0xf9,
    0x43, 0x15, 0x59, 0x62, 0x82, 0x0c, 0x92, 0xd2, 0x13, 0x34, 0x84, 0xf9, 0x54, 0xc2, 0xbc, 0xce,
    0x6b, 0x54, 0xf7, 0x12, 0xbe, 0x6c, 0x87, 0xca, 0x12, 0xd0, 0x47, 0x4a, 0xf1, 0xaf, 0xe4, 0xaf,
    0x89, 0xfc, 0x10, 0x6b, 0x7b, 0xad, 0xa6, 0x17, 0x23, 0x0c, 0x09, 0x97, 0xc6, 0xfe, 0xed, 0x7a,
    0xe6, 0x20, 0x58, 0x7e, 0xb7, 0x7d, 0x9f, 0xd3, 0xb5, 0x37, 0x27, 0x6b, 0x93, 0x7e, 0x00, 0x78,
    0x5f, 0xa2, 0x99, 0x35, 0xdd, 0x5a, 0x42, 0xda, 0x73, 0x9a, 0x6a, 0x23, 0xdd, 0xa7, 0x18, 0x12,
    0x9e, 0xbc, 0xad, 0x98, 0xb5, 0xe4, 0xd6, 0x28, 0x81, 0x89, 0x5b, 0x5a, 0x2f, 0x0b, 0xf1, 0x2d,
    0xed, 0xfd, 0xd0, 0x2c, 0xa9, 0x63, 0xec, 0x53, 0x4f, 0x5e, 0xad, 0x4f, 0xdd, 0x10, 0xa7, 0xd1,
    0x85, 0xd4, 0xfd, 0x03, 0x0d, 0x10, 0xd0, 0xbe, 0xcb, 0x9e, 0x09, 0x12, 0xa3, 0x18, 0x97, 0xd9,
    0xa3, 0x5d, 0x91, 0x77, 0x2e, 0x2d, 0xeb, 0xbc, 0xd4, 0x09, 0x37, 0x6b, 0xf1, 0x52, 0x0b, 0xdd,
    0x4c, 0x40, 0x1f, 0x9c, 0x11, 0x7b, 0x99, 0x06, 0x37, 0x20, 0xd4, 0xf1, 0x3d, 0x5e, 0x76, 0xd0,
    0xf7, 0xc3, 0x26, 0xf3, 0x04, 0xc7, 0xdb, 0x7d, 0x0e, 0x98, 0x32, 0x3b, 0x5b, 0xf6, 0x1a, 0x7b,
    0x88, 0xf5, 0xfc, 0xdd, 0x6a, 0x33, 0x4d, 0xf4, 0x5d, 0x93, 0x58, 0x26, 0xb9, 0x4f, 0x07, 0xde,
    0xcf, 0x37, 0xdc, 0xd5, 0xe4, 0x34, 0x20, 0x0f, 0x7f, 0x62, 0xd9, 0x38, 0x2e, 0xa1, 0xb9, 0xf1,
    0x21, 0xfc, 0xb1, 0xb4, 0x0a, 0x05, 0x79, 0xd7, 0x9d, 0xa5, 0x51, 0x30, 0x56, 0x6f, 0xd9, 0x34,
    0x1c, 0x1a, 0x51, 0x2e, 0xab, 0x9b, 0xf4, 0x39, 0x1e, 0xe7, 0x72, 0x18, 0x20, 0x8b, 0x93, 0x3b,
    0xa5, 0xbf, 0x3d, 0x5c, 0xc4, 0xa7, 0xf9, 0x12, 0x00, 0x51, 0x28, 0x69, 0x36, 0x02, 0xe7, 0x30,
    0x6c, 0x26, 0xfb, 0xb1, 0x81, 0x9d, 0x3c, 0xb7, 0xa4, 0x71, 0xc0, 0x85, 0x29, 0x5a, 0x5b, 0x31,
    0x11, 0x7f, 0x67, 0x27, 0x02, 0x5b, 0xe8, 0x28, 0xc7, 0xb3, 0x81, 0x64, 0x04, 0x39, 0xac, 0xca,
    0xf4, 0xc9, 0xe2, 0x29, 0x32, 0x0a, 0xa4, 0xce, 0xaf, 0xfb, 0x5c, 0xcf, 0x42, 0x46, 0x63, 0x61,
    0x72, 0x28, 0xa0, 0xca, 0xe3, 0x40, 0x38, 0xb8, 0xe9, 0xa7, 0x1c, 0xa9, 0x17, 0xe1, 0x59, 0xb2,
    0x83, 0xce, 0x3e, 0x99, 0x2a, 0x22, 0xa5, 0x2d, 0xa4, 0x82, 0x8b, 0x6e, 0x7f, 0x7f, 0xa1, 0xd4,
    0xd2, 0x43, 0x03, 0x50, 0x55, 0x93, 0x94, 0x16, 0x3f, 0x65, 0xd7, 0x4a, 0x67, 0x79, 0x03, 0xc2,
};

static const uint8_t sMessageEncodingTest0555_ExpectedEncoding[] =
{
    0x00, 0x2a, 0x31, 0x1e, 0x57, 0x7f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xf9, 0xef,
    0x2c, 0x25, 0x5a, 0xc5, 0x03, 0x3f, 0x97, 0x29, 0x24, 0x9e, 0x08, 0x21, 0x59, 0x48, 0x9f, 0x79,
    0xb8, 0x91, 0x4e, 0x77, 0x06, 0xdd, 0x16, 0x4f, 0xd7, 0x7f, 0x3c, 0x31, 0xf0, 0x98, 0xeb, 0x29,
    0x9b, 0x42, 0x68, 0x1c, 0xe0, 0xaa, 0xec, 0x60, 0xa5, 0x95, 0x6d, 0xbf, 0x31, 0xaf, 0x9c, 0x93,
    0xb4, 0x17, 0xd5, 0xcf, 0x7c, 0x21, 0x51, 0x31, 0x61, 0xcb, 0x1e, 0x2f, 0xbf, 0xd0, 0x1a, 0x07,
    0xb5, 0x6d, 0x3e, 0x55, 0x29, 0x75, 0xe2, 0xca, 0xc5, 0xeb, 0xab, 0x33, 0x2b, 0x3a, 0x57, 0x7a,
    0xf0, 0x78, 0x11, 0x6a, 0xf7, 0x66, 0xf7, 0x5d, 0xb2, 0x8c, 0x75, 0xec, 0x42, 0x6d, 0x6a, 0xb4,
    0xc2, 0x39, 0x8f, 0x62, 0x90, 0x9c, 0x60, 0x57, 0x83, 0x6d, 0xdf, 0xb5, 0xe3, 0x05, 0xa4, 0xd9,
    0xfd, 0xe9, 0x6b, 0x10, 0xeb, 0xab, 0x40, 0xc1, 0xc8, 0x34, 0xf5, 0x06, 0x27, 0x2f, 0x85, 0x0b,
    0x41, 0x30, 0x7d, 0xb6, 0x4b, 0xab, 0xdc, 0x27, 0x72, 0x31, 0xec, 0x0e, 0x61, 0xe1, 0x3b, 0x80,
    0xb1, 0x5e, 0x75, 0x94, 0xb5, 0x17, 0x40, 0xc0, 0x24, 0xa7, 0x72, 0x4a, 0x44, 0x0e, 0x34, 0x2b,
    0xb6, 0xf2, 0x24, 0xd4, 0x81, 0xb4, 0x7f, 0xd6, 0x64, 0xd8, 0x2c, 0xcf, 0x69, 0xd0, 0x9e, 0x8e,
    0xa2, 0xce, 0x47, 0x9e, 0x35, 0x52, 0xb7, 0x7c, 0x43, 0x8d, 0x6f, 0xcf, 0x9e, 0x47, 0x76, 0x20,
    0x78, 0xbc, 0xf8, 0x0f, 0x58, 0xa6, 0x43, 0xec, 0xfb, 0xe8, 0x32, 0x56, 0x6c, 0x6a, 0xcf, 0x19,
    0x34, 0xf7, 0xa5, 0x1c, 0x08, 0xa1, 0xd5, 0x09, 0xe5, 0xe6, 0x72, 0x02, 0xe9, 0x60, 0x3b, 0x35,
    0x92, 0xa1, 0x7d, 0x4b, 0x0c, 0x13, 0x85, 0xad, 0x85, 0xd1, 0xf7, 0xf0, 0xd9, 0xe2, 0xc6, 0x55,
    0x39, 0x47, 0x81, 0x4f, 0x09, 0xc6, 0x57, 0x73, 0x7c, 0x11, 0x5c, 0x28, 0x3e, 0xcd, 0x39, 0x67,
    0x3d, 0xa3, 0x63, 0x4e, 0x02, 0x94, 0xf2, 0xe8, 0x65, 0x16, 0x86, 0x3a, 0xbe, 0x0a, 0x60, 0xe5,
    0x1a, 0xe6, 0x2f, 0xd9, 0x57, 0x2b, 0x49, 0xf8, 0xc4, 0x42, 0x61, 0x91, 0x15, 0x90, 0x6b, 0x0f,
    0x28, 0xf4, 0x9f, 0x3c, 0xb7, 0x03, 0xda, 0xc7, 0x92, 0x3a, 0xa9, 0xc3, 0xe1, 0x6a, 0x59, 0xa1,
    0xd2, 0x18, 0xdc, 0xed, 0x90, 0xe0, 0x61, 0x05, 0x4b, 0xef, 0x3b, 0x19, 0x6d, 0x0e, 0x35, 0x03,
    0x8f, 0x91, 0x68, 0x67, 0xbb, 0x99, 0xd4, 0xb2, 0x70, 0x9b, 0x12, 0x08, 0xa4, 0xd8, 0xa6, 0xe4,
    0x27, 0xbe, 0xb0, 0x7a, 0xd7, 0x30, 0x17, 0xf8, 0x23, 0x31, 0xd7, 0x0e, 0xe7, 0xd9, 0x43, 0x49,
    0x86, 0xb1, 0xc0, 0x13, 0xed, 0x96, 0xa3, 0x22, 0x69, 0xab, 0xe1, 0xac, 0xfc, 0x86, 0xf1, 0x17,
    0x06, 0x52, 0xc2, 0x4f, 0x42, 0x75, 0xeb, 0x2f, 0xa3, 0x92, 0xee, 0xfe, 0x33, 0x93, 0xc0, 0x07,
    0x30, 0x09, 0xaa, 0xd3, 0xed, 0x27, 0xc7, 0x33, 0x26, 0x1b, 0x06, 0x4c, 0xba, 0x9b, 0xfe, 0xca,
    0x08, 0x67, 0x63, 0x09, 0x5e, 0x30, 0x2c, 0x5c, 0x5f, 0xd1, 0x66, 0x8d, 0x35, 0x22, 0xc2, 0x70,
    0xc6, 0x1c, 0x9a, 0x79, 0x5a, 0x73, 0x7d, 0xec, 0xac, 0x2a, 0x81, 0x51, 0x2f, 0x55, 0xb9, 0x82,
    0x1b, 0x47, 0x5a, 0xc5, 0x7b, 0x40, 0x87, 0xfc, 0x43, 0x1d, 0xcd, 0xa0, 0x1c, 0xaf, 0xca, 0xc7,
    0x69, 0x70, 0xb3, 0xb4, 0x30, 0x62, 0x35, 0xf5, 0x8b, 0x59, 0x05, 0xdb, 0xba, 0xcc, 0x56, 0xe8,
    0x86, 0xf9, 0x47, 0x4a, 0x78, 0xd3, 0xb8, 0xad, 0xc7, 0xf9, 0xe3, 0x20, 0xb8, 0xb5, 0xa1, 0x95,
    0xcf, 0x97, 0x48, 0xe1, 0x8d, 0x36, 0x01, 0x39, 0xd7, 0x85, 0x4a, 0x47, 0x67, 0xe2, 0x1c, 0xa0,
    0xcc, 0x96, 0xe4, 0xdb, 0x08, 0xe1, 0x82, 0x83, 0xa0, 0x02, 0x03, 0x5b, 0x14, 0xf5, 0x7b, 0x24,
    0xd8, 0xfa, 0x0b, 0x5c, 0xbb, 0xb2, 0x01, 0xb1, 0x7d, 0x9a, 0x99, 0x4c, 0x0c, 0x8e, 0x98, 0xd9,
    0x2c, 0x22, 0x37, 0x43, 0xfb, 0x1e, 0xea, 0x6d, 0x71, 0xe9, 0x12, 0x90, 0x8b, 0x08, 0x80, 0x7e,
    0x4a, 0x4d, 0x09, 0xe7, 0x18, 0x95, 0x46, 0x77, 0x90, 0x44, 0xab, 0xe9, 0xd8, 0x2a, 0x5f, 0xeb,
    0xd8, 0x2f, 0xa7, 0xdf, 0xd8, 0xf0, 0xca, 0xb2, 0xd1, 0x2c, 0x02, 0x80, 0xfb, 0xda, 0x50, 0x29,
    0x98, 0x56, 0x0e, 0x17, 0xe8, 0xd4, 0x1c, 0x59, 0x91, 0x4d, 0x18, 0x24, 0xf9, 0x0d, 0x22, 0x15,
    0x88, 0x0d, 0xc2, 0xf7, 0x45, 0x54, 0xde, 0x50, 0x14, 0x3f, 0xbd, 0xcd, 0x90, 0xd3, 0xae, 0x2e,
    0xa8, 0xa2, 0x3d, 0x17, 0xea, 0x25, 0x98, 0x8f, 0x86, 0x98, 0xde, 0x62, 0xdc, 0xc7, 0xe5, 0xf7,
    0xde, 0xab, 0xab, 0xdd, 0x96, 0xd2, 0x7a, 0x6a, 0x7e, 0xde, 0xff, 0x51, 0x2f, 0x3e, 0x76, 0xd4,
    0xf9, 0xea, 0x15, 0x8b, 0xac, 0x98, 0xa3, 0xaa, 0xee, 0x2c, 0xcd, 0x36, 0x7d, 0x40, 0x8d, 0x0e,
    0x0f, 0x3c, 0x91, 0x0a, 0x2a, 0x4c, 0xd4, 0xc6, 0x86, 0x2c, 0x5f, 0xc3, 0xcd, 0xf9, 0x43, 0x15,
    0x59, 0x62, 0x82, 0x0c, 0x92, 0xd2, 0x13, 0x34, 0x84, 0xf9, 0x54, 0xc2, 0xbc, 0xce, 0x6b, 0x54,
    0xf7, 0x12, 0xbe, 0x6c, 0x87, 0xca, 0x12, 0xd0, 0x47, 0x4a, 0xf1, 0xaf, 0xe4, 0xaf, 0x89, 0xfc,
    0x10, 0x6b, 0x7b, 0xad, 0xa6, 0x17, 0x23, 0x0c, 0x09, 0x97, 0xc6, 0xfe, 0xed, 0x7a, 0xe6, 0x20,
    0x58, 0x7e, 0xb7, 0x7d, 0x9f, 0xd3, 0xb5, 0x37, 0x27, 0x6b, 0x93, 0x7e, 0x00, 0x78, 0x5f, 0xa2,
    0x99, 0x35, 0xdd, 0x5a, 0x42, 0xda, 0x73, 0x9a, 0x6a, 0x23, 0xdd, 0xa7, 0x18, 0x12, 0x9e, 0xbc,
    0xad, 0x98, 0xb5, 0xe4, 0xd6, 0x28, 0x81, 0x89, 0x5b, 0x5a, 0x2f, 0x0b, 0xf1, 0x2d, 0xed, 0xfd,
    0xd0, 0x2c, 0xa9, 0x63, 0xec, 0x53, 0x4f, 0x5e, 0xad, 0x4f, 0xdd, 0x10, 0xa7, 0xd1, 0x85, 0xd4,
    0xfd, 0x03, 0x0d, 0x10, 0xd0, 0xbe, 0xcb, 0x9e, 0x09, 0x12, 0xa3, 0x18, 0x97, 0xd9, 0xa3, 0x5d,
    0x91, 0x77, 0x2e, 0x2d, 0xeb, 0xbc, 0xd4, 0x09, 0x37, 0x6b, 0xf1, 0x52, 0x0b, 0xdd, 0x4c, 0x40,
    0x1f, 0x9c, 0x11, 0x7b, 0x99, 0x06, 0x37, 0x20, 0xd4, 0xf1, 0x3d, 0x5e, 0x76, 0xd0, 0xf7, 0xc3,
    0x26, 0xf3, 0x04, 0xc7, 0xdb, 0x7d, 0x0e, 0x98, 0x32, 0x3b, 0x5b, 0xf6, 0x1a, 0x7b, 0x88, 0xf5,
    0xfc, 0xdd, 0x6a, 0x33, 0x4d, 0xf4, 0x5d, 0x93, 0x58, 0x26, 0xb9, 0x4f, 0x07, 0xde, 0xcf, 0x37,
    0xdc, 0xd5, 0xe4, 0x34, 0x20, 0x0f, 0x7f, 0x62, 0xd9, 0x38, 0x2e, 0xa1, 0xb9, 0xf1, 0x21, 0xfc,
    0xb1, 0xb4, 0x0a, 0x05, 0x79, 0xd7, 0x9d, 0xa5, 0x51, 0x30, 0x56, 0x6f, 0xd9, 0x34, 0x1c, 0x1a,
    0x51, 0x2e, 0xab, 0x9b, 0xf4, 0x39, 0x1e, 0xe7, 0x72, 0x18, 0x20, 0x8b, 0x93, 0x3b, 0xa5, 0xbf,
    0x3d, 0x5c, 0xc4, 0xa7, 0xf9, 0x12, 0x00, 0x51, 0x28, 0x69, 0x36, 0x02, 0xe7, 0x30, 0x6c, 0x26,
    0xfb, 0xb1, 0x81, 0x9d, 0x3c, 0xb7, 0xa4, 0x71, 0xc0, 0x85, 0x29, 0x5a, 0x5b, 0x31, 0x11, 0x7f,
    0x67, 0x27, 0x02, 0x5b, 0xe8, 0x28, 0xc7, 0xb3, 0x81, 0x64, 0x04, 0x39, 0xac, 0xca, 0xf4, 0xc9,
    0xe2, 0x29, 0x32, 0x0a, 0xa4, 0xce, 0xaf, 0xfb, 0x5c, 0xcf, 0x42, 0x46, 0x63, 0x61, 0x72, 0x28,
    0xa0, 0xca, 0xe3, 0x40, 0x38, 0xb8, 0xe9, 0xa7, 0x1c, 0xa9, 0x17, 0xe1, 0x59, 0xb2, 0x83, 0xce,
    0x3e, 0x99, 0x2a, 0x22, 0xa5, 0x2d, 0xa4, 0x82, 0x8b, 0x6e, 0x7f, 0x7f, 0xa1, 0xd4, 0xd2, 0x43,
    0x03, 0x50, 0x55, 0x93, 0x94, 0x16, 0x3f, 0x65, 0xd7, 0x4a, 0x67, 0x79, 0x03, 0xc2,
};

static const MessageEncodingTestVector sMessageEncodingTest0555 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7F571E31,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0555_Payload,
    sizeof(sMessageEncodingTest0555_Payload),
    sMessageEncodingTest0555_ExpectedEncoding,
    sizeof(sMessageEncodingTest0555_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0556_EncryptionKey =
{
    {
        0xe1, 0x62, 0x76, 0x2c, 0x73, 0x0a, 0x6c, 0x39, 0xf7, 0x4b, 0xbd, 0xf8, 0xf4, 0x2d, 0xef, 0x41,
    },
    {
        0xb5, 0x1b, 0xaa, 0x11, 0x9c, 0x35, 0x38, 0x2f, 0xfe, 0xbe, 0x66, 0xe9, 0x39, 0x8f, 0x99, 0x9c,
        0x74, 0xe8, 0xf8, 0xa7,
    }
};
static const uint8_t sMessageEncodingTest0556_Payload[] =
{
    0x3f, 0x30, 0x62, 0x7b, 0xb6, 0xc3, 0xb0, 0x7d, 0x0b, 0xb1, 0x10, 0x70, 0x6b, 0x4e, 0xd9, 0xaa,
    0x0d, 0xeb, 0x65, 0xe6, 0x16, 0x1e, 0x55, 0x23, 0x43, 0x01, 0x6e, 0x78, 0x5c, 0xdc, 0x5e, 0x88,
    0xb8, 0xd2, 0x96, 0x91, 0x7d, 0xb1, 0xc1, 0xb9, 0x21, 0x67, 0x36, 0x8e, 0x5f, 0xd8, 0xfd, 0xf9,
    0xd7, 0x89, 0x9b, 0xe2, 0xd2, 0x05, 0x96, 0x30, 0xf9, 0x45, 0xa7, 0x9e, 0x15, 0x8b, 0xeb, 0x43,
    0x3d, 0xe1, 0xd7, 0xbc, 0x3a, 0xcc, 0xd9, 0xcb, 0x8d, 0x85, 0xb5, 0x1e, 0xd0, 0x16, 0x4c, 0x9b,
    0x10, 0x0d, 0xd1, 0x8b, 0x8a, 0x0e, 0x55, 0xec, 0x66, 0xd0, 0xea, 0x14, 0xa2, 0x20, 0x96, 0x54,
    0xc3, 0xe1, 0x82, 0x41, 0x94, 0x9b, 0x30, 0xac, 0xdc, 0x6f, 0x3e, 0x07, 0xab, 0xf5, 0x65, 0xc5,
    0xb0, 0x03, 0x06, 0x71, 0x00, 0x02, 0x1f, 0x53, 0x77, 0xe2, 0x1d, 0xee, 0x7c, 0xea, 0x5b, 0x5d,
    0x31, 0xce, 0x20, 0x64, 0x13, 0x05, 0x33, 0x49, 0x18, 0x40, 0x63, 0xb9, 0x66, 0xe7, 0x7f, 0xe6,
    0x87, 0xc3, 0xf8, 0xd7, 0x86, 0x9e, 0x3b, 0xe1, 0x38, 0x46, 0xa8, 0xa0, 0xdf, 0x31, 0x50, 0x0f,
    0x09, 0x57, 0xcc, 0x12, 0xc7, 0xdf, 0xdd, 0x67, 0xc2, 0x2b, 0x0e, 0xad, 0xb1, 0xe4, 0x4d, 0x97,
    0x55, 0x38, 0x1e, 0xee, 0xa0, 0xd9, 0x39, 0x62, 0xe1, 0x71, 0x5f, 0x2b, 0xcc, 0x81, 0x3f, 0x87,
    0xeb, 0xb9, 0x2b, 0xfb, 0xcb, 0x9a, 0x74, 0x18, 0xec, 0xa4, 0x47, 0x4a, 0xfa, 0xa3, 0xcb, 0xf3,
    0x1d, 0xe3, 0xbb, 0xe9, 0xc7, 0x40, 0x64, 0xed, 0x9d, 0xa1, 0xa4, 0x6c, 0x5a, 0xc1, 0xd6, 0xb3,
    0x64, 0xb7, 0xee, 0xc2, 0x1d, 0xad, 0xdc, 0x0d, 0xf9, 0x52, 0x82, 0x30, 0xf5, 0xb4, 0x76, 0x61,
    0x14, 0xcf, 0x87, 0xca, 0x0b, 0x76, 0xba, 0x2e, 0xe8, 0x66, 0xbb, 0x57, 0x71, 0x73, 0x2e, 0x9a,
    0x11, 0x94, 0x1f, 0xb4, 0xc6, 0x8e, 0xaf, 0xbb, 0x9a, 0xd9, 0x81, 0xe5, 0x54, 0x75, 0x73, 0x51,
    0x9b, 0xab, 0xe4, 0xf8, 0x65, 0xe6, 0x4e, 0xea, 0x02, 0xd7, 0xed, 0x5d, 0x07, 0xcd, 0xf2, 0x67,
    0xc1, 0x71, 0x03, 0xec, 0x81, 0x5d, 0x3d, 0x60, 0xa6, 0xad, 0xd2, 0x33, 0x81, 0xe0, 0x96, 0xa4,
    0x71, 0xcb, 0x0e, 0xd7, 0xe2, 0xe8, 0x37, 0x0b, 0x6d, 0x34, 0x19, 0xf8, 0xd8, 0x31, 0x13, 0x45,
    0xe7, 0xef, 0x2a, 0x7d, 0x1a, 0xc2, 0x4f, 0x60, 0xd8, 0x27, 0x78, 0xe2, 0x1b, 0x25, 0xac, 0x1f,
    0xe4, 0x52, 0x60, 0x62, 0x5a, 0x22, 0xa3, 0xbb, 0xdd, 0xfa, 0xff, 0x33, 0xcc, 0x41, 0x7b, 0xbd,
    0x7f, 0x94, 0xc8, 0x87, 0x77, 0xce, 0x63, 0x7e, 0x95, 0x0e, 0xba, 0xfe, 0xa7, 0xb5, 0x64, 0xe7,
    0x1e, 0x60, 0xaf, 0xcf, 0x18, 0x58, 0xb6, 0x6a, 0x0b, 0x53, 0xa1, 0x67, 0x71, 0x6c, 0x65, 0xe7,
    0x1c, 0x82, 0x5d, 0x5e, 0x81, 0x2d, 0x0e, 0x2a, 0x54, 0xb6, 0x2d, 0xc8, 0xc0, 0xc2, 0x67, 0xe4,
    0xd7, 0x48, 0x83, 0x0d, 0x6b, 0x26, 0x4f, 0xb0, 0x6c, 0x61, 0xcc, 0xe3, 0x78, 0x35, 0xae, 0xaf,
    0x20, 0x62, 0x96, 0x31, 0x0d, 0xc2, 0x7f, 0x21, 0x26, 0xac, 0xbc, 0xc5, 0x88, 0x28, 0x22, 0xc5,
    0x52, 0x4f, 0x3b, 0x91, 0xdf, 0x9e, 0xae, 0xd4, 0xa1, 0xa3, 0x5f, 0x74, 0xf2, 0x2a, 0x86, 0xcb,
    0xbb, 0x7d, 0x47, 0xa7, 0xd1, 0x0c, 0xdc, 0x51, 0x51, 0xc6, 0xdc, 0x68, 0x6d, 0xcd, 0x65, 0xd2,
    0x30, 0x39, 0x8c, 0xc1, 0x88, 0x55, 0xfc, 0x1d, 0xcf, 0x3f, 0x86, 0xa2, 0xe1, 0xf3, 0x79, 0x93,
    0x73, 0xd7, 0x1b, 0xf6, 0xef, 0x30, 0x5b, 0x27, 0xc4, 0x7c, 0xfe, 0xd0, 0x94, 0x6f, 0xbe, 0x25,
    0x96, 0x73, 0xb6, 0xfc, 0x41, 0x87, 0x1f, 0xf8, 0x25, 0x34, 0xd8, 0xa4, 0x2b, 0x72, 0x9b, 0xe0,
    0x2e, 0x61, 0xf9, 0x7c, 0x1d, 0x3f, 0xaf, 0x19, 0x71, 0x4e, 0x89, 0x7f, 0x17, 0x95, 0x44, 0x2c,
    0x65, 0xb7, 0x9b, 0x90, 0x2a, 0x38, 0x6b, 0xcd, 0x67, 0x55, 0x8a, 0x50, 0xac, 0x01, 0x2c, 0xe2,
    0x6c, 0x23, 0xee, 0x8d, 0x25, 0x43, 0x15, 0x4d, 0x2a, 0x8f, 0xc9, 0x26, 0x41, 0xca, 0x0a, 0xa3,
    0x80, 0x73, 0x1b, 0x65, 0x71, 0x44, 0xbb, 0xce, 0x84, 0x1a, 0x48, 0x66, 0x86, 0x22, 0xbd, 0x20,
    0xd3, 0x06, 0x4a, 0x1a, 0x9e, 0x9c, 0xbc, 0x21, 0x83, 0xee, 0x82, 0x64, 0x73, 0x63, 0xee, 0x60,
    0xb1, 0xa3, 0xb5, 0x30, 0x9e, 0xe7, 0x60, 0x82, 0x51, 0x6a, 0xd5, 0xda, 0x71, 0x87, 0x98, 0xfe,
    0x75, 0x59, 0x8b, 0x04, 0xbd, 0x75, 0x1e, 0xef, 0xf5, 0x3e, 0x4c, 0x35, 0xf8, 0x54, 0xbc, 0x30,
    0x31, 0x1e, 0x80, 0x11, 0x7e, 0x0b, 0x93, 0xfd, 0xa2, 0x7d, 0x93, 0x33, 0xdd, 0xaf, 0x7f, 0x8c,
    0xfe, 0x2a, 0x7c, 0xd0, 0x9e, 0xa9, 0x0e, 0xd6, 0xcd, 0x6d, 0xa0, 0x8a, 0x95, 0x9a, 0x27, 0x69,
    0x5b, 0xeb, 0x09, 0x0c, 0x12, 0x3b, 0x69, 0x19, 0x06, 0xc7, 0xba, 0xe5, 0x3b, 0xd2, 0x01, 0x25,
    0xfb, 0xb4, 0x89, 0x8d, 0x2d, 0x5c, 0x55, 0x8e, 0xc9, 0xa0, 0xce, 0x1d, 0xdc, 0xda, 0x7f, 0x00,
    0x00, 0x65, 0x31, 0x3f, 0x29, 0x62, 0xea, 0xc8, 0xa4, 0x32, 0x7f, 0x2f, 0xf9, 0xd0, 0x2a, 0xe3,
    0x01, 0xbc, 0xb0, 0x68, 0x0d, 0x38, 0xf0, 0xcd, 0x27, 0x17, 0x5e, 0x86, 0x30, 0x00, 0x0b, 0x13,
    0xee, 0x24, 0x7c, 0x20, 0xf1, 0x50, 0x6e, 0xcf, 0xf2, 0xba, 0xd6, 0x52, 0xa5, 0x2d, 0x37, 0xc1,
    0x90, 0xf0, 0xcb, 0x67, 0x01, 0x56, 0xdd, 0xda, 0x38, 0xa0, 0xd5, 0xd5, 0x3a, 0x17, 0x7f, 0x7f,
    0xf3, 0x76, 0x8a, 0x32, 0x43, 0xf2, 0xd1, 0x51, 0x97, 0x2c, 0x83, 0x27, 0xc8, 0x06, 0x38, 0xde,
    0x39, 0xcc, 0xe6, 0xa2, 0x34, 0xfc, 0x4e, 0x62, 0x11, 0x67, 0x82, 0x0c, 0x33, 0x47, 0xc3, 0xa7,
    0xe8, 0xe4, 0xa6, 0x38, 0xc6, 0x02, 0xbd, 0xcb, 0xf7, 0xdf, 0x38, 0x6e, 0x79, 0x63, 0x63, 0xe7,
    0xc7, 0xe4, 0xdf, 0xde, 0x28, 0xc1, 0xb9, 0x4c, 0x10, 0x43, 0xc7, 0xc1, 0x2a, 0xb6, 0xfe, 0xb3,
    0x7d, 0x81, 0xdd, 0xd9, 0xae, 0x00, 0xf5, 0xfe, 0xf7, 0x4a, 0x5d, 0x5f, 0x60, 0x20, 0xfd, 0xad,
    0x08, 0xeb, 0x35, 0x09, 0x11, 0x69, 0xba, 0x11, 0xa4, 0x9e, 0x00, 0x78, 0x67, 0xae, 0xb3, 0x43,
    0x1f, 0xe0, 0xde, 0x15, 0xbc, 0x86, 0x89, 0x57, 0x30, 0x05, 0x93, 0x78, 0x37, 0xb3, 0xcf, 0x66,
    0xd1, 0x7f, 0xea, 0x9f, 0xad, 0x78, 0x0f, 0x76, 0x96, 0x3a, 0xfc, 0x69, 0x42, 0xcb, 0xa6, 0xa7,
    0x86, 0xc3, 0xce, 0xa5, 0xd8, 0x78, 0x78, 0xbe, 0xa0, 0xe5, 0x6e, 0x28, 0x52, 0x24, 0x1f, 0x1e,
    0xc4, 0x9b, 0x48, 0xa2, 0x47, 0x63, 0x20, 0x77, 0x80, 0xf1, 0xa9, 0x70, 0xbd, 0x90, 0x26, 0x07,
    0x9e, 0x34, 0x10, 0x20, 0x50, 0xe2, 0xa4, 0x2d, 0x14, 0xf5, 0xed, 0x76, 0x26, 0xd2, 0xd7, 0xc0,
    0xce, 0x81, 0x1f, 0xbc, 0x56, 0xea, 0x39, 0xcc, 0x6b, 0xa4, 0x70, 0x43, 0x0a, 0x50, 0x46, 0x54,
    0x2b, 0xb6, 0x94, 0xea, 0xa6, 0x81, 0x27, 0x00, 0xfd, 0xe6, 0x09, 0x4f, 0x9b, 0x1c, 0x7d, 0xc5,
    0x71, 0xb5, 0xb4, 0xde, 0x06, 0xc1, 0x75, 0xcf, 0x66, 0x83, 0x16, 0x9f, 0x8f, 0x60, 0xbc, 0x0a,
    0x5e, 0xd6, 0x6f, 0x3e, 0xcb, 0xd0, 0x75, 0x0f, 0x7b, 0x88, 0xb6, 0xf9, 0x96, 0xc0, 0x98, 0x8c,
    0x3e, 0xa8, 0x78, 0x19, 0x91, 0xb3, 0x97, 0x54, 0x18, 0x08, 0xc5, 0x71, 0x50, 0x14, 0xcf, 0xe7,
    0xba, 0x96, 0x4d, 0x9f, 0x6e, 0xb2, 0xe6, 0xff, 0xb7, 0x0d, 0x0f, 0xe5, 0x9c, 0x4c, 0xe3, 0xeb,
};

static const uint8_t sMessageEncodingTest0556_ExpectedEncoding[] =
{
    0x10, 0x2a, 0xe5, 0x56, 0xe9, 0x37, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xe5, 0x27,
    0x1d, 0x30, 0x2b, 0x8f, 0xb5, 0xba, 0x68, 0xc1, 0x46, 0x2a, 0xfe, 0x25, 0x36, 0x54, 0xf6, 0x97,
    0x51, 0x99, 0xfd, 0xaa, 0x74, 0xe8, 0xca, 0x9a, 0x94, 0xe2, 0xb1, 0x94, 0x96, 0xe4, 0x85, 0x1a,
    0x5e, 0x2f, 0x74, 0x9c, 0x8f, 0x0f, 0x43, 0xca, 0xe6, 0x80, 0x71, 0x56, 0xc4, 0x31, 0x0e, 0x01,
    0x75, 0x6f, 0x45, 0xf6, 0xc7, 0xc1, 0xf9, 0xe3, 0x89, 0xf7, 0xf1, 0xf0, 0xd7, 0x86, 0x41, 0x1e,
    0x6a, 0x96, 0x28, 0x7c, 0xe8, 0x24, 0x62, 0x26, 0x65, 0x2d, 0xc1, 0x79, 0x45, 0x39, 0xea, 0x97,
    0xd9, 0xf5, 0xd8, 0x13, 0x98, 0x13, 0xa7, 0x07, 0x9f, 0x95, 0x7b, 0x97, 0x6a, 0xb9, 0x35, 0xa4,
    0x7a, 0x4a, 0x38, 0xa8, 0x99, 0xaa, 0x40, 0x11, 0xfe, 0x88, 0xa3, 0xd7, 0x8d, 0x71, 0x03, 0x10,
    0x05, 0x2c, 0x1d, 0x05, 0x88, 0x1d, 0x87, 0xea, 0x38, 0x7e, 0x50, 0x63, 0x14, 0xb1, 0x5a, 0xc1,
    0xf2, 0x74, 0x66, 0xea, 0x16, 0xd3, 0x56, 0x53, 0xcc, 0x71, 0x13, 0x9b, 0x3f, 0xc9, 0x90, 0xe4,
    0x53, 0x82, 0x1b, 0xbd, 0x45, 0xa2, 0x82, 0xcb, 0x2c, 0x78, 0xbc, 0x0f, 0x2d, 0xae, 0xf9, 0x8e,
    0x8c, 0x6b, 0xee, 0x85, 0xa2, 0x75, 0x21, 0xa3, 0x5b, 0x4e, 0xb0, 0x42, 0xe6, 0xf4, 0xf2, 0x95,
    0x50, 0x76, 0x34, 0x92, 0x72, 0xaa, 0x35, 0x3d, 0xde, 0xd5, 0xbd, 0x4c, 0x1a, 0x12, 0x50, 0x2b,
    0x9b, 0x5f, 0xea, 0x0e, 0x9f, 0x0a, 0x58, 0xaa, 0xbd, 0xc5, 0x80, 0xaf, 0x6d, 0x16, 0x74, 0x24,
    0x64, 0xc1, 0x2b, 0x89, 0x8d, 0x31, 0x7c, 0x66, 0xf9, 0x5c, 0x76, 0xe2, 0xc2, 0xd6, 0x69, 0x0b,
    0xeb, 0xdf, 0xd7, 0x2c, 0xcd, 0xc7, 0xfa, 0x6c, 0xac, 0x78, 0x69, 0x88, 0x17, 0x17, 0x48, 0xed,
    0x6f, 0x87, 0xe8, 0x55, 0xd4, 0xb8, 0xd0, 0xe6, 0xf9, 0xa9, 0xf6, 0x69, 0x77, 0xe2, 0x04, 0x4a,
    0xc3, 0x3f, 0xe5, 0x26, 0x89, 0xce, 0x8f, 0xb6, 0x16, 0x02, 0xd2, 0x89, 0x9e, 0xaa, 0xe2, 0xd3,
    0x62, 0x8a, 0x6d, 0x4c, 0xa7, 0xcc, 0x53, 0x76, 0x93, 0x3e, 0x2d, 0xc6, 0x2c, 0xf2, 0xe7, 0x7d,
    0x2e, 0xa7, 0x66, 0x54, 0xa6, 0xe2, 0x47, 0x64, 0x7a, 0x39, 0x67, 0x93, 0xa2, 0x78, 0x3e, 0x79,
    0xf1, 0x5d, 0xee, 0x49, 0x2b, 0xeb, 0x8e, 0xb2, 0xfe, 0xe5, 0x7c, 0xbb, 0x33, 0xe4, 0xf5, 0x51,
    0x9b, 0x73, 0xaf, 0x24, 0x06, 0xe1, 0x56, 0xe3, 0x57, 0x5a, 0xa3, 0x50, 0xfb, 0x21, 0x24, 0x1f,
    0xeb, 0xe5, 0x69, 0xce, 0xe8, 0x31, 0x5b, 0x6e, 0x16, 0xbb, 0xeb, 0x03, 0x5e, 0xfd, 0xd5, 0x62,
    0xda, 0x0b, 0xfd, 0xfd, 0xd2, 0xfb, 0x34, 0xa2, 0x82, 0x70, 0x23, 0x02, 0xaa, 0xb4, 0x60, 0x31,
    0xe6, 0x2e, 0xe5, 0x20, 0xff, 0xd3, 0x85, 0x0a, 0xe3, 0xb5, 0x33, 0x66, 0x10, 0x73, 0x99, 0x5f,
    0x31, 0x69, 0xc5, 0xcd, 0x54, 0xfd, 0x80, 0x59, 0xf4, 0xdd, 0xe8, 0x76, 0x89, 0x02, 0x39, 0x82,
    0xcc, 0x99, 0xd8, 0xd4, 0x74, 0x26, 0x33, 0x2d, 0xd6, 0x03, 0x60, 0x6c, 0xfe, 0x8f, 0x09, 0x91,
    0xd2, 0x31, 0xb9, 0x4f, 0x53, 0xe2, 0xdc, 0xfc, 0x3e, 0x78, 0xed, 0x7a, 0x3d, 0xe2, 0x41, 0x4d,
    0x56, 0xd4, 0xd5, 0x83, 0x05, 0x14, 0x3b, 0xc2, 0x47, 0x17, 0x68, 0x37, 0x30, 0x67, 0xac, 0xe2,
    0xeb, 0xa6, 0x2b, 0xf4, 0x77, 0xea, 0x1e, 0x7e, 0x5d, 0x33, 0x2c, 0x2a, 0x85, 0xe9, 0x95, 0xb6,
    0xf3, 0xc6, 0x7c, 0x03, 0x90, 0x0e, 0x69, 0x8c, 0x50, 0x0c, 0x1a, 0x1a, 0xe8, 0xe6, 0x92, 0xa9,
    0x09, 0x62, 0x5f, 0x7d, 0xdd, 0xda, 0x0a, 0xc2, 0x4f, 0xb2, 0x54, 0x4e, 0xdb, 0x83, 0xb8, 0xc9,
    0x02, 0xfb, 0x2c, 0x31, 0x89, 0x30, 0xf5, 0xac, 0x8d, 0x0c, 0xac, 0x75, 0x91, 0x27, 0x15, 0x72,
    0xc8, 0xab, 0xd1, 0x96, 0x9c, 0xcf, 0xfb, 0x65, 0xff, 0xd6, 0xea, 0xdd, 0xa4, 0xcb, 0xe0, 0x81,
    0x88, 0x78, 0xe4, 0xb2, 0x9b, 0x84, 0xe1, 0xcc, 0x6d, 0x2b, 0xfc, 0x3e, 0x24, 0x6a, 0xde, 0x2a,
    0xb7, 0x3f, 0x5a, 0x1b, 0xd6, 0x46, 0xb5, 0x9d, 0x97, 0x54, 0xc1, 0x30, 0xfe, 0xf9, 0x4c, 0x7f,
    0x91, 0xfd, 0x46, 0x95, 0x66, 0x66, 0xad, 0x7a, 0xfb, 0x84, 0x59, 0x2b, 0x5e, 0xcb, 0xd1, 0xb3,
    0xde, 0xe7, 0x97, 0x64, 0xf9, 0x54, 0xd0, 0xb7, 0x14, 0x8f, 0x26, 0x9d, 0x2a, 0xda, 0xa5, 0x1c,
    0x91, 0xc9, 0x7d, 0xc5, 0xe6, 0xee, 0x42, 0x34, 0x6a, 0xeb, 0xac, 0xcd, 0xcb, 0x87, 0x64, 0xca,
    0x7e, 0x48, 0x1b, 0x24, 0xd2, 0x12, 0x2d, 0xf6, 0x00, 0x8d, 0x63, 0x28, 0x84, 0x0c, 0xd4, 0xbd,
    0x04, 0x45, 0x7f, 0x39, 0xb3, 0x5a, 0xe5, 0x3d, 0x0f, 0xec, 0xb0, 0x08, 0xca, 0x4b, 0x5c, 0xfd,
    0xdf, 0x9e, 0x88, 0x70, 0x76, 0x2d, 0x8d, 0x6e, 0x5c, 0xa5, 0xc1, 0x58, 0x7f, 0xfc, 0x34, 0x87,
    0x10, 0x4c, 0x6d, 0x31, 0x0f, 0xdd, 0x88, 0xd8, 0x20, 0xe5, 0x76, 0x30, 0x0e, 0x6a, 0x38, 0xd7,
    0xd0, 0x69, 0xd6, 0xd7, 0xa1, 0x5d, 0x19, 0xc5, 0x4a, 0x47, 0x04, 0x99, 0x6d, 0x4c, 0x5e, 0xda,
    0xfd, 0x8d, 0xff, 0x6a, 0xf6, 0x9f, 0xc8, 0xff, 0xa7, 0x0b, 0x4d, 0xf9, 0x81, 0xea, 0x00, 0x60,
    0xc9, 0xb9, 0xa9, 0x04, 0xd8, 0x0f, 0xa8, 0xb6, 0x9b, 0xfd, 0x34, 0xe5, 0x5b, 0xbc, 0x9c, 0xb9,
    0xa6, 0x61, 0x6a, 0xa7, 0xed, 0x2c, 0x52, 0x77, 0x09, 0xd3, 0x23, 0xf8, 0xa2, 0xc3, 0x39, 0x42,
    0x8e, 0xb9, 0x1f, 0xa5, 0xc4, 0xbc, 0x56, 0x65, 0x01, 0xec, 0x7c, 0xdc, 0x97, 0x19, 0x1f, 0x29,
    0x5c, 0xdd, 0xf4, 0x4a, 0xde, 0xa2, 0x46, 0xa8, 0x3a, 0x58, 0x00, 0xd7, 0xb3, 0x33, 0x6f, 0x3f,
    0xc9, 0x3c, 0xc2, 0xf1, 0xdb, 0x69, 0x91, 0x9a, 0x1e, 0x1c, 0x93, 0xfa, 0xae, 0x3c, 0x4b, 0x60,
    0x2f, 0x40, 0x39, 0xd9, 0xc4, 0x8e, 0xa4, 0x2a, 0x96, 0x24, 0xba, 0x88, 0x2f, 0x36, 0xb8, 0x47,
    0xcf, 0x03, 0x68, 0x08, 0x86, 0x92, 0x80, 0xbd, 0x51, 0x5b, 0x9f, 0x52, 0x43, 0x15, 0xa4, 0x79,
    0xeb, 0xa8, 0x23, 0x39, 0xd8, 0x9e, 0xea, 0x3a, 0x54, 0xfd, 0x38, 0xcb, 0x53, 0x75, 0xe1, 0x96,
    0x2f, 0xc9, 0x3a, 0xcf, 0x61, 0x50, 0x37, 0x71, 0xa8, 0x8b, 0x52, 0xfe, 0x65, 0x05, 0x6b, 0x5e,
    0x0c, 0xc1, 0x69, 0x4d, 0x08, 0x8d, 0x4a, 0x47, 0x44, 0x55, 0xcb, 0xe1, 0xae, 0x1f, 0x9e, 0x62,
    0x5e, 0x96, 0x09, 0x95, 0xb3, 0xb3, 0x5a, 0x28, 0xb1, 0xa2, 0x9a, 0x5c, 0xf7, 0xdc, 0x65, 0x02,
    0xa0, 0x2e, 0x5d, 0xb5, 0x32, 0x3f, 0x2c, 0x69, 0x04, 0x9d, 0x86, 0x81, 0xcc, 0x10, 0xa5, 0xfd,
    0x38, 0x0c, 0x8d, 0xce, 0x19, 0x50, 0x6f, 0xf3, 0x62, 0x5e, 0xa8, 0xea, 0x3c, 0xe8, 0xe9, 0xa9,
    0xeb, 0xec, 0x06, 0x13, 0x7e, 0x1b, 0xde, 0xfd, 0xd3, 0xc4, 0x5e, 0x79, 0x9c, 0x55, 0xb7, 0x34,
    0x24, 0x04, 0x94, 0xb5, 0xc2, 0x28, 0xb6, 0x6d, 0xe5, 0x05, 0xd0, 0x47, 0x5f, 0x86, 0xde, 0x7c,
    0xaa, 0x66, 0xdc, 0x28, 0x28, 0x49, 0x71, 0xcc, 0xd4, 0xe7, 0x48, 0xa4, 0x84, 0x9d, 0xaf, 0x65,
    0xaf, 0x2e, 0x68, 0xb2, 0xb3, 0x11, 0x91, 0xb5, 0xc0, 0x54, 0x78, 0xda, 0xf0, 0xf1, 0xc7, 0x94,
    0x69, 0xb3, 0x7b, 0x85, 0x8d, 0x7a, 0x48, 0xb9, 0xb3, 0xf1, 0x9b, 0x66, 0x77, 0x63, 0xd3, 0xbd,
    0x3d, 0x19, 0xa0, 0x4a, 0x58, 0xf2, 0xdf, 0xf4, 0x39, 0x1a, 0x1a, 0xd8, 0x59, 0x3c, 0x47, 0x5e,
    0x8c, 0x69, 0x46, 0x02, 0x57, 0xc0, 0xc7, 0xc0, 0xe8, 0x13, 0x2a, 0xe6, 0xcd, 0x3d, 0x37, 0x34,
    0xb6, 0x24, 0x51, 0xd5, 0x50, 0x0b, 0x7b, 0x47, 0xcc, 0x7b, 0xdc, 0xab, 0xeb, 0xb2, 0xb7, 0x93,
    0x0b, 0x78, 0x0f, 0xa1,
};

static const MessageEncodingTestVector sMessageEncodingTest0556 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x37E956E5,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x27E5,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0556_EncryptionKey,
    sMessageEncodingTest0556_Payload,
    sizeof(sMessageEncodingTest0556_Payload),
    sMessageEncodingTest0556_ExpectedEncoding,
    sizeof(sMessageEncodingTest0556_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0557_EncryptionKey =
{
    {
        0x27, 0x2c, 0xa8, 0x7b, 0xe3, 0xea, 0xba, 0x6b, 0xb6, 0x81, 0x7c, 0xba, 0xdc, 0x01, 0x93, 0xec,
    }
};
static const uint8_t sMessageEncodingTest0557_Payload[] =
{
    0x41, 0x5d, 0xa6, 0xc7, 0x0c, 0x93, 0x21, 0x15, 0x50, 0x38, 0xe0, 0x23, 0xcd, 0x9f, 0xdb, 0x61,
    0x23, 0xba, 0xed, 0x42, 0x8b, 0x15, 0x0a, 0xb5, 0x20, 0x74, 0x47, 0x4f, 0x43, 0xf9, 0xaf, 0xef,
    0xf6, 0xff, 0xc6, 0xcc, 0xc6, 0x6a, 0x94, 0x45, 0xc9, 0xdc, 0xbd, 0x1f, 0xf8, 0xb3, 0xef, 0x04,
    0xf5, 0x68, 0x5b, 0x1a, 0x86, 0x55, 0x08, 0x02, 0x5a, 0x89, 0x81, 0xff, 0xd4, 0x1e, 0xc6, 0xf7,
    0x1a, 0xb6, 0xd4, 0xb7, 0x4b, 0x19, 0x26, 0x22, 0x56, 0x53, 0x8e, 0xb9, 0xc3, 0xab, 0x5e, 0x15,
    0x27, 0x24, 0x20, 0xbb, 0xc6, 0x0f, 0x6a, 0x92, 0x8b, 0x3a, 0x3a, 0x21, 0x5d, 0x1f, 0xab, 0xf9,
    0xd4, 0xa0, 0x9a, 0x10, 0x79, 0xf9, 0x79, 0x50, 0x00, 0x01, 0x78, 0xb6, 0xf3, 0xa8, 0x4e, 0xa2,
    0x02, 0x61, 0x80, 0x8e, 0xcf, 0x29, 0x0a, 0x25, 0x6f, 0x52, 0xec, 0x77, 0x14, 0xe5, 0xe9, 0x3c,
    0x7e, 0x12, 0xbd, 0x86, 0x46, 0x42, 0xd2, 0xcd, 0x09, 0x52, 0x2a, 0x68, 0xd7, 0xb9, 0x8d, 0xba,
    0x3b, 0xe5, 0x29, 0x04, 0x16, 0xcc, 0xc7, 0xb7, 0x56, 0x51, 0x22, 0x91, 0xec, 0x48, 0xf3, 0x4d,
    0xca, 0x05, 0xce, 0x9d, 0x18, 0x8a, 0x54, 0xd3, 0x2f, 0x47, 0x88, 0x5b, 0x66, 0x9c, 0x90, 0x50,
    0xd8, 0xef, 0x8a, 0x7a, 0xb3, 0x94, 0x46, 0xe4, 0xd0, 0xc3, 0xc8, 0xb7, 0x54, 0x0a, 0x90, 0x0e,
    0x23, 0xc2, 0x0b, 0xa1, 0x08, 0x9a, 0x5b, 0xc0, 0xce, 0x3a, 0xc2, 0xc5, 0xe6, 0xb8, 0x75, 0x76,
    0xd9, 0xbc, 0x93, 0xfe, 0x01, 0xb1, 0x0a, 0x9e, 0x2f, 0xad, 0x3a, 0x70, 0x31, 0x32, 0x68, 0x13,
    0x0a, 0x60, 0xfb, 0xeb, 0x71, 0x68, 0xac, 0xab, 0xbb, 0xb5, 0x18, 0x66, 0x60, 0xe3, 0x7c, 0x43,
    0x26, 0xf5, 0x5f, 0x2f, 0xc1, 0x9b, 0xb7, 0x38, 0x5c, 0xeb, 0x42, 0x8f, 0x58, 0x52, 0x04, 0xe6,
    0x95, 0x34, 0xfd, 0x4f, 0x23, 0xb1, 0x6a, 0x30, 0xe2, 0x7e, 0x20, 0x71, 0x08, 0x11, 0xb9, 0x6a,
    0x40, 0x89, 0x6f, 0x40, 0xfc, 0x73, 0x09, 0x23, 0xb2, 0x01, 0x2b, 0xba, 0xac, 0xd7, 0x9b, 0x47,
    0x17, 0xab, 0x6c, 0x67, 0xd2, 0xf3, 0xf9, 0xde, 0x46, 0x24, 0x47, 0x0c, 0x7c, 0x57, 0xdd, 0xef,
    0xbb, 0x80, 0xd7, 0x36, 0x70, 0x50, 0xcf, 0xfe, 0xf8, 0xfa, 0xb0, 0x4d, 0x6d, 0xc4, 0x09, 0x29,
    0x3e, 0xba, 0xbe, 0xe3, 0xd3, 0xe0, 0x51, 0x98, 0x99, 0x23, 0xc3, 0x1c, 0xbb, 0xaf, 0x73, 0x05,
    0xe2, 0x9a, 0x09, 0x09, 0x36, 0xef, 0xde, 0x85, 0xf0, 0x2a, 0xf7, 0x9e, 0xde, 0x82, 0x38, 0x1e,
    0x80, 0xf4, 0xa6, 0xbd, 0x65, 0x58, 0x1c, 0x10, 0x76, 0x43, 0x77, 0x73, 0x4d, 0x5d, 0x55, 0x0b,
    0x38, 0x0f, 0x38, 0xc7, 0xb7, 0xa2, 0xb5, 0x64, 0x5a, 0x32, 0x46, 0xed, 0x45, 0x94, 0x8d, 0xf2,
    0x5f, 0xdd, 0xc9, 0x5e, 0x1f, 0x49, 0xb7, 0x94, 0xbf, 0xeb, 0x6a, 0xe2, 0x3b, 0x9f, 0xfd, 0xe4,
    0x01, 0xe3, 0xad, 0x84, 0x5f, 0x37, 0x83, 0x4d, 0xfa, 0x43, 0xf0, 0x24, 0xf5, 0x68, 0xe1, 0xeb,
    0x2b, 0x5a, 0x04, 0x75, 0x1e, 0x92, 0xd3, 0x92, 0xf8, 0x62, 0xb7, 0xd7, 0x5c, 0xf3, 0x6c, 0x78,
    0xcb, 0xcc, 0x15, 0xaa, 0x77, 0xd4, 0x91, 0xdf, 0xce, 0x14, 0x43, 0xae, 0x84, 0x9f, 0xdb, 0x39,
    0xeb, 0xfa, 0xe5, 0x0f, 0xf8, 0xf0, 0xe5, 0x90, 0xc9, 0xd5, 0x68, 0x30, 0xea, 0xfe, 0xf6, 0xae,
    0x63, 0x01, 0x05, 0x12, 0xfb, 0xfb, 0xd2, 0xc0, 0x39, 0x6f, 0xfa, 0xaf, 0x69, 0x2f, 0xd3, 0xd2,
    0x44, 0x9a, 0x16, 0xc2, 0x7c, 0xa0, 0x53, 0xa8, 0x99, 0xda, 0x7d, 0x59, 0x7f, 0xe6, 0x57, 0xbd,
    0x04, 0xe9, 0x91, 0xb8, 0x43, 0xc2, 0xc3, 0x29, 0xc1, 0x20, 0x7f, 0x10, 0x9d, 0x08, 0x3c, 0xab,
    0xc8, 0xd4, 0x12, 0x61, 0xb5, 0xab, 0x63, 0x41, 0x06, 0x78, 0x3a, 0x72, 0xb8, 0x44, 0x6e, 0xdb,
    0xf8, 0xcb, 0x7e, 0xdc, 0x91, 0xcb, 0x09, 0x3f, 0x9b, 0x1e, 0x85, 0x67, 0x3a, 0xb3, 0x89, 0xf9,
    0xf9, 0xb9, 0x6f, 0x50, 0xbf, 0x45, 0xef, 0x3e, 0x96, 0x1d, 0x52, 0xd8, 0x7b, 0x09, 0x93, 0x9a,
    0x7c, 0x93, 0x62, 0x86, 0x26, 0xa5, 0x76, 0x3e, 0x90, 0xdd, 0x2d, 0x05, 0x29, 0xb9, 0xe0, 0x6a,
    0x5f, 0x27, 0xd7, 0xce, 0x8f, 0x4e, 0x5e, 0x2e, 0xe3, 0xa5, 0x13, 0x81, 0x96, 0xdf, 0x09, 0xae,
    0xf8, 0x93, 0x03, 0x9e, 0x63, 0x32, 0xf9, 0x3c, 0xbb, 0x3f, 0xfc, 0x86, 0x5d, 0x91, 0x6b, 0x0a,
    0x2c, 0x86, 0x39, 0x6f, 0xec, 0x24, 0x37, 0x96, 0x5d, 0xa2, 0x36, 0x60, 0x23, 0xda, 0xc3, 0x1b,
    0xcd, 0x50, 0x7c, 0xfd, 0xf2, 0x47, 0x5c, 0x52, 0x10, 0x49, 0x73, 0xfe, 0xbc, 0xe4, 0xbe, 0x2a,
    0x30, 0xa2, 0xef, 0x18, 0xe3, 0xcb, 0x8d, 0x5d, 0x95, 0x64, 0x00, 0x67, 0x4f, 0x1e, 0x80, 0x12,
    0xfa, 0x00, 0xd4, 0xef, 0x01, 0xc6, 0xc2, 0xa5, 0xf6, 0xd1, 0x45, 0x7a, 0x91, 0xd5, 0xe7, 0xad,
    0x83, 0xb8, 0x54, 0xae, 0xaa, 0xfc, 0xcd, 0xdd, 0x02, 0x4c, 0x4a, 0xca, 0x2e, 0xae, 0xed, 0x11,
    0x29, 0x48, 0x79, 0x99, 0x70, 0x71, 0x6b, 0xb4, 0xae, 0x9e, 0xbb, 0x76, 0xb0, 0x81, 0x79, 0x00,
    0xdb, 0x83, 0xa1, 0x68, 0x5b, 0xec, 0xad, 0x10, 0x4c, 0x08, 0x3a, 0x2b, 0x1a, 0x50, 0xab, 0x48,
    0xa9, 0x25, 0x1e, 0x21, 0xc2, 0x41, 0xfa, 0x00, 0x89, 0x20, 0xf6, 0x33, 0x8a, 0xad, 0x57, 0x7d,
    0x8d, 0x61, 0x01, 0x67, 0x7a, 0xc4, 0x4d, 0x20, 0xab, 0xf1, 0x1f, 0xc1, 0x1c, 0x02, 0x77, 0x62,
    0x8a, 0x99, 0xad, 0x2d, 0x98, 0xf5, 0xaa, 0x43, 0xca, 0x58, 0x58, 0xb9, 0xc1, 0x30, 0x1c, 0xea,
    0xcb, 0x99, 0x23, 0x20, 0xda, 0xac, 0x9e, 0x42, 0x94, 0xa1, 0x19, 0x17, 0x7a, 0xed, 0x80, 0xdb,
    0x7e, 0x9d, 0xd2, 0xa4, 0x57, 0xca, 0x7a, 0x6d, 0x03, 0x95, 0xb5, 0xd2, 0xa0, 0x3b, 0x58, 0x13,
    0x3d, 0x62, 0x1f, 0xdf, 0x25, 0xca, 0x80, 0xed, 0x0c, 0x83, 0xee, 0x31, 0xf0, 0x0e, 0xc6, 0xab,
    0x4b, 0x26, 0x61, 0x95, 0x7c, 0x9e, 0xd7, 0xa8, 0x94, 0x64, 0x4d, 0xe0, 0x36, 0x55, 0xb8, 0xfd,
    0x46, 0x95, 0x90, 0xce, 0xed, 0x22, 0x9c, 0x8e, 0x6b, 0x5a, 0xb4, 0x03, 0x09, 0x24, 0x19, 0x47,
    0x97, 0xab, 0x41, 0x12, 0x76, 0x2d, 0xc3, 0xed, 0x1c, 0xf6, 0xe0, 0x8a, 0x70, 0xdf, 0xc7, 0xf4,
    0xe7, 0x95, 0x22, 0xf7, 0xa8, 0x79, 0x30, 0x16, 0x31, 0x32, 0xa0, 0x03, 0xf9, 0x41, 0xea, 0x3e,
    0x27, 0xdb, 0x9d, 0x93, 0x6b, 0x5d, 0xdb, 0x9f, 0x06, 0x71, 0xd7, 0xf7, 0x8b, 0x1e, 0x85, 0x4b,
    0x82, 0x4d, 0x85, 0xa8, 0x9d, 0x3c, 0x4a, 0xd6, 0x74, 0x40, 0x07, 0x8d, 0xae, 0x8b, 0x72, 0x44,
    0x2d, 0xcd, 0x82, 0x62, 0x7a, 0x8c, 0x1b, 0x2a, 0x9e, 0xf7, 0x92, 0xea, 0x3e, 0x74, 0xd5, 0x59,
    0x9c, 0x94, 0x1f, 0x61, 0x8d, 0xc8, 0xa6, 0x01, 0x8e, 0xe1, 0x41, 0x29, 0x4d, 0x21, 0x1b, 0xc0,
    0xaa, 0x53, 0x0f, 0x8e, 0x20, 0x6b, 0x5c, 0x6f, 0x50, 0xe9, 0xe0, 0xab, 0xa2, 0xc0, 0x22, 0xe0,
    0x34, 0x20, 0x0c, 0xb7, 0x21, 0xd5, 0xfc, 0xcc, 0x57, 0x47, 0x75, 0x65, 0x32, 0x8d, 0x53, 0xba,
    0xe9, 0x50, 0xac, 0x9f, 0x55, 0xe4, 0x17, 0xeb, 0xe8, 0x71, 0xfd, 0x7d, 0xf4, 0x47, 0x6c, 0x47,
    0x08, 0xcd, 0xa4, 0x6c, 0xb9, 0x9e, 0xc2, 0x93, 0x51, 0x68, 0xf2, 0x16, 0x2a, 0x8c, 0x7b, 0xd4,
    0x41, 0xca, 0x72, 0x82, 0x20, 0xa4, 0x7a, 0x63, 0xab, 0xa8, 0x48, 0xe1, 0x3d, 0x3b, 0xa7, 0x8e,
};

static const uint8_t sMessageEncodingTest0557_ExpectedEncoding[] =
{
    0x20, 0x2a, 0xf9, 0xba, 0x5f, 0xab, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x15, 0x2a,
    0x8c, 0x2d, 0x87, 0xbb, 0xe1, 0xee, 0x92, 0xba, 0x60, 0xf1, 0x1f, 0x1a, 0x58, 0x9c, 0xc2, 0x58,
    0x3a, 0x6b, 0xbc, 0xf4, 0x5c, 0x4a, 0xb7, 0xff, 0x74, 0x5b, 0x39, 0x3c, 0x1c, 0x37, 0xf0, 0x99,
    0x40, 0xa2, 0xd3, 0x12, 0xee, 0xc4, 0xcd, 0x20, 0x65, 0xe6, 0x22, 0x8f, 0x37, 0x5c, 0xcb, 0x5f,
    0x13, 0x5c, 0xe5, 0x37, 0x51, 0x2b, 0x99, 0x6b, 0x59, 0x09, 0xdf, 0x9c, 0x1a, 0xcb, 0x21, 0x6d,
    0xa1, 0xfb, 0xab, 0x3f, 0x18, 0xae, 0x3b, 0x7c, 0xd1, 0x83, 0x88, 0x33, 0xf0, 0x96, 0xe8, 0x45,
    0x75, 0x9f, 0x85, 0x80, 0x69, 0x51, 0x88, 0x6e, 0xfc, 0x27, 0x0a, 0xb9, 0x15, 0x25, 0x58, 0xf3,
    0xff, 0x68, 0x4e, 0xff, 0xa9, 0x7d, 0x30, 0x01, 0x93, 0xc0, 0xbb, 0x1e, 0x23, 0xc9, 0x91, 0x59,
    0xe3, 0xbc, 0x23, 0x5e, 0xd6, 0x76, 0xb8, 0x58, 0x42, 0x18, 0x2d, 0x9b, 0xab, 0x87, 0xe4, 0x44,
    0x64, 0xd5, 0x97, 0x5c, 0xaf, 0xbf, 0x03, 0x96, 0x1a, 0xba, 0x61, 0x79, 0xf0, 0x63, 0x27, 0x82,
    0x53, 0x0e, 0xba, 0xfd, 0x03, 0xf7, 0xbc, 0x8e, 0x58, 0xc1, 0xa1, 0x37, 0x3e, 0x2f, 0x50, 0xc5,
    0xdd, 0xd1, 0x67, 0x6c, 0x18, 0xb8, 0xef, 0x4d, 0xc7, 0x0e, 0xb5, 0x21, 0x31, 0x08, 0xb2, 0x38,
    0x5b, 0x9e, 0xfe, 0xfb, 0xc9, 0x1c, 0x10, 0x04, 0xdc, 0x6a, 0xa9, 0x37, 0xf4, 0xd0, 0x75, 0x22,
    0x97, 0x23, 0xe3, 0x79, 0xfb, 0x2d, 0x03, 0xa5, 0xa0, 0x6f, 0xf9, 0x2d, 0x28, 0x22, 0x6d, 0xf4,
    0xbe, 0x6f, 0x5e, 0x92, 0xaa, 0x89, 0x8e, 0xdd, 0x4a, 0x5e, 0x3b, 0x10, 0xb3, 0xe2, 0xb7, 0x2c,
    0x84, 0xcc, 0x9f, 0x57, 0x64, 0x8f, 0x59, 0xd4, 0xff, 0x38, 0x59, 0xca, 0xc1, 0xe3, 0x4e, 0xc1,
    0x79, 0x0a, 0x35, 0x1b, 0x83, 0x74, 0x41, 0xef, 0xb0, 0x10, 0x00, 0xdd, 0x5c, 0x9e, 0xad, 0xeb,
    0xb6, 0x83, 0xf3, 0x40, 0x5c, 0xe0, 0x28, 0xb7, 0xe4, 0x63, 0x27, 0x1e, 0x30, 0xed, 0x0c, 0xd1,
    0xe6, 0x24, 0xff, 0xe2, 0x1d, 0x35, 0x03, 0x40, 0x65, 0xba, 0x6e, 0x1f, 0x79, 0xf2, 0xe2, 0x3a,
    0x6e, 0x1f, 0x08, 0x65, 0xc2, 0xfb, 0x71, 0xee, 0xdc, 0xa2, 0xae, 0x24, 0x8d, 0x06, 0x97, 0xe9,
    0x4b, 0x74, 0xaa, 0x8c, 0xeb, 0x12, 0x3e, 0x4e, 0xa1, 0x17, 0xfb, 0x60, 0xa9, 0x09, 0x9c, 0x1f,
    0xba, 0x7b, 0xfb, 0x69, 0x5d, 0x2c, 0x29, 0x7e, 0x25, 0xf6, 0x53, 0x37, 0x53, 0x12, 0xb5, 0xf0,
    0xb2, 0x01, 0x57, 0x04, 0x74, 0x07, 0xa5, 0x82, 0xac, 0x77, 0xae, 0x30, 0xa6, 0x57, 0x04, 0xaa,
    0xe4, 0x8b, 0x8b, 0x67, 0x51, 0x23, 0x08, 0x2e, 0xc9, 0xe6, 0x9b, 0xb0, 0x51, 0x7f, 0x49, 0xfb,
    0x56, 0x96, 0x3f, 0xc8, 0x59, 0x29, 0xf5, 0x99, 0xb7, 0xd3, 0x6c, 0x18, 0x8a, 0x84, 0x2e, 0x3c,
    0xae, 0xee, 0xf9, 0x32, 0xc3, 0x53, 0x1f, 0xd7, 0x21, 0x17, 0xad, 0xd9, 0x0e, 0xe9, 0xd4, 0xb4,
    0x5e, 0x03, 0x25, 0xa9, 0xe3, 0x03, 0x61, 0xf9, 0x3e, 0xf7, 0x3e, 0x39, 0x94, 0x59, 0xcd, 0x9a,
    0x57, 0x03, 0x13, 0x0f, 0x72, 0x75, 0x2b, 0x5a, 0x8c, 0x43, 0x24, 0x1d, 0x7c, 0xef, 0xcc, 0xab,
    0x5e, 0x53, 0x31, 0x18, 0xec, 0xf9, 0x71, 0x3f, 0x22, 0x19, 0x08, 0x7e, 0xf8, 0x28, 0x3f, 0xe6,
    0x45, 0x86, 0x7c, 0x26, 0xa6, 0x33, 0x56, 0x03, 0x53, 0xf0, 0xad, 0x73, 0x44, 0x3e, 0x6b, 0x10,
    0x6f, 0x8b, 0x05, 0x1a, 0xc9, 0xa6, 0x30, 0xe8, 0x60, 0x81, 0x5b, 0xd2, 0xdb, 0x53, 0x73, 0x08,
    0x13, 0x66, 0x16, 0x3d, 0xa5, 0xb2, 0x62, 0xbe, 0x9e, 0x7e, 0xae, 0xeb, 0x7b, 0xa7, 0xe5, 0xf2,
    0xb3, 0x08, 0x20, 0x0c, 0x69, 0x8a, 0x34, 0x5a, 0x80, 0xd5, 0x3e, 0x43, 0x35, 0xcc, 0xb9, 0x65,
    0x98, 0x66, 0x14, 0x3c, 0x8e, 0xf2, 0xea, 0x15, 0x3d, 0x1d, 0x84, 0xde, 0xc9, 0xc7, 0xbe, 0x20,
    0x14, 0xaa, 0x0e, 0x54, 0xda, 0x0f, 0x0f, 0xe4, 0xfe, 0xc0, 0x85, 0x52, 0xcf, 0x6b, 0xf1, 0x44,
    0xdb, 0x46, 0x81, 0x10, 0xce, 0xfa, 0xa2, 0x3e, 0x13, 0x7b, 0x19, 0xd2, 0x0d, 0x1e, 0x52, 0x45,
    0xf0, 0x58, 0x53, 0x6b, 0x7b, 0xee, 0x13, 0x81, 0xc9, 0x98, 0x9a, 0x24, 0xca, 0x53, 0x02, 0x33,
    0x60, 0xdb, 0x56, 0xdb, 0x48, 0x4f, 0xb4, 0x18, 0xbc, 0x57, 0x50, 0x65, 0x23, 0x11, 0xb7, 0x84,
    0x73, 0x28, 0xe1, 0x9a, 0xc2, 0x2c, 0x06, 0x84, 0xfe, 0x12, 0x62, 0x64, 0x56, 0x9c, 0xd2, 0x4d,
    0x33, 0x8d, 0xc3, 0x73, 0xcd, 0x30, 0x97, 0xae, 0xff, 0xdd, 0x89, 0xfa, 0x29, 0x3d, 0xd3, 0x1e,
    0x72, 0x98, 0xf2, 0xfd, 0xf3, 0x42, 0x07, 0xa8, 0x5b, 0x8b, 0x00, 0xa3, 0x81, 0x68, 0x64, 0x4e,
    0xad, 0xf4, 0x0e, 0xb4, 0xa9, 0xc3, 0x9b, 0x86, 0x6a, 0x09, 0xbb, 0xc6, 0xe5, 0xa1, 0x68, 0xa8,
    0x92, 0xc7, 0x6b, 0xe3, 0xb7, 0x68, 0x5a, 0x32, 0x68, 0xdc, 0x21, 0x29, 0x1d, 0xce, 0xfb, 0x78,
    0x11, 0xa7, 0x47, 0x23, 0x5d, 0x6d, 0x87, 0xe8, 0xef, 0x03, 0xed, 0x4b, 0x2a, 0x23, 0x8d, 0x45,
    0xb9, 0x63, 0x4f, 0xab, 0x0d, 0x29, 0xdc, 0x8f, 0x5e, 0xa8, 0xe9, 0xf9, 0x95, 0x55, 0x8b, 0x2a,
    0x6d, 0xe4, 0x9a, 0x23, 0x02, 0x69, 0xe0, 0xbc, 0x99, 0x2d, 0xe9, 0xe3, 0x18, 0x04, 0xa3, 0x75,
    0x0b, 0x05, 0x7a, 0x9f, 0xde, 0x23, 0xa0, 0x7d, 0xcf, 0xbf, 0x51, 0x41, 0xfc, 0xe0, 0xeb, 0x24,
    0x54, 0x87, 0x04, 0x64, 0x41, 0xa8, 0x64, 0x29, 0xc9, 0xe9, 0x01, 0xc6, 0xbd, 0xa8, 0x49, 0xf5,
    0xbd, 0xda, 0xf3, 0x58, 0x78, 0x52, 0x8f, 0xd1, 0x70, 0x3b, 0x78, 0x44, 0x6f, 0x93, 0xf2, 0x27,
    0xb3, 0xf8, 0xa8, 0x42, 0x14, 0xb3, 0x77, 0x62, 0xb2, 0xa8, 0xa8, 0xed, 0x93, 0x75, 0xeb, 0x97,
    0xeb, 0x48, 0xc1, 0x58, 0x14, 0xd3, 0x8b, 0xb0, 0x45, 0x0a, 0x04, 0x16, 0x50, 0x43, 0xeb, 0x3f,
    0xf4, 0xd1, 0xe2, 0x71, 0x2b, 0x59, 0x80, 0xcb, 0x0d, 0x6c, 0x45, 0x6e, 0xe0, 0x2d, 0xf7, 0x57,
    0xa3, 0x55, 0x08, 0x71, 0x6c, 0x33, 0x55, 0x9d, 0x26, 0x8c, 0x4a, 0x05, 0xdd, 0xf1, 0xf2, 0xa8,
    0xd2, 0x36, 0x6c, 0x7a, 0x69, 0x39, 0x31, 0x0e, 0x84, 0x6c, 0xba, 0x94, 0x48, 0x00, 0x76, 0x4c,
    0x93, 0x09, 0x7e, 0xf1, 0x02, 0x3b, 0x7a, 0x71, 0x87, 0x3a, 0x57, 0xe4, 0xed, 0x9d, 0x4d, 0x97,
    0xcb, 0x02, 0x8d, 0x85, 0xac, 0x64, 0x17, 0xe2, 0xa7, 0xad, 0x4d, 0x89, 0x07, 0x77, 0xc1, 0x79,
    0xb9, 0x8d, 0xeb, 0x97, 0x3a, 0x50, 0xb4, 0xbd, 0xc6, 0xf8, 0xd5, 0x48, 0x34, 0x5f, 0x42, 0xf3,
    0xd9, 0xd5, 0xfb, 0x0b, 0x90, 0x7a, 0x47, 0x13, 0x9b, 0x87, 0x27, 0xa0, 0x1d, 0xb0, 0xe3, 0xe4,
    0x0f, 0x7d, 0x77, 0x8c, 0x33, 0xa8, 0xce, 0x8d, 0xfe, 0xc2, 0x7d, 0x9e, 0x1d, 0x8f, 0x0d, 0xba,
    0xe0, 0x5e, 0xdf, 0x59, 0x5d, 0xbd, 0xab, 0xf3, 0x42, 0x8c, 0xeb, 0x93, 0x9e, 0xf6, 0xfc, 0x22,
    0x69, 0x4f, 0x8e, 0xe6, 0x93, 0xb5, 0x70, 0x43, 0x19, 0xf3, 0xc2, 0x68, 0x39, 0xa8, 0x86, 0xb1,
    0x0e, 0x80, 0x6f, 0xb8, 0xd5, 0x0f, 0x45, 0x22, 0x2d, 0x34, 0x16, 0x2a, 0x5d, 0xc0, 0x6a, 0x74,
    0x6a, 0x7f, 0x92, 0x13, 0x5a, 0x3f, 0x28, 0xdc, 0x63, 0xa9, 0x21, 0x0c, 0x5b, 0x9b, 0xf3, 0x68,
    0xb3, 0x7d, 0xf8, 0x1d, 0xb1, 0x68, 0xc1, 0xb4, 0x9d, 0x7c, 0x59, 0x82, 0x63, 0x18, 0xa0, 0xc0,
    0x8b, 0xb1, 0x76, 0xb0, 0x53, 0x9f, 0x1c, 0x65, 0x1c, 0x93, 0x68, 0x82, 0x5a, 0x81, 0x07, 0x38,
    0x95, 0xd5, 0x96, 0x12, 0xe9, 0xc8, 0x16, 0xa5,
};

static const MessageEncodingTestVector sMessageEncodingTest0557 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xAB5FBAF9,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2A15,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0557_EncryptionKey,
    sMessageEncodingTest0557_Payload,
    sizeof(sMessageEncodingTest0557_Payload),
    sMessageEncodingTest0557_ExpectedEncoding,
    sizeof(sMessageEncodingTest0557_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0558_EncryptionKey =
{
    {
        0x31, 0x8f, 0x58, 0x35, 0xcc, 0xf2, 0x1a, 0x3c, 0x40, 0xfb, 0x87, 0xd5, 0x00, 0x96, 0x18, 0xb7,
    }
};
static const uint8_t sMessageEncodingTest0558_Payload[] =
{
    0xe2, 0x7c, 0xb7, 0x2d, 0xf0, 0xaf, 0xdc, 0xe9, 0xc3, 0x14, 0x36, 0xb8, 0x0b, 0xbb, 0x2b, 0x8b,
    0xd0, 0x1c, 0xf4, 0xc4, 0x84, 0x49, 0x8c, 0xc8, 0xa5, 0x7f, 0x89, 0x46, 0xf6, 0xad, 0x69, 0x88,
    0x63, 0xd0, 0xe6, 0xd5, 0x2e, 0x63, 0x6d, 0xaf, 0x0f, 0x58, 0x4b, 0xa1, 0x61, 0x05, 0xc5, 0xd1,
    0xde, 0x13, 0x5f, 0xc9, 0x8d, 0x52, 0x40, 0xc0, 0xf0, 0x75, 0xba, 0x12, 0x1a, 0xb1, 0x95, 0xcd,
    0x28, 0x35, 0x24, 0x57, 0x0a, 0x6d, 0x6f, 0x0d, 0x7e, 0xef, 0x87, 0xc4, 0x43, 0xb9, 0x60, 0x68,
    0xa8, 0x0a, 0x5f, 0x78, 0xd6, 0x6a, 0x7d, 0xc8, 0xe5, 0x2a, 0xda, 0x6f, 0x3b, 0x1c, 0xbf, 0x60,
    0x83, 0xe5, 0x43, 0x35, 0x81, 0x06, 0x63, 0x8d, 0x11, 0xb4, 0x13, 0xbb, 0x32, 0xfa, 0x11, 0x70,
    0xb6, 0x8e, 0x1e, 0xd6, 0xe3, 0x78, 0xc8, 0x29, 0x68, 0x07, 0x90, 0x5c, 0x04, 0x2b, 0x2c, 0xee,
    0x50, 0x7f, 0xb3, 0xfa, 0xa1, 0x6c, 0x9f, 0xf7, 0x8b, 0x69, 0x87, 0x51, 0x1b, 0xf4, 0x98, 0x59,
    0x10, 0x68, 0x74, 0x14, 0xf5, 0x42, 0xa9, 0x37, 0x56, 0x67, 0xb5, 0x17, 0x4e, 0xa8, 0x5b, 0xba,
    0xb7, 0xf7, 0xa8, 0xe4, 0xb1, 0xc6, 0xed, 0xd9, 0xdf, 0xea, 0x76, 0x22, 0xe3, 0x05, 0xd4, 0x29,
    0xeb, 0xc0, 0x2d, 0xf6, 0xc5, 0x6b, 0x20, 0x11, 0x2a, 0x56, 0x7a, 0x1c, 0xa0, 0xfe, 0xe7, 0x1b,
    0x29, 0xb1, 0x28, 0xf5, 0xeb, 0x25, 0x26, 0xa3, 0xe1, 0xff, 0x03, 0x13, 0x6a, 0xc6, 0xd0, 0xb0,
    0x33, 0x55, 0x84, 0x6d, 0xbe, 0xb6, 0x65, 0xb7, 0x63, 0x7c, 0x08, 0x30, 0x38, 0x25, 0xf9, 0xd7,
    0x4c, 0x44, 0x82, 0x92, 0x16, 0x95, 0xac, 0x14, 0x49, 0x6b, 0x31, 0x38, 0xa7, 0x6f, 0x89, 0x2a,
    0xba, 0x24, 0x9e, 0x58, 0xbf, 0x7b, 0xb1, 0xbb, 0x3a, 0x55, 0x7d, 0x26, 0x89, 0xda, 0xc8, 0x44,
    0xe3, 0xee, 0x36, 0x93, 0xea, 0xf6, 0xf5, 0x49, 0xd6, 0xd3, 0xb1, 0xda, 0x42, 0x06, 0x0f, 0x8c,
    0x08, 0x90, 0x3f, 0x7f, 0x9a, 0x79, 0xcf, 0x1c, 0x64, 0x33, 0x24, 0x6a, 0xf7, 0x03, 0x42, 0xc2,
    0x5e, 0x6e, 0xfb, 0x26, 0x26, 0xd7, 0x11, 0x83, 0x4e, 0xf8, 0x4a, 0x2c, 0xc7, 0x7b, 0x03, 0xd5,
    0x73, 0xa0, 0xe1, 0x8e, 0x1f, 0x78, 0xbd, 0x41, 0x75, 0xf1, 0x9d, 0x08, 0xe6, 0xe9, 0xb2, 0xeb,
    0x63, 0x9c, 0xa0, 0xb0, 0xc8, 0x8f, 0x43, 0xd7, 0xe6, 0x92, 0xb9, 0x1f, 0xff, 0x08, 0xbc, 0xe1,
    0x1f, 0x09, 0xf8, 0x47, 0x12, 0xe4, 0x40, 0xb7, 0x95, 0x28, 0xf8, 0x57, 0xa0, 0xf5, 0xe2, 0xd0,
    0xb6, 0x34, 0x8e, 0x5e, 0x47, 0x0f, 0x1c, 0x7a, 0x95, 0x62, 0x9b, 0x2c, 0x10, 0xd9, 0xa0, 0x56,
    0xbc, 0x41, 0x75, 0x76, 0x16, 0xb8, 0x95, 0x3d, 0x36, 0x64, 0x31, 0x98, 0xb9, 0x69, 0xa6, 0xf9,
    0x6e, 0xfa, 0xa5, 0x49, 0xce, 0xd4, 0xfb, 0xfd, 0x26, 0xb4, 0x99, 0x20, 0xf1, 0xbe, 0x26, 0x1a,
    0x09, 0xe4, 0x89, 0xb4, 0x00, 0x31, 0x1e, 0xe4, 0x44, 0xc7, 0x95, 0xac, 0x20, 0x43, 0x81, 0x6d,
    0x4b, 0xc6, 0x70, 0x1d, 0xff, 0xaf, 0x53, 0x3a, 0x11, 0x30, 0xf0, 0x2f, 0x87, 0x04, 0xb0, 0x68,
    0x6e, 0x56, 0x4d, 0x8f, 0x84, 0x23, 0xa1, 0x75, 0xf9, 0xdb, 0xa0, 0x91, 0x6a, 0x9f, 0x5a, 0x56,
    0xcd, 0x69, 0x8c, 0xe8, 0x06, 0x01, 0x10, 0x54, 0xd7, 0x18, 0x08, 0x86, 0xa9, 0xd3, 0x67, 0x91,
    0x59, 0x60, 0x64, 0xbf, 0x73, 0x91, 0x74, 0xa5, 0x62, 0x5f, 0x75, 0xec, 0xd6, 0x56, 0xc7, 0xfb,
    0xf0, 0x06, 0x43, 0x04, 0x86, 0x40, 0xa9, 0x45, 0x3a, 0x6f, 0x08, 0x07, 0x55, 0x6e, 0x34, 0xb2,
    0xb0, 0x9f, 0xa2, 0x63, 0x5c, 0x4b, 0x16, 0x8a, 0x5f, 0x6c, 0xe2, 0xae, 0xfd, 0x74, 0x99, 0x08,
    0xa3, 0x93, 0xc4, 0x36, 0x23, 0x65, 0x8c, 0x31, 0x58, 0xb3, 0x08, 0xf4, 0xcb, 0x6d, 0x62, 0xd4,
    0xa8, 0xbd, 0x82, 0x09, 0x30, 0x75, 0x6a, 0x10, 0x7a, 0xda, 0x60, 0xe3, 0xde, 0x40, 0xcc, 0xf6,
    0x4c, 0xb8, 0x91, 0x0f, 0xee, 0xc4, 0x79, 0xfd, 0x52, 0xb3, 0x4a, 0xcd, 0x57, 0xa0, 0x93, 0xfb,
    0xd2, 0x3a, 0x9a, 0x63, 0xa3, 0x39, 0xb7, 0x05, 0xb6, 0x0d, 0x6a, 0x2a, 0x30, 0xbb, 0x20, 0x92,
    0xc2, 0x77, 0xa7, 0x23, 0xf9, 0xea, 0x80, 0x80, 0x17, 0xb7, 0xba, 0x01, 0x33, 0x50, 0x38, 0x02,
    0x7f, 0xd8, 0x58, 0x1d, 0xfa, 0x6e, 0x2a, 0xf4, 0x6b, 0x20, 0xd3, 0xbd, 0x58, 0x06, 0xb6, 0x0a,
    0x83, 0x25, 0xbc, 0xf6, 0x6f, 0xca, 0x3b, 0x76, 0xaa, 0x71, 0xd0, 0x62, 0x3e, 0xdc, 0x82, 0xed,
    0x6a, 0xbf, 0x11, 0xb0, 0xb0, 0xcc, 0x24, 0xe6, 0xf7, 0xdb, 0x98, 0x64, 0x88, 0xb9, 0x0d, 0x7f,
    0xd4, 0xf3, 0xcd, 0x93, 0x34, 0xa6, 0x2b, 0xf1, 0x42, 0xc2, 0x4d, 0x02, 0xc4, 0x31, 0x19, 0x8b,
    0x2b, 0xc6, 0x27, 0x03, 0xdc, 0x1d, 0xb4, 0x3c, 0xe0, 0xf3, 0x60, 0x71, 0x41, 0x33, 0xdf, 0x48,
    0xb3, 0xce, 0x9f, 0x7a, 0x52, 0x17, 0xe0, 0x92, 0xdf, 0x64, 0x91, 0x65, 0xfa, 0x41, 0xa6, 0xe6,
    0x15, 0x80, 0xe8, 0xb6, 0xe2, 0xe1, 0xcf, 0x9b, 0x4d, 0xcd, 0x4e, 0xb2, 0x52, 0x5b, 0xd5, 0x31,
    0xb9, 0x02, 0x65, 0xf7, 0x87, 0x26, 0xe4, 0x6a, 0xbe, 0xd9, 0x8d, 0xe0, 0x73, 0x60, 0x0b, 0xca,
    0xc6, 0x83, 0x27, 0x50, 0x55, 0x4d, 0x74, 0xeb, 0xb1, 0xb1, 0xf3, 0x0f, 0x11, 0x4d, 0x8a, 0x20,
    0xdf, 0x1a, 0xcb, 0x08, 0x12, 0x24, 0x61, 0x38, 0x90, 0xcc, 0xd7, 0x8a, 0x32, 0x72, 0xd4, 0xf2,
    0xab, 0x72, 0xa9, 0xe1, 0xf7, 0x15, 0x48, 0x69, 0xc1, 0x75, 0x76, 0x39, 0x22, 0xa4, 0xe5, 0x78,
    0x12, 0x3c, 0x71, 0xbc, 0x0a, 0x7b, 0x02, 0xae, 0x34, 0x01, 0x57, 0xd3, 0xf2, 0x6b, 0x78, 0x36,
    0x51, 0x1a, 0x65, 0x00, 0xc5, 0x36, 0x6e, 0xa7, 0x74, 0x4f, 0x12, 0x9b, 0x6f, 0x6d, 0x4d, 0x88,
    0x09, 0x75, 0x8e, 0xce, 0xb0, 0x81, 0x7a, 0x03, 0xa6, 0x7b, 0x46, 0xaa, 0xe0, 0x4d, 0xfb, 0xf3,
    0xa5, 0x6a, 0x3a, 0x59, 0xac, 0xc7, 0x10, 0x90, 0x50, 0x2b, 0x42, 0x3c, 0x9a, 0xa6, 0xac, 0x50,
    0x3d, 0x08, 0x2e, 0xb5, 0x28, 0x79, 0xef, 0x79, 0xb8, 0x34, 0xab, 0x1f, 0x0d, 0xa5, 0x5a, 0xb8,
    0xff, 0x31, 0xf1, 0xec, 0x36, 0x5e, 0x16, 0x84, 0x0e, 0x91, 0x32, 0x83, 0x77, 0x17, 0x45, 0x41,
    0x75, 0x91, 0xdf, 0xaf, 0xbf, 0x3c, 0x15, 0x18, 0x66, 0xec, 0x0c, 0x97, 0x17, 0x26, 0xfd, 0x63,
    0x73, 0x18, 0x4b, 0x6c, 0x33, 0x19, 0xee, 0x04, 0x48, 0xea, 0xdb, 0xf9, 0x78, 0x65, 0x36, 0x89,
    0xcb, 0x31, 0x6c, 0x5b, 0x35, 0x85, 0x55, 0xa7, 0x0f, 0x2e, 0x54, 0x58, 0x2f, 0xd2, 0x68, 0xc3,
    0xb4, 0x56, 0x28, 0x44, 0xef, 0xdc, 0x0a, 0x15, 0xa5, 0x0c, 0xc0, 0x8f, 0x0a, 0x41, 0xc8, 0xc2,
    0xf2, 0xbb, 0x5f, 0xeb, 0xac, 0xc9, 0xeb, 0xe9, 0xe1, 0x6c, 0xc4, 0x42, 0xb4, 0x67, 0x86, 0x9a,
    0xc7, 0xc3, 0x4b, 0xf6, 0x0a, 0x6c, 0xf6, 0xa6, 0xd0, 0x19, 0xe4, 0xb4, 0x42, 0x11, 0x55, 0xee,
    0x28, 0x98, 0x68, 0x9e, 0x5f, 0x40, 0x39, 0xf8, 0x20, 0x9b, 0x69, 0x02, 0xf7, 0xe3, 0x68, 0xe8,
    0x4a, 0xb4, 0x63, 0xfd, 0x75, 0xd5, 0xbe, 0x0c, 0xd2, 0x4b, 0xa6, 0xd2, 0x03, 0xa3, 0x3e, 0x42,
    0x47, 0xb8, 0xf4, 0x2d, 0x8c, 0x3d, 0x26, 0x90, 0x91, 0x39, 0x1e, 0x4e, 0x1b, 0x9a, 0x62, 0x47,
    0xde, 0x45, 0x41, 0xbe, 0xd4, 0xb0, 0xb6, 0x28, 0xcd, 0xca, 0x32, 0xe1, 0x19, 0xbb, 0xdb, 0x26,
};

static const uint8_t sMessageEncodingTest0558_ExpectedEncoding[] =
{
    0x30, 0x2a, 0xfa, 0xa4, 0xc8, 0x72, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xfa, 0x2a,
    0x23, 0xc2, 0x73, 0xa4, 0x9a, 0x3f, 0x37, 0x3f, 0xa5, 0x31, 0xca, 0xfd, 0xd8, 0x80, 0xbb, 0xad,
    0x41, 0x12, 0x2c, 0xb6, 0x77, 0xd2, 0x05, 0x74, 0xc6, 0x6b, 0xee, 0x1b, 0x1c, 0x69, 0x6e, 0xf3,
    0xf3, 0x88, 0x2c, 0x30, 0xcc, 0x76, 0x0d, 0x5f, 0x63, 0x7c, 0x01, 0x83, 0x29, 0x9f, 0x49, 0x84,
    0x62, 0x23, 0xf6, 0xc8, 0x3b, 0xe3, 0x51, 0x4f, 0x28, 0xc5, 0x57, 0x4b, 0x69, 0xc9, 0x89, 0x50,
    0x0c, 0xce, 0xbd, 0xf4, 0x01, 0xba, 0x55, 0xd3, 0x5e, 0x93, 0xb4, 0x60, 0x90, 0x2d, 0x25, 0x21,
    0x6a, 0x2a, 0x33, 0xbb, 0x64, 0x36, 0x8a, 0x4f, 0x41, 0xec, 0xa1, 0xce, 0x01, 0x88, 0xb1, 0xeb,
    0xbb, 0xfc, 0x14, 0x16, 0xbf, 0x0b, 0xb6, 0x4a, 0x6b, 0xbf, 0x10, 0x6a, 0x67, 0x5c, 0x1a, 0x8f,
    0x59, 0x6d, 0x35, 0xed, 0x0a, 0x37, 0xb6, 0xa9, 0x69, 0x73, 0xfb, 0xe0, 0x32, 0x75, 0xd7, 0x8a,
    0x5e, 0x59, 0x53, 0xe6, 0x64, 0x84, 0x85, 0x33, 0x46, 0x73, 0x74, 0xc0, 0x37, 0xf2, 0xe3, 0xea,
    0x33, 0xdb, 0x52, 0x5a, 0x1b, 0x0f, 0xae, 0xbf, 0x2d, 0x7c, 0xd4, 0x44, 0xff, 0x97, 0x88, 0xf4,
    0x59, 0x1c, 0xbf, 0x11, 0x71, 0xac, 0x76, 0xd6, 0x3b, 0x14, 0x80, 0x1c, 0xa5, 0xea, 0x9e, 0xdb,
    0x0a, 0x88, 0xae, 0x4e, 0xc6, 0xb0, 0x11, 0x30, 0x1f, 0x91, 0x63, 0xff, 0xe1, 0xe9, 0x8a, 0x27,
    0xc3, 0xc5, 0xa1, 0x02, 0x6e, 0x29, 0x63, 0x42, 0x3c, 0x1c, 0x52, 0xf6, 0x93, 0x00, 0xbe, 0x35,
    0xde, 0x1a, 0xad, 0xc9, 0x3a, 0xf1, 0x96, 0xd0, 0x88, 0x8d, 0xf9, 0x6d, 0xba, 0xe0, 0xf5, 0x34,
    0x25, 0xb7, 0xaf, 0xda, 0x8f, 0x59, 0x1c, 0x65, 0x97, 0x3a, 0xbd, 0x39, 0xd3, 0x1a, 0x25, 0xe8,
    0x33, 0x57, 0x30, 0x7f, 0x17, 0x69, 0x3f, 0x9b, 0x62, 0x90, 0xe5, 0x9f, 0xd3, 0xa5, 0x67, 0xc6,
    0x45, 0xa1, 0x56, 0xa1, 0xde, 0x95, 0xea, 0x27, 0xbe, 0x5e, 0xec, 0x45, 0xc7, 0x06, 0x1f, 0x48,
    0x6a, 0x0e, 0x29, 0x00, 0x08, 0x31, 0xaa, 0xea, 0xaf, 0x4b, 0xcd, 0xaf, 0x64, 0xe1, 0x27, 0x4a,
    0x1d, 0xe8, 0x63, 0xdf, 0xdb, 0x06, 0xbc, 0x9c, 0xab, 0x7f, 0x61, 0xef, 0x83, 0xcf, 0xf9, 0x59,
    0xc1, 0xf1, 0x0a, 0x43, 0x6e, 0xa0, 0x36, 0x13, 0xe5, 0x90, 0x3d, 0x0f, 0x65, 0x7b, 0xbc, 0xc0,
    0x0a, 0x61, 0x1f, 0xb8, 0x74, 0xe8, 0x1f, 0xbe, 0xeb, 0x3a, 0xfa, 0x72, 0x6f, 0xfc, 0xc6, 0x7a,
    0x29, 0xc6, 0x4a, 0x7d, 0x9d, 0x27, 0x34, 0xc7, 0x68, 0x5c, 0xf5, 0x7b, 0xd8, 0x59, 0xda, 0x7b,
    0x6b, 0xb1, 0x1c, 0xc4, 0xc7, 0x28, 0x26, 0x78, 0x70, 0xeb, 0xa3, 0x6f, 0x27, 0xfc, 0x91, 0x3d,
    0xe4, 0x1f, 0x95, 0x64, 0xe1, 0xf6, 0x19, 0xf7, 0xf2, 0xa8, 0xfb, 0x55, 0x4f, 0x2b, 0x46, 0x9f,
    0xd8, 0xc4, 0x6e, 0x9d, 0x41, 0x92, 0x26, 0xbf, 0xcc, 0xc4, 0x9c, 0xd2, 0xf7, 0x95, 0xd7, 0x41,
    0x29, 0x57, 0x76, 0x62, 0xbd, 0x59, 0xd8, 0xf7, 0x69, 0xe2, 0xa5, 0x4c, 0xc3, 0xe0, 0x8b, 0x42,
    0x80, 0xf2, 0x7a, 0x67, 0x0f, 0xb9, 0xb1, 0xd1, 0xd6, 0x92, 0x7f, 0x0e, 0xc4, 0x12, 0x3d, 0x66,
    0x3f, 0x03, 0x6c, 0x20, 0xed, 0x2b, 0x35, 0x8b, 0xd0, 0xe2, 0x07, 0x7f, 0x41, 0x53, 0x7c, 0x65,
    0x2e, 0xda, 0xa7, 0xe6, 0xb4, 0xab, 0x76, 0x07, 0x4a, 0xe8, 0x04, 0x4c, 0xd2, 0x5a, 0xa7, 0x4a,
    0x32, 0x93, 0x18, 0xea, 0xb2, 0xd0, 0xd3, 0x10, 0xd7, 0x6f, 0x8b, 0x31, 0x24, 0x6a, 0x34, 0x77,
    0x82, 0x71, 0xaa, 0x21, 0x7f, 0xe7, 0x86, 0xf6, 0xf6, 0xa4, 0x0f, 0x22, 0x1d, 0xa8, 0xef, 0xdd,
    0x68, 0xcf, 0xb3, 0x49, 0x96, 0x0b, 0x4f, 0x50, 0x9a, 0xd3, 0x55, 0xc5, 0x22, 0x8f, 0xc3, 0x8a,
    0x20, 0x70, 0x2c, 0x1b, 0x12, 0x83, 0x80, 0x0b, 0xd8, 0xc2, 0xad, 0xb1, 0xcd, 0x41, 0xd1, 0x9a,
    0x17, 0x87, 0x2f, 0x88, 0x46, 0xe1, 0x9d, 0x3d, 0x8f, 0x73, 0xec, 0x5d, 0x50, 0x91, 0xc3, 0x97,
    0x77, 0xc7, 0x4f, 0xf8, 0x85, 0x1e, 0xae, 0x91, 0xc0, 0xb1, 0x57, 0x40, 0xa4, 0xdb, 0x2e, 0x55,
    0x4e, 0x8b, 0xa7, 0xec, 0x11, 0xca, 0x53, 0x89, 0xfe, 0xf5, 0x0e, 0x50, 0x78, 0x81, 0x13, 0x0b,
    0x14, 0xac, 0xf2, 0x78, 0x36, 0x1f, 0x0e, 0x56, 0xe7, 0x92, 0x53, 0x4e, 0xed, 0xaf, 0xee, 0x97,
    0x02, 0xad, 0xdc, 0x7e, 0xa5, 0xa1, 0xce, 0xda, 0x54, 0x7b, 0x44, 0x13, 0xb3, 0x89, 0x0f, 0x0b,
    0x00, 0xb3, 0x1e, 0x46, 0x6d, 0xc0, 0x2c, 0xd2, 0xd9, 0xe5, 0x79, 0x57, 0x99, 0x20, 0xda, 0xe3,
    0x51, 0x6c, 0xb7, 0xd1, 0x33, 0x86, 0x76, 0x51, 0x4c, 0x2a, 0x89, 0x75, 0xd2, 0x17, 0xc3, 0xb0,
    0xca, 0x14, 0x08, 0x5a, 0x07, 0x4a, 0x96, 0x92, 0xdc, 0x5d, 0x9c, 0x2e, 0x93, 0x0b, 0xda, 0x98,
    0x26, 0xa2, 0xcb, 0xb3, 0xb3, 0x9d, 0x9a, 0xd6, 0xb1, 0x64, 0x92, 0xf1, 0x18, 0x6a, 0x54, 0xaf,
    0x23, 0x2a, 0x79, 0x2c, 0xa8, 0x98, 0xa1, 0x13, 0x56, 0x31, 0xeb, 0x56, 0xaa, 0x01, 0xd8, 0x63,
    0x34, 0xb2, 0xa1, 0x9a, 0xf2, 0x82, 0xf9, 0x39, 0xf5, 0x42, 0x53, 0x63, 0x4a, 0xc4, 0x9a, 0x79,
    0xb6, 0x81, 0x77, 0x7e, 0x4b, 0xa8, 0x6f, 0x8f, 0x3e, 0x8f, 0xda, 0xa4, 0x76, 0x95, 0xf9, 0x5b,
    0xba, 0xc4, 0x78, 0x5f, 0x26, 0x54, 0x7b, 0x89, 0x48, 0x92, 0x94, 0x40, 0x70, 0xf0, 0x31, 0xe1,
    0x33, 0x44, 0x8a, 0xae, 0xe0, 0xfd, 0xe6, 0x71, 0xe8, 0x7f, 0x4e, 0x08, 0x43, 0x13, 0x4d, 0xcd,
    0x5a, 0x65, 0x61, 0x8f, 0x51, 0x7c, 0xad, 0x73, 0xa3, 0x36, 0x65, 0x95, 0xd0, 0x66, 0x0b, 0x9b,
    0xe2, 0x77, 0xca, 0xc7, 0x76, 0x41, 0xf4, 0xe7, 0x5e, 0x59, 0xc3, 0x3c, 0x27, 0xa8, 0x58, 0xf6,
    0x22, 0xfe, 0xf8, 0xd6, 0x0c, 0xec, 0xe9, 0x4f, 0xc4, 0xa4, 0xac, 0x6f, 0xbb, 0xa3, 0x3d, 0xdc,
    0xec, 0x96, 0x6a, 0x5d, 0x2c, 0x17, 0x38, 0x3b, 0xb3, 0x7e, 0x4a, 0x7f, 0xa0, 0x84, 0x07, 0xd9,
    0xc2, 0x35, 0xc9, 0x42, 0xc7, 0x88, 0x60, 0xf6, 0xd0, 0x45, 0x6a, 0x2a, 0x24, 0xa9, 0x5f, 0xd7,
    0x16, 0x8d, 0x24, 0x56, 0x05, 0x6e, 0xfc, 0x75, 0x1a, 0x38, 0x27, 0xd3, 0xb9, 0x9d, 0xd5, 0x32,
    0x9c, 0xd7, 0xe1, 0x70, 0xb1, 0x62, 0x46, 0x46, 0xd8, 0x6e, 0x57, 0x80, 0x29, 0x08, 0x96, 0xda,
    0x27, 0xd0, 0x50, 0x3c, 0xfa, 0xb7, 0x51, 0x40, 0x5c, 0x4c, 0x77, 0xf8, 0x20, 0x46, 0x20, 0x05,
    0x62, 0x3d, 0xa3, 0x42, 0x5c, 0xfc, 0x7a, 0x3d, 0x95, 0xf2, 0x68, 0x09, 0x49, 0xef, 0xef, 0x3e,
    0x4c, 0xa2, 0xe3, 0x39, 0x0d, 0x30, 0xe8, 0xd0, 0x88, 0x11, 0xa4, 0x83, 0xa5, 0x11, 0x75, 0xba,
    0x8b, 0xf5, 0xae, 0xf2, 0xb7, 0xb6, 0x99, 0x12, 0xa5, 0x8d, 0x8f, 0xa0, 0xce, 0xdb, 0x24, 0xdc,
    0xe1, 0x1e, 0xe7, 0x33, 0x78, 0x2a, 0x4b, 0x28, 0xd6, 0x5d, 0xa4, 0x03, 0xff, 0x7b, 0x0f, 0x40,
    0xf3, 0xa8, 0xbe, 0xd7, 0xdf, 0x7c, 0x3c, 0x69, 0x04, 0x56, 0xe4, 0x13, 0x05, 0xa7, 0xff, 0x90,
    0xb4, 0xf3, 0x8b, 0x15, 0xc7, 0x7b, 0x17, 0x54, 0xdd, 0xd2, 0x4f, 0x15, 0x2e, 0x64, 0xc9, 0xd5,
    0xc2, 0xb4, 0xac, 0x70, 0xd4, 0x6e, 0x7b, 0x67, 0xf3, 0xc3, 0x92, 0x79, 0xed, 0x79, 0x37, 0xf4,
    0x2b, 0xe2, 0xad, 0x2a, 0xab, 0xea, 0x85, 0x4b, 0xe0, 0xc6, 0x04, 0x5f, 0xba, 0x0f, 0x74, 0xef,
    0x73, 0x2e, 0xda, 0x21, 0x23, 0xbe, 0x69, 0xa0, 0xcc, 0xe7, 0x60, 0x5f, 0xb2, 0x26, 0xca, 0xb9,
    0xeb, 0x29, 0x24, 0xd9, 0x19, 0x46, 0x50, 0x35, 0x97, 0xbf, 0xeb, 0x66, 0x19, 0x84, 0x36, 0x31,
};

static const MessageEncodingTestVector sMessageEncodingTest0558 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x72C8A4FA,
        kWeaveHeaderFlag_SourceNodeId|kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2AFA,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0558_EncryptionKey,
    sMessageEncodingTest0558_Payload,
    sizeof(sMessageEncodingTest0558_Payload),
    sMessageEncodingTest0558_ExpectedEncoding,
    sizeof(sMessageEncodingTest0558_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0559_Payload[] =
{
    0x0f, 0x5a, 0x7a, 0xbc, 0x00, 0x57, 0xa0, 0x0b, 0x14, 0x7f, 0x53, 0x50, 0x92, 0x36, 0xe6, 0x36,
    0x65, 0x8b, 0x79, 0xa0, 0x39, 0xc4, 0x75, 0x26, 0x0e, 0xad, 0x9f, 0x08, 0xf6, 0x54, 0x06, 0xc6,
    0xae, 0xb1, 0x43, 0x87, 0x4e, 0x9f, 0x15, 0x2a, 0x27, 0x37, 0x94, 0x75, 0x1c, 0x95, 0x90, 0xb3,
    0xc9, 0x90, 0x98, 0x47, 0xf2, 0xe1, 0xbc, 0xa1, 0xb5, 0xd5, 0xa7, 0xb5, 0xad, 0xf7, 0x33, 0xc3,
    0x87, 0xc2, 0x4f, 0xc6, 0xa0, 0x9c, 0x11, 0x31, 0x22, 0x7d, 0xd3, 0x8e, 0x2f, 0x8b, 0x9d, 0x7a,
    0x07, 0x54, 0x37, 0x9f, 0x42, 0xc3, 0xa4, 0x98, 0x91, 0x9f, 0x84, 0x6a, 0x37, 0x4f, 0x20, 0x1b,
    0x8c, 0xbb, 0x0e, 0xa4, 0xf7, 0x44, 0xc0, 0xdb, 0xf9, 0xef, 0x77, 0x67, 0xcb, 0x09, 0xcd, 0xa3,
    0x9e, 0xb4, 0x25, 0x95, 0xe7, 0xc0, 0xfd, 0x5a, 0x7c, 0x1e, 0x94, 0x3f, 0xda, 0x05, 0x4f, 0xd6,
    0x65, 0xaf, 0x75, 0x4d, 0xd4, 0x6b, 0xcf, 0xa2, 0x91, 0xcf, 0x2f, 0x75, 0x55, 0xa5, 0xfc, 0x47,
    0x0c, 0xdc, 0x72, 0xea, 0x6d, 0x46, 0x7f, 0xfb, 0x17, 0x5a, 0x0c, 0xba, 0x17, 0x64, 0xee, 0x6d,
    0x7d, 0xfe, 0x28, 0x98, 0xb5, 0x7b, 0xf9, 0xa1, 0x54, 0x65, 0x70, 0xa4, 0x57, 0xab, 0x6d, 0x94,
    0xff, 0x70, 0x1d, 0x9b, 0xea, 0x24, 0xa4, 0x36, 0x37, 0x48, 0x23, 0x2c, 0x69, 0xba, 0x2c, 0xd1,
    0xf7, 0x08, 0xe8, 0x56, 0x6b, 0xd4, 0xcf, 0xf5, 0xd0, 0x1d, 0x13, 0x4c, 0x11, 0xf1, 0x64, 0x2c,
    0xbc, 0x93, 0x4e, 0x2f, 0x39, 0x9e, 0x01, 0x5d, 0x5f, 0x26, 0x88, 0x5c, 0xad, 0x87, 0xb6, 0x5f,
    0x7e, 0xdd, 0x31, 0xbf, 0x42, 0x33, 0xaf, 0xf9, 0xd8, 0xea, 0x88, 0xff, 0xda, 0x94, 0x3c, 0xd0,
    0x87, 0x5d, 0xe7, 0x13, 0x10, 0x23, 0x2c, 0x3b, 0x6b, 0x2b, 0x26, 0x84, 0xf0, 0x51, 0x0e, 0x59,
    0x63, 0xf8, 0xe5, 0x56, 0x85, 0x82, 0x91, 0xfe, 0x3b, 0x39, 0x81, 0x91, 0x19, 0x1c, 0x01, 0x03,
    0x60, 0xd6, 0x31, 0x18, 0x3a, 0x1b, 0xdf, 0x65, 0x08, 0x80, 0xd4, 0x63, 0xb3, 0x8c, 0x43, 0xc5,
    0xe6, 0xc0, 0x61, 0x98, 0x35, 0xcb, 0x09, 0xd9, 0x2d, 0xa6, 0x2c, 0x03, 0x7e, 0x82, 0x3d, 0xc1,
    0xe8, 0x20, 0xb6, 0x79, 0x38, 0xc9, 0x66, 0xec, 0x4d, 0x40, 0x95, 0xd8, 0x30, 0xe3, 0xc8, 0xd9,
    0xe6, 0x67, 0xe4, 0x18, 0x4c, 0xc2, 0xcc, 0x28, 0x42, 0x3e, 0x7d, 0x36, 0x78, 0x40, 0x02, 0x44,
    0x56, 0x55, 0x19, 0xcd, 0xd4, 0x71, 0xf1, 0x2b, 0x89, 0x58, 0xcc, 0xb1, 0x13, 0x23, 0xb5, 0x70,
    0x38, 0xdc, 0x74, 0x3d, 0x7e, 0xba, 0x06, 0x9f, 0x14, 0xf6, 0x9e, 0x79, 0xef, 0xaa, 0x42, 0x31,
    0xec, 0x2c, 0x45, 0x5c, 0x8c, 0x00, 0x71, 0x3d, 0x9d, 0x11, 0x63, 0xe0, 0x6f, 0x4d, 0xc8, 0xd3,
    0xb7, 0xa4, 0xd7, 0x8a, 0x17, 0x59, 0xb1, 0x3e, 0x94, 0xb9, 0xb9, 0x91, 0x93, 0xdb, 0x51, 0xa7,
    0x9d, 0x5a, 0xf7, 0x3c, 0x4c, 0x4d, 0x03, 0x74, 0xf2, 0xab, 0x48, 0xa9, 0x92, 0x17, 0x06, 0x02,
    0x8e, 0xb5, 0x4b, 0x42, 0xd3, 0x04, 0x58, 0x92, 0x80, 0xe2, 0xb4, 0x22, 0x9c, 0x09, 0xbb, 0xad,
    0x87, 0x53, 0x4d, 0x86, 0xa3, 0xbe, 0xb2, 0xdc, 0xf1, 0xb4, 0xbf, 0x02, 0x10, 0x6f, 0xa5, 0x83,
    0x4f, 0x62, 0x88, 0x8a, 0x83, 0x01, 0x40, 0xb5, 0x3c, 0xb9, 0x04, 0xb4, 0xe9, 0xc9, 0xca, 0xd8,
    0xe5, 0xce, 0x12, 0x0c, 0xc2, 0x11, 0xb7, 0x81, 0xb4, 0x53, 0x11, 0x0d, 0x3c, 0xfa, 0x07, 0x8d,
    0xc8, 0xe9, 0x7a, 0x4f, 0xdf, 0x03, 0xb0, 0x2f, 0x71, 0x45, 0x34, 0xae, 0x89, 0x1c, 0x76, 0xd1,
    0x13, 0x4c, 0x33, 0x0a, 0xd9, 0x3b, 0x30, 0xfb, 0xed, 0xcf, 0x1d, 0x35, 0x46, 0xdc, 0x38, 0xfc,
    0x6b, 0xe8, 0x06, 0xe8, 0x96, 0xcd, 0xa0, 0xdb, 0xe6, 0x69, 0xed, 0x9a, 0x87, 0x68, 0x9c, 0xca,
    0xf4, 0x98, 0xf8, 0xac, 0xc2, 0x88, 0x17, 0x8d, 0x3b, 0xd0, 0xa6, 0xf0, 0x2a, 0xf1, 0x5a, 0x7a,
    0x24, 0x3c, 0x82, 0x19, 0xaf, 0x3d, 0x3b, 0x45, 0x53, 0x5c, 0x3e, 0x50, 0xa8, 0x32, 0x4c, 0xd2,
    0xa5, 0xc9, 0xc5, 0xe4, 0x8a, 0x86, 0x59, 0x29, 0x9f, 0x81, 0x56, 0x72, 0x08, 0x31, 0x97, 0x87,
    0x5e, 0x21, 0xe5, 0x39, 0xca, 0x98, 0xd2, 0x66, 0xe4, 0x5b, 0xda, 0xc0, 0x50, 0x39, 0x67, 0x70,
    0x60, 0x53, 0xf2, 0xd8, 0xa9, 0x39, 0x94, 0xf1, 0x11, 0x92, 0x98, 0x95, 0xc7, 0xd3, 0x99, 0x1d,
    0xf0, 0xad, 0xbd, 0xa2, 0x1e, 0xaf, 0x4b, 0xd9, 0x76, 0xc7, 0xa0, 0x1b, 0x8f, 0xbb, 0x7f, 0x9e,
    0x9f, 0x66, 0x48, 0xe9, 0x72, 0xcf, 0x22, 0x1b, 0x47, 0x60, 0x1e, 0xfd, 0xaf, 0x50, 0x35, 0xec,
    0xa6, 0xb0, 0x0a, 0xcd, 0x9d, 0x5a, 0x38, 0x37, 0xfa, 0xc5, 0xb8, 0x92, 0xfc, 0x77, 0x16, 0x71,
    0x82, 0xf5, 0xf7, 0x9c, 0x10, 0xf3, 0x0b, 0xc2, 0xc4, 0xca, 0x0b, 0xaf, 0x83, 0xb1, 0x0d, 0xd8,
    0xb0, 0xe5, 0xab, 0xf8, 0x64, 0x84, 0x4e, 0xb4, 0x37, 0x4a, 0x09, 0xeb, 0xab, 0x93, 0x76, 0x53,
    0x85, 0x59, 0xf6, 0x62, 0x53, 0x25, 0xa1, 0x8e, 0x41, 0x2a, 0x2e, 0xb1, 0x1a, 0x14, 0x80, 0x39,
    0x1b, 0x86, 0x90, 0xbf, 0x1a, 0xd1, 0x68, 0x53, 0x85, 0xd0, 0xd9, 0xa5, 0xbc, 0x0e, 0x0f, 0x8a,
    0x67, 0x0d, 0x3a, 0xcf, 0x69, 0x7c, 0x76, 0x21, 0xde, 0x02, 0x2c, 0xef, 0x38, 0x56, 0x23, 0x5d,
    0x35, 0xd3, 0x28, 0x89, 0x8a, 0x80, 0x8e, 0x09, 0x48, 0xe5, 0x91, 0xd0, 0x6e, 0x5b, 0x5d, 0x9d,
    0x84, 0xc8, 0x7d, 0x36, 0xf6, 0x0e, 0x15, 0x88, 0xb1, 0x99, 0x19, 0x91, 0xce, 0xec, 0x52, 0x28,
    0xd2, 0xab, 0x4e, 0x50, 0x1a, 0x8c, 0x3e, 0x36, 0x5b, 0x65, 0x99, 0xd3, 0x51, 0x18, 0x56, 0xb2,
    0x71, 0xb3, 0x7d, 0x11, 0x81, 0xdf, 0xba, 0x6f, 0x42, 0x89, 0xc2, 0x6c, 0xcf, 0xaa, 0xd6, 0xed,
    0xcc, 0xff, 0x4f, 0x04, 0xc4, 0xb9, 0x0d, 0x07, 0x08, 0xb7, 0x01, 0x50, 0x17, 0x1e, 0x73, 0x6b,
    0x59, 0xe9, 0x94, 0x0e, 0x23, 0xb0, 0x83, 0x4e, 0xe8, 0xb2, 0x26, 0x9d, 0xca, 0x6e, 0x28, 0x5c,
    0x53, 0x98, 0xa4, 0xf7, 0x1a, 0x54, 0x31, 0xd3, 0xd3, 0x6c, 0x91, 0x32, 0xb7, 0x80, 0x8a, 0x77,
    0xb0, 0xb7, 0x1a, 0xec, 0xc4, 0xe0, 0x78, 0xf4, 0x2b, 0xea, 0x3a, 0x04, 0xe4, 0xe0, 0xfd, 0xf4,
    0x78, 0x16, 0x3b, 0xcd, 0xbc, 0x2b, 0x19, 0x30, 0x54, 0x62, 0x5b, 0xf2, 0x42, 0xfe, 0x60, 0x8b,
    0x5f, 0xf3, 0xb3, 0x56, 0x58, 0xda, 0xf1, 0xd3, 0x3f, 0xeb, 0xf0, 0x8d, 0xf4, 0xed, 0x4b, 0xfb,
    0xc0, 0xce, 0x08, 0xbb, 0xb1, 0xf4, 0xc8, 0x1a, 0xd6, 0x64, 0xb9, 0x83, 0x6d, 0x8c, 0x58, 0xd4,
    0x33, 0x11, 0x1b, 0x61, 0x93, 0xc4, 0x00, 0x45, 0x8d, 0x51, 0xa3, 0x5e, 0x09, 0x77, 0x5e, 0x75,
    0x8b, 0x6f, 0x14, 0xa1, 0x69, 0x52, 0x2f, 0x51, 0xbc, 0xe9, 0x3c, 0x12, 0x6d, 0x33, 0x85, 0xf8,
    0x74, 0xf0, 0xe3, 0x58, 0x9f, 0x90, 0xf1, 0x49, 0x5c, 0x0c, 0xe8, 0x7a, 0x7b, 0xe0, 0x27, 0xa6,
    0x09, 0x2a, 0xcc, 0x1f, 0xd4, 0xcd, 0xf2, 0x29, 0x72, 0xdd, 0x25, 0x4a, 0xe9, 0xca, 0xd9, 0xf9,
    0xd7, 0x37, 0xbc, 0xeb, 0xd5, 0xef, 0x38, 0x24, 0x4d, 0x88, 0x06, 0x9c, 0x1b, 0x43, 0x36, 0x99,
    0xcc, 0x86, 0xe6, 0x9a, 0xec, 0xbf, 0xea, 0xc4, 0xe8, 0x2a, 0x9f, 0x33, 0x61, 0xce, 0x05, 0x3e,
    0xea, 0x1d, 0x75, 0xa8, 0x49, 0xcb, 0xf6, 0x41, 0x78, 0x72, 0x14, 0x0d, 0xc7, 0x04, 0xfd, 0xb9,
};

static const uint8_t sMessageEncodingTest0559_ExpectedEncoding[] =
{
    0x00, 0x22, 0xa1, 0x01, 0xfa, 0x23, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0f, 0x5a,
    0x7a, 0xbc, 0x00, 0x57, 0xa0, 0x0b, 0x14, 0x7f, 0x53, 0x50, 0x92, 0x36, 0xe6, 0x36, 0x65, 0x8b,
    0x79, 0xa0, 0x39, 0xc4, 0x75, 0x26, 0x0e, 0xad, 0x9f, 0x08, 0xf6, 0x54, 0x06, 0xc6, 0xae, 0xb1,
    0x43, 0x87, 0x4e, 0x9f, 0x15, 0x2a, 0x27, 0x37, 0x94, 0x75, 0x1c, 0x95, 0x90, 0xb3, 0xc9, 0x90,
    0x98, 0x47, 0xf2, 0xe1, 0xbc, 0xa1, 0xb5, 0xd5, 0xa7, 0xb5, 0xad, 0xf7, 0x33, 0xc3, 0x87, 0xc2,
    0x4f, 0xc6, 0xa0, 0x9c, 0x11, 0x31, 0x22, 0x7d, 0xd3, 0x8e, 0x2f, 0x8b, 0x9d, 0x7a, 0x07, 0x54,
    0x37, 0x9f, 0x42, 0xc3, 0xa4, 0x98, 0x91, 0x9f, 0x84, 0x6a, 0x37, 0x4f, 0x20, 0x1b, 0x8c, 0xbb,
    0x0e, 0xa4, 0xf7, 0x44, 0xc0, 0xdb, 0xf9, 0xef, 0x77, 0x67, 0xcb, 0x09, 0xcd, 0xa3, 0x9e, 0xb4,
    0x25, 0x95, 0xe7, 0xc0, 0xfd, 0x5a, 0x7c, 0x1e, 0x94, 0x3f, 0xda, 0x05, 0x4f, 0xd6, 0x65, 0xaf,
    0x75, 0x4d, 0xd4, 0x6b, 0xcf, 0xa2, 0x91, 0xcf, 0x2f, 0x75, 0x55, 0xa5, 0xfc, 0x47, 0x0c, 0xdc,
    0x72, 0xea, 0x6d, 0x46, 0x7f, 0xfb, 0x17, 0x5a, 0x0c, 0xba, 0x17, 0x64, 0xee, 0x6d, 0x7d, 0xfe,
    0x28, 0x98, 0xb5, 0x7b, 0xf9, 0xa1, 0x54, 0x65, 0x70, 0xa4, 0x57, 0xab, 0x6d, 0x94, 0xff, 0x70,
    0x1d, 0x9b, 0xea, 0x24, 0xa4, 0x36, 0x37, 0x48, 0x23, 0x2c, 0x69, 0xba, 0x2c, 0xd1, 0xf7, 0x08,
    0xe8, 0x56, 0x6b, 0xd4, 0xcf, 0xf5, 0xd0, 0x1d, 0x13, 0x4c, 0x11, 0xf1, 0x64, 0x2c, 0xbc, 0x93,
    0x4e, 0x2f, 0x39, 0x9e, 0x01, 0x5d, 0x5f, 0x26, 0x88, 0x5c, 0xad, 0x87, 0xb6, 0x5f, 0x7e, 0xdd,
    0x31, 0xbf, 0x42, 0x33, 0xaf, 0xf9, 0xd8, 0xea, 0x88, 0xff, 0xda, 0x94, 0x3c, 0xd0, 0x87, 0x5d,
    0xe7, 0x13, 0x10, 0x23, 0x2c, 0x3b, 0x6b, 0x2b, 0x26, 0x84, 0xf0, 0x51, 0x0e, 0x59, 0x63, 0xf8,
    0xe5, 0x56, 0x85, 0x82, 0x91, 0xfe, 0x3b, 0x39, 0x81, 0x91, 0x19, 0x1c, 0x01, 0x03, 0x60, 0xd6,
    0x31, 0x18, 0x3a, 0x1b, 0xdf, 0x65, 0x08, 0x80, 0xd4, 0x63, 0xb3, 0x8c, 0x43, 0xc5, 0xe6, 0xc0,
    0x61, 0x98, 0x35, 0xcb, 0x09, 0xd9, 0x2d, 0xa6, 0x2c, 0x03, 0x7e, 0x82, 0x3d, 0xc1, 0xe8, 0x20,
    0xb6, 0x79, 0x38, 0xc9, 0x66, 0xec, 0x4d, 0x40, 0x95, 0xd8, 0x30, 0xe3, 0xc8, 0xd9, 0xe6, 0x67,
    0xe4, 0x18, 0x4c, 0xc2, 0xcc, 0x28, 0x42, 0x3e, 0x7d, 0x36, 0x78, 0x40, 0x02, 0x44, 0x56, 0x55,
    0x19, 0xcd, 0xd4, 0x71, 0xf1, 0x2b, 0x89, 0x58, 0xcc, 0xb1, 0x13, 0x23, 0xb5, 0x70, 0x38, 0xdc,
    0x74, 0x3d, 0x7e, 0xba, 0x06, 0x9f, 0x14, 0xf6, 0x9e, 0x79, 0xef, 0xaa, 0x42, 0x31, 0xec, 0x2c,
    0x45, 0x5c, 0x8c, 0x00, 0x71, 0x3d, 0x9d, 0x11, 0x63, 0xe0, 0x6f, 0x4d, 0xc8, 0xd3, 0xb7, 0xa4,
    0xd7, 0x8a, 0x17, 0x59, 0xb1, 0x3e, 0x94, 0xb9, 0xb9, 0x91, 0x93, 0xdb, 0x51, 0xa7, 0x9d, 0x5a,
    0xf7, 0x3c, 0x4c, 0x4d, 0x03, 0x74, 0xf2, 0xab, 0x48, 0xa9, 0x92, 0x17, 0x06, 0x02, 0x8e, 0xb5,
    0x4b, 0x42, 0xd3, 0x04, 0x58, 0x92, 0x80, 0xe2, 0xb4, 0x22, 0x9c, 0x09, 0xbb, 0xad, 0x87, 0x53,
    0x4d, 0x86, 0xa3, 0xbe, 0xb2, 0xdc, 0xf1, 0xb4, 0xbf, 0x02, 0x10, 0x6f, 0xa5, 0x83, 0x4f, 0x62,
    0x88, 0x8a, 0x83, 0x01, 0x40, 0xb5, 0x3c, 0xb9, 0x04, 0xb4, 0xe9, 0xc9, 0xca, 0xd8, 0xe5, 0xce,
    0x12, 0x0c, 0xc2, 0x11, 0xb7, 0x81, 0xb4, 0x53, 0x11, 0x0d, 0x3c, 0xfa, 0x07, 0x8d, 0xc8, 0xe9,
    0x7a, 0x4f, 0xdf, 0x03, 0xb0, 0x2f, 0x71, 0x45, 0x34, 0xae, 0x89, 0x1c, 0x76, 0xd1, 0x13, 0x4c,
    0x33, 0x0a, 0xd9, 0x3b, 0x30, 0xfb, 0xed, 0xcf, 0x1d, 0x35, 0x46, 0xdc, 0x38, 0xfc, 0x6b, 0xe8,
    0x06, 0xe8, 0x96, 0xcd, 0xa0, 0xdb, 0xe6, 0x69, 0xed, 0x9a, 0x87, 0x68, 0x9c, 0xca, 0xf4, 0x98,
    0xf8, 0xac, 0xc2, 0x88, 0x17, 0x8d, 0x3b, 0xd0, 0xa6, 0xf0, 0x2a, 0xf1, 0x5a, 0x7a, 0x24, 0x3c,
    0x82, 0x19, 0xaf, 0x3d, 0x3b, 0x45, 0x53, 0x5c, 0x3e, 0x50, 0xa8, 0x32, 0x4c, 0xd2, 0xa5, 0xc9,
    0xc5, 0xe4, 0x8a, 0x86, 0x59, 0x29, 0x9f, 0x81, 0x56, 0x72, 0x08, 0x31, 0x97, 0x87, 0x5e, 0x21,
    0xe5, 0x39, 0xca, 0x98, 0xd2, 0x66, 0xe4, 0x5b, 0xda, 0xc0, 0x50, 0x39, 0x67, 0x70, 0x60, 0x53,
    0xf2, 0xd8, 0xa9, 0x39, 0x94, 0xf1, 0x11, 0x92, 0x98, 0x95, 0xc7, 0xd3, 0x99, 0x1d, 0xf0, 0xad,
    0xbd, 0xa2, 0x1e, 0xaf, 0x4b, 0xd9, 0x76, 0xc7, 0xa0, 0x1b, 0x8f, 0xbb, 0x7f, 0x9e, 0x9f, 0x66,
    0x48, 0xe9, 0x72, 0xcf, 0x22, 0x1b, 0x47, 0x60, 0x1e, 0xfd, 0xaf, 0x50, 0x35, 0xec, 0xa6, 0xb0,
    0x0a, 0xcd, 0x9d, 0x5a, 0x38, 0x37, 0xfa, 0xc5, 0xb8, 0x92, 0xfc, 0x77, 0x16, 0x71, 0x82, 0xf5,
    0xf7, 0x9c, 0x10, 0xf3, 0x0b, 0xc2, 0xc4, 0xca, 0x0b, 0xaf, 0x83, 0xb1, 0x0d, 0xd8, 0xb0, 0xe5,
    0xab, 0xf8, 0x64, 0x84, 0x4e, 0xb4, 0x37, 0x4a, 0x09, 0xeb, 0xab, 0x93, 0x76, 0x53, 0x85, 0x59,
    0xf6, 0x62, 0x53, 0x25, 0xa1, 0x8e, 0x41, 0x2a, 0x2e, 0xb1, 0x1a, 0x14, 0x80, 0x39, 0x1b, 0x86,
    0x90, 0xbf, 0x1a, 0xd1, 0x68, 0x53, 0x85, 0xd0, 0xd9, 0xa5, 0xbc, 0x0e, 0x0f, 0x8a, 0x67, 0x0d,
    0x3a, 0xcf, 0x69, 0x7c, 0x76, 0x21, 0xde, 0x02, 0x2c, 0xef, 0x38, 0x56, 0x23, 0x5d, 0x35, 0xd3,
    0x28, 0x89, 0x8a, 0x80, 0x8e, 0x09, 0x48, 0xe5, 0x91, 0xd0, 0x6e, 0x5b, 0x5d, 0x9d, 0x84, 0xc8,
    0x7d, 0x36, 0xf6, 0x0e, 0x15, 0x88, 0xb1, 0x99, 0x19, 0x91, 0xce, 0xec, 0x52, 0x28, 0xd2, 0xab,
    0x4e, 0x50, 0x1a, 0x8c, 0x3e, 0x36, 0x5b, 0x65, 0x99, 0xd3, 0x51, 0x18, 0x56, 0xb2, 0x71, 0xb3,
    0x7d, 0x11, 0x81, 0xdf, 0xba, 0x6f, 0x42, 0x89, 0xc2, 0x6c, 0xcf, 0xaa, 0xd6, 0xed, 0xcc, 0xff,
    0x4f, 0x04, 0xc4, 0xb9, 0x0d, 0x07, 0x08, 0xb7, 0x01, 0x50, 0x17, 0x1e, 0x73, 0x6b, 0x59, 0xe9,
    0x94, 0x0e, 0x23, 0xb0, 0x83, 0x4e, 0xe8, 0xb2, 0x26, 0x9d, 0xca, 0x6e, 0x28, 0x5c, 0x53, 0x98,
    0xa4, 0xf7, 0x1a, 0x54, 0x31, 0xd3, 0xd3, 0x6c, 0x91, 0x32, 0xb7, 0x80, 0x8a, 0x77, 0xb0, 0xb7,
    0x1a, 0xec, 0xc4, 0xe0, 0x78, 0xf4, 0x2b, 0xea, 0x3a, 0x04, 0xe4, 0xe0, 0xfd, 0xf4, 0x78, 0x16,
    0x3b, 0xcd, 0xbc, 0x2b, 0x19, 0x30, 0x54, 0x62, 0x5b, 0xf2, 0x42, 0xfe, 0x60, 0x8b, 0x5f, 0xf3,
    0xb3, 0x56, 0x58, 0xda, 0xf1, 0xd3, 0x3f, 0xeb, 0xf0, 0x8d, 0xf4, 0xed, 0x4b, 0xfb, 0xc0, 0xce,
    0x08, 0xbb, 0xb1, 0xf4, 0xc8, 0x1a, 0xd6, 0x64, 0xb9, 0x83, 0x6d, 0x8c, 0x58, 0xd4, 0x33, 0x11,
    0x1b, 0x61, 0x93, 0xc4, 0x00, 0x45, 0x8d, 0x51, 0xa3, 0x5e, 0x09, 0x77, 0x5e, 0x75, 0x8b, 0x6f,
    0x14, 0xa1, 0x69, 0x52, 0x2f, 0x51, 0xbc, 0xe9, 0x3c, 0x12, 0x6d, 0x33, 0x85, 0xf8, 0x74, 0xf0,
    0xe3, 0x58, 0x9f, 0x90, 0xf1, 0x49, 0x5c, 0x0c, 0xe8, 0x7a, 0x7b, 0xe0, 0x27, 0xa6, 0x09, 0x2a,
    0xcc, 0x1f, 0xd4, 0xcd, 0xf2, 0x29, 0x72, 0xdd, 0x25, 0x4a, 0xe9, 0xca, 0xd9, 0xf9, 0xd7, 0x37,
    0xbc, 0xeb, 0xd5, 0xef, 0x38, 0x24, 0x4d, 0x88, 0x06, 0x9c, 0x1b, 0x43, 0x36, 0x99, 0xcc, 0x86,
    0xe6, 0x9a, 0xec, 0xbf, 0xea, 0xc4, 0xe8, 0x2a, 0x9f, 0x33, 0x61, 0xce, 0x05, 0x3e, 0xea, 0x1d,
    0x75, 0xa8, 0x49, 0xcb, 0xf6, 0x41, 0x78, 0x72, 0x14, 0x0d, 0xc7, 0x04, 0xfd, 0xb9,
};

static const MessageEncodingTestVector sMessageEncodingTest0559 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x23FA01A1,
        kWeaveHeaderFlag_SourceNodeId,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0559_Payload,
    sizeof(sMessageEncodingTest0559_Payload),
    sMessageEncodingTest0559_ExpectedEncoding,
    sizeof(sMessageEncodingTest0559_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0560_EncryptionKey =
{
    {
        0xc8, 0x73, 0x7f, 0x49, 0x6f, 0x99, 0x50, 0x37, 0x07, 0xda, 0x00, 0x50, 0x30, 0x02, 0x6d, 0xcb,
    },
    {
        0xb2, 0xa0, 0x31, 0xc9, 0xeb, 0xd8, 0x8b, 0x06, 0x6d, 0xf5, 0x27, 0x75, 0xf0, 0x6f, 0x3e, 0x92,
        0xe9, 0xb2, 0x06, 0x58,
    }
};
static const uint8_t sMessageEncodingTest0560_Payload[] =
{
    0xf5, 0xf8, 0x1b, 0xf0, 0xf2, 0x5d, 0xd1, 0x07, 0x1a, 0x6b, 0x5a, 0x18, 0x6a, 0xf6, 0xdf, 0xe4,
    0xec, 0x5e, 0x2f, 0xd3, 0x35, 0x06, 0xb4, 0x36, 0xda, 0x47, 0xcf, 0xbc, 0xc9, 0x72, 0x94, 0xb1,
    0xe6, 0x40, 0x8e, 0x97, 0x5d, 0xf7, 0x1e, 0xa2, 0x59, 0xd6, 0x38, 0xa9, 0xe3, 0x10, 0x4e, 0xf6,
    0xa5, 0x02, 0x90, 0xbe, 0x2e, 0xe5, 0x73, 0x1b, 0x44, 0x97, 0x59, 0x0b, 0x35, 0x80, 0x62, 0xb9,
    0x14, 0x4d, 0xd0, 0x87, 0x75, 0x48, 0xf8, 0x48, 0x72, 0xaa, 0x1e, 0x6b, 0xec, 0xb2, 0x66, 0xcb,
    0x8c, 0x3c, 0x64, 0xda, 0x63, 0x79, 0xf0, 0x08, 0x5e, 0xb2, 0xea, 0x08, 0x76, 0x7d, 0x12, 0x4e,
    0xd1, 0xdb, 0xf0, 0x83, 0x9a, 0xd2, 0x41, 0x54, 0xb6, 0xa9, 0x4a, 0x65, 0xd8, 0x2f, 0x7c, 0x54,
    0x05, 0x4c, 0x8f, 0xd2, 0xa0, 0x89, 0xd6, 0x7a, 0xe7, 0x6a, 0xaf, 0xff, 0x33, 0x66, 0x20, 0xa9,
    0x3d, 0xef, 0x13, 0x83, 0x4e, 0x9b, 0x74, 0x5f, 0x2e, 0xe5, 0xbc, 0x60, 0x00, 0x60, 0x93, 0xbd,
    0x33, 0x2b, 0xe5, 0x0f, 0xe7, 0x97, 0xc1, 0xea, 0xcb, 0x78, 0xcc, 0x47, 0x41, 0x09, 0xf2, 0xb3,
    0xc8, 0x84, 0x97, 0xc4, 0x01, 0x4f, 0x8a, 0xe4, 0x63, 0x4b, 0x78, 0x3e, 0x59, 0x6b, 0x58, 0xa0,
    0x35, 0x6d, 0xdf, 0xcc, 0xd3, 0xa2, 0x89, 0x93, 0xa4, 0x61, 0x7e, 0x69, 0xc8, 0x42, 0x16, 0xfc,
    0xca, 0xee, 0xbc, 0x45, 0x85, 0xfd, 0x50, 0x27, 0xf1, 0x1a, 0xd3, 0x91, 0x08, 0x4f, 0x7f, 0x6c,
    0xda, 0xfc, 0x20, 0xcc, 0x76, 0x68, 0xf7, 0x85, 0x16, 0xdc, 0xaa, 0xa9, 0x40, 0x15, 0xfb, 0xe7,
    0xb9, 0xce, 0x45, 0x86, 0x14, 0x60, 0x95, 0x32, 0xf2, 0x49, 0x5c, 0x70, 0xd2, 0xc5, 0x5e, 0x97,
    0x89, 0xfd, 0x29, 0x06, 0xd3, 0x5f, 0x5f, 0x14, 0x74, 0x48, 0xbe, 0xa0, 0x76, 0xdd, 0x65, 0x75,
    0xf0, 0x7a, 0x95, 0x61, 0xb6, 0x31, 0xea, 0xc9, 0x82, 0xd9, 0x5c, 0x06, 0xc9, 0x3e, 0xcf, 0x0c,
    0xb3, 0x93, 0x7c, 0x0f, 0xd6, 0xe7, 0xb4, 0x01, 0xaf, 0xfe, 0x03, 0xbf, 0xdd, 0x4b, 0x97, 0x94,
    0x1a, 0x9b, 0x44, 0x95, 0xfe, 0xd3, 0x8d, 0x7b, 0xda, 0xc7, 0xf9, 0x75, 0xab, 0xab, 0xd5, 0x2e,
    0x2c, 0xa5, 0xb9, 0xc6, 0xb7, 0xd0, 0xb0, 0x84, 0x76, 0x0e, 0xe2, 0x6a, 0xf9, 0x54, 0xab, 0xfc,
    0x48, 0xe3, 0x14, 0xee, 0x51, 0x59, 0x05, 0xb9, 0x71, 0xba, 0x58, 0x04, 0xd3, 0x62, 0xe7, 0x26,
    0xc6, 0xda, 0x37, 0x06, 0xd6, 0xfe, 0x38, 0xa7, 0x81, 0x6b, 0x12, 0xf6, 0x30, 0xcd, 0x5a, 0x40,
    0x9b, 0x29, 0xe8, 0xbe, 0x36, 0x1f, 0xa5, 0x24, 0xd0, 0x45, 0x49, 0xae, 0x55, 0x0a, 0xb9, 0x9f,
    0x40, 0x73, 0x89, 0x5c, 0x3b, 0x0f, 0xde, 0x04, 0x65, 0x72, 0x26, 0x1c, 0x82, 0x4a, 0xb2, 0xdb,
    0x1c, 0x06, 0x7f, 0x92, 0x86, 0x12, 0x94, 0x27, 0xb2, 0x37, 0xd5, 0x08, 0xf8, 0x5c, 0xbe, 0xdf,
    0xe3, 0x22, 0xe8, 0xd8, 0xb4, 0x50, 0x3a, 0x18, 0x83, 0x64, 0x96, 0xf8, 0xa2, 0xb5, 0x67, 0x91,
    0x79, 0x3d, 0xdf, 0xae, 0xb1, 0x6b, 0xc0, 0x00, 0x6f, 0x7d, 0x45, 0x60, 0x11, 0x9c, 0xf2, 0xdf,
    0x75, 0xbe, 0x3c, 0xf1, 0x31, 0x2f, 0x7b, 0xcf, 0x92, 0x96, 0xc4, 0x07, 0x08, 0xb7, 0xf2, 0x9e,
    0xba, 0x3e, 0x0b, 0x11, 0xca, 0xd8, 0x8d, 0x56, 0x5f, 0x3c, 0xed, 0xd6, 0x03, 0xd6, 0x70, 0x58,
    0x12, 0xee, 0x15, 0xe4, 0xd7, 0x48, 0xe9, 0x5e, 0x12, 0xfd, 0xb9, 0x9d, 0x2e, 0x01, 0x12, 0x27,
    0xb9, 0x66, 0x86, 0x87, 0x3f, 0x84, 0x45, 0x9d, 0x61, 0xc2, 0xeb, 0x4f, 0x13, 0xab, 0xab, 0x9a,
    0x4c, 0x79, 0x1f, 0xc3, 0x8c, 0x39, 0x4b, 0xe6, 0x0a, 0x08, 0x53, 0x68, 0x88, 0xdc, 0x64, 0x19,
    0x3e, 0xb3, 0xfd, 0xfa, 0xbb, 0x5b, 0xab, 0x97, 0x59, 0x2c, 0x46, 0x69, 0x69, 0xce, 0x87, 0x24,
    0x11, 0x2e, 0x27, 0x23, 0xd2, 0xa1, 0x23, 0x52, 0xf4, 0x54, 0x78, 0x50, 0xc4, 0x93, 0xce, 0x27,
    0xaa, 0x4d, 0xf7, 0x4e, 0x6f, 0x15, 0x24, 0x61, 0x8f, 0x59, 0x15, 0xe1, 0xc0, 0xca, 0x3b, 0x77,
    0xc5, 0x1f, 0x37, 0x80, 0x09, 0x45, 0xb4, 0x9f, 0x82, 0x88, 0x9f, 0xdd, 0xf5, 0x15, 0xe2, 0x75,
    0x6f, 0x9c, 0xd3, 0x5f, 0xd0, 0x3b, 0xb9, 0x96, 0x25, 0x51, 0x39, 0x26, 0x10, 0x5d, 0x11, 0x81,
    0x0c, 0xf6, 0x24, 0x21, 0x47, 0x60, 0x24, 0x08, 0x17, 0x0b, 0x5d, 0x6c, 0xd7, 0xc7, 0x75, 0xd2,
    0x1f, 0x2a, 0xb3, 0xaf, 0x8b, 0xd7, 0x11, 0x6b, 0x59, 0x39, 0x75, 0x86, 0x5b, 0x25, 0xcd, 0xb1,
    0x6a, 0x3e, 0x36, 0x50, 0x96, 0x9e, 0x16, 0xce, 0x55, 0x8a, 0xfe, 0x5c, 0x1a, 0x54, 0x51, 0x2c,
    0x0c, 0x6f, 0xa9, 0x75, 0xfb, 0xe9, 0xef, 0xce, 0x19, 0x2c, 0xf8, 0x59, 0xb2, 0x04, 0x5d, 0x03,
    0xa4, 0x7b, 0x45, 0xd7, 0x2b, 0xd1, 0x83, 0x62, 0xa6, 0x01, 0xff, 0x0b, 0x71, 0x66, 0x3b, 0x15,
    0x78, 0x52, 0x11, 0x8d, 0xf4, 0xc9, 0xcf, 0x79, 0x9e, 0xdc, 0x2d, 0x8e, 0xb5, 0x8d, 0x39, 0x52,
    0xf7, 0xba, 0xf3, 0x28, 0x7b, 0x0e, 0xea, 0x1c, 0x5e, 0xd8, 0xbd, 0x98, 0x11, 0xc0, 0x9a, 0x03,
    0x76, 0x95, 0x40, 0xff, 0xc4, 0x47, 0x9a, 0x26, 0x7a, 0x99, 0xee, 0xfa, 0xa2, 0x8c, 0x0a, 0xbc,
    0x39, 0x07, 0xef, 0x76, 0x33, 0x61, 0x7d, 0x07, 0x65, 0x20, 0x97, 0xfd, 0x11, 0xcf, 0x06, 0x27,
    0x66, 0x29, 0x78, 0x38, 0xb4, 0xc6, 0x56, 0x09, 0xd5, 0x50, 0x49, 0x6b, 0xb7, 0x26, 0x20, 0x1c,
    0xbf, 0x30, 0xf4, 0x3b, 0x65, 0x54, 0xec, 0x12, 0x92, 0x95, 0x9e, 0x25, 0x5c, 0x77, 0x95, 0xe0,
    0xd0, 0x4c, 0xf1, 0x17, 0x6b, 0x28, 0x41, 0x3b, 0x84, 0xbe, 0x94, 0xa6, 0x30, 0xfe, 0x24, 0x4e,
    0x2a, 0x12, 0x50, 0x9d, 0xde, 0x38, 0xa2, 0x1a, 0xb8, 0x60, 0x63, 0xc9, 0x9c, 0xd6, 0xe5, 0x20,
    0xa7, 0x55, 0x49, 0xa3, 0xbf, 0x46, 0xd6, 0x06, 0x31, 0xa7, 0x1e, 0x01, 0xec, 0xfc, 0xe7, 0xe6,
    0x60, 0x27, 0x5c, 0x67, 0xd8, 0x33, 0x22, 0x25, 0x77, 0x72, 0x0a, 0xc3, 0xfb, 0xc7, 0x41, 0xb3,
    0x3c, 0x84, 0x75, 0x81, 0xc2, 0xd7, 0x58, 0x88, 0xe1, 0x1e, 0xf1, 0xf0, 0xd3, 0xe8, 0xe2, 0x02,
    0xdd, 0x52, 0x5d, 0x0e, 0xc1, 0x59, 0x07, 0x47, 0xb2, 0xf2, 0x2a, 0x78, 0x12, 0xb3, 0x91, 0x39,
    0x54, 0x9e, 0x21, 0xdf, 0x5c, 0x57, 0x58, 0xbe, 0x1f, 0x0f, 0xbd, 0xd3, 0x4b, 0x61, 0x1f, 0x58,
    0x69, 0x04, 0x60, 0xc8, 0xad, 0xd5, 0x15, 0xab, 0xfd, 0x8e, 0xd3, 0x4f, 0x60, 0xd9, 0x23, 0x73,
    0xe9, 0x4d, 0x30, 0x46, 0x7f, 0xbc, 0xf1, 0x53, 0x6d, 0x57, 0x41, 0x5f, 0xad, 0x29, 0x16, 0x52,
    0xdc, 0x58, 0xda, 0x29, 0x21, 0xaa, 0x65, 0x8f, 0x89, 0x05, 0xdc, 0x2e, 0x9a, 0xe0, 0xf0, 0xc5,
    0x84, 0xc0, 0x20, 0xc4, 0xb8, 0x3c, 0x52, 0xdd, 0x5b, 0x4e, 0xe3, 0x66, 0xdf, 0x38, 0x68, 0x38,
    0x69, 0xaf, 0xc5, 0xfd, 0x43, 0x76, 0x27, 0x7f, 0xa8, 0xcb, 0x76, 0xfc, 0x76, 0xf1, 0x55, 0x6b,
    0x1b, 0xd6, 0xa7, 0xc9, 0x9c, 0x33, 0x4a, 0xa6, 0x79, 0xe5, 0xfa, 0xd8, 0x25, 0xe3, 0x36, 0xad,
    0x3a, 0x08, 0x43, 0xaa, 0xfe, 0x11, 0xcb, 0xc6, 0xa3, 0x39, 0xb1, 0xd4, 0xaa, 0x04, 0xb7, 0x4a,
    0x7f, 0x5d, 0x80, 0x1b, 0x02, 0x8a, 0x04, 0xa0, 0x55, 0x0d, 0x1b, 0xbf, 0x1f, 0x5b, 0xf8, 0xbd,
    0x7f, 0xc4, 0x4f, 0x27, 0xce, 0xd9, 0x74, 0x3c, 0x31, 0x8f, 0x9c, 0x2d, 0x35, 0xf0, 0x3e, 0x27,
};

static const uint8_t sMessageEncodingTest0560_ExpectedEncoding[] =
{
    0x10, 0x22, 0xa5, 0x9c, 0x81, 0xdd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0b, 0x2d,
    0x2b, 0xff, 0x1a, 0x11, 0x29, 0x26, 0xec, 0x88, 0x67, 0x71, 0x02, 0xd7, 0x6d, 0x9f, 0x44, 0xef,
    0xc2, 0x19, 0x39, 0xf5, 0xb6, 0x5c, 0xa7, 0x5a, 0x58, 0x80, 0xe2, 0xd4, 0x69, 0x49, 0x7b, 0xed,
    0x3b, 0xf1, 0x67, 0xcb, 0xaf, 0x51, 0x0c, 0xbb, 0xeb, 0x17, 0xdc, 0xbe, 0xfe, 0x01, 0x18, 0x07,
    0xb1, 0x37, 0x1e, 0x9a, 0x2b, 0x61, 0x46, 0xc8, 0x23, 0x2f, 0xdb, 0x72, 0xae, 0x7e, 0xd7, 0x1f,
    0x07, 0xde, 0x60, 0x0a, 0x60, 0xbd, 0x91, 0xfb, 0x71, 0x03, 0xbf, 0xdd, 0x66, 0x80, 0xbd, 0xe8,
    0x39, 0x21, 0x09, 0x0d, 0xd5, 0x4b, 0xd2, 0x1e, 0xc7, 0x34, 0x2a, 0xfa, 0x13, 0x57, 0x74, 0xf3,
    0x6b, 0xc8, 0x9a, 0xc1, 0xe8, 0xf3, 0x96, 0xce, 0xc8, 0x87, 0xfa, 0x60, 0x23, 0x18, 0x16, 0xdc,
    0x9a, 0xf5, 0xd0, 0xd1, 0xb7, 0xf0, 0x09, 0xd0, 0x45, 0xeb, 0x19, 0xff, 0xcb, 0x74, 0x7e, 0x66,
    0xa6, 0x7c, 0xdf, 0xc4, 0x40, 0xc3, 0xc2, 0x3a, 0xe8, 0x09, 0x1f, 0xc8, 0x9f, 0xaf, 0xb5, 0xac,
    0x20, 0xb6, 0xf6, 0xdb, 0x7d, 0xfd, 0xde, 0x6d, 0x48, 0xb9, 0x05, 0xe6, 0xe9, 0xce, 0xc7, 0x36,
    0x2a, 0x05, 0x10, 0x57, 0x6f, 0x00, 0xdf, 0x87, 0x60, 0xeb, 0x52, 0x6e, 0x79, 0x9c, 0x5e, 0x61,
    0xa2, 0xd7, 0x02, 0x53, 0x17, 0x01, 0x04, 0x58, 0xa1, 0xa8, 0x45, 0xa2, 0x56, 0xd5, 0x0b, 0x52,
    0xf3, 0x65, 0xbb, 0x5b, 0x10, 0x91, 0x3e, 0x90, 0x5d, 0xb7, 0xcb, 0xd4, 0x23, 0x3f, 0xcf, 0xa3,
    0x48, 0x7d, 0xa5, 0x61, 0x5d, 0x5a, 0x36, 0xb4, 0xd0, 0xa4, 0x04, 0x8f, 0x50, 0x7e, 0x67, 0xc7,
    0x69, 0xf6, 0xc8, 0xc8, 0x60, 0xa3, 0xf8, 0x9c, 0x48, 0x14, 0xb1, 0xb1, 0xe5, 0xdc, 0x33, 0x7e,
    0x62, 0x6b, 0x79, 0x1a, 0x57, 0x95, 0x02, 0x78, 0xcc, 0x14, 0xbd, 0xd6, 0x4a, 0x12, 0x32, 0x5b,
    0x07, 0xf2, 0x5f, 0x4c, 0x72, 0xca, 0xc2, 0x1f, 0x11, 0xf7, 0x9a, 0xea, 0x4e, 0xdc, 0x28, 0x12,
    0x60, 0x7a, 0xf9, 0xed, 0x4f, 0xf5, 0xf0, 0xe0, 0x15, 0x53, 0xf3, 0xea, 0xdd, 0x0c, 0xca, 0x55,
    0x5c, 0x9d, 0x76, 0xe4, 0x76, 0xfe, 0xa0, 0x1d, 0xc7, 0x27, 0x30, 0xb2, 0x64, 0x4f, 0x02, 0x7d,
    0x82, 0xda, 0x6e, 0x30, 0x84, 0x69, 0x91, 0x1b, 0xd0, 0xad, 0xbb, 0x6a, 0xc5, 0x5a, 0x72, 0xef,
    0x5c, 0x91, 0x1e, 0xd7, 0xbe, 0x2b, 0x89, 0x20, 0xc2, 0x07, 0x9f, 0x12, 0xe1, 0x5b, 0x3a, 0x12,
    0x81, 0xf0, 0x07, 0xf1, 0x45, 0xdf, 0xd8, 0x01, 0x04, 0x02, 0x5e, 0x4e, 0xa8, 0x31, 0xc0, 0x49,
    0x22, 0xb6, 0x2a, 0x32, 0x40, 0xba, 0xba, 0x36, 0xc2, 0x38, 0x65, 0x34, 0x7c, 0xe2, 0xb4, 0xfd,
    0x6c, 0x7e, 0x2f, 0x40, 0x04, 0x22, 0xa5, 0x71, 0x87, 0x90, 0x33, 0x8e, 0xf7, 0xfc, 0xc0, 0x0f,
    0x60, 0xbf, 0x11, 0xf5, 0xff, 0x1d, 0x28, 0xbb, 0xe4, 0x6d, 0x02, 0x9a, 0x8e, 0x62, 0xf6, 0xbe,
    0xd8, 0xe3, 0xf0, 0x07, 0x10, 0x0c, 0xf0, 0xad, 0x0c, 0x98, 0x42, 0x94, 0xbc, 0xe6, 0xf0, 0x7c,
    0x80, 0x9f, 0xe8, 0x2a, 0xcc, 0x4e, 0x91, 0xe5, 0xbb, 0xf2, 0x4c, 0xbf, 0xd1, 0x78, 0xcb, 0x3d,
    0xd6, 0x94, 0x7f, 0x34, 0xa0, 0x6c, 0x8a, 0x7d, 0xb2, 0x66, 0x97, 0xf0, 0x6d, 0x93, 0xf4, 0xdd,
    0xc7, 0x91, 0xbd, 0xdd, 0xb4, 0x54, 0x27, 0xc8, 0xd0, 0x7c, 0x0e, 0x06, 0x71, 0x77, 0xc7, 0x66,
    0x92, 0x46, 0xd7, 0xba, 0xb6, 0x99, 0xf7, 0x88, 0xd0, 0x28, 0xf8, 0x18, 0xf6, 0xa1, 0x81, 0xe2,
    0x64, 0x3e, 0x1f, 0xe4, 0x24, 0x05, 0x25, 0x84, 0x15, 0x0d, 0x1b, 0x73, 0xec, 0x1c, 0x38, 0xe2,
    0xeb, 0x10, 0xa3, 0x15, 0xae, 0xc0, 0xca, 0xc7, 0x13, 0x8c, 0xda, 0x82, 0x97, 0xd8, 0x6c, 0x7d,
    0x97, 0x02, 0x26, 0x5b, 0x7f, 0xa2, 0x06, 0x09, 0x1f, 0x5c, 0x53, 0xa1, 0x4f, 0xd1, 0x9f, 0xfd,
    0x98, 0xfe, 0x9c, 0xa3, 0x9a, 0xb3, 0x11, 0x45, 0x6c, 0x02, 0xbd, 0x55, 0x14, 0xe7, 0x8e, 0x59,
    0xd2, 0x49, 0x01, 0xf6, 0xaf, 0xd6, 0xd9, 0x7a, 0x85, 0x7d, 0x1a, 0x87, 0x96, 0x8a, 0xda, 0x16,
    0x44, 0xaa, 0x7a, 0x4a, 0x3d, 0x9e, 0xf6, 0xfe, 0xb2, 0xa1, 0xf7, 0xc6, 0xd9, 0xf3, 0x84, 0x84,
    0x4b, 0x75, 0x82, 0xc6, 0x74, 0x11, 0x2b, 0xd4, 0x94, 0x8a, 0xb6, 0x6e, 0x9d, 0x03, 0x8c, 0x2a,
    0xf6, 0x39, 0x62, 0x09, 0x6a, 0xd6, 0xc5, 0x71, 0xac, 0x34, 0xc4, 0xc5, 0xf0, 0xd6, 0x94, 0x35,
    0xe7, 0xee, 0x5a, 0x28, 0x99, 0x9a, 0xb8, 0xfb, 0xfc, 0x06, 0xd6, 0x0c, 0x0d, 0x7a, 0xf2, 0x1e,
    0x9a, 0x50, 0x72, 0xcf, 0x6b, 0xeb, 0x69, 0x65, 0xa5, 0xca, 0xfe, 0x58, 0x65, 0x25, 0xce, 0xae,
    0xf3, 0x28, 0x86, 0x00, 0x9e, 0x80, 0xb3, 0xbd, 0xe2, 0xd1, 0x58, 0x8f, 0x64, 0x08, 0xf0, 0x9e,
    0x54, 0xac, 0x0d, 0x7c, 0xd0, 0xee, 0xf9, 0xf5, 0x73, 0xcc, 0xb1, 0x62, 0x96, 0x9e, 0x7c, 0x24,
    0x12, 0x5f, 0xfd, 0x41, 0x81, 0x77, 0x75, 0xf2, 0x89, 0xba, 0x01, 0x9f, 0x1f, 0xd8, 0xa4, 0xaa,
    0x81, 0xcc, 0x8c, 0x53, 0xd9, 0x45, 0x45, 0x53, 0x76, 0xdc, 0x6d, 0x8b, 0x40, 0xab, 0x37, 0x69,
    0x47, 0xf8, 0x20, 0x64, 0x53, 0xff, 0x20, 0xb5, 0x10, 0x62, 0x2a, 0x42, 0x76, 0x9a, 0xad, 0x62,
    0xa6, 0x58, 0x76, 0x0c, 0xc3, 0x48, 0xb2, 0x5e, 0x30, 0x76, 0x12, 0x30, 0x30, 0x75, 0x57, 0x43,
    0x95, 0xa6, 0xa9, 0xfc, 0x04, 0x2c, 0xf7, 0xdf, 0xed, 0x50, 0xa6, 0x7f, 0x7d, 0x74, 0xcd, 0xb3,
    0x76, 0xea, 0xd3, 0xcc, 0x96, 0xc6, 0x92, 0xfc, 0x97, 0x3e, 0xcf, 0x4b, 0xfd, 0x89, 0x9f, 0x11,
    0xca, 0x5b, 0x77, 0xa4, 0x3f, 0x7e, 0x14, 0xa4, 0x72, 0xa0, 0xeb, 0xf1, 0xb9, 0x46, 0x18, 0x22,
    0xde, 0x6e, 0x2c, 0x34, 0x07, 0x3e, 0x40, 0x1c, 0xc4, 0x7a, 0x9c, 0x63, 0x7f, 0x5d, 0x9b, 0x1e,
    0x16, 0xa0, 0x2c, 0x8b, 0x89, 0x82, 0x4a, 0x3c, 0xa8, 0x71, 0xc0, 0x92, 0x80, 0x67, 0x4d, 0xb4,
    0x10, 0x2f, 0xb1, 0x95, 0xe7, 0xa0, 0x39, 0x7b, 0x6b, 0x2d, 0x7d, 0xa7, 0x83, 0x89, 0x9c, 0x0c,
    0xd1, 0xbc, 0x35, 0x09, 0x69, 0x95, 0x8b, 0xe3, 0x2b, 0xb3, 0x13, 0x29, 0x95, 0x3b, 0x54, 0xc6,
    0xc7, 0x4f, 0xb9, 0x2b, 0x8d, 0x39, 0x4e, 0xc1, 0x61, 0xa2, 0xb2, 0xef, 0x3d, 0xeb, 0xcd, 0x2d,
    0xce, 0x58, 0x33, 0xf4, 0x66, 0x12, 0x14, 0x80, 0xfa, 0xfc, 0xa5, 0x21, 0xcd, 0xd1, 0xd4, 0x5e,
    0xea, 0x3d, 0x4a, 0x35, 0x2a, 0x4a, 0x14, 0x99, 0xe5, 0x80, 0x36, 0x33, 0x77, 0xe6, 0xcb, 0x91,
    0x7c, 0xe3, 0xf5, 0x65, 0xbf, 0x4c, 0x8e, 0x14, 0x20, 0x54, 0x3b, 0x20, 0x2e, 0x90, 0x92, 0xc8,
    0xda, 0x1c, 0x48, 0x14, 0x7e, 0xb2, 0x90, 0x01, 0xdc, 0xff, 0x0a, 0x18, 0x9c, 0x3c, 0xe0, 0x2c,
    0x39, 0x8e, 0x64, 0xd0, 0xc9, 0x74, 0x72, 0x18, 0x0e, 0x6c, 0xb6, 0x3b, 0xa3, 0x3b, 0x19, 0x3b,
    0x22, 0x56, 0x9d, 0x62, 0xe8, 0x28, 0xbd, 0x64, 0xa3, 0x07, 0xb2, 0xfe, 0x6f, 0x52, 0x32, 0x54,
    0xb3, 0xc2, 0x55, 0x97, 0xa2, 0x39, 0xd4, 0x82, 0x58, 0x54, 0xd2, 0xf6, 0x5b, 0xe1, 0xe7, 0xe7,
    0x80, 0xb2, 0x20, 0xda, 0xb9, 0x2e, 0x4f, 0xee, 0x1d, 0x0b, 0xae, 0x99, 0xa1, 0x1e, 0xc1, 0x4f,
    0xc5, 0x23, 0xc1, 0x0d, 0xf3, 0x27, 0xa4, 0x49, 0xc9, 0xfa, 0x66, 0xfa, 0x77, 0x17, 0x69, 0x7a,
    0x9c, 0xa7, 0x22, 0x69, 0xfc, 0x0e, 0x59, 0xfa, 0x7c, 0xd1, 0x95, 0x09, 0x92, 0x93, 0x37, 0x40,
    0xe7, 0x39, 0xdf, 0x81, 0xf6, 0x29, 0x8c, 0xad, 0xce, 0xaa, 0xae, 0x13, 0x93, 0xdd, 0xdd, 0x0e,
    0x3a, 0x27, 0x48, 0xc7,
};

static const MessageEncodingTestVector sMessageEncodingTest0560 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xDD819CA5,
        kWeaveHeaderFlag_SourceNodeId,
        0x2D0B,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0560_EncryptionKey,
    sMessageEncodingTest0560_Payload,
    sizeof(sMessageEncodingTest0560_Payload),
    sMessageEncodingTest0560_ExpectedEncoding,
    sizeof(sMessageEncodingTest0560_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0561_EncryptionKey =
{
    {
        0xa5, 0x24, 0x93, 0x96, 0xe3, 0xd9, 0x13, 0x04, 0x11, 0x9c, 0x25, 0xca, 0x07, 0x7f, 0x6a, 0xfd,
    }
};
static const uint8_t sMessageEncodingTest0561_Payload[] =
{
    0xcd, 0x22, 0x2b, 0x0d, 0xbd, 0xe4, 0x72, 0xe6, 0x4d, 0x9b, 0x3f, 0xb5, 0x36, 0x9c, 0xbf, 0x09,
    0xd2, 0x44, 0xa3, 0x50, 0x1d, 0x2f, 0xe0, 0x70, 0x3c, 0x6a, 0x5b, 0x90, 0xbd, 0xbd, 0xa0, 0xff,
    0xa3, 0x5c, 0xba, 0x70, 0x89, 0x5d, 0xfd, 0xb2, 0xc7, 0xa7, 0x40, 0xa8, 0x03, 0xc5, 0x36, 0xb2,
    0xac, 0xb7, 0xda, 0xbd, 0x22, 0x7c, 0x84, 0x5a, 0x2d, 0xa7, 0xa2, 0xb0, 0x0c, 0x8c, 0x6a, 0x22,
    0x96, 0x1c, 0x28, 0x20, 0xbc, 0xa0, 0x3a, 0x55, 0x95, 0x8e, 0x40, 0xc2, 0xd4, 0x1a, 0x60, 0xaa,
    0x8d, 0x1b, 0xa3, 0xa9, 0x0d, 0x88, 0xac, 0x6a, 0x3d, 0xce, 0x40, 0x91, 0xa1, 0xb4, 0xd7, 0xa1,
    0xae, 0xf5, 0xf9, 0xd8, 0xca, 0xcd, 0xf8, 0x5b, 0x6d, 0x92, 0x36, 0xce, 0x97, 0x99, 0xf0, 0xc7,
    0xfe, 0x79, 0x1a, 0xb9, 0xcc, 0xe0, 0x01, 0xc0, 0x45, 0x95, 0x0b, 0x50, 0x90, 0x29, 0xcd, 0x0c,
    0x5d, 0x1c, 0x82, 0xaa, 0x68, 0x05, 0x50, 0x69, 0xf6, 0x02, 0x9e, 0x06, 0xdc, 0x6d, 0x1e, 0x1d,
    0x91, 0x26, 0x16, 0xd1, 0x50, 0xaa, 0xd4, 0x2d, 0x01, 0x4d, 0xb2, 0x16, 0xed, 0x3c, 0x08, 0xad,
    0x97, 0xbf, 0x3b, 0x06, 0x40, 0x66, 0x22, 0x79, 0xf1, 0x81, 0xbd, 0x1c, 0x3f, 0xb8, 0x85, 0xa1,
    0xbf, 0x8b, 0x9c, 0xbb, 0xc7, 0x23, 0x72, 0xcb, 0x12, 0xa5, 0x19, 0x07, 0x41, 0x5a, 0xfa, 0x62,
    0xf5, 0x8f, 0x48, 0xea, 0x26, 0x45, 0x48, 0x0d, 0x67, 0xe1, 0x6a, 0xb1, 0x2a, 0x18, 0x5f, 0xce,
    0xa4, 0x5c, 0xd8, 0xc3, 0x44, 0xa5, 0x65, 0x7b, 0x28, 0xd0, 0x20, 0x82, 0x26, 0x7e, 0xb9, 0x03,
    0xb6, 0x20, 0x27, 0x8d, 0x0b, 0x97, 0xec, 0xc0, 0x04, 0xdd, 0xfa, 0xd2, 0xc9, 0x16, 0xf1, 0x62,
    0x3e, 0x1a, 0x4f, 0x15, 0x15, 0x63, 0x13, 0xf9, 0xf9, 0x7f, 0xc4, 0xf8, 0x7a, 0xea, 0x41, 0xee,
    0x36, 0x71, 0x41, 0x80, 0x47, 0x85, 0x97, 0x73, 0xb1, 0xe1, 0xf4, 0xf5, 0x74, 0x4e, 0x33, 0x94,
    0x5c, 0x9d, 0x52, 0xaa, 0x3f, 0x99, 0xdd, 0xed, 0x34, 0x93, 0x35, 0x7d, 0x6c, 0x86, 0xe6, 0xe0,
    0x4f, 0x2d, 0x49, 0xac, 0xcf, 0x5e, 0x28, 0x2c, 0x76, 0xbb, 0x6c, 0x51, 0x9d, 0xef, 0xed, 0x23,
    0x0b, 0x10, 0xd2, 0x0b, 0x5d, 0x3c, 0x94, 0x5d, 0x04, 0x2f, 0x4b, 0x4a, 0x7c, 0x75, 0xc2, 0x46,
    0x11, 0x75, 0x91, 0x33, 0xc4, 0xae, 0xbe, 0xac, 0x61, 0x16, 0xa0, 0x4e, 0x75, 0x6b, 0x43, 0x53,
    0x3f, 0x88, 0x40, 0xac, 0x5e, 0x84, 0x30, 0xa9, 0xd8, 0xac, 0x0c, 0x36, 0x89, 0xb6, 0x54, 0x5f,
    0xb5, 0xbe, 0x49, 0x24, 0x7a, 0x39, 0xed, 0xd9, 0xdb, 0x37, 0x35, 0xde, 0x88, 0x9a, 0x80, 0xd7,
    0x6f, 0x82, 0xc4, 0x36, 0xcf, 0xf9, 0xef, 0x24, 0xdb, 0x07, 0x13, 0x62, 0xaf, 0xb9, 0x12, 0xb4,
    0xc9, 0x07, 0x59, 0xb5, 0x22, 0x74, 0x85, 0x35, 0x7a, 0xbe, 0xb0, 0x32, 0xd9, 0xd8, 0xb4, 0xf9,
    0x41, 0xab, 0x5f, 0x17, 0x18, 0x8a, 0x03, 0x8b, 0x09, 0xa9, 0x4a, 0x98, 0x58, 0x4c, 0xa9, 0x30,
    0x72, 0x54, 0x2e, 0xc8, 0xbc, 0x06, 0x11, 0xfa, 0x39, 0x0c, 0xfb, 0xc9, 0x99, 0x67, 0x1f, 0xee,
    0x29, 0x0e, 0xfe, 0x24, 0xe3, 0x39, 0xf8, 0x5c, 0xaa, 0x45, 0x26, 0x71, 0xf5, 0x9d, 0x0d, 0x59,
    0x20, 0xe9, 0xdb, 0x0e, 0x95, 0x4e, 0x4b, 0xca, 0x7d, 0x46, 0xa2, 0x68, 0x40, 0xaf, 0x6e, 0x9c,
    0x25, 0xcc, 0xc9, 0xf8, 0x80, 0x40, 0x10, 0x77, 0x2d, 0x18, 0xc9, 0xa3, 0x96, 0xd1, 0xb3, 0x81,
    0x49, 0x25, 0x52, 0x1b, 0x98, 0xc0, 0x74, 0x26, 0x9c, 0x0e, 0xba, 0xb2, 0x49, 0xf2, 0x7e, 0x17,
    0x79, 0xd0, 0x39, 0x75, 0x47, 0x0f, 0xde, 0x50, 0xfa, 0x9c, 0x00, 0xb3, 0x55, 0x58, 0x56, 0xee,
    0xed, 0xa3, 0x82, 0x61, 0xd7, 0x8d, 0x8c, 0xa2, 0xf7, 0x01, 0xd1, 0xca, 0x15, 0x43, 0x8b, 0x5d,
    0x5a, 0xfe, 0x69, 0x06, 0x8d, 0xca, 0xe0, 0x02, 0xb8, 0x0b, 0x90, 0xeb, 0xbc, 0xf6, 0x4e, 0x8c,
    0xed, 0x7d, 0xdb, 0x74, 0x1c, 0x7e, 0x51, 0xb7, 0x7a, 0x8e, 0x7f, 0x2d, 0x31, 0x85, 0x6d, 0x33,
    0xa4, 0x79, 0xc9, 0xc3, 0x0c, 0xf0, 0x5a, 0x94, 0xab, 0x74, 0x87, 0x3f, 0x96, 0x53, 0xb0, 0xfc,
    0xa6, 0xb2, 0xf5, 0xda, 0xf6, 0x70, 0xfb, 0xfb, 0x9a, 0x71, 0x31, 0xe2, 0x22, 0x61, 0xaa, 0x6c,
    0x5c, 0xe0, 0x10, 0xfb, 0xc8, 0xa6, 0x03, 0x62, 0x61, 0x7d, 0x09, 0x33, 0xe9, 0x2c, 0xfe, 0x92,
    0xc5, 0x6e, 0xe3, 0xc7, 0xf6, 0xb6, 0xca, 0xbf, 0x93, 0x15, 0xa1, 0x21, 0x25, 0xbb, 0x6a, 0xf1,
    0xbd, 0x97, 0xe1, 0xe7, 0x0e, 0xf2, 0x82, 0x5e, 0x8f, 0x85, 0xe8, 0x18, 0x30, 0xa6, 0xb5, 0x42,
    0xb2, 0x07, 0xb8, 0x21, 0x31, 0xc7, 0x35, 0x14, 0x6a, 0x6e, 0xc1, 0x28, 0x9e, 0xb7, 0x63, 0x87,
    0x78, 0x75, 0x6e, 0x4a, 0xa2, 0xc4, 0x55, 0x8b, 0x34, 0x8a, 0x0b, 0xdf, 0xcf, 0xec, 0x63, 0xa3,
    0x92, 0x21, 0xed, 0xd8, 0x8b, 0x32, 0x7c, 0xd8, 0x93, 0x96, 0xa7, 0x7e, 0x5e, 0xa2, 0x8c, 0xcc,
    0x84, 0x16, 0xd9, 0x03, 0x9c, 0x4f, 0x07, 0xe0, 0xaa, 0xd2, 0xa3, 0x70, 0x2d, 0x53, 0x3e, 0x3e,
    0x1d, 0x12, 0xf0, 0x6b, 0x25, 0x24, 0xde, 0x5b, 0xa7, 0x8b, 0x0d, 0x37, 0xe7, 0x88, 0xd1, 0x8d,
    0xa8, 0x0d, 0xd7, 0xf2, 0xf8, 0x42, 0x3f, 0xaf, 0x83, 0x7f, 0xd1, 0x19, 0xf5, 0x8f, 0x84, 0xa9,
    0x8b, 0x46, 0x56, 0x09, 0x0d, 0xd4, 0x52, 0xde, 0xb0, 0x4e, 0x76, 0x16, 0x86, 0x0a, 0xc9, 0x25,
    0xcd, 0xa8, 0x8e, 0xd8, 0x12, 0xf4, 0x80, 0x0d, 0x2d, 0x5f, 0x25, 0xc3, 0x53, 0x2e, 0x6f, 0xe4,
    0xe7, 0x85, 0x51, 0x96, 0x97, 0xb9, 0x46, 0x87, 0x4c, 0xc5, 0xeb, 0x73, 0xea, 0xfb, 0x25, 0x38,
    0x9a, 0xa5, 0x07, 0x50, 0x43, 0x5e, 0x45, 0xab, 0xbd, 0x4e, 0xcb, 0x25, 0x33, 0x6c, 0xc8, 0xa7,
    0x9d, 0x70, 0x53, 0x6a, 0x16, 0x26, 0x43, 0x4b, 0x39, 0xfb, 0xa2, 0x59, 0xb5, 0x85, 0x56, 0x8b,
    0x3a, 0x9b, 0x6d, 0x3b, 0x34, 0x04, 0xf7, 0x7b, 0x62, 0x36, 0x93, 0xb4, 0xc9, 0x67, 0x7d, 0xf6,
    0x7e, 0xac, 0x65, 0x53, 0xb1, 0x17, 0xbe, 0xac, 0xde, 0x81, 0xe0, 0xd1, 0x6e, 0x94, 0x49, 0x7c,
    0x9a, 0x89, 0xeb, 0xa4, 0x7c, 0x59, 0xaf, 0x43, 0x9c, 0x96, 0xeb, 0xbe, 0x14, 0x14, 0xa1, 0xec,
    0xdc, 0x7c, 0x69, 0x47, 0x8a, 0x4b, 0x20, 0x81, 0xba, 0x17, 0xe7, 0x5f, 0x91, 0xca, 0x93, 0x5d,
    0xf7, 0x3c, 0xbc, 0xa2, 0x32, 0x58, 0x2c, 0xa4, 0x1c, 0xeb, 0x29, 0x51, 0x7b, 0xfb, 0xd5, 0xc3,
    0x9d, 0x33, 0x56, 0x6d, 0xeb, 0x32, 0xc1, 0x44, 0x0c, 0x5c, 0x4c, 0xc4, 0x21, 0xfe, 0xf0, 0xd3,
    0xc0, 0xb5, 0x65, 0x41, 0x21, 0xfb, 0x2c, 0xe0, 0xdf, 0x8c, 0xb3, 0x6f, 0x1b, 0x15, 0x49, 0x72,
    0x85, 0xa2, 0x31, 0xc4, 0xdc, 0x04, 0xde, 0x31, 0xfd, 0x4a, 0x41, 0xb9, 0xc5, 0x03, 0xf3, 0x59,
    0x48, 0xdb, 0xc6, 0xbb, 0xc3, 0x49, 0x85, 0x5c, 0xf7, 0x05, 0xd0, 0x00, 0xec, 0xe9, 0x80, 0xdd,
    0xa0, 0x0b, 0xf7, 0x86, 0xd1, 0x29, 0x05, 0xc7, 0x69, 0x2e, 0x68, 0x5b, 0x33, 0xda, 0xe9, 0x6e,
    0xa1, 0xd0, 0x06, 0xa6, 0xbc, 0xa6, 0x61, 0x59, 0x17, 0x16, 0x5d, 0x6a, 0xc0, 0xfc, 0x64, 0x0d,
    0x5f, 0x16, 0x83, 0x05, 0x28, 0x2e, 0xbd, 0x4a, 0x23, 0x6c, 0x6e, 0x4b, 0x37, 0xc7, 0x6b, 0x2c,
    0xa3, 0x90, 0xf7, 0xe0, 0x50, 0x96, 0x6a, 0xdb, 0x77, 0xbc, 0xe0, 0x80, 0xae, 0x80, 0x92, 0xfb,
};

static const uint8_t sMessageEncodingTest0561_ExpectedEncoding[] =
{
    0x20, 0x22, 0x95, 0x7e, 0x70, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0xab, 0x27,
    0xa4, 0x40, 0x13, 0x20, 0xac, 0x14, 0xed, 0x6d, 0x0c, 0x25, 0x79, 0xa3, 0x70, 0x93, 0x95, 0x1a,
    0x3c, 0x5d, 0x5b, 0x07, 0x21, 0x17, 0x0e, 0x75, 0x88, 0x95, 0x48, 0x7d, 0x0a, 0xc2, 0xde, 0xeb,
    0xfc, 0x44, 0xa9, 0x84, 0x9f, 0x9f, 0x19, 0xd7, 0xa2, 0x8d, 0x7e, 0xad, 0xd7, 0x9d, 0x59, 0x06,
    0xf1, 0xe4, 0xb8, 0xd8, 0x81, 0x22, 0x96, 0x3b, 0x27, 0x88, 0x05, 0xf2, 0xc6, 0x29, 0xc5, 0x4a,
    0x7b, 0x14, 0xc0, 0xbc, 0x7e, 0x91, 0xab, 0x9c, 0x7b, 0xd7, 0x6f, 0x80, 0x51, 0x57, 0x33, 0x3f,
    0x26, 0xbe, 0x7d, 0x15, 0x4d, 0xb2, 0x92, 0xb1, 0x74, 0x92, 0x6e, 0xb7, 0xec, 0x26, 0xf2, 0xdc,
    0x34, 0x50, 0x1b, 0x86, 0x26, 0xa6, 0xb2, 0x94, 0xfe, 0x27, 0x8f, 0xa5, 0x8d, 0xb4, 0xc6, 0xf9,
    0xf6, 0xb9, 0xb3, 0x1c, 0x59, 0x03, 0xd8, 0xef, 0x4c, 0xc7, 0xce, 0x37, 0xea, 0xd6, 0x22, 0xf1,
    0x90, 0x5d, 0x06, 0x9a, 0xe6, 0xa2, 0xee, 0xaf, 0x4b, 0x82, 0x4a, 0xaa, 0xbd, 0xd5, 0x6d, 0xf2,
    0x5d, 0x8c, 0xd4, 0xbd, 0x8d, 0x0f, 0xe7, 0x02, 0xce, 0xeb, 0xc0, 0x84, 0x65, 0x74, 0x7e, 0x96,
    0xa7, 0x0b, 0x6e, 0xc7, 0x4a, 0x56, 0x89, 0x5c, 0x69, 0xbc, 0x72, 0x53, 0x7b, 0x4e, 0x5d, 0xb3,
    0x66, 0x12, 0x0a, 0xa5, 0xc7, 0xcc, 0x98, 0xef, 0xd0, 0x2c, 0xa3, 0x8f, 0xaa, 0x7e, 0x66, 0x42,
    0xd2, 0x2f, 0xba, 0x6f, 0xdd, 0x94, 0xdc, 0xf3, 0x86, 0x04, 0xec, 0x72, 0x66, 0x60, 0x84, 0x43,
    0x39, 0xee, 0x63, 0xdd, 0x34, 0xe2, 0xcc, 0x27, 0xc7, 0x57, 0xbd, 0x9c, 0x5f, 0x32, 0x1d, 0x72,
    0xd3, 0x2d, 0xa9, 0x4d, 0xbe, 0x93, 0x1f, 0x42, 0x72, 0xad, 0x98, 0xf5, 0x78, 0x20, 0xe1, 0x28,
    0xe5, 0x89, 0x4e, 0xe3, 0xd4, 0xf7, 0xe6, 0xab, 0xbf, 0xbe, 0xe7, 0xdf, 0x5b, 0x3b, 0x42, 0xed,
    0xe7, 0x70, 0xa9, 0xd9, 0x07, 0x50, 0x5f, 0x91, 0x06, 0xb4, 0x78, 0x16, 0xfe, 0x16, 0xf6, 0x54,
    0xcb, 0xbb, 0x8b, 0x0d, 0x92, 0x92, 0x07, 0xa7, 0xd2, 0x03, 0x75, 0x4b, 0x10, 0x87, 0x6a, 0xb9,
    0xd7, 0xd5, 0xc7, 0x4c, 0xc1, 0x28, 0xdb, 0x26, 0xa5, 0x31, 0xe7, 0x37, 0x71, 0xae, 0x1c, 0xb7,
    0xcc, 0xca, 0x4f, 0x5b, 0xe6, 0x58, 0x0a, 0x8a, 0x19, 0xe7, 0x3e, 0x30, 0xa1, 0x3d, 0x33, 0x86,
    0x67, 0x32, 0x81, 0xe6, 0xe6, 0x16, 0xf4, 0x34, 0x5f, 0x95, 0x1a, 0xe8, 0xd5, 0x12, 0x26, 0xca,
    0x9c, 0xb4, 0x09, 0x76, 0xfd, 0xa5, 0x95, 0x8d, 0x55, 0x9e, 0xa7, 0x7d, 0x68, 0x9d, 0xa6, 0xc7,
    0x9c, 0xe7, 0xf4, 0xc1, 0xc2, 0x08, 0xe0, 0x5d, 0xa2, 0x3e, 0xc5, 0xe4, 0x88, 0xd5, 0x57, 0x04,
    0x81, 0xc8, 0x08, 0xf7, 0xf0, 0x31, 0xcf, 0x39, 0xf0, 0x8d, 0xfe, 0x70, 0xdc, 0xa5, 0x1c, 0x5d,
    0xb4, 0xd0, 0x77, 0x74, 0x97, 0x20, 0xc9, 0xb8, 0x36, 0xa3, 0xcd, 0x01, 0xcc, 0xad, 0xb4, 0x61,
    0xed, 0xbd, 0xac, 0xce, 0x99, 0x1b, 0x11, 0x3b, 0xbf, 0xc6, 0x3a, 0x24, 0xd8, 0x36, 0xba, 0xc9,
    0x68, 0x71, 0x2b, 0x68, 0x23, 0x92, 0x5a, 0xc5, 0x44, 0xee, 0xe7, 0xae, 0xe2, 0x3a, 0x3f, 0xdf,
    0x04, 0xdb, 0xaf, 0x93, 0x40, 0xe2, 0x5d, 0x14, 0x69, 0x28, 0xfc, 0x4a, 0x88, 0xcf, 0xb2, 0x62,
    0x6e, 0xf3, 0x5f, 0x14, 0xd5, 0x1e, 0x99, 0x39, 0xae, 0x41, 0x6a, 0xed, 0x49, 0x1c, 0x71, 0xfd,
    0xd5, 0x58, 0x2f, 0x1d, 0x39, 0xa1, 0x89, 0x05, 0x9a, 0xbf, 0xf7, 0xcf, 0x91, 0x2a, 0x70, 0xb2,
    0x7f, 0xca, 0xf1, 0x77, 0x38, 0xd9, 0xcf, 0x82, 0x7f, 0x40, 0x6b, 0x41, 0x3e, 0x99, 0xef, 0x86,
    0x6c, 0x79, 0xe1, 0x3d, 0xb0, 0xb9, 0x96, 0x01, 0xd8, 0xc3, 0x45, 0x89, 0xbe, 0xb6, 0x3e, 0x77,
    0xcd, 0x98, 0xa7, 0xa2, 0x77, 0xd5, 0xc0, 0x11, 0x0c, 0x23, 0xbc, 0xd0, 0xe1, 0xdb, 0xbc, 0x4a,
    0x73, 0x7e, 0xe9, 0xf0, 0x61, 0x3c, 0x03, 0x33, 0xca, 0x7e, 0x46, 0xdb, 0xdf, 0xaf, 0xdc, 0xef,
    0xe3, 0x2e, 0x4c, 0x71, 0xbb, 0xc0, 0x65, 0xfc, 0x93, 0x81, 0x32, 0x1c, 0xe2, 0x68, 0x19, 0x95,
    0x4a, 0xb9, 0x0e, 0x9e, 0x1f, 0xa3, 0x9f, 0xd5, 0x13, 0xcb, 0x11, 0x2d, 0x05, 0xf2, 0xc3, 0x96,
    0x45, 0xf5, 0xfc, 0x86, 0x4e, 0x90, 0x60, 0xda, 0xbb, 0xa8, 0xe8, 0xe4, 0x4a, 0x09, 0x0c, 0x28,
    0x85, 0x8a, 0xd9, 0x19, 0x3e, 0xab, 0xe5, 0xff, 0x41, 0x64, 0x6b, 0xd7, 0x52, 0x3a, 0x43, 0xae,
    0xf3, 0xa0, 0x57, 0x9f, 0x21, 0x21, 0x80, 0x54, 0x6a, 0x90, 0x06, 0x38, 0x14, 0x93, 0x98, 0xa5,
    0x57, 0x01, 0xb7, 0x67, 0x4d, 0x53, 0xff, 0x77, 0xf0, 0x32, 0xf2, 0xbe, 0x97, 0x82, 0x89, 0xc3,
    0x0b, 0x4b, 0xb9, 0xe9, 0xf0, 0xf2, 0x3f, 0x36, 0xc0, 0xa8, 0x8c, 0x19, 0xc9, 0x8d, 0x39, 0x4c,
    0xde, 0xb2, 0x61, 0xcd, 0x28, 0xcb, 0xb9, 0xff, 0x0f, 0x07, 0x23, 0x04, 0x89, 0xd9, 0x2a, 0xe3,
    0xa4, 0x34, 0xf9, 0x1e, 0x9f, 0x0e, 0x0a, 0x56, 0xa5, 0x97, 0xa9, 0x84, 0x7c, 0x6c, 0x6b, 0xf7,
    0xca, 0x4f, 0xf4, 0x49, 0x05, 0x2d, 0x6b, 0x94, 0x1c, 0xc2, 0x50, 0xb3, 0x6d, 0xcf, 0x03, 0xed,
    0x5a, 0x02, 0xf4, 0xb8, 0xfd, 0xd8, 0xf0, 0xd2, 0xea, 0x24, 0x7e, 0xb1, 0xb7, 0x95, 0xbf, 0x8b,
    0x1c, 0xfa, 0xd9, 0x6b, 0x6b, 0xe9, 0x0d, 0xf6, 0x9b, 0xad, 0x7a, 0xd0, 0xe9, 0x9e, 0x88, 0x7a,
    0x8c, 0x90, 0xc2, 0x6a, 0x79, 0xcd, 0x07, 0xf4, 0x53, 0x0d, 0x25, 0x12, 0x03, 0xd1, 0xfa, 0x10,
    0xaa, 0xe9, 0xac, 0x5e, 0x44, 0x8c, 0xa7, 0xed, 0xbf, 0x8b, 0x8e, 0x57, 0x68, 0xe7, 0x1d, 0xf7,
    0xfa, 0x4d, 0x6a, 0x58, 0x36, 0x9f, 0xb1, 0x3a, 0x8c, 0xe3, 0xbe, 0x8d, 0x97, 0xd8, 0xf8, 0xd4,
    0xb9, 0x35, 0x71, 0xef, 0x91, 0x75, 0xba, 0xff, 0x0a, 0xc8, 0x16, 0x76, 0x90, 0xd4, 0x74, 0x4f,
    0x74, 0x9d, 0xd4, 0xa8, 0x5f, 0x61, 0x04, 0xc2, 0xbf, 0x43, 0xeb, 0xe3, 0x4a, 0x26, 0xd2, 0x16,
    0x07, 0x05, 0x6a, 0x29, 0x92, 0x18, 0x72, 0xa5, 0xd2, 0xe6, 0xaf, 0x66, 0xdc, 0xb5, 0xf2, 0x06,
    0xe0, 0x63, 0x7a, 0xed, 0x9c, 0x7c, 0x25, 0x6e, 0x7d, 0xe7, 0x02, 0xd7, 0x56, 0x6a, 0x69, 0x75,
    0xa7, 0x41, 0x3d, 0x0b, 0x81, 0x21, 0x11, 0xb2, 0xfa, 0xb5, 0x2f, 0xde, 0xb9, 0x39, 0xb0, 0xfd,
    0xd4, 0x84, 0x1f, 0xd2, 0xa3, 0x85, 0x39, 0xc5, 0xc2, 0x17, 0x1d, 0x12, 0xde, 0xc2, 0x45, 0x53,
    0x67, 0x9e, 0x03, 0x38, 0xfd, 0x5e, 0xfb, 0x82, 0x03, 0xa7, 0xb0, 0x1f, 0x98, 0x07, 0x66, 0x13,
    0xbb, 0xb6, 0xda, 0x92, 0xb5, 0x17, 0x92, 0x08, 0xf5, 0x2f, 0x39, 0x91, 0x84, 0xd5, 0x13, 0xb8,
    0x26, 0xb1, 0x06, 0xbf, 0x36, 0x86, 0xa9, 0x1d, 0xba, 0x00, 0xb2, 0x53, 0x90, 0x9a, 0xd0, 0x04,
    0xe4, 0x97, 0x4d, 0xb7, 0x8d, 0x9c, 0xd3, 0x1b, 0xd9, 0xdb, 0x5c, 0x84, 0xa8, 0x4e, 0xfa, 0x95,
    0xf8, 0xa9, 0xc1, 0x57, 0x8f, 0xc9, 0x73, 0x93, 0x8e, 0xc0, 0x0e, 0x22, 0xcf, 0xb5, 0xc2, 0xa1,
    0x20, 0x8d, 0x78, 0x32, 0x87, 0x32, 0x92, 0x12, 0xf0, 0x5d, 0x52, 0xb7, 0xef, 0x9c, 0x0b, 0x3f,
    0xd7, 0x7a, 0x05, 0xea, 0xae, 0xb5, 0x5c, 0x4b, 0x23, 0xb1, 0x5e, 0x91, 0xe6, 0x02, 0xcd, 0x51,
    0x11, 0x7f, 0xae, 0x87, 0xb5, 0x37, 0x36, 0x1c, 0x83, 0xaf, 0x81, 0xed, 0xef, 0xd6, 0x0f, 0x0b,
    0x8a, 0xa8, 0x7d, 0x8f, 0xc0, 0x62, 0x6a, 0xbb, 0x38, 0xe6, 0x39, 0xf4, 0xb1, 0x11, 0x6d, 0xed,
    0xfc, 0x02, 0x19, 0xba, 0x94, 0x32, 0x1e, 0x00,
};

static const MessageEncodingTestVector sMessageEncodingTest0561 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x60707E95,
        kWeaveHeaderFlag_SourceNodeId,
        0x27AB,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0561_EncryptionKey,
    sMessageEncodingTest0561_Payload,
    sizeof(sMessageEncodingTest0561_Payload),
    sMessageEncodingTest0561_ExpectedEncoding,
    sizeof(sMessageEncodingTest0561_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0562_EncryptionKey =
{
    {
        0x5a, 0x57, 0x94, 0x92, 0xaa, 0x36, 0xd9, 0x28, 0xd4, 0xd9, 0xc4, 0x25, 0xb3, 0xc4, 0xdd, 0x7d,
    }
};
static const uint8_t sMessageEncodingTest0562_Payload[] =
{
    0xca, 0xac, 0xfc, 0x4e, 0xfd, 0xc4, 0xc2, 0xf2, 0xa9, 0x98, 0x3a, 0xa9, 0x2e, 0x78, 0x7e, 0x0e,
    0x2c, 0x70, 0xb9, 0x4e, 0x46, 0xb8, 0x78, 0xd3, 0x5e, 0xca, 0xbe, 0x97, 0xd3, 0x5c, 0x17, 0x66,
    0xf8, 0x64, 0xda, 0xfc, 0x8d, 0x28, 0x19, 0x4e, 0xe3, 0x08, 0xe7, 0x43, 0xe6, 0x9a, 0xe7, 0x53,
    0x26, 0xec, 0x8e, 0x56, 0x55, 0xb8, 0x2d, 0xdc, 0xba, 0x1e, 0x07, 0xe0, 0x84, 0x76, 0xbc, 0xc8,
    0xa2, 0x06, 0xf8, 0x10, 0x07, 0x7b, 0x2a, 0xef, 0x07, 0x55, 0xfd, 0xbd, 0x70, 0x5f, 0x89, 0xa4,
    0x63, 0x00, 0xd1, 0x55, 0xcc, 0x73, 0xf0, 0xa2, 0x84, 0x11, 0xe6, 0x5f, 0x3c, 0x60, 0xe7, 0x80,
    0xb2, 0x2e, 0x6d, 0xbd, 0x6c, 0xef, 0x6f, 0x1d, 0xcc, 0xce, 0x6f, 0xec, 0xf6, 0x1a, 0x07, 0xdb,
    0x8a, 0xb8, 0xa2, 0x73, 0x7c, 0x44, 0xdf, 0xe4, 0x9d, 0x1c, 0xdc, 0x6f, 0xd7, 0x1f, 0x6e, 0x17,
    0x73, 0xb7, 0xbd, 0xb7, 0xab, 0x40, 0x1c, 0x5f, 0xda, 0x46, 0x80, 0xcd, 0x18, 0xa8, 0x0e, 0xeb,
    0xd9, 0x8d, 0x50, 0x1b, 0x2a, 0x8f, 0x92, 0x9e, 0x69, 0x71, 0x68, 0x00, 0x51, 0xb7, 0x01, 0x7d,
    0xdf, 0x17, 0xf2, 0x01, 0x02, 0xc2, 0x23, 0x7b, 0x96, 0xd5, 0x9c, 0x76, 0x37, 0xb9, 0xbe, 0x35,
    0x1f, 0x61, 0x89, 0x3c, 0x49, 0x19, 0x4a, 0x03, 0x7c, 0xcb, 0xf1, 0x6f, 0xe6, 0x34, 0xe9, 0x98,
    0x66, 0x9a, 0x9b, 0x6f, 0x8c, 0x9f, 0x2f, 0xd5, 0x9d, 0x40, 0xdc, 0x96, 0x4c, 0x1e, 0x1b, 0x48,
    0x1f, 0x7f, 0xe1, 0xb4, 0x0d, 0x52, 0x6e, 0x13, 0x4d, 0x4e, 0xdb, 0x01, 0x53, 0xe8, 0x0a, 0x99,
    0x13, 0x4c, 0xa5, 0xde, 0x40, 0xf8, 0xef, 0xaa, 0xaf, 0x39, 0x16, 0x7d, 0x20, 0x60, 0xb7, 0x24,
    0x6d, 0x21, 0x90, 0x89, 0xdd, 0xe3, 0xb4, 0x4a, 0x28, 0x08, 0x59, 0x8d, 0x70, 0xd7, 0xc7, 0xa9,
    0xda, 0x6d, 0x01, 0xc4, 0x06, 0x55, 0x70, 0x01, 0x06, 0x7a, 0xce, 0xc8, 0xda, 0x4b, 0x10, 0x93,
    0x5a, 0xf3, 0x62, 0xdf, 0xc9, 0x63, 0x75, 0x88, 0x4e, 0x1d, 0x1b, 0xc5, 0xd1, 0x8c, 0x41, 0x47,
    0x33, 0x3a, 0x63, 0x6f, 0xdd, 0xad, 0x4d, 0xa9, 0x99, 0xd0, 0x02, 0xf3, 0x3e, 0x72, 0x5b, 0x0b,
    0x0e, 0xb1, 0x0f, 0x3b, 0xaf, 0x94, 0x1c, 0x74, 0xf9, 0xa4, 0x98, 0x37, 0x41, 0x6a, 0x15, 0xbc,
    0x89, 0x8d, 0x2b, 0xe3, 0xd8, 0x43, 0xd2, 0x67, 0xf9, 0xc2, 0xe1, 0x5a, 0x91, 0x10, 0x4d, 0x83,
    0xb7, 0x72, 0xd5, 0xa5, 0x4d, 0xf7, 0x5f, 0xf6, 0xa2, 0xd6, 0x4e, 0xb0, 0xe3, 0xba, 0x2c, 0x84,
    0xa6, 0xe4, 0x97, 0xd3, 0x01, 0x70, 0x30, 0x88, 0xcf, 0x0d, 0xdd, 0x54, 0x03, 0x04, 0x89, 0xba,
    0x40, 0x96, 0xc0, 0x9b, 0x2f, 0x32, 0x8b, 0x83, 0xb5, 0x71, 0x30, 0xc3, 0xe5, 0x71, 0xfa, 0x57,
    0x0d, 0x8d, 0xe4, 0x1f, 0xc2, 0x65, 0xb9, 0x9a, 0x84, 0x53, 0x3a, 0xa0, 0x22, 0xfa, 0x0e, 0x58,
    0xf8, 0xb0, 0xca, 0xe3, 0x7d, 0xfb, 0xa3, 0x64, 0x26, 0x10, 0x5c, 0x5a, 0x38, 0xed, 0xf2, 0x9d,
    0xde, 0xf6, 0x2a, 0x20, 0x97, 0x34, 0x30, 0x1a, 0xb3, 0x4d, 0xa7, 0x63, 0xd2, 0x25, 0xa7, 0x2c,
    0x20, 0xc6, 0xdc, 0xa3, 0x0b, 0x4e, 0x26, 0x01, 0x56, 0x75, 0x26, 0x1c, 0x5a, 0x19, 0xa1, 0xfc,
    0x65, 0xe1, 0x79, 0x6f, 0xef, 0x17, 0x6a, 0xd4, 0x2f, 0xa3, 0xf9, 0x72, 0x06, 0xb0, 0xa4, 0x43,
    0x18, 0x1a, 0xb4, 0xd9, 0xcf, 0x74, 0xd7, 0xeb, 0x6f, 0xe9, 0x27, 0x27, 0xe5, 0x01, 0x85, 0xfe,
    0xdc, 0x81, 0xae, 0xd8, 0x20, 0x11, 0x01, 0xcc, 0x04, 0x88, 0xdb, 0x47, 0x63, 0x67, 0xcb, 0x57,
    0x59, 0x7f, 0x46, 0x8c, 0x4e, 0xf4, 0x8e, 0xd3, 0x66, 0x3a, 0x1c, 0x1c, 0x3f, 0x27, 0xc6, 0xe8,
    0x18, 0x8c, 0xb7, 0x4c, 0x46, 0x33, 0x86, 0x6d, 0x15, 0x4d, 0xca, 0xac, 0xc2, 0x51, 0x00, 0x34,
    0xf2, 0x36, 0xde, 0x89, 0xbf, 0xec, 0x29, 0xbe, 0x5a, 0x78, 0x0a, 0xf1, 0xca, 0xc9, 0x8f, 0xb7,
    0xb9, 0xee, 0x57, 0x97, 0x65, 0xab, 0x26, 0x4f, 0x7a, 0x80, 0x3d, 0xc0, 0xa2, 0x0b, 0x49, 0x88,
    0x4a, 0xc9, 0xb0, 0x72, 0x36, 0x96, 0xbb, 0x8a, 0x5c, 0x66, 0xbe, 0xd1, 0x59, 0x06, 0x43, 0x48,
    0x06, 0xad, 0x6c, 0x7c, 0x08, 0xac, 0x71, 0x70, 0x6f, 0xdb, 0x3b, 0x63, 0x80, 0xa7, 0x5e, 0xac,
    0xe1, 0x27, 0x93, 0x18, 0x79, 0x3b, 0x1e, 0xb2, 0x37, 0x6b, 0xea, 0xe2, 0x75, 0x75, 0xc4, 0xb4,
    0x03, 0x9b, 0x0b, 0x61, 0x7e, 0x90, 0x45, 0xe8, 0x43, 0xad, 0xd4, 0xc1, 0x38, 0x3f, 0x4f, 0x75,
    0xa3, 0x00, 0xa6, 0x69, 0x33, 0x7d, 0x3b, 0x10, 0x58, 0x50, 0xf5, 0x22, 0x8b, 0x0f, 0x1e, 0x80,
    0x2a, 0x97, 0xf3, 0xf3, 0x59, 0x9f, 0xc2, 0xb6, 0xe9, 0x5d, 0x1e, 0xcd, 0x32, 0x99, 0x06, 0x98,
    0x0b, 0xfd, 0x8f, 0x23, 0xd5, 0x71, 0xba, 0x5c, 0x55, 0x63, 0x41, 0xf0, 0x19, 0x99, 0x26, 0x5f,
    0x7a, 0x93, 0x7b, 0xd7, 0x7e, 0xe1, 0xfe, 0x0e, 0xf2, 0x7e, 0x5f, 0x4f, 0xeb, 0x79, 0xa1, 0x5a,
    0xee, 0xe4, 0xac, 0x64, 0x21, 0x79, 0xbf, 0xb6, 0x8b, 0x3c, 0x75, 0xb5, 0x5b, 0x10, 0x77, 0xab,
    0x50, 0xcf, 0x09, 0xeb, 0xe1, 0x71, 0x23, 0x8a, 0x1d, 0xf1, 0x17, 0x4f, 0x76, 0xf7, 0x25, 0x23,
    0x07, 0xda, 0x09, 0x2b, 0x55, 0xad, 0xb8, 0xa7, 0x5c, 0x7c, 0x19, 0xf1, 0x44, 0x0c, 0xcb, 0x24,
    0xa2, 0xfe, 0xa9, 0x30, 0x97, 0xf3, 0xe5, 0x23, 0x9e, 0xc7, 0xa4, 0x5f, 0x4c, 0x8b, 0x73, 0x6c,
    0x55, 0x36, 0x4a, 0x13, 0x04, 0x99, 0xa4, 0xc3, 0x7e, 0x28, 0x55, 0xee, 0x15, 0xe1, 0x49, 0xe3,
    0x01, 0x41, 0xc6, 0xba, 0x34, 0x6c, 0x20, 0xa1, 0x50, 0x3f, 0xc4, 0x18, 0x76, 0x8a, 0xe1, 0xbd,
    0x36, 0xd2, 0x2a, 0x40, 0x44, 0x9f, 0x17, 0x44, 0x7d, 0xb2, 0x56, 0x87, 0xbe, 0xfc, 0xc7, 0x1d,
    0xf5, 0x68, 0x3f, 0x56, 0x36, 0x05, 0xf8, 0x89, 0x0f, 0x2b, 0x60, 0x16, 0x02, 0x30, 0x4d, 0x59,
    0xfa, 0xb3, 0x67, 0xac, 0xe0, 0xa6, 0x61, 0x2e, 0x2c, 0x1c, 0x54, 0x30, 0x2a, 0x30, 0x22, 0x14,
    0xec, 0x07, 0x4c, 0x85, 0xf3, 0x86, 0x66, 0x82, 0x5c, 0x27, 0x16, 0x87, 0x32, 0xc5, 0x3d, 0xd9,
    0x9b, 0xa6, 0x28, 0xe4, 0x40, 0x4c, 0xb9, 0x14, 0x78, 0x59, 0xfd, 0x83, 0xe5, 0xa1, 0x26, 0xa0,
    0xdf, 0xc7, 0x2f, 0xdb, 0x93, 0x44, 0xf1, 0xb3, 0x2e, 0x95, 0x30, 0x94, 0x31, 0xc9, 0x90, 0xfd,
    0x1c, 0x12, 0x85, 0x3f, 0x71, 0x76, 0xb8, 0xfd, 0xa3, 0x87, 0xff, 0x9e, 0xfc, 0xf4, 0x72, 0x1d,
    0x86, 0x84, 0x31, 0x36, 0x29, 0xdc, 0x09, 0x7b, 0x0c, 0x96, 0xf4, 0xfb, 0x77, 0x1e, 0x18, 0xb1,
    0x7c, 0x2c, 0x9c, 0x3f, 0x34, 0xf0, 0x97, 0xc3, 0x2f, 0xe1, 0x8f, 0xcc, 0x34, 0xc2, 0xd5, 0x31,
    0x09, 0x79, 0x6c, 0xff, 0x2a, 0xb6, 0x56, 0xc3, 0x96, 0xbe, 0xcd, 0x28, 0x32, 0x39, 0x7d, 0x4e,
    0x5b, 0x7d, 0xc7, 0x31, 0x8d, 0xc1, 0x85, 0xa4, 0x46, 0x16, 0xf6, 0x3f, 0xee, 0x85, 0x38, 0x9c,
    0xa9, 0xce, 0x91, 0x51, 0x84, 0xab, 0xec, 0x00, 0xf3, 0xea, 0x84, 0x7c, 0x27, 0x01, 0xa4, 0x10,
    0xd1, 0xa6, 0x75, 0xd5, 0xa5, 0x88, 0x98, 0x92, 0x7d, 0x2f, 0x18, 0xc6, 0xb5, 0x73, 0xb8, 0xbd,
    0xe3, 0x1a, 0x99, 0xae, 0x1e, 0x9a, 0x08, 0x2f, 0x0c, 0x8a, 0x2f, 0xbe, 0x47, 0xd2, 0xa9, 0x38,
    0x5e, 0x90, 0x9d, 0x94, 0x57, 0x5f, 0xd9, 0x92, 0xbd, 0x0f, 0x4c, 0xcb, 0x9f, 0x65, 0xb0, 0x6f,
};

static const uint8_t sMessageEncodingTest0562_ExpectedEncoding[] =
{
    0x30, 0x22, 0xb7, 0x7c, 0xb4, 0x12, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0xb4, 0x18, 0x0e, 0x21,
    0x10, 0x51, 0xaa, 0xa9, 0x8f, 0x2d, 0x9f, 0x08, 0x0c, 0x2c, 0x50, 0x19, 0xcb, 0xa0, 0x33, 0xa9,
    0xab, 0xb5, 0x6c, 0xf6, 0xb3, 0x64, 0x66, 0x86, 0x1e, 0xf5, 0x25, 0xfd, 0x61, 0xba, 0xad, 0xab,
    0xcb, 0x99, 0xd4, 0x00, 0xd8, 0x07, 0xdf, 0x21, 0xb8, 0xcd, 0xda, 0x9c, 0x64, 0x9d, 0x54, 0x4f,
    0x39, 0x5d, 0x2d, 0x4b, 0xde, 0x0a, 0xcf, 0x33, 0x18, 0x8f, 0xb6, 0x2c, 0x85, 0x3b, 0xba, 0x7d,
    0xd9, 0xf2, 0x93, 0xbe, 0x66, 0x1a, 0xe7, 0xd8, 0x7e, 0x31, 0x2a, 0x7f, 0x8a, 0x8b, 0xc9, 0xf7,
    0x3f, 0x08, 0x8a, 0x3c, 0xb6, 0x76, 0xa1, 0xaa, 0xbb, 0xbf, 0xa7, 0xdb, 0x55, 0x41, 0x66, 0x4d,
    0x79, 0xb7, 0x8f, 0x8f, 0xe8, 0xf2, 0x85, 0x20, 0x00, 0x1a, 0x61, 0x5c, 0x35, 0xf3, 0xa0, 0xfb,
    0xc9, 0xf9, 0x4f, 0x07, 0x65, 0xd7, 0x8a, 0x58, 0xd0, 0x17, 0xdf, 0xa1, 0xfd, 0x61, 0x82, 0xca,
    0xd1, 0x86, 0xbf, 0xbe, 0xbe, 0x90, 0xbf, 0xca, 0x27, 0x4e, 0x0a, 0xf0, 0xa7, 0x98, 0x98, 0xa7,
    0xbf, 0x9b, 0xae, 0x47, 0x54, 0x0f, 0x24, 0x9c, 0x53, 0x25, 0x63, 0x39, 0x3c, 0x98, 0x40, 0xf5,
    0x01, 0x38, 0xe3, 0xb6, 0x5a, 0x15, 0x7e, 0x61, 0x6d, 0xcb, 0x94, 0x8e, 0xd8, 0x50, 0x9c, 0x42,
    0x9b, 0x87, 0xeb, 0x1a, 0x7b, 0xd1, 0xae, 0x4d, 0xd0, 0xe2, 0x91, 0xde, 0x24, 0xc0, 0x4c, 0x40,
    0x56, 0xfa, 0x0b, 0xd3, 0x66, 0xd2, 0xd9, 0x5e, 0x22, 0xde, 0x46, 0x6d, 0xcb, 0x29, 0x0e, 0xcf,
    0xed, 0x88, 0x73, 0x04, 0x55, 0x2b, 0x40, 0x4d, 0xba, 0x47, 0x46, 0xfd, 0x75, 0x85, 0xc7, 0x80,
    0x73, 0x56, 0x12, 0x7c, 0xad, 0xef, 0xe3, 0x6d, 0x18, 0xaa, 0x5c, 0x9f, 0x70, 0x58, 0x0e, 0x26,
    0x4c, 0x89, 0x00, 0x16, 0x81, 0x7f, 0xf3, 0x93, 0x4b, 0x3f, 0xc5, 0x1a, 0x8a, 0xcc, 0xcd, 0x52,
    0xe4, 0x0a, 0x7d, 0xca, 0x6b, 0xc6, 0x27, 0xf0, 0x34, 0xc5, 0x41, 0x3e, 0x77, 0x02, 0x63, 0x0e,
    0x29, 0xa5, 0x2f, 0xd7, 0x10, 0xa9, 0xb2, 0x57, 0x2d, 0x42, 0x3b, 0x30, 0x89, 0x1d, 0x11, 0x81,
    0xb7, 0xf3, 0xc0, 0x72, 0x7c, 0x62, 0x8c, 0x97, 0x91, 0x59, 0xbe, 0x8a, 0x00, 0x60, 0x90, 0xdc,
    0x66, 0xd9, 0x85, 0xe1, 0x81, 0x3c, 0x9f, 0xbd, 0xa2, 0xad, 0x5d, 0x6e, 0x24, 0x30, 0xe9, 0xd8,
    0x9e, 0x5f, 0x60, 0xf8, 0x0a, 0x03, 0xb2, 0xc7, 0x1d, 0xba, 0x51, 0x5c, 0xd1, 0xe7, 0x6c, 0x7d,
    0x39, 0x86, 0xa8, 0x4d, 0x57, 0x8f, 0x2f, 0xa6, 0x0e, 0x3a, 0x2b, 0x3b, 0x25, 0x0c, 0x70, 0xf9,
    0xdf, 0x2e, 0xb0, 0x32, 0x81, 0xf4, 0x41, 0x3f, 0xc3, 0x20, 0x61, 0xf4, 0x92, 0x4f, 0xf2, 0xd7,
    0xd4, 0x99, 0xc8, 0x02, 0xfc, 0x5e, 0xb8, 0x78, 0xb4, 0x58, 0xb5, 0x86, 0x6c, 0x69, 0xdf, 0x3b,
    0x91, 0xdd, 0xe5, 0x0f, 0x09, 0xa6, 0x13, 0xb5, 0xb4, 0x86, 0x6f, 0xa7, 0x5a, 0x14, 0xcf, 0xed,
    0x52, 0x3f, 0xc3, 0x08, 0x3e, 0x4d, 0x2f, 0x46, 0xcb, 0x9b, 0x0d, 0xf0, 0xfc, 0x7a, 0x80, 0xdf,
    0xeb, 0x58, 0xc0, 0xe0, 0xdc, 0xcf, 0x64, 0x90, 0x94, 0x29, 0xcc, 0x63, 0xa4, 0x6d, 0x35, 0x09,
    0x5f, 0xd7, 0xd1, 0xf3, 0x04, 0x55, 0xc9, 0x07, 0x7e, 0x17, 0xae, 0x15, 0x33, 0x7d, 0x7f, 0xd8,
    0xbb, 0x86, 0x4c, 0x6d, 0xc8, 0x5c, 0x43, 0x3c, 0x42, 0x34, 0x7e, 0x72, 0x76, 0x85, 0x58, 0x10,
    0xc2, 0xb8, 0x58, 0xe5, 0x81, 0x61, 0x49, 0xc3, 0xb5, 0xbb, 0x5a, 0xd2, 0xb3, 0x31, 0x49, 0x38,
    0x99, 0xb0, 0xe6, 0xf9, 0xe6, 0xe8, 0x7d, 0x25, 0xef, 0xb0, 0xe4, 0xc1, 0x0a, 0xbc, 0xeb, 0xe5,
    0xb9, 0x06, 0xc3, 0xf2, 0xac, 0xff, 0x7e, 0x1e, 0xe4, 0xc3, 0x39, 0xf5, 0x24, 0x5e, 0x57, 0x65,
    0xe4, 0x9e, 0x92, 0x68, 0xdc, 0xd9, 0x45, 0x5c, 0x7f, 0xe1, 0x62, 0xd5, 0x28, 0x5a, 0x1b, 0x7e,
    0xcb, 0x1d, 0xcc, 0xa3, 0x76, 0x17, 0x83, 0xde, 0xd7, 0x83, 0x1e, 0xfe, 0x14, 0x2b, 0x24, 0x0d,
    0x64, 0xdf, 0x64, 0x99, 0xc5, 0xfc, 0x2f, 0xd8, 0x61, 0xf2, 0x40, 0x72, 0x5a, 0x18, 0x92, 0x86,
    0x50, 0x84, 0xec, 0x04, 0xc6, 0x69, 0x7c, 0x18, 0x14, 0x29, 0x75, 0x8c, 0x52, 0x3e, 0x74, 0x7c,
    0x1b, 0x62, 0x84, 0x04, 0x05, 0x57, 0x76, 0x4e, 0x05, 0x3b, 0xd7, 0xeb, 0xd5, 0x09, 0x91, 0xd4,
    0xa2, 0xd6, 0x57, 0x3d, 0xbd, 0x80, 0x6a, 0x50, 0x7b, 0x3d, 0x50, 0xe1, 0x31, 0x64, 0x4a, 0x09,
    0x4e, 0x22, 0x19, 0x0d, 0x0d, 0xff, 0x33, 0x9e, 0x61, 0xc8, 0xea, 0xf3, 0x13, 0x49, 0x44, 0x46,
    0x96, 0xc2, 0xfc, 0x5c, 0x91, 0x39, 0x4b, 0xe4, 0x30, 0x6a, 0x39, 0x8b, 0xbc, 0x92, 0xdd, 0x51,
    0x7c, 0x62, 0xce, 0xf4, 0xca, 0x8f, 0x9c, 0x54, 0xb5, 0xad, 0x43, 0xfe, 0x8f, 0xde, 0x68, 0xda,
    0x82, 0x82, 0x4d, 0x5b, 0x42, 0xcb, 0x8b, 0x99, 0x40, 0x35, 0x1f, 0x8f, 0x29, 0xc8, 0x9b, 0x5b,
    0xcb, 0x1e, 0x29, 0xa3, 0x5d, 0xcf, 0xb3, 0x3e, 0xcc, 0x53, 0xef, 0x43, 0x9e, 0xc3, 0x92, 0x9a,
    0xb7, 0xf7, 0x28, 0x30, 0x00, 0x9f, 0xb4, 0x28, 0xf6, 0x98, 0x83, 0x7b, 0x03, 0xa0, 0xb5, 0xc2,
    0x3e, 0x19, 0xe8, 0xcb, 0x0f, 0xb9, 0x6d, 0x80, 0xdf, 0xca, 0xb8, 0x68, 0x54, 0x7e, 0x1e, 0xbd,
    0x6d, 0xda, 0x38, 0xcc, 0x7e, 0x91, 0x88, 0x81, 0x79, 0x12, 0xe1, 0x23, 0x3b, 0x5a, 0x12, 0x6b,
    0xa7, 0xa6, 0xa4, 0x0b, 0x0e, 0x25, 0x95, 0x8a, 0x4b, 0x64, 0xf6, 0xf4, 0x9f, 0x05, 0x9d, 0xc1,
    0x53, 0xd4, 0x7b, 0x8e, 0x4c, 0x91, 0x6f, 0xe6, 0x7c, 0x3b, 0xeb, 0x47, 0xec, 0x58, 0x45, 0x80,
    0x65, 0xa9, 0xf4, 0x8f, 0xda, 0xc7, 0x79, 0x6a, 0xa1, 0x7f, 0x8c, 0xc7, 0xed, 0xa2, 0xdf, 0x93,
    0xf4, 0x1b, 0x56, 0xf5, 0xbe, 0xc0, 0x3c, 0xff, 0x98, 0x31, 0xb8, 0x0d, 0x24, 0x37, 0xa1, 0x1f,
    0x47, 0x97, 0x75, 0x90, 0x8c, 0x92, 0xfb, 0xd8, 0xf7, 0x16, 0x21, 0x96, 0xf4, 0xd4, 0x24, 0xfa,
    0x78, 0x81, 0x07, 0xce, 0xb4, 0xb8, 0x89, 0x73, 0x68, 0x33, 0x41, 0xf2, 0xa0, 0x7f, 0xf7, 0xd6,
    0xa8, 0x46, 0x3d, 0x6d, 0x1e, 0x93, 0xb6, 0x53, 0x2c, 0xb9, 0xf7, 0xdf, 0xe0, 0x2e, 0x08, 0xae,
    0x53, 0x19, 0xb3, 0x45, 0x2a, 0x6f, 0x4e, 0x83, 0x67, 0xa9, 0xec, 0x96, 0x5c, 0x29, 0xc1, 0x14,
    0xba, 0x4b, 0xdf, 0xb3, 0xd5, 0xde, 0x3f, 0x5b, 0x3c, 0x6e, 0xe8, 0xf2, 0x5a, 0xd3, 0x92, 0xab,
    0xa3, 0xad, 0xdd, 0x8f, 0x90, 0xbf, 0x53, 0xf1, 0xe0, 0x0a, 0x7a, 0xa5, 0x30, 0x46, 0x44, 0x72,
    0x99, 0xb8, 0x4d, 0x73, 0x46, 0x02, 0xe6, 0xe7, 0xb4, 0x7c, 0xb9, 0xeb, 0x8d, 0x2a, 0xb1, 0x7e,
    0x79, 0x58, 0x1f, 0xec, 0x6b, 0x2b, 0xe4, 0x52, 0x3b, 0x2c, 0x4b, 0xcb, 0x2f, 0x13, 0xe6, 0x52,
    0x7e, 0x49, 0x52, 0x42, 0xbf, 0xe5, 0x74, 0x69, 0x1d, 0x13, 0xf5, 0x5e, 0xb8, 0xea, 0xb7, 0x60,
    0xfb, 0x77, 0x21, 0x5d, 0xad, 0x5c, 0x4b, 0x0b, 0xf4, 0x42, 0xdb, 0x07, 0xd4, 0xb6, 0x39, 0x94,
    0xde, 0x77, 0x2b, 0x81, 0xfa, 0xb3, 0xf6, 0xa4, 0x1d, 0xe5, 0xb6, 0x6b, 0xce, 0x8d, 0xc4, 0xe1,
    0xc3, 0x09, 0x57, 0xcb, 0x5b, 0x20, 0x6e, 0xa4, 0x4c, 0x62, 0x0d, 0x05, 0xcf, 0x0d, 0x62, 0x91,
    0x52, 0xe5, 0x7a, 0x4f, 0x84, 0x52, 0xb8, 0x4e, 0x68, 0x72, 0xbe, 0xe5, 0xea, 0xd9, 0xff, 0x2b,
    0x7b, 0x52, 0x38, 0xb7, 0x98, 0x88, 0x88, 0xca, 0x0d, 0x14, 0xbc, 0xa5, 0x6a, 0x09, 0xbf, 0x20,
    0x3e, 0xb0, 0x08, 0x2b, 0x10, 0xef, 0x34, 0x47, 0x41, 0xf1, 0x7e, 0xc8, 0x49, 0xb7, 0xbd, 0x41,
};

static const MessageEncodingTestVector sMessageEncodingTest0562 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x12B47CB7,
        kWeaveHeaderFlag_SourceNodeId,
        0x210E,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0562_EncryptionKey,
    sMessageEncodingTest0562_Payload,
    sizeof(sMessageEncodingTest0562_Payload),
    sMessageEncodingTest0562_ExpectedEncoding,
    sizeof(sMessageEncodingTest0562_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0563_Payload[] =
{
    0xcf, 0x18, 0x47, 0x81, 0x76, 0x79, 0x58, 0x30, 0x22, 0x39, 0xa4, 0x2a, 0xbe, 0xf4, 0xdc, 0xb6,
    0xf2, 0xb8, 0x61, 0x90, 0x46, 0x1c, 0x11, 0x92, 0x85, 0x58, 0x0f, 0x79, 0x0e, 0xc1, 0x1e, 0xc9,
    0x6d, 0xf2, 0x45, 0x0b, 0x90, 0x5b, 0xc7, 0x58, 0xe6, 0x8b, 0x7e, 0x5e, 0x26, 0xeb, 0x63, 0x09,
    0xad, 0x6c, 0x77, 0x35, 0xb9, 0xa5, 0x7c, 0x70, 0x7b, 0x34, 0x63, 0x31, 0x69, 0x82, 0x78, 0xfe,
    0x73, 0xea, 0xd7, 0xa9, 0xda, 0x14, 0xa9, 0xb1, 0xf3, 0xa3, 0x1e, 0x1f, 0x69, 0x6a, 0x63, 0xd8,
    0x83, 0x21, 0x08, 0x9b, 0x7f, 0x34, 0xf7, 0x08, 0x36, 0x04, 0x45, 0xc8, 0xbf, 0xab, 0xef, 0xe5,
    0x4e, 0x76, 0xd6, 0x27, 0x13, 0x8e, 0x3b, 0x8d, 0x00, 0x4d, 0x67, 0x50, 0xb7, 0x70, 0x84, 0x89,
    0x74, 0x26, 0x2a, 0x4d, 0xff, 0xe2, 0xbe, 0xb7, 0x4c, 0x0b, 0xf6, 0x8d, 0xfe, 0xf1, 0x37, 0x06,
    0xc9, 0x7a, 0x5a, 0xf7, 0x4b, 0x1e, 0x8e, 0x57, 0xbe, 0x0e, 0xa4, 0x59, 0x84, 0xd2, 0xc8, 0x8b,
    0x28, 0x22, 0xc3, 0x67, 0xfb, 0x0a, 0x73, 0xfb, 0x7f, 0x3b, 0xd4, 0xb2, 0xc9, 0x18, 0xc3, 0xa7,
    0x6c, 0xff, 0xad, 0x23, 0xfc, 0x4d, 0x62, 0x58, 0x7d, 0x4a, 0xcc, 0x1f, 0xd3, 0x1c, 0xe2, 0x5a,
    0xdd, 0xc6, 0xf6, 0x30, 0x8b, 0x72, 0x66, 0x44, 0x0a, 0x7b, 0xb7, 0x6b, 0x0c, 0xc9, 0x59, 0xc3,
    0xa9, 0x31, 0x6a, 0xac, 0xdf, 0x5f, 0x9b, 0xcc, 0x7c, 0x32, 0x38, 0x35, 0x4e, 0xee, 0xc7, 0x9b,
    0x41, 0x78, 0x1f, 0xc0, 0xdb, 0x70, 0xde, 0xef, 0xc8, 0xe2, 0x08, 0xd3, 0x61, 0x48, 0x43, 0x72,
    0x03, 0xfc, 0x99, 0x79, 0x47, 0x62, 0x87, 0xeb, 0x0b, 0x1c, 0x65, 0x06, 0x39, 0x37, 0xb9, 0x0b,
    0xbd, 0x9b, 0x98, 0xf0, 0xa1, 0x9c, 0x56, 0x8d, 0x98, 0xdc, 0xcc, 0xd9, 0xac, 0xad, 0x0c, 0x99,
    0x17, 0xf5, 0x68, 0x2c, 0x25, 0x2f, 0x0d, 0x3f, 0x2b, 0x9c, 0xb4, 0xa9, 0x57, 0x40, 0xe9, 0x7b,
    0xda, 0x10, 0x4c, 0x57, 0x48, 0x92, 0x58, 0x08, 0xa8, 0xa3, 0x8f, 0xfe, 0xce, 0x42, 0x7a, 0xf7,
    0x3c, 0xb6, 0x50, 0x2d, 0x62, 0x27, 0xb3, 0x30, 0xbc, 0x83, 0x21, 0xa7, 0xf6, 0xc9, 0xf6, 0x21,
    0xe3, 0xa5, 0x53, 0x6b, 0x2c, 0xf0, 0x6e, 0x65, 0x3d, 0x7f, 0x7c, 0x1d, 0x1d, 0x03, 0x7e, 0x48,
    0xe6, 0x78, 0x3e, 0xb6, 0x9c, 0x4e, 0xc3, 0xd9, 0xa3, 0xe2, 0x90, 0xe7, 0x7f, 0x57, 0x79, 0x19,
    0xc6, 0x50, 0x39, 0xf2, 0x09, 0xf1, 0x4d, 0xbb, 0xda, 0xea, 0x72, 0xf0, 0xd3, 0x7c, 0x61, 0xad,
    0x3a, 0x56, 0x49, 0xd5, 0x3f, 0xae, 0xeb, 0xa2, 0x5c, 0x06, 0xd3, 0x0a, 0xf7, 0x26, 0xa5, 0x8b,
    0x22, 0x48, 0xa8, 0xcc, 0x54, 0x68, 0x35, 0xc8, 0x6f, 0xd9, 0xf7, 0x43, 0x68, 0x20, 0x76, 0xb4,
    0x58, 0x34, 0xfa, 0x0c, 0x1a, 0xae, 0xcf, 0x9c, 0xf5, 0x3e, 0x5b, 0x91, 0x70, 0x65, 0x41, 0x74,
    0xfc, 0x2d, 0xbf, 0xf8, 0x90, 0xc6, 0xcf, 0x2a, 0x00, 0xd5, 0xfa, 0xa6, 0x7a, 0x6a, 0x9e, 0x22,
    0x10, 0xe5, 0x0b, 0x67, 0x4c, 0xf8, 0x56, 0x10, 0x88, 0xf8, 0x7d, 0xac, 0xfb, 0xe7, 0x37, 0x58,
    0x9d, 0x85, 0x90, 0x63, 0x62, 0xd7, 0x94, 0x7f, 0xc4, 0xe0, 0x14, 0x48, 0xbc, 0xaf, 0x74, 0xb6,
    0x99, 0xec, 0x8d, 0x20, 0x91, 0x3c, 0x97, 0x2d, 0xb6, 0x3b, 0x04, 0x4e, 0x11, 0xf3, 0x5b, 0x62,
    0xda, 0xb0, 0x67, 0x1f, 0x87, 0x36, 0x66, 0x69, 0x33, 0xf7, 0x3a, 0x06, 0x33, 0xb6, 0xf2, 0xa4,
    0x77, 0x93, 0x80, 0x54, 0xff, 0x91, 0x78, 0xf9, 0x00, 0x98, 0x10, 0x6b, 0x6b, 0xa3, 0x67, 0x52,
    0xa4, 0x6c, 0xa3, 0x61, 0x4d, 0x60, 0x1d, 0x11, 0xf7, 0x8f, 0xdd, 0x47, 0xa0, 0xfc, 0x3c, 0xc8,
    0x86, 0xfb, 0x06, 0xd2, 0xcc, 0x4f, 0x24, 0xe8, 0x14, 0x84, 0x30, 0xd8, 0x49, 0xa0, 0xed, 0xf8,
    0xa9, 0x24, 0x9a, 0x8d, 0x6a, 0x05, 0xd1, 0xe8, 0xd9, 0x60, 0x2b, 0x67, 0xec, 0xbf, 0xbd, 0x92,
    0xe4, 0x4b, 0xee, 0x2b, 0xc1, 0x0f, 0x0e, 0x0e, 0x0e, 0x7d, 0xe7, 0x0b, 0x96, 0xb3, 0x14, 0x23,
    0x16, 0x96, 0x93, 0x0c, 0xae, 0x65, 0xfc, 0xef, 0x55, 0x6f, 0xb0, 0x94, 0x67, 0x79, 0x49, 0x9a,
    0xc3, 0xfb, 0x09, 0x38, 0x5d, 0xd3, 0x56, 0x3b, 0xf3, 0xfa, 0xba, 0xd4, 0xd0, 0x21, 0xd8, 0x8b,
    0x48, 0xbf, 0x98, 0x64, 0x33, 0x91, 0x9d, 0x93, 0xc5, 0xea, 0x74, 0xb0, 0x65, 0xb4, 0xd0, 0x50,
    0x88, 0x78, 0x50, 0x41, 0x69, 0x2c, 0x01, 0x66, 0x46, 0x6c, 0x1e, 0xcb, 0xd9, 0xd1, 0xfd, 0xd7,
    0x08, 0xa7, 0x1e, 0xbd, 0x22, 0xb0, 0x21, 0x3f, 0x0d, 0xfd, 0x32, 0xd6, 0xe1, 0x29, 0x73, 0xe7,
    0x4c, 0xe1, 0x61, 0x8f, 0x28, 0xa3, 0x6f, 0xbd, 0x1d, 0xc5, 0x88, 0xa3, 0x6e, 0x2f, 0xa7, 0x92,
    0x56, 0x0d, 0x67, 0xea, 0x7e, 0xf0, 0x07, 0x35, 0xc0, 0x93, 0xf2, 0x8f, 0x89, 0xdb, 0x15, 0x0b,
    0x29, 0x74, 0xe3, 0x8d, 0x0a, 0x01, 0x3a, 0x2f, 0xd5, 0x15, 0xdb, 0x1b, 0x37, 0xd5, 0x8f, 0x5c,
    0xd8, 0x54, 0xcb, 0x93, 0xe3, 0xb1, 0xec, 0xa4, 0xba, 0x56, 0xa0, 0xcc, 0xa4, 0xba, 0xce, 0xcb,
    0xde, 0xb7, 0x00, 0x71, 0xf9, 0x9e, 0xea, 0xbe, 0xa1, 0xe1, 0x22, 0x92, 0x96, 0xe9, 0xbd, 0x44,
    0x65, 0xc9, 0x0e, 0xa2, 0x0f, 0x83, 0xac, 0x8c, 0x78, 0x4e, 0x1b, 0xf1, 0x11, 0x47, 0xc5, 0xe9,
    0xfc, 0x92, 0x4c, 0xec, 0x0e, 0x26, 0x9b, 0xa8, 0x97, 0x18, 0xe5, 0x48, 0x2c, 0x62, 0x88, 0xf6,
    0x2a, 0x3d, 0xf2, 0xa5, 0xdb, 0x04, 0xd2, 0x1a, 0xf2, 0xa7, 0x8a, 0x3a, 0x52, 0xc5, 0x54, 0xcf,
    0x7e, 0x32, 0x93, 0x2a, 0x18, 0xdc, 0xd3, 0x5b, 0x31, 0x88, 0xa0, 0x45, 0x34, 0x04, 0x25, 0x01,
    0x6e, 0x3c, 0xf5, 0x64, 0x3f, 0x43, 0x37, 0x08, 0x5d, 0x53, 0xe7, 0x11, 0x5f, 0x75, 0x2a, 0x41,
    0xd9, 0xef, 0x8d, 0x78, 0x7a, 0x65, 0x16, 0x44, 0xfc, 0x19, 0x1a, 0xb4, 0xd1, 0x79, 0x8d, 0x3c,
    0x69, 0x55, 0xb6, 0x27, 0xb1, 0x65, 0x0e, 0x7b, 0x79, 0x7a, 0xe1, 0xc8, 0x82, 0x0b, 0x7b, 0xe4,
    0x51, 0x8f, 0x2c, 0xda, 0xb6, 0xb9, 0x79, 0xcc, 0xeb, 0xc3, 0xe3, 0xf5, 0x7c, 0x93, 0x5a, 0x00,
    0x61, 0x3c, 0x12, 0x5b, 0xc5, 0x57, 0x8c, 0x57, 0x1d, 0x49, 0x8e, 0x2e, 0x28, 0x4c, 0x47, 0xb2,
    0x21, 0x90, 0xac, 0x08, 0x23, 0xbb, 0x9f, 0xe5, 0x07, 0xe9, 0x0d, 0xdd, 0xb6, 0xa6, 0xc2, 0x88,
    0x10, 0x7f, 0xa3, 0xa1, 0x01, 0x6a, 0x0a, 0x43, 0x82, 0x26, 0x1b, 0xf9, 0x3b, 0x63, 0x39, 0xda,
    0xc7, 0xa0, 0x37, 0x4a, 0x3d, 0xfb, 0xa9, 0x98, 0x1b, 0x1c, 0x3e, 0x69, 0x64, 0x6f, 0x9d, 0xa1,
    0xdd, 0x5c, 0x1c, 0x27, 0x0d, 0xe6, 0xaa, 0x4a, 0xb9, 0xde, 0x8f, 0x47, 0xb2, 0x8c, 0x4d, 0xcc,
    0x02, 0x6e, 0xcb, 0x63, 0x4b, 0xbb, 0xb3, 0x5b, 0x6b, 0x4f, 0x4a, 0x18, 0xbf, 0xed, 0x36, 0x9e,
    0x87, 0x4a, 0x14, 0x46, 0x74, 0xae, 0xa7, 0x95, 0xc1, 0x42, 0xb6, 0xe6, 0x5b, 0xb5, 0x39, 0x86,
    0xa1, 0x61, 0x4e, 0x08, 0x0e, 0xde, 0x98, 0x70, 0x24, 0x61, 0x20, 0x60, 0x38, 0x35, 0xac, 0xbf,
    0x21, 0x31, 0xf0, 0x89, 0xaf, 0x78, 0xb0, 0xcf, 0xcf, 0x48, 0x93, 0x0f, 0x50, 0x90, 0xce, 0x5d,
    0x06, 0x46, 0x66, 0x51, 0x51, 0x30, 0x8d, 0x10, 0x4a, 0x30, 0x3a, 0xd6, 0xc5, 0x14, 0xcd, 0xa1,
    0x9f, 0x26, 0xa9, 0x7c, 0xa6, 0x66, 0xc0, 0xf4, 0x84, 0x6e, 0x12, 0xf9, 0xf2, 0xa9, 0xcf, 0xf7,
};

static const uint8_t sMessageEncodingTest0563_ExpectedEncoding[] =
{
    0x00, 0x24, 0xc5, 0xb4, 0xbc, 0xb9, 0xcf, 0x18, 0x47, 0x81, 0x76, 0x79, 0x58, 0x30, 0x22, 0x39,
    0xa4, 0x2a, 0xbe, 0xf4, 0xdc, 0xb6, 0xf2, 0xb8, 0x61, 0x90, 0x46, 0x1c, 0x11, 0x92, 0x85, 0x58,
    0x0f, 0x79, 0x0e, 0xc1, 0x1e, 0xc9, 0x6d, 0xf2, 0x45, 0x0b, 0x90, 0x5b, 0xc7, 0x58, 0xe6, 0x8b,
    0x7e, 0x5e, 0x26, 0xeb, 0x63, 0x09, 0xad, 0x6c, 0x77, 0x35, 0xb9, 0xa5, 0x7c, 0x70, 0x7b, 0x34,
    0x63, 0x31, 0x69, 0x82, 0x78, 0xfe, 0x73, 0xea, 0xd7, 0xa9, 0xda, 0x14, 0xa9, 0xb1, 0xf3, 0xa3,
    0x1e, 0x1f, 0x69, 0x6a, 0x63, 0xd8, 0x83, 0x21, 0x08, 0x9b, 0x7f, 0x34, 0xf7, 0x08, 0x36, 0x04,
    0x45, 0xc8, 0xbf, 0xab, 0xef, 0xe5, 0x4e, 0x76, 0xd6, 0x27, 0x13, 0x8e, 0x3b, 0x8d, 0x00, 0x4d,
    0x67, 0x50, 0xb7, 0x70, 0x84, 0x89, 0x74, 0x26, 0x2a, 0x4d, 0xff, 0xe2, 0xbe, 0xb7, 0x4c, 0x0b,
    0xf6, 0x8d, 0xfe, 0xf1, 0x37, 0x06, 0xc9, 0x7a, 0x5a, 0xf7, 0x4b, 0x1e, 0x8e, 0x57, 0xbe, 0x0e,
    0xa4, 0x59, 0x84, 0xd2, 0xc8, 0x8b, 0x28, 0x22, 0xc3, 0x67, 0xfb, 0x0a, 0x73, 0xfb, 0x7f, 0x3b,
    0xd4, 0xb2, 0xc9, 0x18, 0xc3, 0xa7, 0x6c, 0xff, 0xad, 0x23, 0xfc, 0x4d, 0x62, 0x58, 0x7d, 0x4a,
    0xcc, 0x1f, 0xd3, 0x1c, 0xe2, 0x5a, 0xdd, 0xc6, 0xf6, 0x30, 0x8b, 0x72, 0x66, 0x44, 0x0a, 0x7b,
    0xb7, 0x6b, 0x0c, 0xc9, 0x59, 0xc3, 0xa9, 0x31, 0x6a, 0xac, 0xdf, 0x5f, 0x9b, 0xcc, 0x7c, 0x32,
    0x38, 0x35, 0x4e, 0xee, 0xc7, 0x9b, 0x41, 0x78, 0x1f, 0xc0, 0xdb, 0x70, 0xde, 0xef, 0xc8, 0xe2,
    0x08, 0xd3, 0x61, 0x48, 0x43, 0x72, 0x03, 0xfc, 0x99, 0x79, 0x47, 0x62, 0x87, 0xeb, 0x0b, 0x1c,
    0x65, 0x06, 0x39, 0x37, 0xb9, 0x0b, 0xbd, 0x9b, 0x98, 0xf0, 0xa1, 0x9c, 0x56, 0x8d, 0x98, 0xdc,
    0xcc, 0xd9, 0xac, 0xad, 0x0c, 0x99, 0x17, 0xf5, 0x68, 0x2c, 0x25, 0x2f, 0x0d, 0x3f, 0x2b, 0x9c,
    0xb4, 0xa9, 0x57, 0x40, 0xe9, 0x7b, 0xda, 0x10, 0x4c, 0x57, 0x48, 0x92, 0x58, 0x08, 0xa8, 0xa3,
    0x8f, 0xfe, 0xce, 0x42, 0x7a, 0xf7, 0x3c, 0xb6, 0x50, 0x2d, 0x62, 0x27, 0xb3, 0x30, 0xbc, 0x83,
    0x21, 0xa7, 0xf6, 0xc9, 0xf6, 0x21, 0xe3, 0xa5, 0x53, 0x6b, 0x2c, 0xf0, 0x6e, 0x65, 0x3d, 0x7f,
    0x7c, 0x1d, 0x1d, 0x03, 0x7e, 0x48, 0xe6, 0x78, 0x3e, 0xb6, 0x9c, 0x4e, 0xc3, 0xd9, 0xa3, 0xe2,
    0x90, 0xe7, 0x7f, 0x57, 0x79, 0x19, 0xc6, 0x50, 0x39, 0xf2, 0x09, 0xf1, 0x4d, 0xbb, 0xda, 0xea,
    0x72, 0xf0, 0xd3, 0x7c, 0x61, 0xad, 0x3a, 0x56, 0x49, 0xd5, 0x3f, 0xae, 0xeb, 0xa2, 0x5c, 0x06,
    0xd3, 0x0a, 0xf7, 0x26, 0xa5, 0x8b, 0x22, 0x48, 0xa8, 0xcc, 0x54, 0x68, 0x35, 0xc8, 0x6f, 0xd9,
    0xf7, 0x43, 0x68, 0x20, 0x76, 0xb4, 0x58, 0x34, 0xfa, 0x0c, 0x1a, 0xae, 0xcf, 0x9c, 0xf5, 0x3e,
    0x5b, 0x91, 0x70, 0x65, 0x41, 0x74, 0xfc, 0x2d, 0xbf, 0xf8, 0x90, 0xc6, 0xcf, 0x2a, 0x00, 0xd5,
    0xfa, 0xa6, 0x7a, 0x6a, 0x9e, 0x22, 0x10, 0xe5, 0x0b, 0x67, 0x4c, 0xf8, 0x56, 0x10, 0x88, 0xf8,
    0x7d, 0xac, 0xfb, 0xe7, 0x37, 0x58, 0x9d, 0x85, 0x90, 0x63, 0x62, 0xd7, 0x94, 0x7f, 0xc4, 0xe0,
    0x14, 0x48, 0xbc, 0xaf, 0x74, 0xb6, 0x99, 0xec, 0x8d, 0x20, 0x91, 0x3c, 0x97, 0x2d, 0xb6, 0x3b,
    0x04, 0x4e, 0x11, 0xf3, 0x5b, 0x62, 0xda, 0xb0, 0x67, 0x1f, 0x87, 0x36, 0x66, 0x69, 0x33, 0xf7,
    0x3a, 0x06, 0x33, 0xb6, 0xf2, 0xa4, 0x77, 0x93, 0x80, 0x54, 0xff, 0x91, 0x78, 0xf9, 0x00, 0x98,
    0x10, 0x6b, 0x6b, 0xa3, 0x67, 0x52, 0xa4, 0x6c, 0xa3, 0x61, 0x4d, 0x60, 0x1d, 0x11, 0xf7, 0x8f,
    0xdd, 0x47, 0xa0, 0xfc, 0x3c, 0xc8, 0x86, 0xfb, 0x06, 0xd2, 0xcc, 0x4f, 0x24, 0xe8, 0x14, 0x84,
    0x30, 0xd8, 0x49, 0xa0, 0xed, 0xf8, 0xa9, 0x24, 0x9a, 0x8d, 0x6a, 0x05, 0xd1, 0xe8, 0xd9, 0x60,
    0x2b, 0x67, 0xec, 0xbf, 0xbd, 0x92, 0xe4, 0x4b, 0xee, 0x2b, 0xc1, 0x0f, 0x0e, 0x0e, 0x0e, 0x7d,
    0xe7, 0x0b, 0x96, 0xb3, 0x14, 0x23, 0x16, 0x96, 0x93, 0x0c, 0xae, 0x65, 0xfc, 0xef, 0x55, 0x6f,
    0xb0, 0x94, 0x67, 0x79, 0x49, 0x9a, 0xc3, 0xfb, 0x09, 0x38, 0x5d, 0xd3, 0x56, 0x3b, 0xf3, 0xfa,
    0xba, 0xd4, 0xd0, 0x21, 0xd8, 0x8b, 0x48, 0xbf, 0x98, 0x64, 0x33, 0x91, 0x9d, 0x93, 0xc5, 0xea,
    0x74, 0xb0, 0x65, 0xb4, 0xd0, 0x50, 0x88, 0x78, 0x50, 0x41, 0x69, 0x2c, 0x01, 0x66, 0x46, 0x6c,
    0x1e, 0xcb, 0xd9, 0xd1, 0xfd, 0xd7, 0x08, 0xa7, 0x1e, 0xbd, 0x22, 0xb0, 0x21, 0x3f, 0x0d, 0xfd,
    0x32, 0xd6, 0xe1, 0x29, 0x73, 0xe7, 0x4c, 0xe1, 0x61, 0x8f, 0x28, 0xa3, 0x6f, 0xbd, 0x1d, 0xc5,
    0x88, 0xa3, 0x6e, 0x2f, 0xa7, 0x92, 0x56, 0x0d, 0x67, 0xea, 0x7e, 0xf0, 0x07, 0x35, 0xc0, 0x93,
    0xf2, 0x8f, 0x89, 0xdb, 0x15, 0x0b, 0x29, 0x74, 0xe3, 0x8d, 0x0a, 0x01, 0x3a, 0x2f, 0xd5, 0x15,
    0xdb, 0x1b, 0x37, 0xd5, 0x8f, 0x5c, 0xd8, 0x54, 0xcb, 0x93, 0xe3, 0xb1, 0xec, 0xa4, 0xba, 0x56,
    0xa0, 0xcc, 0xa4, 0xba, 0xce, 0xcb, 0xde, 0xb7, 0x00, 0x71, 0xf9, 0x9e, 0xea, 0xbe, 0xa1, 0xe1,
    0x22, 0x92, 0x96, 0xe9, 0xbd, 0x44, 0x65, 0xc9, 0x0e, 0xa2, 0x0f, 0x83, 0xac, 0x8c, 0x78, 0x4e,
    0x1b, 0xf1, 0x11, 0x47, 0xc5, 0xe9, 0xfc, 0x92, 0x4c, 0xec, 0x0e, 0x26, 0x9b, 0xa8, 0x97, 0x18,
    0xe5, 0x48, 0x2c, 0x62, 0x88, 0xf6, 0x2a, 0x3d, 0xf2, 0xa5, 0xdb, 0x04, 0xd2, 0x1a, 0xf2, 0xa7,
    0x8a, 0x3a, 0x52, 0xc5, 0x54, 0xcf, 0x7e, 0x32, 0x93, 0x2a, 0x18, 0xdc, 0xd3, 0x5b, 0x31, 0x88,
    0xa0, 0x45, 0x34, 0x04, 0x25, 0x01, 0x6e, 0x3c, 0xf5, 0x64, 0x3f, 0x43, 0x37, 0x08, 0x5d, 0x53,
    0xe7, 0x11, 0x5f, 0x75, 0x2a, 0x41, 0xd9, 0xef, 0x8d, 0x78, 0x7a, 0x65, 0x16, 0x44, 0xfc, 0x19,
    0x1a, 0xb4, 0xd1, 0x79, 0x8d, 0x3c, 0x69, 0x55, 0xb6, 0x27, 0xb1, 0x65, 0x0e, 0x7b, 0x79, 0x7a,
    0xe1, 0xc8, 0x82, 0x0b, 0x7b, 0xe4, 0x51, 0x8f, 0x2c, 0xda, 0xb6, 0xb9, 0x79, 0xcc, 0xeb, 0xc3,
    0xe3, 0xf5, 0x7c, 0x93, 0x5a, 0x00, 0x61, 0x3c, 0x12, 0x5b, 0xc5, 0x57, 0x8c, 0x57, 0x1d, 0x49,
    0x8e, 0x2e, 0x28, 0x4c, 0x47, 0xb2, 0x21, 0x90, 0xac, 0x08, 0x23, 0xbb, 0x9f, 0xe5, 0x07, 0xe9,
    0x0d, 0xdd, 0xb6, 0xa6, 0xc2, 0x88, 0x10, 0x7f, 0xa3, 0xa1, 0x01, 0x6a, 0x0a, 0x43, 0x82, 0x26,
    0x1b, 0xf9, 0x3b, 0x63, 0x39, 0xda, 0xc7, 0xa0, 0x37, 0x4a, 0x3d, 0xfb, 0xa9, 0x98, 0x1b, 0x1c,
    0x3e, 0x69, 0x64, 0x6f, 0x9d, 0xa1, 0xdd, 0x5c, 0x1c, 0x27, 0x0d, 0xe6, 0xaa, 0x4a, 0xb9, 0xde,
    0x8f, 0x47, 0xb2, 0x8c, 0x4d, 0xcc, 0x02, 0x6e, 0xcb, 0x63, 0x4b, 0xbb, 0xb3, 0x5b, 0x6b, 0x4f,
    0x4a, 0x18, 0xbf, 0xed, 0x36, 0x9e, 0x87, 0x4a, 0x14, 0x46, 0x74, 0xae, 0xa7, 0x95, 0xc1, 0x42,
    0xb6, 0xe6, 0x5b, 0xb5, 0x39, 0x86, 0xa1, 0x61, 0x4e, 0x08, 0x0e, 0xde, 0x98, 0x70, 0x24, 0x61,
    0x20, 0x60, 0x38, 0x35, 0xac, 0xbf, 0x21, 0x31, 0xf0, 0x89, 0xaf, 0x78, 0xb0, 0xcf, 0xcf, 0x48,
    0x93, 0x0f, 0x50, 0x90, 0xce, 0x5d, 0x06, 0x46, 0x66, 0x51, 0x51, 0x30, 0x8d, 0x10, 0x4a, 0x30,
    0x3a, 0xd6, 0xc5, 0x14, 0xcd, 0xa1, 0x9f, 0x26, 0xa9, 0x7c, 0xa6, 0x66, 0xc0, 0xf4, 0x84, 0x6e,
    0x12, 0xf9, 0xf2, 0xa9, 0xcf, 0xf7,
};

static const MessageEncodingTestVector sMessageEncodingTest0563 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB9BCB4C5,
        kWeaveHeaderFlag_TunneledData,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0563_Payload,
    sizeof(sMessageEncodingTest0563_Payload),
    sMessageEncodingTest0563_ExpectedEncoding,
    sizeof(sMessageEncodingTest0563_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0564_EncryptionKey =
{
    {
        0x17, 0x94, 0xbb, 0xf2, 0xe2, 0xf4, 0x81, 0xe7, 0x33, 0x83, 0x95, 0x5c, 0x9a, 0x18, 0xc5, 0x41,
    },
    {
        0x83, 0x48, 0x6c, 0xb8, 0x72, 0xd4, 0xd5, 0xfd, 0x9b, 0x6e, 0x09, 0xe1, 0x92, 0xaf, 0xa6, 0xd8,
        0x94, 0x18, 0x5f, 0x9e,
    }
};
static const uint8_t sMessageEncodingTest0564_Payload[] =
{
    0x20, 0xf0, 0x59, 0x2f, 0x02, 0xa1, 0xd0, 0x94, 0x6f, 0x5e, 0xf0, 0x8a, 0xce, 0x14, 0xe2, 0x71,
    0x19, 0x95, 0x19, 0x59, 0x8a, 0x9e, 0x21, 0x09, 0xbf, 0xb8, 0xfd, 0x71, 0xcf, 0xf8, 0x81, 0x50,
    0x2b, 0x82, 0xd9, 0x8c, 0xb7, 0xa8, 0x99, 0xfa, 0x4b, 0x53, 0x87, 0x35, 0x48, 0x2e, 0x52, 0xfc,
    0xd5, 0x54, 0xf3, 0xa7, 0xa8, 0x96, 0x03, 0x7f, 0x38, 0xa8, 0x4b, 0x9b, 0x98, 0xf7, 0x2f, 0x9f,
    0xa9, 0x6b, 0xa7, 0x8e, 0xb4, 0xc1, 0x9b, 0x25, 0x6b, 0x87, 0x04, 0x46, 0xf2, 0x75, 0xaa, 0x82,
    0x27, 0x78, 0xf8, 0x40, 0x0e, 0xd4, 0x3f, 0xb3, 0xa2, 0xdf, 0xb3, 0xa6, 0x89, 0x32, 0x1d, 0x5f,
    0xbb, 0xd5, 0x5b, 0xee, 0x6a, 0x06, 0xf3, 0x30, 0xa0, 0xf5, 0x78, 0x6a, 0x75, 0x32, 0x0e, 0x6c,
    0x87, 0x79, 0xce, 0x8a, 0x60, 0x46, 0x2f, 0xc0, 0xa0, 0x5a, 0x63, 0x1e, 0x7e, 0x39, 0x14, 0x18,
    0x37, 0x92, 0x96, 0xc0, 0x5f, 0xdc, 0x28, 0x30, 0xb5, 0xf6, 0x4f, 0x57, 0xdc, 0x68, 0x24, 0x0b,
    0x9c, 0x2f, 0xee, 0x37, 0x6c, 0xff, 0x41, 0x8e, 0xfd, 0x71, 0xc1, 0x6e, 0xfb, 0x7f, 0x97, 0x65,
    0x52, 0xd4, 0xfd, 0x57, 0x88, 0xcb, 0x64, 0x9a, 0x8a, 0xd9, 0x6c, 0xef, 0xe5, 0x77, 0xe6, 0x87,
    0x16, 0x8d, 0x92, 0xb4, 0xb5, 0x04, 0x71, 0x2d, 0xed, 0xbb, 0x89, 0x4c, 0x5e, 0xb8, 0xfd, 0xd0,
    0x08, 0x53, 0xcc, 0xdc, 0xd3, 0xdc, 0x41, 0x63, 0x02, 0xc5, 0xe6, 0x74, 0x69, 0xc8, 0x4f, 0x6a,
    0x31, 0xeb, 0x9f, 0xcf, 0xae, 0x07, 0xfd, 0xb5, 0x17, 0x27, 0xc1, 0x07, 0x00, 0x48, 0x7b, 0x47,
    0x7b, 0x7b, 0x4e, 0xd7, 0x89, 0x56, 0x78, 0x92, 0xfb, 0xc4, 0x14, 0x3f, 0xa4, 0x9c, 0x7c, 0xb4,
    0x69, 0x1a, 0xe6, 0x6f, 0x43, 0xfc, 0x1e, 0x69, 0xad, 0x39, 0x8e, 0x7c, 0xbc, 0x15, 0xce, 0x59,
    0x81, 0xdd, 0x1a, 0xe0, 0x96, 0xc4, 0x45, 0x79, 0x6a, 0x14, 0x6d, 0xe7, 0x20, 0x8b, 0x14, 0xe6,
    0x94, 0x81, 0x80, 0xf3, 0xe7, 0xed, 0x53, 0xcb, 0x89, 0x57, 0x2e, 0x0e, 0x27, 0x83, 0xdb, 0xe9,
    0xea, 0x4a, 0x63, 0x32, 0x64, 0x1f, 0x13, 0x80, 0xbf, 0xb0, 0xec, 0xb8, 0xde, 0xc6, 0xca, 0xd6,
    0xf4, 0x80, 0xe6, 0x51, 0x17, 0xb6, 0x78, 0x03, 0xfa, 0x6c, 0x82, 0xa0, 0xe9, 0x87, 0x50, 0x05,
    0xa2, 0xed, 0x13, 0x4a, 0x03, 0x6f, 0x00, 0x87, 0xe1, 0x6e, 0x0d, 0xe7, 0x4e, 0xaf, 0xc5, 0x0f,
    0xc9, 0xd9, 0x66, 0x63, 0xd9, 0x41, 0xd4, 0xe2, 0xd1, 0x18, 0x30, 0x08, 0x85, 0xc9, 0x96, 0xef,
    0x3e, 0x1c, 0xa5, 0xac, 0x38, 0x69, 0x1d, 0x4c, 0xf8, 0x0a, 0x59, 0x3e, 0x27, 0x22, 0xc1, 0xb3,
    0xdc, 0xe8, 0xc6, 0x8d, 0x78, 0x71, 0x19, 0x51, 0x14, 0x77, 0xb3, 0x69, 0x59, 0x3f, 0x1d, 0xaa,
    0x44, 0xd8, 0xc3, 0xea, 0xc1, 0x81, 0xe4, 0x99, 0xf9, 0xdc, 0xc4, 0x8e, 0x32, 0x8f, 0x6a, 0x42,
    0x69, 0xcd, 0x30, 0xce, 0x21, 0xb0, 0x28, 0x34, 0xb2, 0x3b, 0xc6, 0x4c, 0x19, 0xd2, 0xb2, 0x5e,
    0xf5, 0x5a, 0xfd, 0xcb, 0x75, 0xdd, 0x0e, 0x13, 0x9a, 0xec, 0x1d, 0x92, 0x6c, 0xd1, 0x23, 0x7e,
    0x49, 0x84, 0x8d, 0xcc, 0x6b, 0x59, 0x40, 0x48, 0x26, 0xdc, 0xeb, 0x2b, 0x77, 0xb0, 0xb3, 0xa8,
    0xb3, 0x7f, 0x82, 0x76, 0x3a, 0x15, 0x37, 0xec, 0xbb, 0xf3, 0x7e, 0x58, 0x74, 0x42, 0xe3, 0xa0,
    0xff, 0xb3, 0x30, 0xa8, 0x17, 0x73, 0xbe, 0x5e, 0xc9, 0x7d, 0x1e, 0xfb, 0x6c, 0x4b, 0x10, 0x69,
    0x26, 0x65, 0x23, 0x47, 0x29, 0x02, 0x7d, 0xd1, 0xa1, 0x2b, 0xc2, 0xd2, 0x9d, 0x10, 0x5b, 0xd3,
    0x6d, 0x4e, 0x03, 0x69, 0xa5, 0x03, 0x4c, 0x67, 0x03, 0xc1, 0x61, 0x39, 0x72, 0x94, 0x8d, 0x81,
    0xba, 0x34, 0x7e, 0x2e, 0x40, 0x56, 0x38, 0xc0, 0x21, 0x66, 0x8c, 0x4f, 0x41, 0xa9, 0x33, 0x0a,
    0x2f, 0xe9, 0x79, 0x94, 0xbd, 0xbe, 0x17, 0x6b, 0xda, 0xb1, 0x00, 0x6f, 0xa1, 0x95, 0x63, 0xca,
    0xe8, 0xb4, 0xdb, 0x30, 0x75, 0xea, 0x0c, 0xa0, 0x85, 0xcc, 0x41, 0xf9, 0xb6, 0x8c, 0xf7, 0x01,
    0x3f, 0x32, 0xee, 0x3c, 0xac, 0xb5, 0xa4, 0xbc, 0x6e, 0xc3, 0x38, 0x4c, 0x12, 0x51, 0x4f, 0x4a,
    0x77, 0xc9, 0x2a, 0x66, 0x0f, 0x46, 0x98, 0xa7, 0xc1, 0x26, 0x1c, 0x4d, 0x7b, 0x6e, 0xe7, 0xc9,
    0xca, 0xb4, 0x98, 0x88, 0xbd, 0x32, 0xe7, 0x02, 0x5d, 0x87, 0x77, 0x5c, 0x68, 0x21, 0xbf, 0x6a,
    0xdc, 0xb9, 0x6c, 0xe4, 0xa3, 0xb1, 0xef, 0xf1, 0xc0, 0x59, 0xf2, 0xb8, 0x06, 0x12, 0x99, 0xd9,
    0x59, 0x93, 0x26, 0xdc, 0x70, 0x93, 0xb3, 0x1d, 0x67, 0xad, 0x8a, 0x06, 0xa1, 0x05, 0x08, 0x8a,
    0xff, 0x37, 0xe0, 0x29, 0x30, 0x73, 0x4c, 0x0b, 0x80, 0xd7, 0x86, 0x69, 0x43, 0x5a, 0x37, 0x47,
    0x5b, 0xf3, 0x26, 0xb2, 0x1a, 0x83, 0x3e, 0x30, 0xd8, 0x6b, 0x25, 0x9b, 0xaa, 0x01, 0x74, 0x14,
    0xc2, 0x9a, 0xef, 0x8e, 0x07, 0x07, 0x59, 0xab, 0x84, 0x5e, 0x34, 0x2a, 0xde, 0x82, 0x9c, 0x48,
    0xb6, 0xf3, 0x97, 0x96, 0x3e, 0xf3, 0x36, 0x96, 0xd9, 0xdd, 0x10, 0xc5, 0x07, 0x8b, 0xec, 0xf8,
    0xd7, 0x21, 0x95, 0x93, 0xd0, 0x09, 0x34, 0x77, 0xbd, 0x23, 0xf6, 0x97, 0x5b, 0x95, 0x12, 0xab,
    0xb6, 0x18, 0xf6, 0x8c, 0xf8, 0x51, 0xc5, 0xf8, 0x24, 0xcb, 0x08, 0x2d, 0xbc, 0x73, 0x3e, 0xb7,
    0x8f, 0xc6, 0xc4, 0xa2, 0x43, 0xb5, 0x16, 0xbf, 0x33, 0x0b, 0x37, 0xb2, 0x88, 0x5a, 0xf1, 0xc7,
    0xdc, 0x86, 0x22, 0xf8, 0xf7, 0x19, 0x10, 0x94, 0x78, 0xfb, 0xe5, 0x78, 0x1e, 0x78, 0x69, 0xe7,
    0x45, 0x78, 0x55, 0x9c, 0x1c, 0xd9, 0x0c, 0x1a, 0xea, 0xfb, 0x6c, 0x69, 0x9c, 0xd4, 0xff, 0x3a,
    0x92, 0xf9, 0x3f, 0x18, 0x73, 0x8f, 0x65, 0x71, 0xf7, 0x6f, 0x2d, 0x9d, 0x96, 0x6d, 0xb5, 0x7d,
    0x1b, 0xa6, 0x99, 0x20, 0xc4, 0xa6, 0x24, 0x09, 0xf5, 0xec, 0x5a, 0x54, 0x51, 0x13, 0x75, 0x8d,
    0xcf, 0x45, 0xae, 0xd8, 0xbb, 0xfc, 0x4b, 0x79, 0x61, 0x96, 0x4e, 0x4c, 0xe0, 0xf2, 0x14, 0x37,
    0x3c, 0x41, 0x25, 0x6f, 0xc8, 0xfe, 0xcc, 0xe1, 0x21, 0xa6, 0x05, 0x8f, 0xed, 0x52, 0xe9, 0x8f,
    0x34, 0x88, 0x21, 0x9a, 0x0e, 0x17, 0x89, 0xf5, 0x76, 0x04, 0x4b, 0xad, 0xf7, 0xb6, 0x9d, 0x5a,
    0x38, 0x35, 0xb7, 0xec, 0x6e, 0xbb, 0x3a, 0x0f, 0x68, 0xaf, 0x19, 0x09, 0xf3, 0xea, 0xdd, 0xbb,
    0x6a, 0xcb, 0x94, 0x3e, 0x7e, 0xb0, 0xb9, 0xd8, 0xd8, 0xd5, 0xc2, 0xdc, 0x00, 0x4b, 0x84, 0x7e,
    0x65, 0x67, 0x91, 0xf8, 0x7f, 0x93, 0x6e, 0xe9, 0xdb, 0xac, 0x54, 0x2a, 0xc1, 0x28, 0x6e, 0x09,
    0x3d, 0x60, 0xd6, 0xf2, 0x93, 0xfb, 0xa9, 0x95, 0x0d, 0x79, 0x54, 0xb6, 0x43, 0x61, 0xad, 0xa0,
    0x4a, 0xe0, 0xc2, 0x32, 0x17, 0x29, 0x58, 0xa7, 0xb6, 0xc0, 0xd9, 0x5c, 0xd3, 0xcf, 0xfc, 0xe6,
    0x13, 0x7b, 0x7a, 0x52, 0x53, 0xc2, 0x13, 0xc5, 0xe6, 0xcf, 0xe2, 0xc4, 0xdb, 0xc0, 0xd9, 0xdf,
    0x54, 0x56, 0xf9, 0xf6, 0x7e, 0xcd, 0xac, 0xd8, 0xc4, 0x3e, 0xad, 0x74, 0xba, 0xad, 0x6c, 0x27,
    0x39, 0x01, 0xe4, 0x20, 0x11, 0x27, 0x13, 0x71, 0x18, 0x24, 0x29, 0x5b, 0x8b, 0x6b, 0xd0, 0x08,
    0x4d, 0xa2, 0xdf, 0x1d, 0xc9, 0x6a, 0x96, 0x78, 0x51, 0x8e, 0x21, 0x92, 0x08, 0xbc, 0x3c, 0x5a,
    0x7e, 0x6d, 0xe2, 0x35, 0x0b, 0x4b, 0xe4, 0xf4, 0x2e, 0x43, 0xc6, 0x1f, 0x4d, 0xba, 0x0c, 0x9e,
};

static const uint8_t sMessageEncodingTest0564_ExpectedEncoding[] =
{
    0x10, 0x24, 0x43, 0x92, 0x7d, 0x9e, 0x4c, 0x27, 0x1d, 0x89, 0xa6, 0x7a, 0x09, 0x57, 0x43, 0xa4,
    0x49, 0x00, 0x18, 0xf1, 0xfd, 0x24, 0xcd, 0xa2, 0xd1, 0x63, 0x98, 0x1d, 0x5b, 0xcc, 0xcd, 0x76,
    0x8d, 0xa5, 0x6c, 0xfc, 0x00, 0x44, 0xc7, 0x0f, 0x7a, 0xa2, 0xf6, 0x82, 0x92, 0xc7, 0x95, 0xc1,
    0xd9, 0xb4, 0xf6, 0xb5, 0xf0, 0xf4, 0x7e, 0x6a, 0xc6, 0x83, 0x82, 0x89, 0x15, 0x62, 0x41, 0xe0,
    0xd7, 0xb1, 0x06, 0x6f, 0x21, 0xa7, 0xca, 0xfd, 0xdd, 0xbe, 0xdd, 0xfe, 0x0e, 0xe2, 0x72, 0xd7,
    0x07, 0x0d, 0x63, 0x43, 0x94, 0x39, 0x61, 0x5e, 0x75, 0x50, 0xa5, 0x8a, 0x9d, 0x4e, 0x3b, 0x74,
    0x62, 0x88, 0x97, 0x4a, 0x58, 0xd8, 0x14, 0x94, 0x54, 0xd8, 0x67, 0x91, 0x47, 0x59, 0xfa, 0xfb,
    0x73, 0xa3, 0x09, 0x2f, 0x83, 0x47, 0x78, 0x28, 0x77, 0xcf, 0x94, 0xbc, 0xb8, 0x75, 0x85, 0x49,
    0x76, 0x93, 0x4f, 0x54, 0x77, 0xd2, 0x71, 0xd0, 0x2f, 0x7f, 0xd3, 0x5b, 0xd7, 0xa1, 0x86, 0x55,
    0x9c, 0x6d, 0xfb, 0x2d, 0x53, 0x73, 0xcf, 0xb4, 0x37, 0xa6, 0x6e, 0xd0, 0x5b, 0xf0, 0x78, 0x88,
    0x2c, 0x7d, 0xcf, 0xd1, 0x11, 0x1f, 0x87, 0x21, 0x00, 0xe2, 0xec, 0xa7, 0xcf, 0xf8, 0xf6, 0x58,
    0x32, 0xd6, 0x9a, 0xc5, 0xc6, 0x01, 0x59, 0x34, 0x26, 0xa8, 0x4c, 0x5e, 0x8f, 0x27, 0x1b, 0x49,
    0x7f, 0x33, 0xb3, 0xba, 0x90, 0xc5, 0x14, 0x08, 0xd3, 0x8a, 0x56, 0x84, 0xab, 0x8f, 0xf6, 0xa6,
    0x26, 0x2e, 0x49, 0x8e, 0xee, 0xa7, 0xbd, 0xad, 0x06, 0xe0, 0x5a, 0x4a, 0x5f, 0x4c, 0xe0, 0x89,
    0xf7, 0xfe, 0x0a, 0x54, 0x34, 0x06, 0xb2, 0x03, 0xd8, 0xbb, 0x10, 0xce, 0x41, 0xe6, 0xb7, 0x73,
    0xf0, 0x3c, 0x14, 0x77, 0xd4, 0xf8, 0x2a, 0x4d, 0x9b, 0x06, 0xd4, 0x6f, 0xe2, 0x3a, 0x52, 0x16,
    0xc3, 0xcd, 0x9c, 0x1a, 0x49, 0xbc, 0xc5, 0x2e, 0x01, 0x7a, 0x0b, 0x8e, 0x47, 0x59, 0x1c, 0xc3,
    0x89, 0x2c, 0x6f, 0x9f, 0x2f, 0x99, 0x86, 0xb0, 0x36, 0x4a, 0xd5, 0xeb, 0x30, 0xbd, 0x6a, 0x26,
    0x3d, 0x0c, 0x67, 0xcd, 0x77, 0x87, 0x36, 0xb8, 0x2e, 0x2b, 0x86, 0x09, 0xcf, 0x2a, 0x54, 0x6f,
    0xef, 0x1c, 0xff, 0x79, 0xb1, 0x70, 0x2c, 0x21, 0x55, 0x96, 0xb6, 0xa2, 0x9b, 0xc6, 0xd7, 0xd1,
    0x77, 0x48, 0xce, 0x4d, 0xc2, 0x81, 0x5d, 0xae, 0xac, 0x8e, 0x7d, 0xb5, 0x68, 0xa9, 0xdd, 0x88,
    0xf3, 0x56, 0x99, 0x25, 0xb6, 0x41, 0x02, 0x51, 0x14, 0x01, 0x35, 0xf9, 0x0f, 0xd3, 0x22, 0xd7,
    0xbb, 0xd5, 0xff, 0xa4, 0xb0, 0x42, 0x36, 0xf2, 0xbd, 0xf8, 0xa5, 0xaa, 0x6d, 0x3a, 0x45, 0x46,
    0xb3, 0x17, 0xd9, 0x99, 0xc5, 0xee, 0xd0, 0x34, 0x9a, 0x40, 0xca, 0x93, 0x23, 0xb3, 0x47, 0x61,
    0xaf, 0x97, 0x5c, 0xec, 0x65, 0xb6, 0x93, 0x7b, 0x3a, 0x16, 0xe7, 0xb7, 0xe1, 0x10, 0xeb, 0xae,
    0x11, 0x64, 0xa1, 0x78, 0x58, 0x1f, 0x21, 0x97, 0x39, 0x5f, 0xa0, 0xb9, 0x3f, 0xa2, 0xcc, 0x48,
    0xe0, 0xd8, 0x56, 0x3c, 0x46, 0x44, 0xfa, 0xb7, 0xc2, 0x4b, 0xf1, 0xe4, 0xd6, 0x35, 0xf5, 0xaa,
    0xfd, 0x71, 0xaf, 0xb2, 0x54, 0x8c, 0x52, 0x3d, 0x88, 0x00, 0x04, 0x37, 0x2a, 0x6b, 0xfe, 0x97,
    0xc3, 0x8b, 0x2d, 0x70, 0x37, 0xe7, 0x7e, 0xd1, 0x40, 0xee, 0x8c, 0x1a, 0xe2, 0xfc, 0x84, 0x07,
    0x4a, 0x8c, 0x18, 0x9a, 0x19, 0x07, 0x0e, 0xc8, 0x4b, 0x97, 0x25, 0x79, 0x19, 0xf0, 0x9a, 0xc9,
    0xdc, 0x56, 0xfe, 0x55, 0xfa, 0x94, 0x2e, 0x10, 0xd2, 0x69, 0x60, 0x09, 0xcf, 0x8d, 0xb1, 0x18,
    0x9f, 0x38, 0x28, 0x49, 0xfe, 0x28, 0x40, 0xb1, 0x67, 0xb4, 0x45, 0x53, 0x1b, 0x8e, 0xbe, 0xb8,
    0xb5, 0x8e, 0xc9, 0x09, 0x6e, 0x1a, 0xdb, 0x22, 0xa1, 0x98, 0x56, 0x1b, 0x52, 0x52, 0x12, 0x89,
    0x42, 0xcf, 0x97, 0x78, 0x06, 0x4c, 0x54, 0x5a, 0xbe, 0x89, 0x53, 0xc2, 0xec, 0x4f, 0x12, 0x05,
    0xc0, 0xe6, 0xff, 0x39, 0x0b, 0x5b, 0xff, 0x23, 0x8e, 0xd6, 0x49, 0xe3, 0x60, 0xe2, 0xca, 0xfc,
    0x0c, 0x95, 0x00, 0x96, 0xf5, 0x79, 0xd9, 0x2b, 0xf7, 0xc8, 0x25, 0x6a, 0x8b, 0xce, 0x2c, 0xaa,
    0xc7, 0xdd, 0x17, 0x68, 0x3c, 0x26, 0xf7, 0x23, 0x59, 0x6c, 0xbb, 0x99, 0x63, 0xfc, 0x9c, 0x5a,
    0x37, 0x0b, 0xc6, 0x87, 0x48, 0xc9, 0x9e, 0xd9, 0x59, 0x8d, 0x91, 0x43, 0x49, 0x8d, 0x21, 0x52,
    0xfa, 0xf9, 0x96, 0x90, 0xb6, 0x98, 0x80, 0x90, 0x26, 0xa0, 0x15, 0x52, 0xb1, 0x94, 0x2e, 0xd5,
    0x2f, 0x4b, 0xbd, 0x2e, 0x25, 0xae, 0xa4, 0x7f, 0x50, 0xe8, 0xac, 0x24, 0x40, 0xe7, 0x42, 0x3c,
    0xec, 0x33, 0x5d, 0xb6, 0xa5, 0xed, 0xef, 0x75, 0xd0, 0xd9, 0x7c, 0xea, 0x2b, 0xda, 0xf5, 0xa6,
    0x9d, 0xdf, 0x69, 0xa6, 0xa1, 0x09, 0xff, 0x0f, 0xa2, 0xcc, 0x9a, 0x43, 0x74, 0x02, 0xff, 0x18,
    0xf8, 0x61, 0x46, 0x6a, 0x29, 0x8a, 0x76, 0x67, 0xa6, 0xf6, 0xa1, 0x3b, 0x43, 0x1a, 0xb4, 0x0f,
    0xce, 0x4d, 0x4f, 0xd5, 0x89, 0x7e, 0x1b, 0xce, 0x99, 0x74, 0xc2, 0x95, 0x42, 0x5b, 0xa1, 0x5f,
    0x28, 0x1b, 0x51, 0x71, 0x3c, 0x40, 0x91, 0x7d, 0xd8, 0x86, 0x9f, 0xe0, 0x2a, 0x10, 0x9e, 0x2a,
    0xaf, 0x1b, 0x66, 0x32, 0x32, 0x01, 0xbb, 0xfa, 0x3c, 0x54, 0x41, 0x96, 0xe2, 0x83, 0x45, 0xc7,
    0x3e, 0x8e, 0x3b, 0x61, 0x44, 0x3d, 0xec, 0x34, 0x7d, 0x1a, 0xc4, 0x85, 0x05, 0xb9, 0x66, 0x0a,
    0xd8, 0xe9, 0x75, 0xa0, 0x11, 0xc3, 0xc1, 0xf4, 0x28, 0x40, 0xe8, 0xd9, 0x51, 0x54, 0x88, 0x14,
    0x04, 0x5a, 0xca, 0x87, 0xe5, 0x46, 0x6c, 0x12, 0x4b, 0x3e, 0x50, 0xd8, 0xae, 0x1d, 0xcd, 0xbe,
    0xd6, 0xee, 0xeb, 0x06, 0xc9, 0x19, 0xb6, 0x55, 0x15, 0x18, 0x39, 0xce, 0x7f, 0xaf, 0x79, 0xa9,
    0x1b, 0x06, 0x10, 0xf1, 0xbb, 0xfc, 0x4c, 0xad, 0x1a, 0x6e, 0xb3, 0x23, 0x5b, 0x7b, 0xfc, 0x29,
    0x36, 0xf4, 0x4d, 0xc7, 0xf2, 0xa3, 0x1c, 0xee, 0x55, 0x34, 0x98, 0x39, 0x12, 0x66, 0xdd, 0x54,
    0x84, 0x3e, 0x9b, 0x4b, 0xc4, 0x34, 0x9b, 0xfc, 0x41, 0x8b, 0x3a, 0x5e, 0xd4, 0x42, 0xac, 0x1b,
    0x2d, 0xd7, 0xc2, 0x30, 0x6f, 0x58, 0xcd, 0x78, 0x56, 0xdf, 0xbd, 0x57, 0xf8, 0xb4, 0x42, 0x27,
    0xc2, 0x71, 0x8e, 0x31, 0x13, 0x65, 0x9a, 0x85, 0x91, 0x30, 0x0d, 0xc1, 0xbc, 0x6d, 0xab, 0xd8,
    0x12, 0xe5, 0x9b, 0xd2, 0x6a, 0xb2, 0x7d, 0x62, 0x06, 0x5a, 0x90, 0x22, 0xa3, 0xd8, 0x3d, 0xe0,
    0x70, 0xad, 0x4b, 0xbd, 0x60, 0x6c, 0x46, 0xc4, 0xb9, 0xcc, 0x83, 0x2c, 0x82, 0x0b, 0xf8, 0x00,
    0x17, 0x0b, 0x6b, 0x37, 0xe5, 0x15, 0xc4, 0xa3, 0x1c, 0x3f, 0x3c, 0x7c, 0xe6, 0xec, 0x61, 0xba,
    0x33, 0xcb, 0x18, 0x3d, 0xf1, 0x8f, 0x53, 0xcf, 0x87, 0x83, 0xd4, 0x0f, 0x4f, 0xd5, 0xae, 0xa1,
    0x52, 0xe8, 0xe4, 0x6d, 0xa2, 0x0b, 0xe8, 0x2c, 0x98, 0x4d, 0x99, 0x5e, 0xc9, 0xb0, 0xbc, 0x28,
    0x92, 0x9c, 0xad, 0xc8, 0x67, 0xfa, 0x7e, 0x66, 0x29, 0x42, 0xfb, 0x73, 0x79, 0xf2, 0xe1, 0x6c,
    0x35, 0x95, 0xe2, 0xa3, 0x11, 0x7a, 0xc1, 0xd6, 0xe4, 0xa7, 0x6a, 0xee, 0x7d, 0x11, 0xa5, 0x02,
    0xa0, 0x48, 0xf1, 0x25, 0xf0, 0x3f, 0x09, 0xe7, 0xae, 0x78, 0xf0, 0x4c, 0xef, 0xc3, 0x1e, 0x4c,
    0x58, 0xac, 0xba, 0x6e, 0x07, 0x62, 0x43, 0xb9, 0xb8, 0x71, 0x26, 0x66, 0xc8, 0x86, 0x09, 0x97,
    0x46, 0xeb, 0x6c, 0x59, 0x19, 0x72, 0xfd, 0x4c, 0xdb, 0x3b, 0x5d, 0x7f, 0x8f, 0xab, 0x08, 0xb3,
    0xde, 0x47, 0xf3, 0xcf, 0x29, 0x30, 0x90, 0x84, 0x4a, 0x87, 0xff, 0x48,
};

static const MessageEncodingTestVector sMessageEncodingTest0564 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x9E7D9243,
        kWeaveHeaderFlag_TunneledData,
        0x274C,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0564_EncryptionKey,
    sMessageEncodingTest0564_Payload,
    sizeof(sMessageEncodingTest0564_Payload),
    sMessageEncodingTest0564_ExpectedEncoding,
    sizeof(sMessageEncodingTest0564_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0565_EncryptionKey =
{
    {
        0x39, 0xb8, 0x8e, 0x82, 0xe0, 0x5d, 0xc4, 0x29, 0xef, 0x03, 0x7e, 0x5f, 0xd4, 0xd8, 0x22, 0x6b,
    }
};
static const uint8_t sMessageEncodingTest0565_Payload[] =
{
    0x82, 0x6b, 0x26, 0x15, 0x4b, 0xbb, 0x6d, 0x4f, 0x75, 0x0d, 0xed, 0x83, 0xaf, 0x3f, 0x31, 0x81,
    0xdb, 0xc2, 0x79, 0xb6, 0xe1, 0x66, 0xe2, 0x2c, 0x7a, 0x6e, 0x65, 0xe9, 0xf6, 0xf9, 0xcb, 0x14,
    0x0e, 0xb4, 0x7c, 0x5c, 0xfa, 0xf1, 0xa7, 0x6c, 0x14, 0x7b, 0xbc, 0x77, 0x86, 0x23, 0xea, 0xfe,
    0xce, 0xae, 0x66, 0xe6, 0x85, 0x82, 0x04, 0x6c, 0xa8, 0x55, 0xec, 0x1e, 0xc3, 0xea, 0x76, 0x44,
    0xe6, 0x50, 0x7d, 0xb0, 0x55, 0x1f, 0x36, 0x02, 0x04, 0x02, 0x2b, 0x20, 0x94, 0x29, 0x02, 0x7a,
    0x81, 0x3f, 0xe8, 0x32, 0xb8, 0x51, 0x9f, 0xb9, 0x96, 0x77, 0xd6, 0x6d, 0x9d, 0x26, 0x8a, 0xda,
    0xd5, 0xb3, 0x86, 0x5c, 0xb0, 0x3b, 0xa0, 0x47, 0xfa, 0x4d, 0x13, 0x06, 0x07, 0x04, 0xfc, 0x37,
    0xa0, 0x17, 0x5c, 0xb3, 0x4e, 0x2c, 0x28, 0x4f, 0x57, 0x1f, 0x17, 0x67, 0x1b, 0xff, 0x80, 0x62,
    0xe7, 0x80, 0xe7, 0x71, 0xdc, 0x12, 0xea, 0x4c, 0x5e, 0x3f, 0x75, 0x7c, 0x56, 0xe2, 0xec, 0xdc,
    0x26, 0xfb, 0x4a, 0x1f, 0x10, 0x45, 0x1e, 0x60, 0x8f, 0xde, 0x25, 0x5c, 0x8c, 0xc0, 0x22, 0xb7,
    0x83, 0xc4, 0x0d, 0x7b, 0xad, 0xd4, 0x85, 0xd2, 0x60, 0x78, 0x10, 0x26, 0xc2, 0x22, 0xae, 0xae,
    0x84, 0xf5, 0xb1, 0xbe, 0xc0, 0x2b, 0xfb, 0xe8, 0xb3, 0x9e, 0x18, 0x9c, 0xb4, 0x04, 0x44, 0xd7,
    0xa4, 0xed, 0x05, 0x08, 0x31, 0xee, 0x84, 0x69, 0xe2, 0x4d, 0x23, 0xc5, 0xe2, 0x11, 0x95, 0x22,
    0x23, 0xd8, 0xb1, 0x49, 0x4c, 0xc8, 0x0e, 0x26, 0xe6, 0x87, 0x11, 0x4f, 0x8f, 0xd6, 0xe6, 0x4f,
    0x62, 0xcc, 0x12, 0xec, 0x73, 0x05, 0xc9, 0xa1, 0xec, 0xe0, 0x3f, 0x6c, 0xbf, 0xbe, 0x3c, 0x02,
    0x0d, 0x0c, 0xe5, 0xe7, 0xd0, 0xea, 0x8e, 0x70, 0x82, 0xe9, 0xe3, 0x37, 0xb4, 0xd5, 0x30, 0xde,
    0x92, 0x39, 0xa2, 0x10, 0x9e, 0xe5, 0x4e, 0x29, 0xba, 0x5b, 0xe2, 0x70, 0x95, 0x9d, 0xbd, 0x46,
    0x33, 0xb9, 0x07, 0x92, 0x07, 0x5e, 0xc6, 0xc0, 0xa1, 0x8e, 0x8a, 0x1c, 0xb1, 0xbf, 0x3d, 0xdc,
    0x84, 0xd4, 0xc6, 0xc2, 0x62, 0x04, 0x9a, 0x23, 0x3b, 0xbb, 0x9f, 0x24, 0x8e, 0x9d, 0xee, 0x03,
    0xbc, 0x05, 0x61, 0xe5, 0xc2, 0x4c, 0x0d, 0xb4, 0xfd, 0x82, 0xda, 0xca, 0x11, 0x40, 0x76, 0xfb,
    0x4a, 0x5a, 0x5e, 0xbf, 0xbf, 0x05, 0x55, 0xaa, 0xbd, 0x15, 0x35, 0xff, 0xc9, 0x5c, 0x6e, 0x9d,
    0x65, 0x55, 0x74, 0x7e, 0xf3, 0xca, 0x7c, 0x66, 0xd6, 0xe7, 0xe7, 0x51, 0x72, 0xf2, 0x70, 0xa2,
    0xe2, 0xcc, 0xca, 0xf6, 0xfe, 0xb1, 0x91, 0xa5, 0x81, 0x09, 0x20, 0x8a, 0xd0, 0xe8, 0xec, 0xff,
    0x8f, 0x4d, 0x4d, 0x65, 0xfe, 0x3b, 0x95, 0x90, 0x36, 0x89, 0x6c, 0xcf, 0x9b, 0x5c, 0x6c, 0x67,
    0xce, 0xb9, 0x66, 0x82, 0x63, 0xdf, 0xfd, 0xef, 0x2b, 0xfe, 0x19, 0x48, 0x95, 0xc7, 0x44, 0xc3,
    0x81, 0xb3, 0x24, 0x25, 0x8f, 0xf7, 0xda, 0x1a, 0x42, 0xff, 0x2f, 0x6d, 0x06, 0x62, 0xfa, 0xff,
    0x82, 0x24, 0x6c, 0x09, 0xfb, 0xdf, 0x2b, 0x2a, 0x70, 0x1a, 0xfb, 0x5b, 0x99, 0x5e, 0x0e, 0x11,
    0x10, 0xf5, 0xed, 0x36, 0x2f, 0x39, 0x63, 0x86, 0xfe, 0x9e, 0x45, 0x61, 0x67, 0xf8, 0xf3, 0x11,
    0xd1, 0xff, 0xc3, 0xf1, 0xab, 0x3b, 0x0e, 0x8c, 0x3e, 0x21, 0x82, 0x2e, 0xb3, 0x99, 0x2a, 0x9c,
    0x79, 0x4a, 0xc4, 0x22, 0x49, 0x6b, 0x75, 0x7c, 0x2e, 0xa3, 0x73, 0x66, 0xda, 0x86, 0x6b, 0x70,
    0xf4, 0xfe, 0x22, 0xf6, 0x4a, 0x2e, 0x4e, 0xa0, 0xd9, 0x40, 0xc3, 0x27, 0x6d, 0x4b, 0x1d, 0x62,
    0xe4, 0xa7, 0x74, 0x9f, 0x5b, 0x43, 0xa0, 0x9c, 0x97, 0xa4, 0x84, 0x35, 0xc7, 0x00, 0xcb, 0x9c,
    0x23, 0x1f, 0x25, 0x7d, 0x4f, 0xa5, 0x3e, 0xa9, 0x75, 0x15, 0x60, 0x6d, 0xe8, 0x6c, 0xff, 0x84,
    0x09, 0xad, 0x66, 0xf3, 0x0f, 0x75, 0x0b, 0x6e, 0x84, 0xb6, 0x20, 0x6a, 0x99, 0x63, 0xc9, 0x20,
    0xb5, 0x3c, 0xb0, 0xcc, 0x26, 0xda, 0xa0, 0xd1, 0x74, 0x96, 0xeb, 0xb2, 0x48, 0x72, 0x6b, 0x08,
    0x82, 0x79, 0xb5, 0xa3, 0xd2, 0x1f, 0x53, 0x3f, 0x67, 0xe6, 0x4b, 0xa1, 0xe3, 0x0a, 0x39, 0x82,
    0x70, 0x0e, 0x8e, 0xc5, 0x34, 0xe5, 0x5a, 0x21, 0x9d, 0xc7, 0x71, 0x40, 0x1a, 0x7f, 0x3c, 0xe0,
    0xa8, 0xf7, 0xbe, 0x0f, 0x35, 0xc0, 0x3f, 0xbb, 0x92, 0x5f, 0x08, 0x61, 0x89, 0x88, 0xa8, 0x90,
    0xf6, 0x33, 0x8e, 0x95, 0x30, 0x0e, 0xed, 0xdd, 0x4d, 0x42, 0xa5, 0x51, 0xd2, 0xd6, 0xcc, 0x7e,
    0x3b, 0xf5, 0xad, 0x3d, 0xce, 0x35, 0x15, 0xff, 0xd3, 0xa9, 0x41, 0xab, 0x54, 0x59, 0xe5, 0x56,
    0xdb, 0x75, 0x54, 0xb2, 0xb7, 0xec, 0x35, 0xcb, 0xc1, 0x73, 0x63, 0xc5, 0x21, 0xec, 0xa9, 0x2a,
    0x9e, 0x6b, 0x85, 0xd0, 0xa8, 0x77, 0x6f, 0x63, 0x0f, 0xe8, 0xfc, 0xad, 0xe9, 0x04, 0xf2, 0x44,
    0xbd, 0xa5, 0xf2, 0x30, 0xd7, 0x3d, 0x7f, 0x7d, 0x7d, 0x39, 0x5f, 0x77, 0x7c, 0xc5, 0x94, 0x9a,
    0x5e, 0x15, 0x9e, 0xb2, 0x40, 0x57, 0x29, 0xfe, 0x98, 0x88, 0x0e, 0x9f, 0xcb, 0xf0, 0xab, 0xe9,
    0x68, 0x81, 0x27, 0x38, 0x30, 0x30, 0x60, 0x4a, 0x78, 0x44, 0xff, 0xfc, 0x2b, 0xa9, 0xe2, 0x7e,
    0x15, 0x0d, 0x86, 0xa5, 0xab, 0x45, 0xde, 0x43, 0x27, 0x7c, 0xcd, 0x14, 0x7f, 0xff, 0x86, 0xfa,
    0xd2, 0xe1, 0xbf, 0xe2, 0x35, 0x3a, 0x12, 0x4d, 0xc5, 0x73, 0x32, 0xd1, 0xba, 0xac, 0xbb, 0xfe,
    0x7c, 0x56, 0x71, 0x01, 0xf7, 0x43, 0x96, 0xb7, 0x19, 0x72, 0xc9, 0xad, 0xa7, 0x14, 0xc2, 0xfe,
    0xe3, 0x99, 0x07, 0x69, 0xee, 0x2e, 0x70, 0x97, 0xc2, 0xff, 0x5d, 0xe8, 0x37, 0xeb, 0x47, 0xfe,
    0xd4, 0xe8, 0xd4, 0x0b, 0x95, 0xcf, 0x3a, 0x98, 0xa1, 0x65, 0xc8, 0x31, 0x06, 0xb1, 0x78, 0x36,
    0xdd, 0x4e, 0xb8, 0x0e, 0x80, 0xb9, 0x3c, 0x9b, 0x8d, 0xcf, 0x92, 0x1b, 0xca, 0x14, 0x07, 0x89,
    0x6a, 0xf5, 0x46, 0xcc, 0x67, 0xf5, 0x5a, 0x6b, 0x5a, 0x83, 0x4d, 0x88, 0x4a, 0x1f, 0x40, 0xda,
    0x78, 0x10, 0xdc, 0xc2, 0x79, 0xa5, 0xf4, 0xa6, 0x86, 0xe1, 0xfd, 0x62, 0x25, 0xea, 0xfd, 0x37,
    0x87, 0xb4, 0x99, 0x37, 0xff, 0x49, 0x20, 0x9c, 0xd6, 0x36, 0x64, 0xe6, 0xa7, 0x63, 0xa1, 0x29,
    0xec, 0x16, 0x1c, 0x28, 0xb8, 0xe8, 0x45, 0x50, 0x43, 0xa1, 0x2c, 0x3d, 0x24, 0x6c, 0x3a, 0xfb,
    0x19, 0x51, 0x9b, 0x0b, 0xf1, 0x79, 0xb3, 0xe1, 0xd8, 0x52, 0xa2, 0x18, 0x39, 0xc0, 0xc4, 0x7a,
    0x52, 0x7c, 0xb2, 0x3b, 0xe8, 0x23, 0x92, 0x47, 0x3c, 0x10, 0x93, 0x4c, 0x73, 0x77, 0xd3, 0xef,
    0x61, 0x20, 0x3f, 0x9d, 0xf9, 0xc8, 0xaf, 0x1a, 0x58, 0x7f, 0x63, 0x36, 0xd7, 0xa9, 0x3f, 0xfc,
    0xe7, 0x7e, 0x16, 0x1f, 0x0d, 0x84, 0xaf, 0x88, 0xb8, 0xf2, 0x11, 0xd2, 0xec, 0x28, 0xfc, 0xe1,
    0x61, 0x04, 0x15, 0x18, 0x0d, 0xad, 0x4e, 0xeb, 0xe9, 0xcd, 0x60, 0xf0, 0x09, 0xc3, 0xc1, 0x47,
    0xd1, 0xff, 0xc9, 0xca, 0xf2, 0xaa, 0xfd, 0x21, 0x78, 0x99, 0x7c, 0x51, 0x4a, 0x57, 0x72, 0xa1,
    0xdb, 0x41, 0xc5, 0x5e, 0x71, 0x7a, 0x78, 0x07, 0xcd, 0xfe, 0x06, 0xe2, 0x28, 0xef, 0xd6, 0xbf,
    0x9c, 0x80, 0xc0, 0x35, 0x38, 0x1a, 0x94, 0x18, 0xb2, 0xb7, 0x51, 0xb3, 0x07, 0x2f, 0x13, 0xf9,
    0x33, 0xf2, 0x4e, 0x12, 0x8e, 0x2b, 0xdc, 0x52, 0xdb, 0x52, 0xd5, 0x30, 0x27, 0x3c, 0xb6, 0xc2,
};

static const uint8_t sMessageEncodingTest0565_ExpectedEncoding[] =
{
    0x20, 0x24, 0x56, 0x44, 0x74, 0x1b, 0x25, 0x2b, 0x56, 0xe7, 0x29, 0x79, 0xdb, 0x44, 0x8b, 0xa5,
    0x84, 0x99, 0xe8, 0xfa, 0x1e, 0x84, 0xdd, 0x3b, 0x4f, 0xfc, 0xaf, 0x58, 0xc2, 0x07, 0x54, 0x03,
    0xde, 0xcf, 0x74, 0xbd, 0x3d, 0xaf, 0x74, 0x9e, 0x23, 0x8d, 0xa8, 0x27, 0x32, 0x4c, 0xcd, 0x4f,
    0x87, 0xc4, 0x4d, 0x8b, 0xd0, 0x50, 0x3d, 0xce, 0x10, 0x91, 0x05, 0xbb, 0x67, 0x7c, 0x4e, 0xf7,
    0xb6, 0x4c, 0x36, 0x7a, 0x5b, 0x55, 0xdc, 0x7b, 0xe3, 0xb9, 0x8c, 0x57, 0x4c, 0xc7, 0xd0, 0x35,
    0x36, 0x61, 0xa2, 0xfc, 0x28, 0x99, 0x3c, 0x0a, 0x57, 0x83, 0x9f, 0xf0, 0xc4, 0x17, 0x77, 0x99,
    0x32, 0xe5, 0x22, 0xaa, 0x5e, 0x03, 0x07, 0x3c, 0xf3, 0xc0, 0xa6, 0xc7, 0x02, 0x85, 0x1e, 0x60,
    0x1c, 0x54, 0x91, 0x33, 0x6c, 0x3a, 0x87, 0x40, 0xf7, 0xf4, 0x34, 0x46, 0x59, 0x5f, 0xaa, 0xb5,
    0x39, 0x6a, 0x79, 0xb6, 0x76, 0xbe, 0x84, 0xa3, 0x97, 0xc4, 0x5e, 0x43, 0x7d, 0x50, 0xb1, 0xf7,
    0x4e, 0xb5, 0x6d, 0x77, 0xe4, 0xaf, 0xb2, 0xd7, 0xfd, 0x3e, 0xaa, 0x08, 0x02, 0xc0, 0x54, 0x46,
    0x6b, 0xcb, 0xf8, 0x54, 0x65, 0x98, 0xed, 0x24, 0xd3, 0x0e, 0xba, 0xf8, 0x50, 0x24, 0xe7, 0x22,
    0xa8, 0xdf, 0xdf, 0xda, 0x06, 0xf7, 0x7d, 0x86, 0xef, 0xf6, 0x97, 0x4a, 0x54, 0x42, 0xdb, 0x8e,
    0x5e, 0x1c, 0x00, 0x83, 0xe1, 0x89, 0x1e, 0x96, 0x5e, 0xfa, 0xf0, 0x0d, 0x71, 0x99, 0xe3, 0x16,
    0x7d, 0xa3, 0xed, 0x8c, 0x95, 0xca, 0x57, 0x71, 0x05, 0x0c, 0xde, 0x31, 0xb0, 0x14, 0xea, 0x03,
    0x93, 0x28, 0x87, 0x3b, 0x33, 0x07, 0x0c, 0x8a, 0xa2, 0xc2, 0x7d, 0x29, 0x63, 0xc3, 0x63, 0x11,
    0x93, 0x9c, 0x41, 0x6d, 0x7a, 0x36, 0xbd, 0xbe, 0x87, 0x74, 0x7e, 0xfb, 0x8d, 0x84, 0x05, 0x32,
    0x73, 0x14, 0x5c, 0x2f, 0x03, 0x6b, 0x1e, 0x40, 0x19, 0x51, 0x9e, 0x54, 0xbe, 0x01, 0x39, 0x47,
    0x02, 0xb6, 0x4c, 0xf5, 0x25, 0x91, 0x99, 0xc3, 0x21, 0x70, 0x7f, 0x0d, 0x88, 0x7e, 0xf8, 0x4d,
    0xf9, 0xab, 0x53, 0x4b, 0xfe, 0xb2, 0x6c, 0x0c, 0x05, 0x06, 0x7e, 0x79, 0x54, 0x4e, 0xc4, 0x40,
    0xb7, 0xa7, 0xa5, 0x5f, 0xed, 0x57, 0x90, 0x36, 0x5d, 0x6c, 0x4c, 0x6c, 0x61, 0x3c, 0x17, 0x30,
    0xa4, 0x1f, 0x72, 0x9b, 0x48, 0x7a, 0x7c, 0xdf, 0x4f, 0xd9, 0x17, 0x19, 0xd7, 0x9c, 0x16, 0x1e,
    0xc2, 0x29, 0xa1, 0xa7, 0xb0, 0xc0, 0x03, 0x16, 0xfc, 0x6f, 0x73, 0x49, 0x9c, 0x03, 0x71, 0x6e,
    0xea, 0xfa, 0xc4, 0xb6, 0x09, 0xd9, 0xe5, 0x38, 0xe4, 0xfc, 0x17, 0x52, 0x69, 0xff, 0x63, 0xc6,
    0xca, 0xb8, 0x68, 0x1b, 0xd8, 0x73, 0xe6, 0x91, 0x1c, 0xc0, 0x56, 0xae, 0x58, 0x3c, 0x4c, 0x92,
    0x92, 0xc2, 0x8a, 0xc0, 0x91, 0x12, 0x71, 0xe2, 0x46, 0x70, 0xb1, 0x61, 0x65, 0x39, 0x93, 0xaa,
    0x50, 0xd5, 0xdb, 0x27, 0x99, 0x12, 0xaa, 0x8e, 0x74, 0xdc, 0x5e, 0x18, 0x30, 0xa8, 0x17, 0x47,
    0xa9, 0xd4, 0x07, 0xfa, 0xfd, 0x75, 0xec, 0x9d, 0x65, 0xd8, 0xd9, 0xba, 0x37, 0xe0, 0xb7, 0xb0,
    0xe9, 0x53, 0xf6, 0xfb, 0xf9, 0xa9, 0x6f, 0xf1, 0x8e, 0x48, 0x57, 0x79, 0xf4, 0x04, 0x1f, 0xb7,
    0x44, 0xa0, 0xb1, 0x3a, 0x5f, 0xb7, 0x17, 0xcb, 0xdb, 0x6b, 0x98, 0x11, 0x07, 0xf7, 0x97, 0xbf,
    0x06, 0x04, 0xab, 0xf2, 0xac, 0xb1, 0x62, 0xb8, 0x02, 0x93, 0xee, 0x5d, 0xff, 0x43, 0xf0, 0xde,
    0x38, 0x12, 0x0b, 0x84, 0xe7, 0x27, 0xd5, 0xdd, 0xbd, 0x52, 0xd8, 0x50, 0x1a, 0x59, 0x13, 0x6e,
    0x24, 0xa8, 0x8d, 0xbb, 0x6b, 0xbe, 0x77, 0x07, 0xda, 0xb8, 0x5c, 0x79, 0x5a, 0x8e, 0x51, 0xda,
    0x8e, 0x3b, 0x50, 0x36, 0xb3, 0x0e, 0x12, 0xe6, 0xed, 0xba, 0x86, 0x42, 0x5c, 0xd2, 0x21, 0x29,
    0xd9, 0x52, 0xab, 0xff, 0x97, 0xba, 0xbb, 0xd2, 0x4c, 0xa7, 0x50, 0x40, 0x4e, 0xfc, 0xed, 0x26,
    0xfc, 0xc1, 0x45, 0xd3, 0x6e, 0xb2, 0x2c, 0x9b, 0xf6, 0x70, 0x15, 0x4a, 0x74, 0xc8, 0xec, 0xe5,
    0xd8, 0xe5, 0x4f, 0x53, 0x3c, 0x85, 0x8d, 0x6e, 0x65, 0x48, 0x31, 0x17, 0x82, 0x01, 0x0f, 0x05,
    0xdb, 0xf6, 0x70, 0xe0, 0x04, 0x7e, 0x0b, 0xb7, 0x68, 0x02, 0x6c, 0x07, 0x08, 0x9f, 0x89, 0xcd,
    0xa6, 0x09, 0x24, 0x59, 0x45, 0x71, 0x3e, 0x45, 0x9e, 0x9c, 0x7d, 0xf3, 0xa4, 0xcc, 0x21, 0x3f,
    0xbc, 0x73, 0xe9, 0xb3, 0xbc, 0x7a, 0x90, 0xc0, 0x05, 0x9a, 0x82, 0x5c, 0xe5, 0x57, 0x13, 0xf8,
    0x89, 0xb7, 0xba, 0xbf, 0x31, 0x6a, 0xf4, 0xdb, 0x04, 0x10, 0xe4, 0xcc, 0x2a, 0x98, 0xf3, 0xa1,
    0x5d, 0x20, 0x2f, 0xa9, 0xf9, 0xc0, 0x2d, 0xde, 0x9f, 0xc5, 0xb7, 0x1c, 0x55, 0x99, 0xdf, 0x9d,
    0x2e, 0x4d, 0x92, 0xb4, 0x23, 0xbb, 0x81, 0x55, 0x8d, 0x10, 0xea, 0xf5, 0x52, 0x39, 0xf0, 0x94,
    0x52, 0xa1, 0x75, 0x6b, 0x92, 0xb5, 0x08, 0x04, 0x67, 0x37, 0x28, 0xd3, 0x79, 0x26, 0xaa, 0xcd,
    0x9c, 0x88, 0xcb, 0xe4, 0x75, 0x87, 0xd8, 0x0d, 0xcd, 0x7d, 0xfd, 0x5a, 0x56, 0x08, 0xcb, 0x82,
    0x6e, 0x89, 0x33, 0xa5, 0xeb, 0x84, 0x68, 0xc9, 0x49, 0xae, 0x04, 0x9b, 0x69, 0xf4, 0xa4, 0xc2,
    0xcb, 0x84, 0xe2, 0x69, 0xc2, 0xc6, 0xae, 0x78, 0x04, 0x81, 0x49, 0x48, 0xed, 0xbf, 0x73, 0x2f,
    0x59, 0x9f, 0xd9, 0x71, 0x5c, 0x92, 0xa3, 0xc2, 0xbf, 0x24, 0x1a, 0x14, 0x17, 0x94, 0x3d, 0xd1,
    0xe5, 0xc7, 0x04, 0x96, 0x2b, 0x3f, 0x3e, 0x51, 0x0d, 0xb0, 0x54, 0x4e, 0x71, 0x9c, 0xf7, 0xef,
    0x5a, 0x32, 0x3e, 0xba, 0x14, 0x05, 0xd5, 0x10, 0x19, 0x42, 0x08, 0x99, 0xb8, 0xf7, 0x86, 0x16,
    0x2d, 0x68, 0x51, 0xba, 0x3b, 0x88, 0x58, 0x3f, 0xe3, 0x5a, 0x47, 0xb9, 0xd2, 0xdf, 0xbc, 0xfc,
    0x84, 0x48, 0xc1, 0xe9, 0xa7, 0x30, 0x6c, 0xd4, 0xbd, 0x89, 0x6a, 0xdc, 0x76, 0x59, 0x6e, 0x8a,
    0xb5, 0x38, 0x86, 0xe9, 0x64, 0xbf, 0xf6, 0x1d, 0xdb, 0x53, 0xb5, 0xcd, 0x3e, 0xbd, 0x48, 0x96,
    0xb6, 0x5c, 0x69, 0xa7, 0x95, 0x60, 0x94, 0xc9, 0xb6, 0x8d, 0x40, 0xbd, 0x08, 0xb1, 0x12, 0x72,
    0xc1, 0x4d, 0x13, 0xa9, 0x94, 0xaf, 0x39, 0x99, 0x86, 0x23, 0x72, 0xa7, 0xa0, 0x68, 0x08, 0x5e,
    0xd3, 0x54, 0x7f, 0x36, 0xd0, 0x74, 0x38, 0x12, 0x82, 0x63, 0x72, 0xc9, 0x64, 0x15, 0xd4, 0x88,
    0x9a, 0x27, 0x67, 0x55, 0xf8, 0x95, 0x9a, 0xb0, 0x0d, 0x69, 0xce, 0x7b, 0x21, 0x0e, 0x41, 0x78,
    0x52, 0x81, 0x53, 0xb7, 0x37, 0x08, 0xa9, 0x44, 0x6e, 0x6e, 0x64, 0xdf, 0xb6, 0x0f, 0x4f, 0xbb,
    0xf1, 0x59, 0x5f, 0xe2, 0xbd, 0x71, 0x33, 0x13, 0x02, 0xa4, 0x12, 0xc1, 0x0b, 0x52, 0x6f, 0xc8,
    0x3d, 0x73, 0xcd, 0x84, 0xc1, 0xca, 0xc5, 0x43, 0xc8, 0x78, 0x78, 0xa7, 0x17, 0x80, 0x25, 0x3e,
    0xcb, 0xf4, 0x00, 0xc4, 0xd8, 0x15, 0xee, 0x09, 0x8c, 0xad, 0xbc, 0x51, 0x83, 0x9a, 0x17, 0xc2,
    0x29, 0x58, 0xf4, 0xd9, 0xfc, 0xd7, 0xcd, 0x15, 0xd9, 0x6b, 0x60, 0x0d, 0x29, 0xcd, 0x0a, 0xd5,
    0xd7, 0x82, 0x09, 0xa5, 0xc3, 0xe2, 0xf4, 0x38, 0xa4, 0x43, 0xbb, 0x9a, 0xf5, 0x36, 0xc0, 0x70,
    0x9f, 0x1b, 0xfe, 0x3d, 0xb0, 0x64, 0xcf, 0xd9, 0xbc, 0x1d, 0x9c, 0x9d, 0x6f, 0xc9, 0xd6, 0xe4,
    0x6f, 0x80, 0x73, 0x12, 0xdd, 0x69, 0xbf, 0xba, 0x8c, 0x35, 0x3e, 0x8e, 0xc9, 0x2d, 0x99, 0x8c,
    0x00, 0x7b, 0xf0, 0x01, 0x65, 0xed, 0x14, 0x1a, 0x2d, 0xf2, 0x93, 0x59, 0x67, 0x76, 0x53, 0x5a,
};

static const MessageEncodingTestVector sMessageEncodingTest0565 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x1B744456,
        kWeaveHeaderFlag_TunneledData,
        0x2B25,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0565_EncryptionKey,
    sMessageEncodingTest0565_Payload,
    sizeof(sMessageEncodingTest0565_Payload),
    sMessageEncodingTest0565_ExpectedEncoding,
    sizeof(sMessageEncodingTest0565_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0566_EncryptionKey =
{
    {
        0xd4, 0x09, 0x20, 0x1a, 0x79, 0x4d, 0xc2, 0xc8, 0x74, 0x02, 0x02, 0x9b, 0x42, 0x0a, 0xad, 0x30,
    }
};
static const uint8_t sMessageEncodingTest0566_Payload[] =
{
    0xdf, 0x75, 0x2d, 0xd3, 0xc9, 0x9b, 0x4f, 0x71, 0xaa, 0xa9, 0x3b, 0x90, 0xbb, 0x2a, 0x50, 0x3f,
    0xf0, 0x3b, 0x62, 0x95, 0x31, 0x16, 0x7f, 0x99, 0x4b, 0xd9, 0xce, 0xf6, 0x4e, 0xf0, 0x82, 0x2f,
    0xf2, 0x06, 0xee, 0x5d, 0xcc, 0x69, 0x73, 0xac, 0xaf, 0xb3, 0x9f, 0x53, 0x53, 0xc5, 0x21, 0x7a,
    0xb1, 0x84, 0x05, 0x27, 0xe7, 0x7e, 0x8f, 0xd6, 0x9d, 0x7a, 0x05, 0x86, 0xc7, 0x6f, 0xa1, 0xaf,
    0xd8, 0x30, 0x10, 0x60, 0x63, 0xc1, 0x1d, 0x8b, 0x5d, 0x73, 0x53, 0x7c, 0xe1, 0xe2, 0x5d, 0xcf,
    0x1c, 0x76, 0x49, 0x08, 0xd4, 0xbd, 0x2f, 0xb0, 0xd5, 0xc8, 0x17, 0xbc, 0x54, 0x6f, 0xe6, 0xd7,
    0x0d, 0x07, 0x9a, 0x08, 0xae, 0xe7, 0xe7, 0x9e, 0x39, 0x63, 0x0b, 0x2c, 0x5b, 0xc5, 0x01, 0x7e,
    0xbb, 0xb6, 0x9f, 0x11, 0x40, 0x93, 0xc2, 0x51, 0x13, 0x44, 0xa4, 0x1d, 0xf7, 0x69, 0xfc, 0x34,
    0xd9, 0x84, 0xc3, 0xba, 0xbc, 0x66, 0x91, 0xcb, 0x1e, 0x17, 0x6a, 0xe8, 0x8b, 0x40, 0x93, 0x73,
    0x54, 0x4d, 0x65, 0x22, 0x3e, 0x8c, 0xb7, 0x2d, 0xad, 0x07, 0xa7, 0x80, 0xe9, 0x97, 0x2c, 0xd3,
    0xf4, 0xba, 0xb2, 0x12, 0x17, 0x5d, 0x34, 0xc8, 0x5e, 0x66, 0xc0, 0x79, 0x6f, 0xdc, 0xd7, 0xcb,
    0x2e, 0xb6, 0xaf, 0x78, 0xb8, 0xd3, 0xf3, 0x43, 0x57, 0x06, 0xe2, 0xb8, 0x5f, 0x1e, 0xc5, 0xf6,
    0x45, 0xa9, 0x13, 0xa4, 0xe2, 0x12, 0x01, 0xec, 0xe6, 0x1b, 0xdc, 0x64, 0x38, 0xb6, 0xcf, 0x37,
    0x39, 0x7f, 0x61, 0x4f, 0xb9, 0x77, 0x0a, 0x4f, 0x97, 0x99, 0x62, 0xbe, 0x38, 0x74, 0xf4, 0x4f,
    0x9b, 0xe0, 0x8d, 0xc1, 0x1d, 0x26, 0x90, 0x28, 0x3a, 0xed, 0xb3, 0x50, 0xd8, 0x9a, 0x19, 0x62,
    0x7e, 0x0d, 0xb4, 0xb3, 0xac, 0xe9, 0xba, 0x5b, 0xfe, 0x13, 0xf6, 0x2b, 0x68, 0x00, 0xb1, 0x3d,
    0x8b, 0xcc, 0x1d, 0x09, 0x3a, 0x78, 0x71, 0xa5, 0xed, 0xf5, 0x27, 0xab, 0x04, 0x39, 0x02, 0x6d,
    0x9a, 0xd2, 0xe5, 0x01, 0x84, 0x45, 0xd9, 0xcd, 0x32, 0x96, 0x71, 0xba, 0x76, 0xd3, 0xa6, 0x7f,
    0x19, 0x4c, 0x5e, 0x4f, 0x95, 0x73, 0xce, 0x8e, 0xf1, 0x75, 0x50, 0x27, 0xca, 0xd6, 0x85, 0xb0,
    0x69, 0x17, 0x99, 0x22, 0x98, 0x4c, 0x66, 0x80, 0xdf, 0x0c, 0x69, 0x72, 0x3b, 0x10, 0x99, 0x8b,
    0xb1, 0x5e, 0x12, 0x0b, 0x46, 0xeb, 0xe5, 0x12, 0xc1, 0x6c, 0x97, 0xc0, 0x86, 0x12, 0xb2, 0x48,
    0xff, 0xf0, 0x00, 0x17, 0x25, 0x52, 0x94, 0xc4, 0x2c, 0xef, 0x69, 0xf4, 0xfc, 0x97, 0x66, 0xcd,
    0xb3, 0xc5, 0x2f, 0xab, 0x92, 0xf8, 0xd1, 0x01, 0x84, 0xc8, 0xee, 0xac, 0x74, 0x70, 0x88, 0x85,
    0x74, 0xbd, 0xdb, 0xf3, 0xbb, 0x87, 0xb9, 0xb1, 0x2d, 0x0a, 0x50, 0xca, 0x3b, 0x5a, 0xe9, 0x35,
    0xa8, 0x97, 0x1b, 0xbc, 0x60, 0x4a, 0x60, 0x3f, 0x7e, 0x1f, 0x50, 0x2c, 0x07, 0x8a, 0x57, 0x92,
    0x06, 0x97, 0x7a, 0x10, 0x43, 0xe0, 0xcc, 0x73, 0x88, 0xd1, 0xf0, 0x6b, 0xdc, 0x92, 0xdc, 0x3a,
    0xb4, 0xfa, 0x56, 0xa3, 0xe0, 0x36, 0x1f, 0xb5, 0xfd, 0xcb, 0xe2, 0x01, 0x85, 0x20, 0xd3, 0x7a,
    0x49, 0x0e, 0x22, 0x27, 0xd7, 0x1f, 0x7b, 0xde, 0x38, 0xdb, 0xd4, 0x1b, 0x67, 0x0c, 0x5c, 0x1f,
    0xfd, 0xf8, 0x05, 0x8e, 0xe9, 0xbd, 0xf3, 0x0e, 0x32, 0x0c, 0x1e, 0x1e, 0xf6, 0x89, 0x7d, 0x1f,
    0x2f, 0x80, 0x94, 0x01, 0x84, 0x17, 0x8a, 0xcb, 0x13, 0x1f, 0x88, 0x05, 0xf1, 0x43, 0xa5, 0x42,
    0xa1, 0xe8, 0x7c, 0x22, 0x32, 0xf3, 0xde, 0x94, 0x74, 0x4e, 0xbd, 0xe1, 0xe1, 0xf2, 0x62, 0x0c,
    0x9f, 0xef, 0x47, 0xc6, 0xd1, 0x4c, 0xf9, 0x76, 0x41, 0xc9, 0x2d, 0x55, 0xe6, 0x8d, 0x1f, 0x38,
    0x1c, 0x8e, 0xd8, 0x40, 0x88, 0x9a, 0x82, 0xfb, 0xeb, 0x01, 0xe2, 0x66, 0x8a, 0x37, 0x2c, 0x28,
    0x2a, 0x5e, 0xc0, 0x40, 0x3a, 0x50, 0x88, 0x60, 0x18, 0xcc, 0x1c, 0x17, 0x9f, 0x97, 0x97, 0xc7,
    0x05, 0x8c, 0xb7, 0x3b, 0x63, 0x11, 0x8e, 0xe1, 0xd8, 0x51, 0x39, 0x73, 0xb3, 0x71, 0x2d, 0x75,
    0x28, 0x27, 0x9b, 0x25, 0xe5, 0xf9, 0x30, 0x14, 0xf3, 0x51, 0x2c, 0xdc, 0xdc, 0x6e, 0x38, 0x7a,
    0x0b, 0x9c, 0x37, 0xbc, 0x7d, 0xc1, 0xdf, 0xac, 0xfc, 0x69, 0x6e, 0x0b, 0x4f, 0x83, 0x60, 0xd4,
    0x60, 0xef, 0xca, 0x20, 0xb0, 0x6a, 0xee, 0x3f, 0x93, 0xc5, 0x32, 0xdb, 0x45, 0x9b, 0x7a, 0xaa,
    0xdf, 0xd2, 0x9e, 0xfa, 0xb8, 0x29, 0x1f, 0x2d, 0x8b, 0x7e, 0xa0, 0xad, 0x3f, 0x5c, 0x80, 0xdd,
    0xf9, 0x46, 0x60, 0xfc, 0xa9, 0xa3, 0x44, 0x40, 0x8a, 0x82, 0xa3, 0x1c, 0x1d, 0xdc, 0x41, 0x52,
    0xfd, 0xe8, 0x48, 0xf1, 0xf8, 0x94, 0xa8, 0xdf, 0x8a, 0x54, 0x48, 0xf5, 0x96, 0xf6, 0xfd, 0x44,
    0x1f, 0xc8, 0xec, 0x4b, 0x26, 0x37, 0xe2, 0x7b, 0x2b, 0xe7, 0xe6, 0x67, 0xb7, 0xa8, 0x2a, 0x64,
    0xf7, 0xaf, 0x84, 0x73, 0xdd, 0xaa, 0x2c, 0xef, 0x5a, 0xcb, 0xb8, 0xf9, 0x21, 0x7b, 0xba, 0xf0,
    0x59, 0xa4, 0x80, 0x7b, 0x2f, 0x6d, 0xfa, 0xce, 0x40, 0x82, 0xfe, 0x9d, 0xe3, 0x7a, 0x00, 0x12,
    0x55, 0x08, 0x89, 0x01, 0x64, 0x38, 0x54, 0xa0, 0xd6, 0xe3, 0x1a, 0x3a, 0xa6, 0x87, 0x02, 0xa6,
    0x56, 0x1f, 0xc5, 0xff, 0x33, 0xa9, 0xc7, 0x9f, 0xef, 0x65, 0xa4, 0x4a, 0x3f, 0x56, 0xd6, 0x73,
    0x32, 0x8e, 0x6b, 0x57, 0x12, 0x88, 0x62, 0x27, 0x71, 0x95, 0xf3, 0x87, 0xf4, 0x49, 0x68, 0x8f,
    0x04, 0x73, 0xd1, 0x53, 0xe0, 0x78, 0x95, 0x71, 0xc4, 0xfd, 0xbe, 0x39, 0xca, 0xbb, 0x35, 0x6a,
    0xa5, 0x19, 0x30, 0x0f, 0x6c, 0x4e, 0x49, 0x19, 0xfb, 0x28, 0x6f, 0x9c, 0x6b, 0x10, 0x09, 0x7e,
    0x34, 0xa7, 0xf0, 0x06, 0x30, 0x76, 0xd7, 0xed, 0xa0, 0x80, 0x8d, 0x2d, 0x47, 0x0e, 0xbe, 0x9c,
    0x2e, 0xc9, 0x98, 0x1a, 0xd6, 0x8f, 0x60, 0x2c, 0x40, 0x21, 0x21, 0x76, 0x54, 0xdb, 0xdb, 0x79,
    0xdd, 0xe5, 0x02, 0x2c, 0x18, 0x1e, 0x36, 0xf1, 0x94, 0x6d, 0x38, 0x18, 0x0f, 0x40, 0xc7, 0x12,
    0xe0, 0x31, 0x1b, 0x3f, 0x19, 0xc7, 0x94, 0xb2, 0x63, 0xaa, 0x33, 0x8f, 0xf5, 0x37, 0xa4, 0x22,
    0xd2, 0xd5, 0xce, 0x87, 0xe4, 0x54, 0xb8, 0xfb, 0xab, 0x28, 0x30, 0xc8, 0x20, 0xd9, 0xbd, 0xea,
    0x11, 0xd4, 0x5c, 0x27, 0x68, 0x2d, 0x62, 0xd8, 0x64, 0x9b, 0x2c, 0xba, 0xf0, 0xe3, 0xa9, 0x7c,
    0xf1, 0x42, 0x78, 0x0a, 0xec, 0xf8, 0x62, 0x3c, 0x55, 0xcb, 0x52, 0x47, 0x0e, 0x87, 0x22, 0x8c,
    0xd7, 0x92, 0x7a, 0xfd, 0x7a, 0x76, 0xf5, 0x39, 0x75, 0x2d, 0xc7, 0x14, 0xf2, 0xdb, 0xf8, 0x73,
    0xd2, 0x05, 0xf0, 0x24, 0x88, 0x66, 0x70, 0x88, 0x94, 0x79, 0x02, 0x63, 0xb7, 0x85, 0xc8, 0xf0,
    0x66, 0xc5, 0x09, 0xa7, 0x76, 0x8a, 0xe5, 0x97, 0x48, 0x6c, 0x6c, 0x52, 0x62, 0xed, 0xb2, 0xdb,
    0x58, 0x14, 0x54, 0xfd, 0xaf, 0x24, 0x22, 0x6f, 0x3d, 0x4f, 0x1c, 0xa3, 0xc6, 0x0a, 0x5f, 0x34,
    0x15, 0x2a, 0x4a, 0xf7, 0x7d, 0xfa, 0x5b, 0x37, 0xda, 0x36, 0xe2, 0x7c, 0x47, 0x60, 0x9a, 0xb2,
    0x2e, 0x3b, 0xe6, 0x56, 0xa4, 0xe8, 0x49, 0x61, 0x3f, 0x96, 0xf4, 0x74, 0x52, 0x07, 0x3d, 0x24,
    0x31, 0x55, 0xaa, 0x19, 0xb3, 0x69, 0x5a, 0x7f, 0x51, 0xe0, 0xef, 0x61, 0x0a, 0x20, 0x87, 0x0a,
    0xb3, 0x4c, 0x0c, 0xfc, 0xd0, 0x37, 0x25, 0x61, 0x13, 0x3c, 0x1e, 0xa1, 0x41, 0xe3, 0xd6, 0xb7,
};

static const uint8_t sMessageEncodingTest0566_ExpectedEncoding[] =
{
    0x30, 0x24, 0x5e, 0xac, 0xae, 0xac, 0x6d, 0x25, 0x47, 0x7c, 0x1e, 0xde, 0x09, 0x8f, 0xbb, 0x72,
    0xc5, 0xad, 0x58, 0x0d, 0xb3, 0x56, 0xdf, 0x91, 0x25, 0xaa, 0xed, 0x00, 0x18, 0x7d, 0xe5, 0x0d,
    0xf2, 0x5d, 0x3d, 0x22, 0x05, 0x80, 0x3e, 0xc2, 0xa4, 0x32, 0x1b, 0x7f, 0x51, 0x94, 0xb2, 0x68,
    0xbf, 0x02, 0x48, 0x1c, 0xef, 0x21, 0x5b, 0x64, 0x93, 0xa1, 0xe7, 0x2e, 0x6d, 0x43, 0x4e, 0xe7,
    0x6a, 0xaa, 0x6e, 0xe5, 0xd3, 0x45, 0x85, 0xdc, 0xb8, 0xd6, 0xed, 0x6d, 0x1c, 0x9a, 0xe4, 0xfe,
    0xa9, 0xfb, 0x35, 0x81, 0x3d, 0xef, 0xc0, 0x6b, 0x21, 0xac, 0x7a, 0x9c, 0x50, 0x86, 0xee, 0x3d,
    0x0a, 0x36, 0xb6, 0x92, 0x92, 0x07, 0xc7, 0xda, 0xed, 0xb1, 0x8c, 0x8d, 0x9b, 0x2f, 0xa5, 0x76,
    0x02, 0x37, 0x19, 0x2a, 0xa8, 0xcb, 0x86, 0x19, 0x27, 0x7d, 0xfc, 0x5c, 0x36, 0x50, 0x7a, 0xc4,
    0xb9, 0x9b, 0x6d, 0x7f, 0x87, 0x8c, 0x8c, 0xa8, 0x32, 0x2e, 0x5b, 0x51, 0x51, 0xae, 0x6a, 0x69,
    0x6e, 0x69, 0x5e, 0xd7, 0x3f, 0xaf, 0x28, 0xcb, 0x25, 0x28, 0xf0, 0x65, 0xdd, 0x84, 0xd7, 0x85,
    0x42, 0xd0, 0x76, 0xe0, 0x43, 0x7c, 0xcc, 0x53, 0x3c, 0x56, 0xe0, 0x97, 0x0b, 0xb4, 0xbd, 0xa3,
    0x57, 0x2e, 0x6a, 0xc6, 0x46, 0x84, 0xd5, 0x55, 0x5a, 0xea, 0xc9, 0xf6, 0xb2, 0x0c, 0x02, 0x8a,
    0xbf, 0xfb, 0x6e, 0x1b, 0x2d, 0x7a, 0xdf, 0x60, 0x83, 0xe8, 0xcf, 0x61, 0x55, 0x7d, 0x09, 0xa5,
    0x12, 0x34, 0xc8, 0x86, 0x83, 0x5b, 0x94, 0x83, 0x9e, 0x57, 0x42, 0x97, 0x57, 0xd4, 0x9b, 0x2b,
    0xba, 0x75, 0xb7, 0xc8, 0x69, 0x98, 0x9a, 0xa7, 0xc2, 0x59, 0xec, 0x34, 0xca, 0xb4, 0x18, 0xad,
    0xe0, 0xe6, 0xed, 0x1f, 0x89, 0x1c, 0xe5, 0xa2, 0x8c, 0x89, 0xa5, 0x3a, 0x40, 0x59, 0xa1, 0x70,
    0xbb, 0xbc, 0x71, 0xae, 0x4c, 0x74, 0x86, 0x66, 0x18, 0xf7, 0xa5, 0x98, 0x01, 0x62, 0x63, 0xa2,
    0x3b, 0xde, 0x0f, 0x49, 0x27, 0x89, 0xed, 0x9c, 0x7f, 0x78, 0x27, 0xee, 0xc3, 0x30, 0x19, 0x19,
    0xd4, 0x8c, 0x0e, 0x84, 0xb6, 0x14, 0xe3, 0x13, 0x45, 0xdb, 0x99, 0xf1, 0x32, 0x54, 0xc0, 0x36,
    0x48, 0x92, 0xd7, 0xda, 0x26, 0xe9, 0x7a, 0x57, 0xb9, 0x63, 0xe0, 0xc2, 0xd1, 0xbf, 0xea, 0x07,
    0x91, 0x12, 0xc0, 0xf6, 0xa9, 0x4a, 0x89, 0x95, 0x2e, 0xc5, 0xfb, 0xd9, 0xde, 0x00, 0xf4, 0x7e,
    0x59, 0x0b, 0xab, 0x66, 0x14, 0x24, 0x9b, 0x78, 0xf6, 0xa3, 0xed, 0xae, 0x22, 0x5d, 0x0d, 0x0b,
    0x79, 0xba, 0x2f, 0x7c, 0xcd, 0x3f, 0xdb, 0x0f, 0xa1, 0xa9, 0xb0, 0x0a, 0xd2, 0x7a, 0x8c, 0x3f,
    0x92, 0x6a, 0x88, 0xbd, 0x14, 0x2d, 0xe9, 0x2c, 0x87, 0xef, 0xc1, 0x90, 0x32, 0x3b, 0x3b, 0xb3,
    0x21, 0xc8, 0xc5, 0x3a, 0xb9, 0xb7, 0x31, 0xd8, 0x99, 0x5a, 0x6f, 0x07, 0x55, 0xd7, 0x1f, 0x9c,
    0x66, 0xe9, 0xbe, 0x7c, 0xea, 0xff, 0x5e, 0x6b, 0x3b, 0x09, 0xb3, 0x62, 0x40, 0x25, 0xda, 0xc8,
    0xfc, 0x45, 0x97, 0x0d, 0x06, 0x4d, 0x41, 0xfe, 0x4b, 0xf4, 0x46, 0xad, 0xe4, 0x47, 0x46, 0xea,
    0xb0, 0x43, 0x86, 0x71, 0xbd, 0xe7, 0xec, 0xb0, 0xdf, 0x4a, 0x69, 0x7e, 0x8a, 0x0d, 0xe8, 0x82,
    0x95, 0xb3, 0x4e, 0xcc, 0x21, 0xe5, 0x39, 0x1f, 0xfc, 0x26, 0xe9, 0x60, 0x6a, 0xcf, 0xd4, 0xbc,
    0x16, 0x00, 0xaf, 0xfc, 0x0e, 0xf0, 0xb6, 0x24, 0x25, 0x6d, 0x9a, 0x05, 0x42, 0x2f, 0xb7, 0xf4,
    0x0a, 0xa2, 0x7f, 0xe3, 0x04, 0x9a, 0xd3, 0xcf, 0xa5, 0x88, 0x01, 0x41, 0x9a, 0x2a, 0x36, 0x2e,
    0x2b, 0x27, 0x32, 0xd7, 0xf9, 0x99, 0x28, 0x4c, 0xdd, 0xe2, 0xe3, 0xb2, 0x34, 0x49, 0xdf, 0x62,
    0x3c, 0x70, 0x98, 0x4b, 0x41, 0xeb, 0x2e, 0x5b, 0xcb, 0x98, 0x06, 0x4a, 0x71, 0x06, 0xe1, 0x75,
    0x24, 0x03, 0xe8, 0x44, 0x52, 0xac, 0x31, 0x52, 0x7e, 0xeb, 0xf8, 0xf6, 0xfb, 0xc8, 0x39, 0xe1,
    0x12, 0xf2, 0x2f, 0x48, 0x1e, 0x77, 0xa3, 0xf8, 0x1c, 0x0c, 0x26, 0x75, 0x48, 0x0b, 0x8f, 0x06,
    0xa8, 0xcb, 0x86, 0xe7, 0x57, 0x11, 0x2b, 0x98, 0x20, 0xbd, 0x1d, 0x8d, 0x6f, 0x26, 0xfa, 0x36,
    0xfc, 0x0c, 0xb1, 0xd0, 0x8a, 0xaa, 0xb5, 0xce, 0xaa, 0x1c, 0xd6, 0x54, 0xa7, 0x55, 0xa3, 0x6c,
    0x83, 0x49, 0x69, 0x88, 0x8f, 0x82, 0x49, 0x93, 0xba, 0x74, 0x06, 0xba, 0x75, 0x16, 0x66, 0xa1,
    0x5b, 0xf0, 0xe6, 0xfa, 0xa2, 0xae, 0x27, 0xdf, 0x8e, 0x3e, 0x94, 0xee, 0x36, 0x1c, 0x43, 0x00,
    0x56, 0x97, 0xf0, 0xc9, 0x96, 0xcf, 0x70, 0xb1, 0x72, 0xaf, 0xe1, 0x8e, 0x48, 0x36, 0x9b, 0x31,
    0x90, 0xcc, 0xc8, 0xe1, 0x81, 0x5e, 0x7a, 0xa2, 0xdb, 0x14, 0xbe, 0x5f, 0xd8, 0x5b, 0x8c, 0xe5,
    0x74, 0x04, 0xe5, 0xb0, 0x87, 0x8f, 0x07, 0x9e, 0x8b, 0x78, 0x45, 0x0d, 0x1a, 0xd3, 0xac, 0xc9,
    0x11, 0x92, 0xcd, 0xf4, 0x7f, 0xc3, 0x88, 0xab, 0xee, 0xbe, 0xd0, 0x5c, 0xe1, 0x84, 0x89, 0x0b,
    0x23, 0xec, 0xe1, 0xa1, 0x9d, 0x16, 0xa0, 0x66, 0xbd, 0x88, 0x0e, 0x1e, 0xc8, 0x62, 0x72, 0xb1,
    0x8e, 0x6e, 0x09, 0xe2, 0xd9, 0xe3, 0x9f, 0xf8, 0x1f, 0x94, 0x16, 0x02, 0x5b, 0xd8, 0xd1, 0x44,
    0x0a, 0xff, 0x4b, 0xeb, 0x27, 0xbd, 0xa6, 0xdd, 0x9c, 0x0e, 0x56, 0xd6, 0xb5, 0x32, 0xf8, 0x6a,
    0x41, 0x39, 0x9c, 0x6e, 0x88, 0xbb, 0xe9, 0x36, 0xe3, 0x43, 0x24, 0x06, 0x3c, 0xd3, 0x17, 0xd7,
    0x4a, 0x5b, 0x79, 0x1e, 0xa6, 0x46, 0xcb, 0x4a, 0xa4, 0xbb, 0x0c, 0x71, 0x78, 0xc2, 0x00, 0x09,
    0x0a, 0xb6, 0xbe, 0x5f, 0x98, 0xbf, 0xd7, 0xf2, 0x4b, 0xc6, 0xeb, 0x7e, 0x49, 0xd8, 0x20, 0x07,
    0xd2, 0xd6, 0x97, 0xd7, 0xf1, 0x0c, 0x15, 0x3a, 0x70, 0x42, 0x70, 0x71, 0x8e, 0x4d, 0x0b, 0x40,
    0x52, 0xbb, 0x41, 0x2f, 0xe1, 0x8d, 0x7e, 0xfc, 0xf9, 0x46, 0x41, 0xbb, 0x36, 0x45, 0xef, 0x8d,
    0xc1, 0x54, 0x18, 0xf7, 0xac, 0x1d, 0xb8, 0x3f, 0xac, 0xf4, 0x9b, 0x48, 0x96, 0x78, 0x16, 0xcc,
    0x59, 0xe2, 0x1a, 0xe2, 0x71, 0xbc, 0xf8, 0x6c, 0x12, 0x16, 0xff, 0x97, 0x4e, 0x4c, 0xf9, 0x37,
    0x6f, 0x8a, 0x59, 0x25, 0xfb, 0x28, 0xb9, 0xa1, 0xea, 0x9a, 0x7b, 0x1e, 0xd9, 0x0e, 0x3c, 0x20,
    0x1a, 0x46, 0x56, 0xf3, 0x2a, 0xee, 0x9a, 0xbc, 0x77, 0x3f, 0xbb, 0x00, 0x66, 0x61, 0x16, 0x90,
    0xc0, 0x70, 0xa5, 0x14, 0x6f, 0xaa, 0xd9, 0x2f, 0xa0, 0x00, 0x69, 0xba, 0x9b, 0x4b, 0x44, 0xe4,
    0x34, 0x25, 0xbd, 0x6b, 0xb8, 0xe3, 0x97, 0x25, 0x37, 0x39, 0x34, 0x22, 0x0e, 0x93, 0xd1, 0xb3,
    0xb4, 0x8d, 0xb9, 0x0e, 0x2d, 0xdc, 0x7d, 0x31, 0x36, 0xda, 0x48, 0x73, 0x03, 0xca, 0xd2, 0x00,
    0x40, 0xfc, 0xf7, 0x59, 0x3b, 0x3e, 0xd1, 0xf7, 0xd1, 0x64, 0x3c, 0x16, 0xdf, 0x8b, 0x69, 0x8c,
    0x3e, 0x4d, 0x73, 0xc3, 0xc4, 0x10, 0xd1, 0xd0, 0xb9, 0x3e, 0x4d, 0x5c, 0x1d, 0xe5, 0x5b, 0xce,
    0x43, 0xd6, 0x7d, 0x3b, 0x34, 0xdc, 0x2c, 0x6b, 0x97, 0xed, 0x28, 0x53, 0xcc, 0x24, 0x1e, 0x66,
    0xaf, 0x49, 0x5c, 0x15, 0x24, 0x09, 0xcc, 0xd0, 0x1a, 0xe7, 0xf0, 0x1f, 0x65, 0x00, 0xa9, 0xac,
    0x1b, 0x5d, 0x97, 0xcf, 0xc5, 0x31, 0x2d, 0xa0, 0xb9, 0xa2, 0xa5, 0xc8, 0xa1, 0xc8, 0xf6, 0x57,
    0x11, 0x8b, 0xa2, 0x43, 0xf4, 0x68, 0x57, 0x92, 0x42, 0xa8, 0x6a, 0xf0, 0x73, 0xdc, 0x46, 0x7a,
    0x89, 0x1c, 0xc6, 0xad, 0xcd, 0xe0, 0x7e, 0x52, 0x7e, 0x1d, 0x37, 0x0c, 0x42, 0x64, 0x6b, 0x93,
    0xae, 0x4f, 0x0f, 0xbf, 0xb3, 0xe8, 0xc3, 0x0c,
};

static const MessageEncodingTestVector sMessageEncodingTest0566 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xACAEAC5E,
        kWeaveHeaderFlag_TunneledData,
        0x256D,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0566_EncryptionKey,
    sMessageEncodingTest0566_Payload,
    sizeof(sMessageEncodingTest0566_Payload),
    sMessageEncodingTest0566_ExpectedEncoding,
    sizeof(sMessageEncodingTest0566_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0567_Payload[] =
{
    0xed, 0x66, 0x98, 0x29, 0xfc, 0xf7, 0xb6, 0x84, 0x52, 0x29, 0xbd, 0x2e, 0xb1, 0xb6, 0x0b, 0x22,
    0xf3, 0xa4, 0x06, 0xc9, 0xc2, 0xba, 0x7b, 0xf5, 0x7d, 0x89, 0xd1, 0x5c, 0x83, 0x6d, 0x34, 0x20,
    0x28, 0xb5, 0x20, 0x35, 0x3d, 0x6b, 0xab, 0xda, 0x54, 0x95, 0x28, 0x1b, 0xb9, 0xe0, 0xf8, 0x8f,
    0xa8, 0x0f, 0x01, 0x9b, 0x22, 0xf0, 0x24, 0x5e, 0x58, 0x1c, 0xf5, 0xf5, 0x41, 0x7b, 0xb5, 0x09,
    0xd9, 0x2d, 0xb1, 0x2b, 0x0e, 0x75, 0xb7, 0x8b, 0x7b, 0x14, 0xbb, 0xe3, 0xc0, 0x90, 0xf1, 0x09,
    0x73, 0x80, 0xd6, 0x57, 0x71, 0x60, 0x2c, 0x6a, 0x4b, 0x17, 0xcf, 0xa4, 0xfd, 0x96, 0x63, 0xf6,
    0xc3, 0xab, 0x74, 0x87, 0x88, 0xe2, 0x87, 0x80, 0x34, 0x18, 0x49, 0xca, 0xa0, 0xa9, 0x06, 0x3a,
    0xe0, 0x4e, 0xda, 0x96, 0xd4, 0x53, 0xc0, 0x69, 0x32, 0x4a, 0xb0, 0x73, 0xda, 0xf3, 0xc9, 0x51,
    0x2f, 0x77, 0xe0, 0xe3, 0x2e, 0x89, 0xde, 0x10, 0xa8, 0x30, 0xd4, 0x61, 0x42, 0x4f, 0xa7, 0x92,
    0xe5, 0x08, 0x6c, 0x42, 0x8f, 0x40, 0xa7, 0x02, 0x20, 0x53, 0xfe, 0x78, 0x5a, 0x52, 0xec, 0x51,
    0xe8, 0x74, 0x1b, 0x07, 0x6d, 0x2f, 0x8e, 0xec, 0x11, 0x6a, 0x2f, 0x6c, 0x33, 0x5c, 0xbe, 0x61,
    0x0b, 0x21, 0x9c, 0x56, 0x9e, 0x30, 0x60, 0x31, 0x40, 0x24, 0xc0, 0x96, 0x5c, 0x70, 0x93, 0x48,
    0xc1, 0x07, 0x8b, 0x0b, 0x64, 0xfc, 0xc2, 0x32, 0xbe, 0x31, 0x29, 0xd8, 0x50, 0xde, 0x0d, 0x48,
    0xe8, 0xfe, 0xac, 0x2e, 0x65, 0x5a, 0xe9, 0x24, 0x12, 0xe6, 0x93, 0xb4, 0x22, 0x1b, 0xb7, 0xbe,
    0xb2, 0x25, 0x11, 0x1a, 0xb2, 0xc8, 0x83, 0xc7, 0x2b, 0x51, 0x05, 0xe9, 0x45, 0x1b, 0x95, 0x53,
    0xd6, 0xa2, 0x0e, 0x70, 0xe5, 0x51, 0xab, 0x4e, 0x19, 0x48, 0x37, 0xa1, 0x2e, 0x54, 0xe1, 0x31,
    0xbc, 0x21, 0xe2, 0xe8, 0x37, 0x3d, 0xe7, 0x0a, 0xca, 0xa0, 0x26, 0x05, 0x43, 0xf7, 0xd6, 0x93,
    0xb9, 0xcd, 0xf0, 0xe0, 0xee, 0x7c, 0x0a, 0x7f, 0x69, 0xf9, 0x74, 0x19, 0x00, 0x7c, 0xba, 0x65,
    0x7a, 0x68, 0x59, 0x8e, 0x7e, 0xb8, 0x30, 0x82, 0x12, 0xbc, 0x45, 0x93, 0x5e, 0xd4, 0xfc, 0xbc,
    0x15, 0x0c, 0xc9, 0x00, 0xc9, 0x35, 0x0e, 0x9a, 0xc6, 0x1f, 0xeb, 0x97, 0x67, 0x34, 0xca, 0x5a,
    0x99, 0x12, 0x91, 0xfa, 0xf1, 0x52, 0x83, 0x38, 0x47, 0x4d, 0xc4, 0x22, 0x46, 0x04, 0x2e, 0xe2,
    0x6b, 0xd4, 0xa5, 0xe0, 0x50, 0xf3, 0x62, 0x20, 0x22, 0xd3, 0xcc, 0xa0, 0x9d, 0xdb, 0x40, 0xf4,
    0x28, 0xfe, 0xcb, 0x4d, 0x70, 0x92, 0x15, 0x1c, 0xf8, 0x3f, 0x22, 0x0e, 0x22, 0x88, 0xdd, 0x2d,
    0x37, 0x4c, 0x7d, 0x5b, 0x82, 0xd2, 0xce, 0x55, 0x17, 0x59, 0x0b, 0x99, 0xfe, 0x65, 0x38, 0x02,
    0xb5, 0xea, 0x4d, 0x95, 0x56, 0xa9, 0xf4, 0x64, 0xa9, 0xb7, 0xff, 0x3f, 0x65, 0xe3, 0x06, 0x18,
    0xf9, 0xc0, 0xb5, 0x29, 0xcf, 0x28, 0x1e, 0x0f, 0x63, 0xc2, 0x7e, 0xc4, 0xe4, 0x3b, 0xb8, 0x34,
    0x96, 0x24, 0x0b, 0x11, 0xf9, 0xca, 0xdc, 0xc9, 0xc6, 0x05, 0xd2, 0x08, 0x25, 0x28, 0x68, 0xb0,
    0x73, 0xf8, 0x90, 0x4d, 0xb1, 0x58, 0xbc, 0x4f, 0x35, 0x6b, 0x55, 0xf1, 0xcc, 0xea, 0x10, 0xde,
    0x0b, 0x34, 0x8f, 0x44, 0xa5, 0x0a, 0xe1, 0x0b, 0xd6, 0x3d, 0xea, 0xbf, 0x30, 0xe5, 0x19, 0x3f,
    0x6a, 0x7b, 0xbd, 0x65, 0x74, 0xfe, 0xb5, 0xde, 0x2b, 0x92, 0x32, 0xac, 0x03, 0x06, 0xeb, 0x39,
    0x3c, 0x62, 0xfb, 0xc0, 0xf0, 0xa6, 0x75, 0x39, 0xa9, 0x91, 0x96, 0xbf, 0x30, 0xfe, 0x8d, 0x35,
    0xf4, 0xab, 0x34, 0xa4, 0xb3, 0x29, 0xca, 0xf3, 0xef, 0x0d, 0x14, 0x5d, 0x40, 0x5c, 0x99, 0x9d,
    0xe3, 0x96, 0x47, 0xeb, 0xf2, 0x60, 0xcf, 0x6e, 0x66, 0x89, 0x2d, 0x58, 0x4c, 0x13, 0xa1, 0x32,
    0x24, 0x3a, 0x55, 0x55, 0x0d, 0xfc, 0x7c, 0x49, 0xc7, 0xe0, 0xc3, 0x38, 0x37, 0xae, 0xb5, 0x72,
    0xa0, 0xfd, 0xf4, 0x19, 0x71, 0x12, 0x9f, 0x46, 0xa2, 0x8b, 0x2d, 0x6f, 0x69, 0x64, 0x9d, 0xd1,
    0x01, 0x96, 0x17, 0xf4, 0x16, 0xaf, 0x16, 0x46, 0xb9, 0xe2, 0x26, 0x60, 0x7e, 0x12, 0x63, 0x63,
    0x8f, 0x1e, 0x78, 0x41, 0xd2, 0x75, 0x6f, 0x8c, 0x5b, 0x3e, 0xb9, 0x42, 0x27, 0x31, 0x8c, 0x5b,
    0x63, 0xdf, 0x7c, 0xa2, 0x2a, 0x9b, 0x49, 0x5c, 0xc2, 0xd4, 0xc8, 0xa5, 0x57, 0x40, 0x5b, 0x44,
    0xab, 0xf6, 0x26, 0xe3, 0x9b, 0x35, 0xd9, 0x96, 0x3f, 0x0d, 0xe3, 0x51, 0x1e, 0x8f, 0x56, 0x9b,
    0xdc, 0x16, 0x02, 0x19, 0x77, 0x29, 0x4d, 0x57, 0xc1, 0x8b, 0xe1, 0xbe, 0x71, 0xa7, 0xdd, 0xca,
    0x9e, 0x6d, 0x77, 0xfa, 0x6b, 0x9d, 0x15, 0x7c, 0xfe, 0x93, 0xe7, 0xa1, 0x8d, 0x10, 0x81, 0xe3,
    0xc3, 0xb3, 0xd1, 0x08, 0x5c, 0x34, 0xbd, 0x84, 0x5d, 0xfe, 0xda, 0x54, 0xb6, 0xd1, 0xd2, 0x86,
    0xa2, 0x21, 0x5b, 0x85, 0x8f, 0xac, 0x84, 0x9b, 0xe2, 0x01, 0xe7, 0x81, 0x29, 0x83, 0xac, 0x9d,
    0x8b, 0xfa, 0x92, 0xc9, 0x23, 0xe4, 0x74, 0xc0, 0x47, 0x1e, 0xe0, 0x98, 0x09, 0x78, 0x50, 0x3d,
    0x94, 0x7e, 0x20, 0xab, 0x38, 0x26, 0x53, 0x28, 0xb4, 0x7f, 0x94, 0xa4, 0x6b, 0x4b, 0x8d, 0xc5,
    0x45, 0x57, 0x22, 0xb2, 0x35, 0x39, 0x1f, 0x98, 0x7a, 0x5f, 0xa8, 0xab, 0xc4, 0xe3, 0x0a, 0xf2,
    0xd5, 0x80, 0x9a, 0xa4, 0x8e, 0xb3, 0x26, 0x79, 0x1e, 0xee, 0xba, 0x02, 0x59, 0x92, 0x3c, 0x6e,
    0x34, 0xdf, 0x75, 0x6e, 0xf9, 0xc6, 0x7d, 0x8d, 0x8b, 0xba, 0x10, 0xf2, 0x2c, 0x65, 0xc7, 0xc7,
    0x56, 0x64, 0xd4, 0xc5, 0xbc, 0x25, 0x21, 0x89, 0xca, 0xc2, 0x71, 0x18, 0x53, 0x75, 0x33, 0x4d,
    0x11, 0xee, 0xb5, 0xff, 0x09, 0x8d, 0x50, 0xa6, 0xb1, 0x55, 0x54, 0x96, 0xb5, 0x29, 0x45, 0x19,
    0xfa, 0x5d, 0x95, 0xa5, 0xc1, 0x6a, 0x4c, 0xee, 0x95, 0x47, 0x3f, 0x0a, 0x70, 0xa0, 0xf2, 0x60,
    0x06, 0xd6, 0x99, 0x7a, 0xd1, 0xae, 0x95, 0x8a, 0xd8, 0x0f, 0x2a, 0x6f, 0x96, 0xc3, 0x23, 0x51,
    0xdb, 0x03, 0x3c, 0xfd, 0x72, 0xfe, 0x0b, 0x3d, 0xa6, 0x26, 0x69, 0x2c, 0x3d, 0xe0, 0xb7, 0x90,
    0x56, 0xbc, 0x9e, 0xbe, 0xd5, 0xa1, 0x01, 0xa9, 0xfd, 0x1e, 0x3c, 0x9b, 0x1b, 0xee, 0xc0, 0x53,
    0x0a, 0xc9, 0x3d, 0xf8, 0xae, 0x2e, 0x3d, 0xed, 0x47, 0x38, 0xa5, 0xa7, 0x34, 0xb1, 0xfb, 0xb9,
    0x9d, 0xd7, 0xcc, 0x1d, 0xe2, 0x7e, 0x9e, 0x73, 0x5a, 0x22, 0x42, 0xa6, 0x54, 0xc8, 0x63, 0xfc,
    0x4a, 0x92, 0xb7, 0x1a, 0x56, 0x1d, 0x67, 0x36, 0x75, 0xb8, 0xba, 0x81, 0x26, 0x17, 0x95, 0xeb,
    0x85, 0x65, 0x07, 0x1e, 0x18, 0x47, 0xc3, 0x28, 0x4e, 0x16, 0xd4, 0x1e, 0x3e, 0x95, 0x94, 0xd8,
    0xe6, 0xda, 0x86, 0x36, 0xc6, 0x10, 0x98, 0x36, 0x1e, 0x9c, 0x4b, 0x39, 0x4e, 0x7a, 0x51, 0xdd,
    0x4b, 0xf1, 0x4d, 0x55, 0x97, 0xd1, 0xd1, 0x6d, 0x69, 0x5e, 0x32, 0x73, 0x2c, 0x19, 0xc0, 0x77,
    0xf2, 0x36, 0xc9, 0x37, 0xcb, 0x66, 0x16, 0xfa, 0x97, 0x3d, 0x12, 0xa5, 0x25, 0x32, 0x1e, 0xe5,
    0xb2, 0xce, 0x11, 0xca, 0x9c, 0x3e, 0x16, 0x82, 0x42, 0x34, 0x34, 0x7d, 0x0a, 0xc4, 0xc6, 0xc4,
    0xc0, 0xff, 0xc3, 0x40, 0xdb, 0xe1, 0xa0, 0x23, 0x6b, 0x76, 0x79, 0x29, 0x21, 0xfb, 0xb7, 0x3a,
    0x52, 0x6f, 0x10, 0xf1, 0x10, 0x91, 0x1b, 0xf9, 0xaa, 0xdd, 0x9f, 0x76, 0x66, 0x93, 0x1d, 0xe4,
};

static const uint8_t sMessageEncodingTest0567_ExpectedEncoding[] =
{
    0x00, 0x28, 0x12, 0x95, 0x28, 0x1e, 0xed, 0x66, 0x98, 0x29, 0xfc, 0xf7, 0xb6, 0x84, 0x52, 0x29,
    0xbd, 0x2e, 0xb1, 0xb6, 0x0b, 0x22, 0xf3, 0xa4, 0x06, 0xc9, 0xc2, 0xba, 0x7b, 0xf5, 0x7d, 0x89,
    0xd1, 0x5c, 0x83, 0x6d, 0x34, 0x20, 0x28, 0xb5, 0x20, 0x35, 0x3d, 0x6b, 0xab, 0xda, 0x54, 0x95,
    0x28, 0x1b, 0xb9, 0xe0, 0xf8, 0x8f, 0xa8, 0x0f, 0x01, 0x9b, 0x22, 0xf0, 0x24, 0x5e, 0x58, 0x1c,
    0xf5, 0xf5, 0x41, 0x7b, 0xb5, 0x09, 0xd9, 0x2d, 0xb1, 0x2b, 0x0e, 0x75, 0xb7, 0x8b, 0x7b, 0x14,
    0xbb, 0xe3, 0xc0, 0x90, 0xf1, 0x09, 0x73, 0x80, 0xd6, 0x57, 0x71, 0x60, 0x2c, 0x6a, 0x4b, 0x17,
    0xcf, 0xa4, 0xfd, 0x96, 0x63, 0xf6, 0xc3, 0xab, 0x74, 0x87, 0x88, 0xe2, 0x87, 0x80, 0x34, 0x18,
    0x49, 0xca, 0xa0, 0xa9, 0x06, 0x3a, 0xe0, 0x4e, 0xda, 0x96, 0xd4, 0x53, 0xc0, 0x69, 0x32, 0x4a,
    0xb0, 0x73, 0xda, 0xf3, 0xc9, 0x51, 0x2f, 0x77, 0xe0, 0xe3, 0x2e, 0x89, 0xde, 0x10, 0xa8, 0x30,
    0xd4, 0x61, 0x42, 0x4f, 0xa7, 0x92, 0xe5, 0x08, 0x6c, 0x42, 0x8f, 0x40, 0xa7, 0x02, 0x20, 0x53,
    0xfe, 0x78, 0x5a, 0x52, 0xec, 0x51, 0xe8, 0x74, 0x1b, 0x07, 0x6d, 0x2f, 0x8e, 0xec, 0x11, 0x6a,
    0x2f, 0x6c, 0x33, 0x5c, 0xbe, 0x61, 0x0b, 0x21, 0x9c, 0x56, 0x9e, 0x30, 0x60, 0x31, 0x40, 0x24,
    0xc0, 0x96, 0x5c, 0x70, 0x93, 0x48, 0xc1, 0x07, 0x8b, 0x0b, 0x64, 0xfc, 0xc2, 0x32, 0xbe, 0x31,
    0x29, 0xd8, 0x50, 0xde, 0x0d, 0x48, 0xe8, 0xfe, 0xac, 0x2e, 0x65, 0x5a, 0xe9, 0x24, 0x12, 0xe6,
    0x93, 0xb4, 0x22, 0x1b, 0xb7, 0xbe, 0xb2, 0x25, 0x11, 0x1a, 0xb2, 0xc8, 0x83, 0xc7, 0x2b, 0x51,
    0x05, 0xe9, 0x45, 0x1b, 0x95, 0x53, 0xd6, 0xa2, 0x0e, 0x70, 0xe5, 0x51, 0xab, 0x4e, 0x19, 0x48,
    0x37, 0xa1, 0x2e, 0x54, 0xe1, 0x31, 0xbc, 0x21, 0xe2, 0xe8, 0x37, 0x3d, 0xe7, 0x0a, 0xca, 0xa0,
    0x26, 0x05, 0x43, 0xf7, 0xd6, 0x93, 0xb9, 0xcd, 0xf0, 0xe0, 0xee, 0x7c, 0x0a, 0x7f, 0x69, 0xf9,
    0x74, 0x19, 0x00, 0x7c, 0xba, 0x65, 0x7a, 0x68, 0x59, 0x8e, 0x7e, 0xb8, 0x30, 0x82, 0x12, 0xbc,
    0x45, 0x93, 0x5e, 0xd4, 0xfc, 0xbc, 0x15, 0x0c, 0xc9, 0x00, 0xc9, 0x35, 0x0e, 0x9a, 0xc6, 0x1f,
    0xeb, 0x97, 0x67, 0x34, 0xca, 0x5a, 0x99, 0x12, 0x91, 0xfa, 0xf1, 0x52, 0x83, 0x38, 0x47, 0x4d,
    0xc4, 0x22, 0x46, 0x04, 0x2e, 0xe2, 0x6b, 0xd4, 0xa5, 0xe0, 0x50, 0xf3, 0x62, 0x20, 0x22, 0xd3,
    0xcc, 0xa0, 0x9d, 0xdb, 0x40, 0xf4, 0x28, 0xfe, 0xcb, 0x4d, 0x70, 0x92, 0x15, 0x1c, 0xf8, 0x3f,
    0x22, 0x0e, 0x22, 0x88, 0xdd, 0x2d, 0x37, 0x4c, 0x7d, 0x5b, 0x82, 0xd2, 0xce, 0x55, 0x17, 0x59,
    0x0b, 0x99, 0xfe, 0x65, 0x38, 0x02, 0xb5, 0xea, 0x4d, 0x95, 0x56, 0xa9, 0xf4, 0x64, 0xa9, 0xb7,
    0xff, 0x3f, 0x65, 0xe3, 0x06, 0x18, 0xf9, 0xc0, 0xb5, 0x29, 0xcf, 0x28, 0x1e, 0x0f, 0x63, 0xc2,
    0x7e, 0xc4, 0xe4, 0x3b, 0xb8, 0x34, 0x96, 0x24, 0x0b, 0x11, 0xf9, 0xca, 0xdc, 0xc9, 0xc6, 0x05,
    0xd2, 0x08, 0x25, 0x28, 0x68, 0xb0, 0x73, 0xf8, 0x90, 0x4d, 0xb1, 0x58, 0xbc, 0x4f, 0x35, 0x6b,
    0x55, 0xf1, 0xcc, 0xea, 0x10, 0xde, 0x0b, 0x34, 0x8f, 0x44, 0xa5, 0x0a, 0xe1, 0x0b, 0xd6, 0x3d,
    0xea, 0xbf, 0x30, 0xe5, 0x19, 0x3f, 0x6a, 0x7b, 0xbd, 0x65, 0x74, 0xfe, 0xb5, 0xde, 0x2b, 0x92,
    0x32, 0xac, 0x03, 0x06, 0xeb, 0x39, 0x3c, 0x62, 0xfb, 0xc0, 0xf0, 0xa6, 0x75, 0x39, 0xa9, 0x91,
    0x96, 0xbf, 0x30, 0xfe, 0x8d, 0x35, 0xf4, 0xab, 0x34, 0xa4, 0xb3, 0x29, 0xca, 0xf3, 0xef, 0x0d,
    0x14, 0x5d, 0x40, 0x5c, 0x99, 0x9d, 0xe3, 0x96, 0x47, 0xeb, 0xf2, 0x60, 0xcf, 0x6e, 0x66, 0x89,
    0x2d, 0x58, 0x4c, 0x13, 0xa1, 0x32, 0x24, 0x3a, 0x55, 0x55, 0x0d, 0xfc, 0x7c, 0x49, 0xc7, 0xe0,
    0xc3, 0x38, 0x37, 0xae, 0xb5, 0x72, 0xa0, 0xfd, 0xf4, 0x19, 0x71, 0x12, 0x9f, 0x46, 0xa2, 0x8b,
    0x2d, 0x6f, 0x69, 0x64, 0x9d, 0xd1, 0x01, 0x96, 0x17, 0xf4, 0x16, 0xaf, 0x16, 0x46, 0xb9, 0xe2,
    0x26, 0x60, 0x7e, 0x12, 0x63, 0x63, 0x8f, 0x1e, 0x78, 0x41, 0xd2, 0x75, 0x6f, 0x8c, 0x5b, 0x3e,
    0xb9, 0x42, 0x27, 0x31, 0x8c, 0x5b, 0x63, 0xdf, 0x7c, 0xa2, 0x2a, 0x9b, 0x49, 0x5c, 0xc2, 0xd4,
    0xc8, 0xa5, 0x57, 0x40, 0x5b, 0x44, 0xab, 0xf6, 0x26, 0xe3, 0x9b, 0x35, 0xd9, 0x96, 0x3f, 0x0d,
    0xe3, 0x51, 0x1e, 0x8f, 0x56, 0x9b, 0xdc, 0x16, 0x02, 0x19, 0x77, 0x29, 0x4d, 0x57, 0xc1, 0x8b,
    0xe1, 0xbe, 0x71, 0xa7, 0xdd, 0xca, 0x9e, 0x6d, 0x77, 0xfa, 0x6b, 0x9d, 0x15, 0x7c, 0xfe, 0x93,
    0xe7, 0xa1, 0x8d, 0x10, 0x81, 0xe3, 0xc3, 0xb3, 0xd1, 0x08, 0x5c, 0x34, 0xbd, 0x84, 0x5d, 0xfe,
    0xda, 0x54, 0xb6, 0xd1, 0xd2, 0x86, 0xa2, 0x21, 0x5b, 0x85, 0x8f, 0xac, 0x84, 0x9b, 0xe2, 0x01,
    0xe7, 0x81, 0x29, 0x83, 0xac, 0x9d, 0x8b, 0xfa, 0x92, 0xc9, 0x23, 0xe4, 0x74, 0xc0, 0x47, 0x1e,
    0xe0, 0x98, 0x09, 0x78, 0x50, 0x3d, 0x94, 0x7e, 0x20, 0xab, 0x38, 0x26, 0x53, 0x28, 0xb4, 0x7f,
    0x94, 0xa4, 0x6b, 0x4b, 0x8d, 0xc5, 0x45, 0x57, 0x22, 0xb2, 0x35, 0x39, 0x1f, 0x98, 0x7a, 0x5f,
    0xa8, 0xab, 0xc4, 0xe3, 0x0a, 0xf2, 0xd5, 0x80, 0x9a, 0xa4, 0x8e, 0xb3, 0x26, 0x79, 0x1e, 0xee,
    0xba, 0x02, 0x59, 0x92, 0x3c, 0x6e, 0x34, 0xdf, 0x75, 0x6e, 0xf9, 0xc6, 0x7d, 0x8d, 0x8b, 0xba,
    0x10, 0xf2, 0x2c, 0x65, 0xc7, 0xc7, 0x56, 0x64, 0xd4, 0xc5, 0xbc, 0x25, 0x21, 0x89, 0xca, 0xc2,
    0x71, 0x18, 0x53, 0x75, 0x33, 0x4d, 0x11, 0xee, 0xb5, 0xff, 0x09, 0x8d, 0x50, 0xa6, 0xb1, 0x55,
    0x54, 0x96, 0xb5, 0x29, 0x45, 0x19, 0xfa, 0x5d, 0x95, 0xa5, 0xc1, 0x6a, 0x4c, 0xee, 0x95, 0x47,
    0x3f, 0x0a, 0x70, 0xa0, 0xf2, 0x60, 0x06, 0xd6, 0x99, 0x7a, 0xd1, 0xae, 0x95, 0x8a, 0xd8, 0x0f,
    0x2a, 0x6f, 0x96, 0xc3, 0x23, 0x51, 0xdb, 0x03, 0x3c, 0xfd, 0x72, 0xfe, 0x0b, 0x3d, 0xa6, 0x26,
    0x69, 0x2c, 0x3d, 0xe0, 0xb7, 0x90, 0x56, 0xbc, 0x9e, 0xbe, 0xd5, 0xa1, 0x01, 0xa9, 0xfd, 0x1e,
    0x3c, 0x9b, 0x1b, 0xee, 0xc0, 0x53, 0x0a, 0xc9, 0x3d, 0xf8, 0xae, 0x2e, 0x3d, 0xed, 0x47, 0x38,
    0xa5, 0xa7, 0x34, 0xb1, 0xfb, 0xb9, 0x9d, 0xd7, 0xcc, 0x1d, 0xe2, 0x7e, 0x9e, 0x73, 0x5a, 0x22,
    0x42, 0xa6, 0x54, 0xc8, 0x63, 0xfc, 0x4a, 0x92, 0xb7, 0x1a, 0x56, 0x1d, 0x67, 0x36, 0x75, 0xb8,
    0xba, 0x81, 0x26, 0x17, 0x95, 0xeb, 0x85, 0x65, 0x07, 0x1e, 0x18, 0x47, 0xc3, 0x28, 0x4e, 0x16,
    0xd4, 0x1e, 0x3e, 0x95, 0x94, 0xd8, 0xe6, 0xda, 0x86, 0x36, 0xc6, 0x10, 0x98, 0x36, 0x1e, 0x9c,
    0x4b, 0x39, 0x4e, 0x7a, 0x51, 0xdd, 0x4b, 0xf1, 0x4d, 0x55, 0x97, 0xd1, 0xd1, 0x6d, 0x69, 0x5e,
    0x32, 0x73, 0x2c, 0x19, 0xc0, 0x77, 0xf2, 0x36, 0xc9, 0x37, 0xcb, 0x66, 0x16, 0xfa, 0x97, 0x3d,
    0x12, 0xa5, 0x25, 0x32, 0x1e, 0xe5, 0xb2, 0xce, 0x11, 0xca, 0x9c, 0x3e, 0x16, 0x82, 0x42, 0x34,
    0x34, 0x7d, 0x0a, 0xc4, 0xc6, 0xc4, 0xc0, 0xff, 0xc3, 0x40, 0xdb, 0xe1, 0xa0, 0x23, 0x6b, 0x76,
    0x79, 0x29, 0x21, 0xfb, 0xb7, 0x3a, 0x52, 0x6f, 0x10, 0xf1, 0x10, 0x91, 0x1b, 0xf9, 0xaa, 0xdd,
    0x9f, 0x76, 0x66, 0x93, 0x1d, 0xe4,
};

static const MessageEncodingTestVector sMessageEncodingTest0567 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x1E289512,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0567_Payload,
    sizeof(sMessageEncodingTest0567_Payload),
    sMessageEncodingTest0567_ExpectedEncoding,
    sizeof(sMessageEncodingTest0567_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0568_EncryptionKey =
{
    {
        0x43, 0x8b, 0x39, 0xa0, 0x86, 0xbe, 0x1b, 0xaa, 0xbe, 0x17, 0x1a, 0x39, 0xb7, 0x03, 0x1d, 0xc4,
    },
    {
        0x04, 0xd2, 0x3e, 0x90, 0x12, 0xdf, 0x12, 0x09, 0x99, 0x39, 0x52, 0x01, 0x61, 0x4c, 0xfa, 0xeb,
        0x1b, 0x95, 0xef, 0x3b,
    }
};
static const uint8_t sMessageEncodingTest0568_Payload[] =
{
    0x38, 0x04, 0xdf, 0xac, 0x9e, 0xef, 0x81, 0xfd, 0xa3, 0x4b, 0xd1, 0xe6, 0xd5, 0x85, 0x67, 0xbb,
    0x0e, 0x47, 0xa6, 0x8f, 0x47, 0x2d, 0x49, 0xa8, 0x8e, 0xb2, 0xe4, 0x70, 0xa9, 0x0d, 0xd5, 0xac,
    0xaa, 0x9e, 0x35, 0x9a, 0x47, 0x69, 0x6a, 0x07, 0xd6, 0xf7, 0xe0, 0x69, 0xab, 0x9b, 0x9b, 0x7c,
    0xa6, 0x85, 0x98, 0x1b, 0xb2, 0x58, 0xc1, 0xa9, 0xd6, 0x10, 0xdb, 0x38, 0x76, 0x5f, 0x25, 0x6f,
    0x1b, 0x00, 0x62, 0x55, 0xdf, 0xb7, 0x1c, 0x03, 0x34, 0xbc, 0xa5, 0x8f, 0xfc, 0x80, 0x4c, 0x1c,
    0x80, 0x1e, 0xef, 0x9a, 0x86, 0xbe, 0x5e, 0x80, 0x67, 0xaa, 0x00, 0x8c, 0xe7, 0xf9, 0xe0, 0x7f,
    0x57, 0x51, 0x9b, 0x49, 0xd2, 0x45, 0x7b, 0x02, 0xfa, 0xdb, 0x7d, 0x2c, 0x7b, 0xd5, 0x53, 0x7f,
    0x72, 0xbc, 0x5f, 0xa6, 0x63, 0x17, 0xa8, 0xf7, 0x2e, 0x91, 0x22, 0xdd, 0xc7, 0x07, 0x85, 0x9c,
    0x57, 0x05, 0x60, 0xb5, 0x9f, 0x5a, 0x38, 0xe0, 0x71, 0xeb, 0x5d, 0x2f, 0xee, 0xd7, 0xf2, 0xf7,
    0x2a, 0x4e, 0x30, 0xe3, 0x74, 0xee, 0xda, 0xcb, 0xfe, 0xea, 0xaf, 0xea, 0x25, 0xb5, 0x3a, 0xc1,
    0x6a, 0xcf, 0xfd, 0x06, 0x61, 0xc8, 0xf1, 0xea, 0xec, 0x55, 0x0a, 0x0b, 0x0d, 0x9e, 0x1c, 0x39,
    0x9e, 0x86, 0xac, 0xee, 0xed, 0x68, 0xd6, 0xf1, 0xaa, 0xf2, 0x61, 0x5b, 0x29, 0x1b, 0x95, 0x27,
    0x8e, 0x8c, 0x11, 0x60, 0x21, 0x55, 0x03, 0xa7, 0xee, 0x67, 0x43, 0x53, 0xd7, 0xa5, 0x11, 0x59,
    0xc3, 0xe1, 0x26, 0x29, 0x49, 0x51, 0x4f, 0xe4, 0x63, 0x37, 0xe8, 0x59, 0xf7, 0xe8, 0x8d, 0x9d,
    0x9e, 0xaa, 0xf1, 0x0c, 0xbe, 0x70, 0x4c, 0x1d, 0xf8, 0xf9, 0xa9, 0xcb, 0xcc, 0x0a, 0xd3, 0xce,
    0x5c, 0x2d, 0x48, 0x43, 0x41, 0x95, 0x68, 0x79, 0x9f, 0x6a, 0xc3, 0xd3, 0x70, 0xee, 0x86, 0x5d,
    0xa8, 0xe1, 0x17, 0x85, 0x41, 0x49, 0x09, 0x75, 0xed, 0x46, 0xe5, 0x76, 0xba, 0x0b, 0xb6, 0x9e,
    0x1f, 0x6c, 0x67, 0x75, 0x1d, 0x4f, 0xd0, 0x9c, 0x76, 0xbb, 0x2c, 0xfb, 0xa7, 0xf3, 0x6a, 0x10,
    0xf9, 0xa2, 0x29, 0xb7, 0x71, 0x6a, 0xf5, 0x3d, 0xdc, 0x71, 0xae, 0x55, 0x33, 0x1a, 0x93, 0xcd,
    0x7f, 0x23, 0xaa, 0xa2, 0x45, 0x5f, 0x93, 0xba, 0x06, 0xef, 0xf4, 0x4a, 0x9e, 0xc0, 0x79, 0xd5,
    0xb5, 0xc8, 0x09, 0x63, 0x4b, 0x7d, 0x5a, 0xc4, 0xae, 0xd0, 0xaf, 0x5c, 0xf9, 0x4d, 0xfb, 0xe3,
    0xa1, 0x5d, 0xb7, 0x0a, 0x65, 0x9c, 0xf2, 0x79, 0xe2, 0x84, 0x7a, 0x10, 0xde, 0xf4, 0x8c, 0x30,
    0x46, 0x7e, 0x7c, 0xf2, 0xb7, 0x62, 0x8b, 0x99, 0x7d, 0x8a, 0x31, 0xb8, 0x33, 0x47, 0xa0, 0xb3,
    0x49, 0x14, 0x4e, 0xca, 0xfb, 0xdb, 0x4a, 0xd6, 0x9d, 0x13, 0x1a, 0x76, 0x12, 0xab, 0xb1, 0x35,
    0xf1, 0x78, 0x6f, 0x16, 0x3c, 0x60, 0xa3, 0x0b, 0x02, 0x35, 0x36, 0x0e, 0x9b, 0xb3, 0x6e, 0x3d,
    0x56, 0xa1, 0xb9, 0x7e, 0xc8, 0x39, 0x08, 0xc9, 0x63, 0x66, 0x16, 0xba, 0x43, 0xdb, 0xa8, 0x81,
    0xbe, 0xaf, 0xcf, 0xf6, 0x89, 0x75, 0x41, 0x8b, 0x62, 0xed, 0x72, 0xd1, 0xb1, 0xd7, 0x5e, 0xab,
    0xcd, 0x7d, 0x30, 0xfa, 0x52, 0x94, 0xf6, 0xc3, 0x33, 0xa8, 0x9e, 0xf2, 0x23, 0x61, 0x7d, 0xdd,
    0xc8, 0xeb, 0x96, 0xf0, 0xec, 0x68, 0x8e, 0x92, 0x5a, 0xbf, 0x73, 0x6e, 0x8e, 0x5c, 0x19, 0xfa,
    0x53, 0x4a, 0xd6, 0x8a, 0xe2, 0xdc, 0x8b, 0xac, 0xbe, 0xa6, 0xed, 0xbe, 0x66, 0x18, 0x2c, 0x5d,
    0xce, 0xb2, 0x61, 0x78, 0x5e, 0x1f, 0x26, 0x10, 0xc1, 0xd6, 0x66, 0x59, 0xd3, 0x78, 0x0f, 0xc5,
    0xce, 0xe5, 0xa7, 0x70, 0x06, 0x32, 0x4d, 0x93, 0x6a, 0xe8, 0xf9, 0x77, 0xf1, 0xe0, 0xaf, 0x18,
    0x47, 0xa8, 0xa8, 0xef, 0x5e, 0x86, 0xda, 0x9f, 0x6c, 0x98, 0x76, 0x42, 0xb8, 0x8a, 0xf1, 0x14,
    0xaa, 0x6f, 0xc3, 0x90, 0x8c, 0x4c, 0x65, 0x87, 0x8e, 0x7a, 0xf4, 0x27, 0x90, 0xd6, 0xf5, 0x0a,
    0xd1, 0xd1, 0x66, 0x3f, 0x9a, 0xb9, 0xef, 0xf9, 0x7b, 0xbf, 0x79, 0xb3, 0x04, 0xaf, 0x10, 0x50,
    0xee, 0x95, 0xcf, 0x34, 0x4b, 0x16, 0x3d, 0xa9, 0x85, 0xb6, 0xf1, 0x03, 0xba, 0x75, 0xb2, 0x30,
    0xd6, 0x9e, 0xa9, 0x91, 0xd0, 0xbd, 0x95, 0x42, 0x26, 0x44, 0xff, 0xad, 0xc8, 0x8e, 0x02, 0x3c,
    0x25, 0x5e, 0xf3, 0xce, 0x36, 0xa9, 0x3a, 0x4a, 0xae, 0xa0, 0x86, 0x19, 0x49, 0x46, 0xc4, 0x28,
    0x6e, 0xd4, 0x74, 0xa7, 0xc4, 0x96, 0x8d, 0x47, 0xbc, 0x27, 0xeb, 0x6c, 0x6b, 0xcb, 0x3b, 0xc6,
    0xc3, 0xdc, 0x38, 0x93, 0xa1, 0x31, 0x77, 0x84, 0xf9, 0xf2, 0x98, 0x8d, 0x52, 0xe4, 0xa1, 0x6d,
    0x70, 0x8b, 0xd7, 0xb6, 0xdd, 0xab, 0xdd, 0xbf, 0x57, 0x07, 0xfc, 0x4c, 0x4d, 0x17, 0x50, 0x2c,
    0x2d, 0x22, 0x9e, 0x55, 0xeb, 0x8a, 0xe6, 0xb6, 0x6c, 0x52, 0x07, 0xf5, 0x29, 0x00, 0x6d, 0xcd,
    0xd1, 0xef, 0x8d, 0x2d, 0xff, 0x97, 0x66, 0x3c, 0x8d, 0x7f, 0x45, 0x01, 0xf5, 0xef, 0xcf, 0xe2,
    0x5c, 0x1d, 0xed, 0x33, 0x49, 0x50, 0x68, 0xc5, 0x75, 0xc1, 0x23, 0x27, 0xc3, 0x29, 0x80, 0x14,
    0x6a, 0xcb, 0x7f, 0x1d, 0x18, 0x09, 0x19, 0x25, 0x33, 0x7a, 0xf1, 0xf0, 0xd4, 0x6b, 0x40, 0x6f,
    0x5f, 0x33, 0xe8, 0x08, 0x05, 0x99, 0x04, 0x0d, 0xe9, 0xd5, 0xed, 0x86, 0xe0, 0xaa, 0xee, 0x30,
    0x6a, 0x07, 0x83, 0xc8, 0x1c, 0x9c, 0xfa, 0x2f, 0xe6, 0x82, 0x80, 0xb7, 0x65, 0x3f, 0x0d, 0x78,
    0xe8, 0xaa, 0xf0, 0x55, 0xe3, 0xc2, 0x6b, 0x39, 0xc4, 0xe2, 0xdf, 0x8a, 0x95, 0x53, 0x4a, 0xff,
    0x5d, 0xff, 0xbe, 0x70, 0x9f, 0x34, 0xb9, 0xa0, 0x10, 0xd7, 0x03, 0x97, 0xc4, 0x27, 0x7c, 0x03,
    0x58, 0x79, 0xc0, 0xe3, 0xc9, 0x47, 0x4e, 0xa2, 0x0f, 0xee, 0xdc, 0xea, 0x5f, 0x3f, 0x51, 0x72,
    0x64, 0x37, 0xde, 0x98, 0xfb, 0x5c, 0x0a, 0xb9, 0x59, 0x25, 0x5b, 0xa9, 0x84, 0x60, 0xcb, 0xdf,
    0xf5, 0xae, 0x7d, 0x50, 0x2e, 0xb5, 0xcd, 0x55, 0x3a, 0xa3, 0x9e, 0x8e, 0x69, 0xc6, 0x8d, 0x5a,
    0x26, 0x59, 0x97, 0x62, 0x58, 0xbd, 0xce, 0x5a, 0xa8, 0x0e, 0xfd, 0x1f, 0x07, 0x30, 0x46, 0x9d,
    0xfd, 0x7e, 0xdf, 0xc9, 0xc2, 0x4a, 0xc9, 0xe3, 0x8f, 0x2f, 0x19, 0xc6, 0x93, 0xbf, 0x42, 0xac,
    0x3c, 0xa9, 0xfd, 0xf8, 0x94, 0xf4, 0xfc, 0x77, 0x91, 0x3d, 0xb3, 0xd0, 0xfe, 0xac, 0xf5, 0x91,
    0x5f, 0xcb, 0x0d, 0xf6, 0xbe, 0x61, 0x28, 0xc8, 0xbd, 0x8b, 0xcc, 0x25, 0xd1, 0xe8, 0xd0, 0x6c,
    0x46, 0x12, 0x9b, 0xfa, 0x78, 0xec, 0xea, 0x0a, 0x9e, 0xb1, 0x83, 0x22, 0x0b, 0x1b, 0x23, 0x61,
    0x3e, 0x79, 0x4f, 0xc6, 0x87, 0x4f, 0xfe, 0x3d, 0x49, 0xbd, 0x28, 0xda, 0x68, 0x6f, 0x45, 0x05,
    0x32, 0x21, 0xbf, 0x0e, 0xa7, 0x34, 0x76, 0x09, 0x37, 0xde, 0xed, 0x49, 0x6a, 0x37, 0x38, 0x18,
    0x40, 0x8a, 0xfb, 0x6d, 0x4d, 0x15, 0x16, 0x0f, 0x8a, 0xda, 0x37, 0xe8, 0x14, 0x46, 0xde, 0x77,
    0xcc, 0x18, 0x59, 0xd3, 0x16, 0x89, 0x98, 0xa4, 0xea, 0x4b, 0x58, 0x79, 0xa9, 0x9d, 0x6c, 0x15,
    0x25, 0x2f, 0x8b, 0xbc, 0xd8, 0x2d, 0x04, 0x37, 0xab, 0x08, 0x8b, 0x4f, 0x20, 0xa3, 0xea, 0x95,
    0x72, 0x11, 0xec, 0x1a, 0x4d, 0x06, 0x8f, 0xa4, 0x46, 0xe6, 0xb1, 0xee, 0x41, 0xb2, 0xb5, 0xf8,
    0x0c, 0x16, 0x57, 0x51, 0x66, 0xd8, 0xdf, 0xb8, 0xab, 0xbd, 0x5d, 0x83, 0x72, 0x8c, 0x74, 0xe3,
};

static const uint8_t sMessageEncodingTest0568_ExpectedEncoding[] =
{
    0x10, 0x28, 0x99, 0x03, 0xea, 0xb0, 0x77, 0x22, 0x12, 0x2c, 0x29, 0x85, 0xd6, 0xa8, 0xb4, 0xb3,
    0x3d, 0x49, 0x63, 0x03, 0x21, 0x32, 0x6e, 0x61, 0x37, 0xe0, 0x00, 0x57, 0xdd, 0x41, 0x85, 0x0b,
    0x06, 0x3c, 0xf1, 0x9a, 0xcf, 0x1d, 0xb1, 0xcf, 0x38, 0x70, 0x63, 0x4b, 0x37, 0xf4, 0x09, 0xb7,
    0x1a, 0xfe, 0x69, 0x11, 0x61, 0xdb, 0x06, 0x34, 0x69, 0xcb, 0x72, 0x5a, 0xb7, 0x54, 0x78, 0x72,
    0xf4, 0xd1, 0x23, 0x62, 0xfe, 0xe1, 0xc3, 0x72, 0xe2, 0x60, 0x1b, 0x84, 0xee, 0x70, 0xc0, 0xae,
    0x68, 0x68, 0x21, 0x3e, 0x56, 0x95, 0x57, 0xb2, 0x9e, 0x9c, 0xb9, 0x72, 0x14, 0xd9, 0x36, 0x5a,
    0x11, 0xb8, 0xa1, 0x57, 0x03, 0x41, 0x77, 0xe1, 0x4b, 0x77, 0x7a, 0xe8, 0x04, 0x0d, 0x40, 0xd8,
    0xcb, 0xd0, 0x5b, 0xce, 0x17, 0x1e, 0x24, 0x81, 0xe7, 0x45, 0xf7, 0xa9, 0x0a, 0xb5, 0x8f, 0xc0,
    0xf2, 0x86, 0x3f, 0x98, 0x1c, 0xcd, 0x7c, 0x99, 0x5c, 0x23, 0x7d, 0x68, 0xa0, 0xb8, 0x32, 0xd1,
    0x73, 0x4f, 0xf5, 0x9a, 0xa0, 0x56, 0xee, 0xf1, 0x94, 0x34, 0x08, 0x9e, 0x8b, 0x24, 0xf3, 0xaf,
    0x19, 0xcf, 0x8a, 0x55, 0xc1, 0xa7, 0x78, 0x93, 0x1e, 0x68, 0xec, 0x84, 0xfb, 0x15, 0xd0, 0x12,
    0x6f, 0xf6, 0xdd, 0x98, 0xec, 0x71, 0x93, 0x5d, 0x2b, 0xc3, 0xc9, 0x55, 0xbf, 0x54, 0x7b, 0x61,
    0xb7, 0x6f, 0x83, 0x21, 0xe1, 0xe2, 0x70, 0x19, 0x24, 0x18, 0xeb, 0x34, 0x72, 0x88, 0xe3, 0xd3,
    0xad, 0x47, 0x38, 0x62, 0xf4, 0xd1, 0x31, 0x67, 0xf6, 0x31, 0x3a, 0xa8, 0x89, 0xc1, 0x55, 0xbe,
    0xcc, 0x8a, 0x98, 0x47, 0x80, 0x6b, 0x12, 0x74, 0xf7, 0xa7, 0xf7, 0x9e, 0x94, 0x0f, 0xec, 0x6d,
    0x91, 0xae, 0xc7, 0xfd, 0x85, 0x9f, 0x90, 0x7a, 0xb3, 0x7a, 0x2c, 0xf8, 0x0c, 0xe7, 0xcd, 0x11,
    0x7f, 0x2d, 0x2a, 0x1a, 0xd3, 0xdb, 0x69, 0x53, 0xc6, 0x52, 0xf3, 0x2f, 0x6b, 0xee, 0xba, 0x15,
    0x32, 0xbc, 0x60, 0x38, 0x2e, 0xe4, 0xfa, 0x5e, 0xa7, 0x46, 0x50, 0x15, 0x44, 0xcf, 0x80, 0xc4,
    0x87, 0x33, 0xc4, 0x1a, 0xd4, 0xe6, 0x18, 0xfa, 0x47, 0x65, 0x52, 0xe4, 0x48, 0xf8, 0xd3, 0x4f,
    0x5d, 0x08, 0xaf, 0xdb, 0xd9, 0xdf, 0x66, 0x7d, 0x00, 0xc4, 0x3e, 0xdd, 0x90, 0x09, 0x92, 0x6b,
    0x10, 0x0f, 0x50, 0x86, 0x2d, 0xc6, 0x79, 0x2c, 0x27, 0x27, 0xce, 0x45, 0x93, 0xcd, 0xc0, 0xa7,
    0xed, 0x79, 0x5d, 0x0b, 0x68, 0xa6, 0x34, 0x01, 0x6b, 0xf8, 0x2c, 0x89, 0xaf, 0x0b, 0x6a, 0x77,
    0x5b, 0x63, 0x50, 0xfa, 0x8c, 0xdc, 0x59, 0xc5, 0x31, 0x7a, 0xa2, 0x41, 0xea, 0x49, 0xb0, 0x53,
    0xff, 0x1d, 0x67, 0x15, 0x5c, 0x7e, 0xa7, 0xac, 0x32, 0xda, 0xab, 0x8b, 0xf8, 0x93, 0x2c, 0x39,
    0x40, 0xed, 0xdc, 0xc1, 0xa0, 0x31, 0x9f, 0x3b, 0x4f, 0xb1, 0x24, 0x10, 0xd1, 0x56, 0x07, 0xf1,
    0x16, 0xfd, 0x6f, 0x90, 0x78, 0x8d, 0x4e, 0x80, 0x69, 0x19, 0xa7, 0xc6, 0x1f, 0x7d, 0x80, 0x93,
    0xcb, 0xba, 0xfb, 0x08, 0x79, 0x08, 0x74, 0x0b, 0xdb, 0xe1, 0x20, 0xc5, 0xbd, 0x8f, 0xd3, 0xda,
    0xc4, 0x9a, 0x42, 0x11, 0x02, 0x01, 0x3e, 0xce, 0xc6, 0x59, 0x09, 0xca, 0x99, 0xc5, 0xfd, 0x3e,
    0xf6, 0xb1, 0xdb, 0x92, 0x16, 0xbb, 0x1d, 0xd8, 0xcf, 0x6d, 0x2f, 0xb5, 0x8b, 0x11, 0x05, 0xcb,
    0x91, 0xb0, 0xc3, 0x95, 0x71, 0x5c, 0xd2, 0xb1, 0x80, 0x0c, 0x54, 0x6d, 0x1f, 0x0f, 0x37, 0xbd,
    0x4b, 0xe0, 0x41, 0x7f, 0x10, 0xdc, 0x7d, 0x9e, 0x56, 0x05, 0xd4, 0xee, 0xa8, 0x95, 0x1d, 0x58,
    0xf7, 0x8b, 0xa3, 0x8d, 0xd1, 0xd1, 0x40, 0x6f, 0xab, 0x02, 0xf1, 0x1c, 0xd1, 0x41, 0x5d, 0xca,
    0x10, 0x62, 0xef, 0x31, 0xde, 0x79, 0x7e, 0x6e, 0x5b, 0x1a, 0x4b, 0xf3, 0xb0, 0x77, 0x17, 0x25,
    0x3b, 0xef, 0x7e, 0x79, 0xc3, 0xb5, 0xac, 0xf7, 0x2b, 0xf4, 0x2a, 0xc6, 0x57, 0xab, 0xaa, 0x12,
    0x84, 0xb7, 0x3f, 0x54, 0xa9, 0xb2, 0x9a, 0x9e, 0xcb, 0xd3, 0xb7, 0x2d, 0x80, 0x9f, 0x7f, 0x12,
    0x98, 0xbe, 0x2c, 0x06, 0x63, 0x05, 0x47, 0x9c, 0xde, 0x20, 0x83, 0x67, 0x47, 0x7f, 0x75, 0x61,
    0x73, 0xde, 0xdc, 0x15, 0xfd, 0x22, 0xad, 0x2c, 0x34, 0x42, 0x48, 0x7c, 0x2e, 0xe3, 0x1d, 0x37,
    0x2c, 0x64, 0x24, 0xe4, 0x95, 0x71, 0x34, 0x33, 0xbb, 0x67, 0xf5, 0xb6, 0x50, 0xa0, 0xa2, 0xcc,
    0x75, 0x73, 0x90, 0x29, 0xad, 0x38, 0xa7, 0x17, 0x63, 0x86, 0x00, 0xc3, 0x2d, 0x3b, 0x4b, 0x23,
    0x1b, 0x0e, 0xde, 0x2a, 0xf0, 0xc4, 0xba, 0x1e, 0x9c, 0x74, 0xcb, 0xe4, 0x41, 0x68, 0x55, 0xc2,
    0x3f, 0x7d, 0xbc, 0x5b, 0xe3, 0xd9, 0xaf, 0x5b, 0x61, 0x8a, 0xc6, 0x1c, 0xa7, 0xa4, 0x4b, 0x37,
    0xbe, 0x6e, 0x2a, 0x9d, 0x34, 0xcd, 0x79, 0x82, 0x39, 0x78, 0x44, 0xcf, 0x58, 0x40, 0xf7, 0x21,
    0x3f, 0x5e, 0x0f, 0x0e, 0x62, 0x1b, 0xb8, 0x98, 0xad, 0x3d, 0x7a, 0x0f, 0xf0, 0x13, 0x9f, 0x75,
    0xb4, 0x1b, 0xf3, 0xc5, 0x59, 0x65, 0xf4, 0x4a, 0x16, 0xc5, 0x22, 0xad, 0xda, 0x56, 0xae, 0x31,
    0x82, 0x2c, 0x75, 0x21, 0xc9, 0xfa, 0x4b, 0x7e, 0x32, 0x2c, 0x25, 0x1e, 0xdf, 0x1f, 0x51, 0x55,
    0xe3, 0xe7, 0xba, 0x27, 0x15, 0x1b, 0xcf, 0x83, 0x28, 0x92, 0xd8, 0xbc, 0x84, 0x12, 0x4c, 0x70,
    0x84, 0xe6, 0x46, 0x05, 0xd4, 0x1d, 0xab, 0xbf, 0x34, 0x5c, 0x7a, 0x34, 0xff, 0xa9, 0xb7, 0x30,
    0x42, 0xb5, 0x88, 0xc0, 0xc3, 0xfa, 0xfc, 0x80, 0xcb, 0x48, 0x33, 0x6b, 0x31, 0xb3, 0x3b, 0xb9,
    0x26, 0x7f, 0x6b, 0x7f, 0x69, 0x22, 0x1e, 0x65, 0x9a, 0xa0, 0x80, 0x47, 0x90, 0x8e, 0x4b, 0xa2,
    0xd7, 0xc8, 0xa4, 0x76, 0xeb, 0xff, 0x6f, 0x19, 0x57, 0xcd, 0x9c, 0xee, 0xab, 0x67, 0x31, 0x66,
    0x28, 0x01, 0x08, 0xcd, 0x3d, 0x4e, 0x44, 0xeb, 0x6e, 0x78, 0xc2, 0xc7, 0xf5, 0xb8, 0xd9, 0x2b,
    0x7d, 0xfa, 0xbc, 0xf9, 0x1f, 0x01, 0x25, 0x8d, 0xaa, 0x8a, 0xaa, 0x34, 0x4a, 0xc0, 0x87, 0xd8,
    0x04, 0xff, 0x3a, 0x29, 0x9c, 0xa3, 0xaa, 0xb4, 0x81, 0x4a, 0x8b, 0x65, 0xa6, 0x37, 0x73, 0x1d,
    0x2b, 0xda, 0xdb, 0x05, 0x50, 0x2d, 0xf5, 0x3b, 0xe9, 0x69, 0xad, 0x5e, 0xee, 0xf7, 0x04, 0x2d,
    0xcb, 0x47, 0x3f, 0xc6, 0xea, 0xdc, 0x2c, 0x64, 0xd2, 0x96, 0xe2, 0xff, 0x3a, 0x7b, 0x40, 0x99,
    0x8a, 0xcc, 0x6d, 0x94, 0x3e, 0x74, 0x5a, 0x27, 0xad, 0xe7, 0xce, 0x64, 0x57, 0xf7, 0x4b, 0x60,
    0xeb, 0x91, 0x15, 0xca, 0x5a, 0x98, 0xfc, 0xfb, 0x08, 0xaf, 0xc3, 0x3c, 0x3b, 0xf8, 0x8c, 0xac,
    0x22, 0x0f, 0xe6, 0xe3, 0x28, 0xa7, 0xba, 0x69, 0xe7, 0x4f, 0x76, 0x63, 0x71, 0xd6, 0x04, 0x74,
    0x6a, 0x72, 0x96, 0xd4, 0x4f, 0x45, 0xcb, 0xe2, 0x9a, 0x5f, 0xc3, 0xdd, 0x03, 0xd0, 0x83, 0xda,
    0x31, 0x00, 0xb5, 0x1a, 0xdd, 0xbd, 0xd0, 0x87, 0x71, 0x01, 0xfb, 0xdf, 0x1a, 0x0e, 0x97, 0xd0,
    0x40, 0x5a, 0xc7, 0xb3, 0x7a, 0x11, 0x6b, 0x53, 0x3b, 0x85, 0x78, 0xe2, 0xb9, 0x82, 0x43, 0x38,
    0x21, 0xfd, 0xdf, 0xe6, 0x43, 0xa0, 0x61, 0xb8, 0xa1, 0xec, 0x4c, 0x9f, 0x12, 0x3f, 0x1a, 0x45,
    0x8b, 0xe5, 0xf1, 0xd9, 0x5e, 0x25, 0xeb, 0x29, 0xa4, 0x5b, 0x1c, 0x23, 0x97, 0xab, 0x4b, 0x2f,
    0x25, 0x5d, 0xe4, 0x9c, 0x01, 0x2d, 0xf1, 0x4e, 0xd8, 0x8b, 0xfe, 0x51, 0xe3, 0x84, 0x7c, 0x18,
    0xcc, 0xb8, 0x63, 0x26, 0xac, 0x9e, 0x2a, 0x8a, 0x8f, 0x66, 0xfa, 0x18, 0x28, 0xef, 0xb4, 0x89,
    0xf4, 0x8d, 0x5c, 0x92, 0x52, 0xa9, 0xc7, 0xd5, 0xb9, 0x68, 0xae, 0xa5,
};

static const MessageEncodingTestVector sMessageEncodingTest0568 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB0EA0399,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2277,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0568_EncryptionKey,
    sMessageEncodingTest0568_Payload,
    sizeof(sMessageEncodingTest0568_Payload),
    sMessageEncodingTest0568_ExpectedEncoding,
    sizeof(sMessageEncodingTest0568_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0569_EncryptionKey =
{
    {
        0xac, 0x62, 0x3c, 0x75, 0xc4, 0x87, 0x93, 0x81, 0x08, 0x97, 0xbc, 0x45, 0xe4, 0x8a, 0x28, 0x8c,
    }
};
static const uint8_t sMessageEncodingTest0569_Payload[] =
{
    0xe4, 0x23, 0x7f, 0x03, 0x4c, 0xe0, 0xdf, 0x84, 0x87, 0x04, 0x7c, 0x09, 0x5e, 0x15, 0x7b, 0xc6,
    0xfa, 0xa3, 0x22, 0x08, 0xdd, 0xbf, 0xaf, 0x2b, 0x47, 0xa3, 0x1a, 0x88, 0xc7, 0xd8, 0xc1, 0xb9,
    0x9c, 0x04, 0x53, 0x2e, 0x2c, 0x18, 0x90, 0x09, 0x74, 0xf3, 0xb0, 0x7e, 0x99, 0x12, 0xe8, 0x56,
    0x30, 0x17, 0x39, 0x1f, 0x70, 0x47, 0xfd, 0xba, 0xa5, 0xca, 0x68, 0x6c, 0x75, 0xfd, 0x8c, 0xdd,
    0xa2, 0xc3, 0xc0, 0xbd, 0x29, 0x3d, 0x09, 0x43, 0xe3, 0xdb, 0x9c, 0x46, 0x8c, 0xf5, 0x57, 0x9b,
    0xd4, 0xb7, 0xd8, 0xe1, 0x1e, 0xdf, 0x5f, 0xbe, 0xc3, 0x11, 0x54, 0x19, 0xd9, 0x4c, 0x65, 0x80,
    0x5e, 0x02, 0x09, 0x94, 0x1e, 0x35, 0xd3, 0xca, 0x99, 0x20, 0x67, 0x0e, 0x41, 0x6f, 0x12, 0xdd,
    0x60, 0x2d, 0x64, 0x65, 0x16, 0x2f, 0xf2, 0x8b, 0xad, 0x4d, 0xb0, 0xbc, 0x49, 0xfc, 0x39, 0x92,
    0x81, 0x0f, 0x18, 0xb9, 0x9b, 0x2e, 0xf1, 0x82, 0x0f, 0x13, 0x38, 0xd7, 0xb1, 0x98, 0xe5, 0x69,
    0xfc, 0x96, 0x62, 0xa7, 0x37, 0xa4, 0x42, 0x6c, 0x24, 0x97, 0xc6, 0x99, 0x3c, 0xc9, 0x8d, 0x72,
    0xf8, 0x4d, 0xec, 0x3a, 0xb5, 0x24, 0xea, 0x1e, 0x37, 0xb7, 0x6e, 0x6f, 0x6e, 0x5e, 0x47, 0x5e,
    0xc3, 0x98, 0xd6, 0xec, 0x5c, 0xfb, 0x4a, 0x0f, 0x9e, 0xbd, 0xa4, 0x65, 0xde, 0x54, 0x10, 0x82,
    0x3b, 0xac, 0xba, 0x07, 0x44, 0xd0, 0x63, 0xef, 0x21, 0x4d, 0x2e, 0x5b, 0xb2, 0x72, 0xad, 0x18,
    0xf6, 0x36, 0x07, 0xc0, 0xcb, 0x03, 0xdf, 0xb8, 0xf5, 0x01, 0xed, 0xc7, 0x54, 0x3d, 0xa9, 0x37,
    0x73, 0x93, 0x4e, 0x03, 0x9f, 0xc7, 0xe7, 0x91, 0x0a, 0x72, 0x8c, 0x7a, 0xa1, 0xff, 0x87, 0x59,
    0xee, 0xa5, 0xab, 0xfe, 0xbc, 0x61, 0x98, 0x6b, 0x9b, 0x2b, 0xe0, 0x00, 0xae, 0xaf, 0x6d, 0x87,
    0x53, 0x87, 0xc6, 0x89, 0xa8, 0x91, 0x48, 0xf6, 0x16, 0x49, 0xae, 0xf5, 0xb8, 0x9e, 0x8c, 0x00,
    0x2f, 0x0c, 0xe1, 0xc7, 0xb2, 0x25, 0xd1, 0xb8, 0x5d, 0x69, 0x71, 0xd4, 0x6a, 0x7d, 0x62, 0x74,
    0x26, 0x13, 0xf8, 0x6d, 0x6a, 0xba, 0x8f, 0xb7, 0x96, 0x6d, 0x06, 0x96, 0xc8, 0x14, 0x18, 0x1e,
    0x50, 0x3c, 0x50, 0x8a, 0xce, 0x27, 0x89, 0xa9, 0xa7, 0x7c, 0x66, 0x83, 0xd3, 0x5a, 0x9d, 0x93,
    0x45, 0x3b, 0xba, 0x80, 0xba, 0x77, 0xaf, 0x00, 0xd2, 0xa3, 0x40, 0xd2, 0xa9, 0x49, 0x98, 0x14,
    0x76, 0x51, 0x66, 0x3e, 0x0f, 0xa3, 0xc7, 0x3e, 0x04, 0x86, 0x77, 0xa2, 0x04, 0xb3, 0x39, 0xae,
    0xe6, 0x78, 0x9d, 0x29, 0xdd, 0xa3, 0x0e, 0x1b, 0x0a, 0x1b, 0xe2, 0x39, 0x6d, 0x27, 0xaf, 0x75,
    0x43, 0xef, 0x05, 0xc5, 0x3f, 0x70, 0xa6, 0xec, 0x15, 0x1d, 0x2c, 0x32, 0x91, 0xdf, 0x67, 0x3b,
    0xdf, 0x0b, 0xaa, 0xc0, 0xc1, 0xa8, 0xe2, 0xe8, 0x59, 0xf1, 0x4d, 0xd4, 0x5c, 0x2a, 0x2e, 0x0c,
    0x96, 0xb5, 0x5e, 0x02, 0xb1, 0x1e, 0x1e, 0x4e, 0x61, 0x03, 0x55, 0xb4, 0xba, 0xd7, 0x09, 0x29,
    0x06, 0x0e, 0x3b, 0x44, 0x6a, 0xbb, 0x5b, 0x0b, 0xd3, 0xb4, 0x25, 0xf3, 0x7f, 0x91, 0x44, 0xe2,
    0x3d, 0xf9, 0x5d, 0x08, 0x02, 0xda, 0x21, 0xbb, 0x33, 0x19, 0x15, 0xc2, 0x20, 0x31, 0x15, 0xde,
    0x8a, 0xcf, 0xed, 0xdf, 0x4b, 0x4a, 0x78, 0xf2, 0x9d, 0x75, 0xb2, 0x55, 0x8d, 0xfa, 0xc0, 0x54,
    0xfa, 0x4b, 0xb8, 0x51, 0xdb, 0x29, 0x65, 0x0e, 0xdf, 0x1f, 0xd2, 0xd0, 0x7b, 0x67, 0xc0, 0x10,
    0x80, 0xa1, 0xd1, 0x26, 0x5b, 0x7c, 0x10, 0xda, 0xd3, 0x95, 0x69, 0xfe, 0x07, 0xa2, 0x2c, 0x80,
    0xc6, 0xf1, 0x66, 0x7a, 0x9a, 0x1b, 0xc7, 0xb8, 0x69, 0x9d, 0xce, 0x7b, 0xa6, 0x9d, 0xa2, 0xed,
    0x13, 0xa5, 0x79, 0xda, 0x5e, 0x8e, 0x85, 0xbd, 0xe8, 0x3e, 0x34, 0x30, 0xe5, 0x54, 0xa7, 0xa4,
    0xa4, 0xbf, 0x8d, 0xb0, 0x25, 0x30, 0x07, 0x38, 0xa7, 0xca, 0xc0, 0xba, 0x2b, 0x24, 0xea, 0x53,
    0xc1, 0x0a, 0xaf, 0x57, 0x9b, 0xb2, 0x10, 0x00, 0x6c, 0xef, 0xbb, 0x7f, 0x64, 0x79, 0xc7, 0x39,
    0x59, 0x04, 0x1c, 0x84, 0x5a, 0x39, 0x60, 0xa9, 0x7d, 0x19, 0x42, 0xd7, 0x0e, 0xd7, 0x57, 0xb9,
    0x80, 0x5e, 0x51, 0x5f, 0xa1, 0x80, 0xb9, 0x89, 0x7c, 0xe1, 0xc7, 0x37, 0x56, 0xf4, 0x90, 0x33,
    0xa7, 0xbc, 0x35, 0xe9, 0x94, 0x34, 0x66, 0x4e, 0xff, 0xc0, 0x85, 0x06, 0xf7, 0xf1, 0x43, 0xdb,
    0x4e, 0x92, 0xab, 0x62, 0x95, 0x10, 0x1c, 0x52, 0x05, 0xb5, 0xb0, 0x38, 0xc5, 0xf1, 0x2f, 0xd2,
    0x78, 0x96, 0x5b, 0x74, 0x70, 0x9e, 0x54, 0x52, 0x39, 0x3d, 0x5b, 0xc5, 0x39, 0x68, 0x07, 0x63,
    0x8c, 0x33, 0x5c, 0x8f, 0xad, 0xbd, 0x82, 0x56, 0xbd, 0x39, 0xf0, 0xd7, 0xe8, 0x35, 0xef, 0x3f,
    0xbb, 0x12, 0x09, 0xea, 0x94, 0xf2, 0xa6, 0x84, 0xbe, 0xc4, 0x11, 0xdf, 0x00, 0xde, 0xb9, 0x25,
    0xcb, 0x3b, 0x03, 0x8d, 0xdc, 0xab, 0x83, 0x0e, 0x93, 0x93, 0xe8, 0x45, 0x14, 0xb2, 0x22, 0xaf,
    0xb4, 0xc2, 0x61, 0x25, 0xad, 0x31, 0xc5, 0xd3, 0x6c, 0x20, 0xb3, 0x4a, 0x5a, 0x9c, 0x05, 0x4b,
    0xbd, 0x97, 0x31, 0xf2, 0x3c, 0xbe, 0x67, 0x0a, 0xa4, 0x5f, 0x22, 0xd8, 0xf8, 0xd6, 0xb6, 0xa5,
    0x62, 0x62, 0xf1, 0xb6, 0xb0, 0xce, 0x06, 0x1c, 0x2e, 0xaf, 0x88, 0x9e, 0x81, 0x1f, 0x25, 0xfd,
    0xfa, 0x8c, 0xdb, 0x19, 0x33, 0x0f, 0x09, 0xb9, 0xe4, 0xb5, 0xe6, 0x2a, 0x8b, 0x2e, 0xf5, 0xb9,
    0x25, 0x20, 0xa7, 0x99, 0x64, 0x41, 0x2a, 0xcf, 0xb0, 0xec, 0xe5, 0xaf, 0x49, 0x1a, 0x56, 0x7c,
    0x16, 0xd5, 0x63, 0x12, 0xab, 0x80, 0xac, 0xf9, 0x6c, 0xa5, 0x9f, 0x95, 0x8c, 0x4c, 0x16, 0xaf,
    0x1b, 0xfa, 0xff, 0xc5, 0x84, 0x4f, 0xd5, 0x4f, 0x59, 0x6b, 0x00, 0xae, 0x6a, 0x0b, 0xde, 0x95,
    0x76, 0x00, 0xd0, 0x55, 0x82, 0xff, 0xac, 0x53, 0x64, 0x71, 0x97, 0xb0, 0xee, 0x4d, 0x9f, 0x6f,
    0x5e, 0x98, 0x5c, 0x0e, 0xaa, 0x23, 0x62, 0xbc, 0x75, 0x05, 0x02, 0xbc, 0x2e, 0x69, 0x14, 0x0e,
    0x44, 0x3e, 0x25, 0x16, 0x2c, 0x09, 0x3d, 0x57, 0x02, 0x57, 0x43, 0xa4, 0x65, 0xa5, 0x25, 0x60,
    0x4f, 0x12, 0x3c, 0xb8, 0x7a, 0xe1, 0x1a, 0x24, 0x06, 0xe1, 0x91, 0xc7, 0xaf, 0x26, 0x8a, 0x72,
    0x2e, 0x3d, 0xc8, 0xe4, 0xdf, 0x4a, 0x0d, 0xf5, 0xb3, 0x22, 0x2a, 0x65, 0xbe, 0xd9, 0xb5, 0xff,
    0x9e, 0xf8, 0x69, 0xf5, 0x55, 0x1c, 0x94, 0x66, 0x9a, 0x58, 0xb5, 0x3b, 0x5c, 0xe2, 0x2b, 0xd2,
    0x58, 0xe3, 0x10, 0xac, 0x82, 0x3b, 0x49, 0xcb, 0x14, 0x5e, 0xb3, 0x1b, 0xc3, 0xda, 0x9f, 0x9e,
    0xd2, 0x34, 0x24, 0x5d, 0x77, 0x81, 0x22, 0xe7, 0x0c, 0x33, 0x4e, 0x6c, 0x43, 0xf7, 0xf4, 0x88,
    0xef, 0x8b, 0x18, 0xc1, 0xc4, 0x8a, 0xd6, 0x33, 0x22, 0xb6, 0x8c, 0x4b, 0xb1, 0x3e, 0x87, 0x09,
    0x0d, 0x05, 0xf4, 0xe4, 0x2d, 0x41, 0x7d, 0x29, 0x60, 0x08, 0x20, 0xc4, 0x11, 0x02, 0x34, 0x69,
    0xfe, 0xdb, 0x8e, 0x2c, 0x95, 0xa9, 0x34, 0x37, 0x8d, 0x7c, 0xb8, 0x3b, 0xc3, 0x42, 0x6f, 0x40,
    0x76, 0x40, 0x84, 0x08, 0xd5, 0x40, 0xf4, 0x51, 0xc3, 0x8b, 0x7a, 0x27, 0x83, 0x3e, 0x06, 0x3f,
    0x0f, 0x1b, 0x3a, 0x93, 0x68, 0x59, 0x1a, 0x3e, 0x8f, 0x45, 0x24, 0xf4, 0xb8, 0xbc, 0x02, 0x44,
    0x59, 0x90, 0x4a, 0x82, 0xe6, 0x7a, 0xcb, 0x85, 0x9c, 0x78, 0x15, 0x30, 0xbb, 0x30, 0xb8, 0x84,
};

static const uint8_t sMessageEncodingTest0569_ExpectedEncoding[] =
{
    0x20, 0x28, 0x71, 0xb9, 0xf3, 0xac, 0xeb, 0x25, 0x68, 0x9a, 0x0f, 0xfd, 0x23, 0xf1, 0x32, 0x41,
    0xf8, 0x43, 0x0d, 0x55, 0x65, 0xa7, 0xdf, 0x2c, 0x8c, 0xc6, 0xa6, 0x2f, 0xa6, 0x64, 0xbb, 0x5f,
    0xe1, 0x58, 0xb8, 0xa2, 0x30, 0xb0, 0xfe, 0xc5, 0x9c, 0x3a, 0x05, 0xdd, 0x32, 0x77, 0xf9, 0x4d,
    0xf0, 0xa4, 0x8b, 0x8f, 0x39, 0x21, 0x58, 0xaf, 0x3b, 0x9c, 0xb6, 0x64, 0x4f, 0x42, 0xfa, 0x61,
    0xc4, 0x67, 0x1f, 0xd1, 0x00, 0xc2, 0x39, 0xef, 0xd4, 0xa4, 0x79, 0xb6, 0x69, 0xde, 0xd3, 0x11,
    0xdb, 0x58, 0x0e, 0x0d, 0xf9, 0xd1, 0x87, 0x9b, 0x1d, 0xe5, 0x49, 0xec, 0x9c, 0xce, 0x21, 0xec,
    0x85, 0x07, 0x8c, 0x7d, 0x4f, 0x2e, 0x9e, 0xb1, 0xd5, 0x30, 0x03, 0xb5, 0xad, 0xf6, 0xc2, 0xe4,
    0xa2, 0x3c, 0x5b, 0xfc, 0xf3, 0x9c, 0x6c, 0x3b, 0xc6, 0xb5, 0x56, 0x5c, 0x1e, 0x07, 0x4b, 0x02,
    0x27, 0x80, 0xf3, 0x27, 0x3e, 0xa2, 0xa9, 0x87, 0x70, 0xb7, 0xbc, 0x55, 0xc2, 0xa5, 0x2a, 0x5a,
    0xdf, 0x9d, 0xd4, 0x69, 0x8b, 0x0a, 0xcc, 0x29, 0x0c, 0xed, 0x12, 0x5e, 0xe4, 0x08, 0x56, 0x9b,
    0x51, 0x26, 0x49, 0x1f, 0xe0, 0x0a, 0x4e, 0x83, 0x02, 0xc5, 0x0c, 0x89, 0x9c, 0x83, 0xa7, 0x6f,
    0x42, 0xcf, 0x35, 0x85, 0x62, 0x33, 0x06, 0xeb, 0xed, 0x47, 0x81, 0xde, 0xaa, 0x9b, 0x5c, 0x86,
    0x46, 0xef, 0x1d, 0x43, 0xbf, 0xd3, 0xd4, 0xbb, 0xb8, 0xf4, 0x60, 0x5f, 0xf2, 0x4c, 0xbe, 0x93,
    0x32, 0x2f, 0x39, 0xc1, 0x0b, 0x5d, 0x85, 0xa9, 0x34, 0x11, 0x45, 0x83, 0xd2, 0xa3, 0xd8, 0x33,
    0xdc, 0x4c, 0x29, 0x2e, 0xec, 0x7c, 0x37, 0x5e, 0x08, 0x0c, 0x56, 0x33, 0x8c, 0x01, 0xf1, 0x7e,
    0x14, 0xec, 0x56, 0x0d, 0x8f, 0x48, 0x58, 0xfb, 0x56, 0x71, 0xcb, 0x6a, 0x4c, 0xfe, 0x7f, 0x4a,
    0x8a, 0x68, 0x10, 0x05, 0x41, 0x6b, 0x40, 0xe3, 0xa8, 0x61, 0xee, 0x32, 0xd5, 0x6a, 0x1b, 0x2a,
    0xc4, 0x64, 0x24, 0x87, 0x42, 0x1d, 0x7d, 0x05, 0xf5, 0x3a, 0x23, 0x60, 0x4a, 0xbf, 0x01, 0x03,
    0x40, 0xce, 0x01, 0x67, 0x39, 0xeb, 0xb7, 0x10, 0xe8, 0x00, 0x43, 0x39, 0x59, 0xe7, 0xea, 0x1b,
    0x74, 0x60, 0xfb, 0x85, 0xc2, 0x9f, 0x31, 0xe2, 0x73, 0xc1, 0x68, 0x11, 0x62, 0x2b, 0xca, 0xf5,
    0xa2, 0x7e, 0xc4, 0x85, 0x4b, 0xab, 0x02, 0x81, 0xa0, 0xd2, 0x33, 0x61, 0x72, 0x33, 0xdd, 0xff,
    0x40, 0x9b, 0x98, 0xb0, 0xb3, 0xf9, 0x94, 0xf4, 0xd2, 0x6b, 0xe3, 0x8f, 0x4d, 0xff, 0x82, 0x6c,
    0xd1, 0xbb, 0x27, 0xf2, 0x40, 0x3c, 0xd3, 0x84, 0x4f, 0xb9, 0x12, 0xb6, 0xce, 0xd7, 0x80, 0x44,
    0x22, 0x9f, 0xdc, 0x0c, 0xbb, 0xfe, 0xbc, 0x5a, 0x12, 0x4a, 0xf2, 0xda, 0x75, 0x0e, 0x3a, 0x10,
    0xdb, 0x0d, 0x13, 0xff, 0xea, 0xaf, 0x21, 0x3d, 0xea, 0xf5, 0x31, 0x87, 0x4d, 0x57, 0xa0, 0xcc,
    0xd6, 0x36, 0xdc, 0xd4, 0xdc, 0x2c, 0x71, 0x34, 0x63, 0x33, 0xb5, 0x77, 0x84, 0xb6, 0xe1, 0x4d,
    0x0e, 0xdc, 0x46, 0xa1, 0x0c, 0x7b, 0x01, 0xeb, 0xbd, 0x9c, 0xf0, 0x4b, 0xa2, 0xec, 0x8c, 0xa5,
    0xbd, 0x01, 0xd8, 0x18, 0xf0, 0x04, 0xd9, 0xfa, 0xfc, 0xbe, 0x4f, 0xf8, 0x92, 0xce, 0xb8, 0x12,
    0x80, 0x33, 0xdd, 0x28, 0xfb, 0x3c, 0x7f, 0x04, 0x0d, 0x6f, 0xbf, 0xc6, 0x8d, 0x54, 0x43, 0x22,
    0x3d, 0xc9, 0xf2, 0xab, 0xf8, 0xb6, 0x68, 0x6b, 0xbb, 0x2e, 0xd5, 0xea, 0xa2, 0xf8, 0xa9, 0xcc,
    0x6e, 0x06, 0x6e, 0x87, 0xa5, 0x8d, 0xdf, 0x2b, 0x03, 0xe8, 0x27, 0x9e, 0x8f, 0xe3, 0x9e, 0x6b,
    0x74, 0xc0, 0xb3, 0x88, 0x7d, 0xea, 0xcc, 0xb8, 0x0b, 0xe8, 0xa9, 0x74, 0x81, 0x6f, 0x47, 0x16,
    0x7e, 0xa1, 0x65, 0x17, 0x07, 0xa6, 0xa0, 0x41, 0x69, 0x4e, 0xbb, 0x73, 0x24, 0x0d, 0x9b, 0xda,
    0x36, 0x63, 0x4e, 0x8a, 0xe7, 0x74, 0x13, 0x56, 0x31, 0x06, 0x68, 0x6c, 0x01, 0xc9, 0x57, 0x54,
    0x17, 0x7d, 0xe5, 0xc6, 0x91, 0x10, 0x07, 0x4f, 0x07, 0x70, 0xec, 0x99, 0xcd, 0x28, 0x36, 0x70,
    0xf0, 0x06, 0x67, 0x55, 0x23, 0xf8, 0x48, 0x5f, 0x4f, 0x02, 0x0e, 0x5d, 0xb7, 0xea, 0x33, 0x96,
    0xa1, 0x2a, 0x86, 0x0c, 0x7d, 0x65, 0xa9, 0x4a, 0x8a, 0xb1, 0x97, 0xf1, 0x38, 0x93, 0xb3, 0x11,
    0x33, 0x36, 0x7a, 0x50, 0x3e, 0xf7, 0x94, 0x43, 0x27, 0xb9, 0x2a, 0x9e, 0x98, 0x25, 0x7f, 0x82,
    0xdf, 0x77, 0xf8, 0xb0, 0xb8, 0x42, 0xfe, 0xc7, 0xfe, 0x6b, 0xa8, 0x30, 0x71, 0xbf, 0x7a, 0x68,
    0xa7, 0xe7, 0x72, 0x71, 0x3a, 0x8a, 0xce, 0xbf, 0xc0, 0x4a, 0x1e, 0x4e, 0x73, 0xca, 0xb7, 0x88,
    0x07, 0xd0, 0x48, 0x93, 0x63, 0x52, 0x35, 0x34, 0x2b, 0xd9, 0x69, 0xf1, 0x5d, 0x98, 0xa5, 0xa0,
    0x11, 0x32, 0xd1, 0xdf, 0x3f, 0xf2, 0xaf, 0x1c, 0x6a, 0xf4, 0x65, 0xd0, 0xe1, 0x50, 0x82, 0x2d,
    0x7b, 0x0a, 0x79, 0xce, 0xac, 0x60, 0x5b, 0x9a, 0xed, 0x89, 0x77, 0x1e, 0x35, 0x67, 0x78, 0x6e,
    0xf0, 0xf3, 0x7a, 0xf3, 0xbd, 0x49, 0x05, 0xc7, 0x43, 0x8c, 0x62, 0x73, 0xd4, 0x1a, 0x39, 0xc5,
    0xd0, 0xce, 0x44, 0x5c, 0x93, 0x2c, 0x8b, 0xe8, 0xa8, 0x60, 0xe5, 0xeb, 0xe8, 0x95, 0x11, 0x32,
    0xc3, 0xcc, 0xf8, 0xb3, 0xa7, 0xbe, 0x25, 0x16, 0x69, 0x91, 0x3a, 0x7b, 0x3a, 0x68, 0x17, 0xee,
    0x6e, 0x58, 0x57, 0x02, 0xdb, 0xb0, 0xa0, 0x55, 0x99, 0x06, 0xfe, 0x54, 0x8a, 0xc7, 0xeb, 0xd2,
    0xec, 0xf9, 0x2b, 0x75, 0xfe, 0xf9, 0xed, 0x46, 0x25, 0x31, 0x7c, 0xd8, 0x1e, 0xe4, 0xef, 0x59,
    0x75, 0xe6, 0x72, 0x8a, 0x58, 0x75, 0x12, 0x79, 0x86, 0x32, 0xdc, 0xc7, 0xa0, 0x39, 0x5b, 0xa4,
    0x02, 0x3a, 0xd1, 0x83, 0x18, 0x5b, 0x3b, 0xa6, 0xd8, 0x1c, 0xb4, 0xaa, 0x93, 0x7d, 0x49, 0x58,
    0x91, 0x89, 0x15, 0x4e, 0x99, 0x8a, 0x89, 0x8d, 0x1f, 0xca, 0x9d, 0x13, 0x57, 0xb9, 0x49, 0x41,
    0x8a, 0xa6, 0x18, 0x3e, 0x4a, 0x85, 0x1f, 0x35, 0x01, 0x6a, 0xcc, 0xa5, 0x54, 0x67, 0x52, 0x70,
    0x8b, 0xb9, 0x39, 0xba, 0x92, 0xf8, 0xbc, 0x5c, 0x7c, 0x88, 0x65, 0x3c, 0x3a, 0x0f, 0x99, 0x8f,
    0xd1, 0xf4, 0x26, 0xd6, 0x31, 0xe0, 0xac, 0x21, 0xd3, 0x79, 0xdd, 0xbf, 0x8c, 0xd5, 0xdf, 0xdc,
    0xac, 0xb4, 0xb4, 0xe1, 0x01, 0x9f, 0x4b, 0xf8, 0xdb, 0x2b, 0xb7, 0xa0, 0x45, 0x7c, 0x5f, 0x11,
    0x27, 0x87, 0x2d, 0x20, 0xff, 0xca, 0xb3, 0xae, 0xaa, 0xf1, 0xed, 0x08, 0xef, 0x81, 0xb0, 0xc4,
    0xa6, 0xca, 0x5f, 0xe2, 0x41, 0x2d, 0x21, 0x02, 0x53, 0xe4, 0xba, 0xc5, 0xcf, 0x8c, 0x08, 0x7b,
    0xa8, 0x45, 0x5f, 0xe5, 0xb8, 0x1c, 0xe8, 0x0e, 0xc5, 0xdc, 0x9f, 0x6f, 0x75, 0xc5, 0xfb, 0xe7,
    0xe6, 0x05, 0x46, 0x35, 0x24, 0x87, 0x12, 0x17, 0x10, 0x96, 0x2c, 0xdd, 0xa0, 0x95, 0xa4, 0x2b,
    0x3d, 0xf3, 0x6a, 0xf1, 0xdb, 0x72, 0xba, 0x30, 0x94, 0x88, 0x4a, 0x1d, 0xae, 0xe9, 0x94, 0xf8,
    0x93, 0x64, 0xf8, 0x8d, 0xfb, 0xcc, 0x94, 0xd3, 0x96, 0xff, 0x24, 0xf1, 0x8b, 0xdb, 0x2c, 0x08,
    0xa6, 0x29, 0xe5, 0x9f, 0x6a, 0xf8, 0x14, 0xdb, 0x00, 0xb3, 0x5a, 0x73, 0xdc, 0x22, 0x63, 0x2f,
    0x27, 0x2b, 0x4d, 0xb5, 0x14, 0xc0, 0xd1, 0x88, 0xd4, 0xed, 0x34, 0x5f, 0x17, 0x2b, 0xba, 0x0d,
    0xa6, 0x66, 0xa2, 0x7c, 0x44, 0x0c, 0x01, 0xa1, 0xce, 0x9a, 0xad, 0x72, 0xf3, 0xb6, 0x8f, 0xd9,
    0xa2, 0xfd, 0x87, 0x7a, 0xf3, 0x42, 0xab, 0xb4, 0xc5, 0xa6, 0x8b, 0x1d, 0x46, 0x1e, 0x3b, 0x4d,
};

static const MessageEncodingTestVector sMessageEncodingTest0569 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xACF3B971,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x25EB,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0569_EncryptionKey,
    sMessageEncodingTest0569_Payload,
    sizeof(sMessageEncodingTest0569_Payload),
    sMessageEncodingTest0569_ExpectedEncoding,
    sizeof(sMessageEncodingTest0569_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0570_EncryptionKey =
{
    {
        0xd1, 0x0c, 0x73, 0xfd, 0x73, 0x60, 0x3f, 0xd0, 0x9c, 0x88, 0x2b, 0x6f, 0x0d, 0xc9, 0x48, 0x07,
    }
};
static const uint8_t sMessageEncodingTest0570_Payload[] =
{
    0xd2, 0xdc, 0x11, 0xf6, 0x46, 0xe4, 0x73, 0x37, 0xaf, 0x35, 0x3c, 0x54, 0xd4, 0x78, 0x5f, 0x4c,
    0xb2, 0x21, 0x44, 0xe1, 0x38, 0xda, 0xdb, 0xa8, 0xb6, 0xb3, 0x7e, 0xdf, 0x19, 0xf2, 0x79, 0xbd,
    0x9e, 0x5d, 0x1e, 0x4f, 0x95, 0x46, 0xd9, 0xda, 0x26, 0x84, 0xbf, 0xcd, 0x55, 0x77, 0x74, 0x3c,
    0x52, 0xf7, 0xd1, 0x32, 0xde, 0xf4, 0x83, 0xc4, 0xfb, 0xb3, 0x7d, 0x8e, 0x97, 0xe6, 0x53, 0x7a,
    0x00, 0x27, 0x71, 0x60, 0x82, 0xfb, 0xf4, 0xed, 0xf6, 0xdd, 0x36, 0xf0, 0xff, 0x53, 0x60, 0x50,
    0x5f, 0x64, 0x62, 0x4f, 0x4e, 0x89, 0x5d, 0xe8, 0x97, 0x5b, 0x5e, 0x39, 0x3c, 0x42, 0x31, 0xaa,
    0xc2, 0x16, 0x66, 0xc5, 0xdc, 0xd2, 0x99, 0xb8, 0xa8, 0x60, 0xd0, 0xd7, 0x0a, 0x94, 0x95, 0x41,
    0xc4, 0x50, 0x18, 0x00, 0xc1, 0x77, 0xe7, 0xea, 0x92, 0x22, 0x0b, 0x54, 0x4d, 0x63, 0x2b, 0x4a,
    0x33, 0xa7, 0xdd, 0xf4, 0xe3, 0x7c, 0xba, 0xc5, 0x11, 0x5f, 0x00, 0xaa, 0x7d, 0x56, 0x3e, 0x3e,
    0xb4, 0x83, 0x6c, 0x8f, 0x8f, 0xd6, 0x71, 0x25, 0xae, 0x93, 0x85, 0xa6, 0x84, 0x21, 0xab, 0x69,
    0x6f, 0x08, 0x0e, 0x8a, 0xb9, 0x37, 0x6d, 0x4d, 0x8b, 0xbe, 0xc6, 0xa1, 0x60, 0x29, 0x87, 0x1d,
    0xe6, 0xe2, 0xa7, 0x95, 0x92, 0x7c, 0x1c, 0xa2, 0xf5, 0xa1, 0x32, 0x74, 0x56, 0x25, 0xaf, 0x3a,
    0xf7, 0xc0, 0xb3, 0xf5, 0x2e, 0x91, 0xf2, 0x77, 0x85, 0x9d, 0x1a, 0x70, 0xd2, 0x6b, 0x69, 0x02,
    0xdd, 0x4d, 0x3a, 0x6f, 0x16, 0xa6, 0x93, 0x03, 0xa7, 0x00, 0xc3, 0x63, 0x79, 0x50, 0xa4, 0x9c,
    0x93, 0xf9, 0x3f, 0xdd, 0x9f, 0x7c, 0xc7, 0xde, 0x12, 0x89, 0xdc, 0x7d, 0x06, 0xdb, 0xf9, 0x65,
    0xea, 0x97, 0xfd, 0x21, 0x89, 0xac, 0x58, 0x84, 0x83, 0x15, 0x94, 0x00, 0x9e, 0xbb, 0xca, 0x94,
    0xab, 0xf1, 0x14, 0x94, 0x79, 0x32, 0x22, 0x5a, 0xae, 0x9a, 0x36, 0xa4, 0x08, 0xa7, 0xb8, 0x74,
    0xad, 0x67, 0xe7, 0xf2, 0xac, 0xd9, 0x60, 0x06, 0xae, 0x1c, 0x5c, 0x4d, 0x8f, 0xb4, 0xc7, 0x9f,
    0xa6, 0xb9, 0xce, 0x35, 0x3b, 0x14, 0xaa, 0xf3, 0x00, 0xd1, 0xc6, 0x93, 0xc7, 0xf0, 0xca, 0xca,
    0x99, 0x66, 0x63, 0x69, 0xb1, 0xc5, 0xbc, 0x77, 0xe3, 0xdd, 0xcf, 0x7e, 0xa0, 0xe2, 0x58, 0x95,
    0xa1, 0x3d, 0xdb, 0x80, 0x32, 0x6a, 0x3d, 0xab, 0x58, 0x66, 0xb7, 0x62, 0xc8, 0x9a, 0xf6, 0x3c,
    0x60, 0xa5, 0xa3, 0xe6, 0xa4, 0x29, 0xdc, 0xeb, 0xa2, 0x0b, 0xb2, 0x98, 0xd3, 0xf5, 0x5b, 0x07,
    0x0a, 0x77, 0x86, 0x40, 0xe8, 0x92, 0x6b, 0x65, 0xeb, 0x3f, 0x20, 0xa8, 0x46, 0x8e, 0x45, 0x2d,
    0xc1, 0xff, 0xd8, 0x63, 0x9a, 0xc3, 0xb4, 0x16, 0xd3, 0xcd, 0xe8, 0xd6, 0xff, 0x51, 0xfd, 0xdf,
    0x7c, 0x14, 0x5c, 0xff, 0x04, 0xfc, 0xf7, 0xb1, 0x23, 0xfe, 0x45, 0xbf, 0xb9, 0x78, 0x45, 0xf4,
    0xe7, 0x98, 0x7b, 0xd5, 0xfc, 0xfd, 0xe1, 0x35, 0x77, 0x49, 0x43, 0x5e, 0xca, 0x77, 0x6f, 0xd3,
    0x8b, 0xab, 0xe4, 0x4d, 0x06, 0x7f, 0xa2, 0x25, 0x22, 0x5c, 0xdb, 0x3c, 0x91, 0xd6, 0xc8, 0x8f,
    0x65, 0xe4, 0x72, 0xaf, 0xb9, 0xb3, 0x51, 0x75, 0xd4, 0x41, 0x5c, 0xf8, 0xd8, 0x16, 0x05, 0xe4,
    0xb2, 0x18, 0xf9, 0xbf, 0xed, 0x0b, 0xb3, 0xb8, 0xed, 0xd9, 0xf4, 0xbc, 0xc9, 0x4e, 0x5d, 0xa9,
    0xfd, 0xd9, 0x53, 0xe5, 0x9a, 0x7c, 0x72, 0xac, 0xda, 0xc1, 0x3a, 0x4d, 0x4c, 0x57, 0x07, 0x17,
    0x79, 0x82, 0xdc, 0x60, 0xb0, 0x27, 0x3d, 0xf5, 0xd9, 0x36, 0xc3, 0xe7, 0x60, 0x7d, 0xd0, 0xac,
    0x95, 0x25, 0x7a, 0x12, 0xf2, 0x9a, 0x59, 0xb1, 0x97, 0x5b, 0x77, 0x4e, 0xe4, 0xeb, 0xe2, 0x0f,
    0xff, 0x71, 0x02, 0x4b, 0xba, 0x16, 0x09, 0xc4, 0x9f, 0x58, 0xb6, 0x79, 0x98, 0xff, 0xe6, 0xcf,
    0xa1, 0x62, 0x9a, 0xfa, 0x68, 0xcb, 0x94, 0x40, 0x48, 0xce, 0x3d, 0x91, 0x13, 0xe0, 0x5d, 0x25,
    0xd5, 0xb6, 0x98, 0xd6, 0x7f, 0x76, 0x38, 0xa7, 0xf7, 0xd4, 0xf6, 0x69, 0x97, 0x2e, 0x4e, 0xe1,
    0xbe, 0xc6, 0xf8, 0xec, 0x67, 0xa1, 0x48, 0x8f, 0x28, 0x7b, 0x9d, 0xcf, 0xdc, 0xe4, 0x13, 0x68,
    0x97, 0xbb, 0x12, 0x06, 0x0e, 0xc9, 0xbe, 0x9d, 0xeb, 0xc5, 0x4d, 0x0b, 0xe8, 0xd3, 0x75, 0x25,
    0xfc, 0xe1, 0x85, 0x1b, 0x00, 0x86, 0x5b, 0xd1, 0xfd, 0x80, 0x2a, 0xe9, 0x9d, 0x86, 0xca, 0xb7,
    0x16, 0xa6, 0xb9, 0x10, 0x61, 0x43, 0xfe, 0x75, 0x37, 0x7c, 0x32, 0xc4, 0x30, 0x98, 0xc6, 0xc8,
    0x39, 0xc1, 0x18, 0xb7, 0x51, 0xbb, 0xea, 0x1c, 0xd3, 0x6a, 0x5b, 0x6e, 0x59, 0xfe, 0x58, 0x65,
    0x8c, 0xf5, 0xa2, 0x0c, 0x71, 0x1d, 0xde, 0xe0, 0xc8, 0xf9, 0x74, 0x79, 0x74, 0x90, 0x0c, 0xd2,
    0x67, 0x87, 0x94, 0xe1, 0x96, 0xd7, 0x37, 0xe6, 0x66, 0x77, 0xbc, 0x50, 0x02, 0xb2, 0x8a, 0x40,
    0xd1, 0x3e, 0x37, 0xcb, 0xdb, 0x34, 0x29, 0x91, 0xdb, 0xe9, 0xdb, 0x4f, 0x7c, 0x45, 0x97, 0x74,
    0x61, 0xf7, 0xe5, 0xf7, 0x31, 0x2e, 0xdf, 0x39, 0x3e, 0x52, 0x1f, 0x1e, 0x33, 0x6e, 0xe2, 0x78,
    0x38, 0xc0, 0xb1, 0x06, 0xa3, 0x42, 0xf5, 0x1f, 0xed, 0xb6, 0x10, 0x06, 0x77, 0x5a, 0xaa, 0xd2,
    0x10, 0x67, 0x66, 0xa8, 0xf3, 0x97, 0x2a, 0x45, 0x4e, 0x08, 0x63, 0x61, 0x40, 0x5f, 0xfd, 0x5a,
    0x03, 0x7b, 0x0a, 0xed, 0x84, 0x2e, 0x0b, 0xcb, 0x8a, 0xcf, 0xd9, 0xa6, 0x8b, 0xad, 0xc7, 0xee,
    0x4b, 0x4a, 0xfc, 0x5f, 0x10, 0xd4, 0xd4, 0x1e, 0x29, 0x5d, 0xa2, 0x10, 0xba, 0x62, 0xb5, 0xa6,
    0x5e, 0x04, 0x23, 0xc5, 0x5b, 0x0e, 0xbd, 0xdc, 0xd0, 0x0e, 0x24, 0x10, 0x77, 0xfc, 0xf0, 0x9e,
    0xb2, 0xc9, 0xbf, 0x26, 0x03, 0xce, 0x54, 0x29, 0x04, 0x04, 0x07, 0xe5, 0x58, 0x11, 0x39, 0xfe,
    0x7d, 0xf5, 0x13, 0x53, 0xd1, 0x23, 0x1e, 0xab, 0xa9, 0x52, 0xa3, 0xcf, 0x4b, 0x81, 0xf2, 0x3e,
    0x92, 0xf3, 0x06, 0x75, 0x40, 0xc1, 0x40, 0x98, 0x96, 0x16, 0x24, 0xd2, 0x64, 0x1f, 0xf3, 0xc0,
    0x49, 0x3d, 0x59, 0x04, 0x39, 0x33, 0x60, 0x7e, 0xca, 0x8f, 0x5c, 0x65, 0xe9, 0x89, 0x2f, 0x87,
    0x62, 0x07, 0xd0, 0xb9, 0x88, 0x91, 0x49, 0xe3, 0x88, 0xde, 0x9f, 0x6b, 0x6c, 0xc5, 0x5f, 0x80,
    0xd3, 0x2f, 0xa5, 0x5a, 0x53, 0x52, 0x01, 0x9a, 0xa2, 0xff, 0xae, 0xcc, 0xf5, 0xac, 0xb9, 0x64,
    0xa5, 0x78, 0x95, 0x8b, 0x5b, 0xff, 0xff, 0x60, 0x8a, 0x72, 0x51, 0xb1, 0x8a, 0x1c, 0x2b, 0x79,
    0xef, 0x8d, 0x05, 0xb7, 0x7b, 0xc1, 0x35, 0x0d, 0xda, 0x01, 0x27, 0x54, 0x04, 0xb5, 0x7e, 0x84,
    0xc2, 0xfc, 0x31, 0xc0, 0xff, 0xfd, 0x92, 0x4d, 0x94, 0x85, 0x07, 0xe0, 0xe9, 0x2c, 0xa3, 0x9f,
    0xc5, 0x9a, 0xc0, 0x9a, 0x4a, 0xde, 0xd0, 0xc1, 0xc6, 0x16, 0x00, 0x47, 0x0e, 0x0e, 0x84, 0xa3,
    0x53, 0xa9, 0x36, 0x4b, 0x81, 0xf3, 0x2f, 0x95, 0x5c, 0x50, 0x3b, 0xa1, 0x4e, 0xd8, 0x46, 0x92,
    0x8e, 0x1a, 0x6b, 0x10, 0xdc, 0x3c, 0x10, 0xe0, 0xc4, 0xbc, 0x06, 0x8f, 0x08, 0x93, 0x1a, 0xea,
    0x24, 0xce, 0x58, 0xdc, 0x18, 0x25, 0xec, 0x2d, 0xf5, 0xdf, 0x2d, 0xb6, 0xa0, 0x11, 0xc5, 0x34,
    0x13, 0x53, 0x8f, 0x09, 0x1d, 0x39, 0xd6, 0x48, 0xdc, 0x2d, 0xe6, 0x28, 0xdd, 0x92, 0xfe, 0xc2,
    0x77, 0x20, 0xca, 0x47, 0xb7, 0xbb, 0x83, 0xd1, 0x0a, 0x1f, 0xa2, 0x24, 0x2c, 0xb9, 0x55, 0x70,
};

static const uint8_t sMessageEncodingTest0570_ExpectedEncoding[] =
{
    0x30, 0x28, 0xda, 0xa9, 0x25, 0x17, 0x95, 0x21, 0xd6, 0x06, 0x61, 0x73, 0x73, 0x13, 0x77, 0x4f,
    0x6b, 0xc0, 0x13, 0xb3, 0x80, 0xfc, 0x44, 0x80, 0xef, 0x62, 0x12, 0x67, 0xb3, 0xe1, 0x2f, 0x2a,
    0xbb, 0x6d, 0x25, 0x11, 0xc4, 0x0c, 0xbf, 0xb3, 0x33, 0x82, 0x51, 0xae, 0xf1, 0xbd, 0x3a, 0x88,
    0x54, 0x45, 0x3b, 0x6f, 0x9a, 0xa8, 0xe5, 0x1e, 0x3e, 0x6a, 0x57, 0x3b, 0x96, 0xf8, 0x9f, 0xfc,
    0x9a, 0xeb, 0x4b, 0x57, 0xc1, 0xf6, 0x51, 0x80, 0xa0, 0x4b, 0x84, 0x44, 0xc1, 0x4f, 0x06, 0x70,
    0x67, 0xca, 0xce, 0x30, 0x14, 0xb1, 0x65, 0xba, 0x42, 0xe2, 0x19, 0x37, 0x2a, 0xd8, 0xfb, 0x20,
    0x95, 0x49, 0x75, 0x66, 0x68, 0x5e, 0x72, 0xae, 0x94, 0x74, 0x9e, 0x4e, 0x17, 0x09, 0x4e, 0xfa,
    0x04, 0x52, 0xa0, 0xee, 0x7e, 0xda, 0x1e, 0x18, 0xde, 0x79, 0xa5, 0xf8, 0xad, 0x0c, 0x2c, 0x17,
    0x2a, 0x86, 0xce, 0x97, 0xb1, 0x05, 0x38, 0xe7, 0x3b, 0xd2, 0x8f, 0xe5, 0x74, 0x0d, 0x19, 0xf4,
    0xc7, 0x80, 0x8c, 0xb7, 0x80, 0xbb, 0x01, 0xf3, 0x93, 0x5c, 0x33, 0x8a, 0x5b, 0xbf, 0xeb, 0x82,
    0xd2, 0x74, 0x1c, 0xcb, 0x4b, 0xfd, 0x94, 0x8d, 0x94, 0x97, 0x7f, 0xcd, 0x13, 0x2b, 0xd2, 0xe2,
    0xd2, 0x50, 0x27, 0x7a, 0xa8, 0x1b, 0xd6, 0x42, 0x0a, 0x14, 0xf8, 0xd2, 0xf2, 0xc2, 0x59, 0x24,
    0xf8, 0xf3, 0x47, 0x54, 0x53, 0xbe, 0x85, 0x58, 0xb1, 0x38, 0xe8, 0x8a, 0x47, 0x89, 0x66, 0xe6,
    0x17, 0x69, 0xb7, 0xa7, 0x13, 0xee, 0xa1, 0x04, 0xaf, 0x46, 0x38, 0x0d, 0xb2, 0x37, 0x84, 0x31,
    0x76, 0x79, 0xb3, 0x18, 0x98, 0x5c, 0x4a, 0x86, 0x61, 0xc3, 0x54, 0xb4, 0xe0, 0x28, 0x47, 0x24,
    0x08, 0x47, 0x75, 0xe8, 0xba, 0x70, 0x1f, 0x6f, 0x1d, 0x7e, 0x81, 0x5e, 0x0b, 0x50, 0xdb, 0x7d,
    0xfe, 0x98, 0x13, 0x22, 0xc6, 0x71, 0x35, 0xbd, 0x16, 0x0c, 0x04, 0x36, 0x0f, 0xf8, 0x5a, 0xe3,
    0x25, 0x34, 0x6d, 0x0e, 0x50, 0xad, 0x27, 0xd3, 0x91, 0xe1, 0xec, 0x83, 0x41, 0xb2, 0x02, 0x94,
    0x20, 0x92, 0x92, 0x56, 0x8c, 0xb8, 0xa6, 0x41, 0xe2, 0xab, 0x06, 0xd7, 0xb7, 0x22, 0x78, 0xba,
    0xd1, 0x41, 0xe1, 0x6b, 0x00, 0x8b, 0xba, 0x38, 0x09, 0x04, 0x9f, 0x5b, 0xb2, 0x6e, 0xa8, 0x9d,
    0x68, 0x8c, 0x33, 0x88, 0x6f, 0x6b, 0x02, 0x2d, 0xe3, 0xf0, 0xde, 0x5f, 0x39, 0x8e, 0x09, 0xe4,
    0xc9, 0xd1, 0xf4, 0xbe, 0x62, 0xa3, 0x97, 0x12, 0xee, 0x46, 0xbd, 0x8b, 0x3b, 0xf3, 0x10, 0xca,
    0xd4, 0x27, 0x8c, 0x58, 0x96, 0x04, 0x34, 0x4c, 0x34, 0x78, 0xc7, 0xb9, 0x6f, 0x91, 0x6c, 0xd6,
    0x03, 0x02, 0xad, 0x47, 0x25, 0x62, 0xa8, 0x80, 0xc5, 0xe7, 0xe4, 0x38, 0x71, 0x69, 0xfb, 0xa2,
    0x39, 0xb3, 0xe6, 0xa3, 0x07, 0xd7, 0xf5, 0x27, 0x4c, 0xc0, 0x17, 0x59, 0x29, 0xae, 0x96, 0x05,
    0x42, 0x1b, 0x5f, 0x48, 0xd5, 0xec, 0xe1, 0x62, 0x3b, 0xb3, 0x75, 0xaf, 0xbb, 0x71, 0x64, 0x46,
    0xf2, 0x83, 0x03, 0xfa, 0x9d, 0x9f, 0x4b, 0x2e, 0x91, 0x2f, 0x60, 0x6a, 0xb2, 0x82, 0x7c, 0xef,
    0xd8, 0xc1, 0xd6, 0xff, 0xb3, 0xb4, 0xb2, 0x3b, 0x09, 0x91, 0x41, 0x68, 0xd3, 0x72, 0xdc, 0x96,
    0x98, 0x56, 0x79, 0x7a, 0x79, 0xee, 0x25, 0xd9, 0x19, 0x1a, 0x97, 0x19, 0x41, 0xc1, 0x69, 0xad,
    0x63, 0x15, 0x41, 0x89, 0x25, 0xf4, 0x69, 0xd7, 0x15, 0x9b, 0xc5, 0x40, 0x71, 0xbe, 0x20, 0x6a,
    0x5a, 0x41, 0x09, 0xb0, 0x66, 0x1e, 0x43, 0x4c, 0xf2, 0x21, 0x0f, 0x12, 0x83, 0xb3, 0x28, 0xad,
    0x87, 0x03, 0x89, 0x55, 0xab, 0x2b, 0x0a, 0x86, 0x44, 0x30, 0xac, 0x6d, 0x7f, 0x83, 0xf2, 0x07,
    0x87, 0x53, 0x7a, 0x15, 0xc5, 0xc7, 0x08, 0x5f, 0x4c, 0xb1, 0x76, 0xb9, 0x35, 0x26, 0x62, 0xf6,
    0xa9, 0x04, 0x04, 0xb4, 0x09, 0xd6, 0x99, 0x9c, 0x61, 0xe3, 0x94, 0xb8, 0xf0, 0xd1, 0x67, 0x08,
    0x2d, 0x9e, 0x59, 0x80, 0xc1, 0xb5, 0x00, 0x32, 0xab, 0x4d, 0x01, 0xc3, 0xc9, 0x19, 0x67, 0x6d,
    0x83, 0xd9, 0xbf, 0xdc, 0x42, 0xcb, 0x4b, 0x53, 0x0f, 0x94, 0x82, 0x29, 0x59, 0x07, 0x8f, 0xca,
    0x7c, 0xed, 0x0a, 0x38, 0xc7, 0x33, 0x33, 0x3d, 0x08, 0xc5, 0x91, 0x42, 0xd3, 0xb7, 0xcb, 0xc6,
    0x7b, 0x4e, 0xb5, 0xb9, 0xa9, 0x0c, 0xd4, 0xea, 0xb4, 0xb5, 0x85, 0xc0, 0xeb, 0x7d, 0x90, 0x8f,
    0x19, 0x17, 0x97, 0x98, 0x2c, 0x81, 0xaf, 0x23, 0x44, 0x59, 0xbd, 0x59, 0x75, 0x5e, 0x87, 0xb6,
    0x81, 0x1b, 0xa8, 0x05, 0x9c, 0xb1, 0x89, 0xd4, 0x5d, 0x53, 0x2e, 0x41, 0x34, 0x2d, 0x88, 0x21,
    0x3b, 0x42, 0x30, 0x17, 0x02, 0x29, 0x39, 0x0b, 0xcb, 0x10, 0x27, 0xb4, 0x73, 0x7c, 0xd5, 0x26,
    0x26, 0xf3, 0xc9, 0x1f, 0xb4, 0x72, 0x7f, 0x62, 0x71, 0x5d, 0xf1, 0xdd, 0xbe, 0x8a, 0x0a, 0x39,
    0x17, 0xca, 0x42, 0x79, 0x30, 0xbf, 0xde, 0x12, 0x10, 0xf5, 0x22, 0x4c, 0x9f, 0x58, 0xfa, 0x9e,
    0x5b, 0xb1, 0x46, 0x07, 0x25, 0xc4, 0x03, 0xbb, 0x05, 0x99, 0xf4, 0xfb, 0xc3, 0xd2, 0x72, 0x8b,
    0x8b, 0xc0, 0x16, 0xaa, 0xcf, 0x34, 0xe8, 0x20, 0xc6, 0x9c, 0x66, 0xc0, 0x61, 0xd2, 0x15, 0x96,
    0xbf, 0x22, 0x63, 0x48, 0x3d, 0xaf, 0x12, 0x45, 0x62, 0xe4, 0x0b, 0x48, 0x85, 0x38, 0xb6, 0x3c,
    0x4b, 0x6e, 0xe8, 0x21, 0x6f, 0xe4, 0x70, 0xee, 0x43, 0x55, 0x97, 0x8f, 0x81, 0xd4, 0x5c, 0x24,
    0xe7, 0xda, 0xd2, 0x20, 0x9c, 0x13, 0x2b, 0x26, 0xfa, 0xde, 0x24, 0x86, 0x17, 0xf9, 0xd2, 0x99,
    0xfb, 0x2a, 0xd6, 0x0d, 0x48, 0xc0, 0x1f, 0xca, 0x76, 0xc8, 0x04, 0x63, 0xd6, 0xa7, 0x32, 0x7e,
    0x38, 0xdc, 0xdb, 0x0f, 0xd8, 0x72, 0x8d, 0x8a, 0x92, 0xbb, 0x6b, 0x52, 0x23, 0xda, 0xd1, 0xc1,
    0x76, 0xab, 0x6b, 0x10, 0xe8, 0xd6, 0x60, 0x72, 0xff, 0x60, 0x1f, 0xfc, 0xaa, 0x80, 0x1b, 0xee,
    0x7d, 0xce, 0x16, 0xc3, 0x19, 0x31, 0x8d, 0x5d, 0xe8, 0x35, 0x38, 0x2d, 0x0b, 0x0e, 0x15, 0x8f,
    0x47, 0x2d, 0x39, 0x31, 0xde, 0x6d, 0x97, 0xa6, 0xc5, 0x26, 0x74, 0x39, 0x5b, 0xba, 0x48, 0x7b,
    0x44, 0x89, 0x97, 0x87, 0x46, 0x1c, 0x73, 0xe1, 0x1a, 0xc9, 0x4e, 0x42, 0x53, 0xf7, 0xe3, 0xb8,
    0x7a, 0x6d, 0xb0, 0xd5, 0x45, 0xa9, 0x51, 0x0a, 0x9a, 0x36, 0xf1, 0x6d, 0x8e, 0xaa, 0xd9, 0xb6,
    0x15, 0xa5, 0x2a, 0xd2, 0x8f, 0x75, 0xbd, 0xcb, 0xa2, 0x40, 0x68, 0x02, 0x83, 0x02, 0x27, 0x11,
    0xbd, 0xfe, 0x1f, 0x51, 0x86, 0x14, 0x8c, 0x2b, 0x55, 0x7d, 0xc5, 0xc0, 0xc9, 0x4d, 0x84, 0xf4,
    0x7a, 0xdb, 0x18, 0xa9, 0x54, 0x9f, 0xfd, 0xd4, 0x11, 0x60, 0xf8, 0x23, 0x4e, 0x9e, 0x76, 0x62,
    0x80, 0x38, 0xaf, 0x02, 0xa6, 0xee, 0xe4, 0x9c, 0x0c, 0x6f, 0x6b, 0xbc, 0x54, 0x0c, 0x09, 0x3c,
    0xd6, 0xed, 0x05, 0x13, 0x14, 0xaf, 0x2a, 0x73, 0x85, 0x63, 0x30, 0x3c, 0x8c, 0x49, 0x53, 0xd5,
    0xec, 0xad, 0x15, 0x56, 0x63, 0x36, 0x70, 0xd8, 0x9e, 0xeb, 0xdb, 0x6b, 0xf5, 0x80, 0x20, 0xdd,
    0x92, 0x9f, 0xa5, 0xcf, 0xf5, 0xd2, 0xff, 0x50, 0xc7, 0xc3, 0x0c, 0xea, 0x98, 0x71, 0x30, 0xe3,
    0x25, 0xb2, 0x5e, 0x57, 0x3b, 0x95, 0x73, 0xcc, 0x48, 0xb4, 0xa3, 0x3f, 0x46, 0xbb, 0x60, 0xcf,
    0xae, 0x2c, 0xa6, 0xcd, 0xba, 0x23, 0xce, 0xd9, 0xeb, 0xd8, 0x7f, 0x6b, 0xf5, 0x7d, 0xae, 0x81,
    0x7e, 0x4f, 0x14, 0x84, 0x21, 0x8c, 0xd3, 0xea, 0x23, 0xab, 0x7c, 0xa0, 0x92, 0xd5, 0x99, 0x23,
    0x9e, 0x7b, 0x69, 0xc2, 0xcd, 0x91, 0x63, 0xb0,
};

static const MessageEncodingTestVector sMessageEncodingTest0570 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x1725A9DA,
        kWeaveHeaderFlag_MsgCounterSyncReq,
        0x2195,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0570_EncryptionKey,
    sMessageEncodingTest0570_Payload,
    sizeof(sMessageEncodingTest0570_Payload),
    sMessageEncodingTest0570_ExpectedEncoding,
    sizeof(sMessageEncodingTest0570_ExpectedEncoding)
};


static const uint8_t sMessageEncodingTest0571_Payload[] =
{
    0x4b, 0xa9, 0xbf, 0xa5, 0xdb, 0x0d, 0x4c, 0x3f, 0x02, 0xfb, 0x71, 0xc3, 0xa2, 0x19, 0xf3, 0xc9,
    0xd4, 0xe2, 0x3b, 0x56, 0x6a, 0x65, 0x56, 0x8f, 0x4a, 0x43, 0x9c, 0x72, 0xd2, 0x92, 0x37, 0xda,
    0x64, 0x6d, 0x13, 0xb9, 0xc8, 0x8a, 0x4c, 0x55, 0x14, 0x77, 0x8f, 0x2e, 0x7c, 0x59, 0x60, 0x8c,
    0x50, 0xee, 0x91, 0x1d, 0xdd, 0x2f, 0xca, 0x2c, 0xfa, 0xfb, 0x6b, 0xc9, 0xb1, 0xa2, 0xe2, 0x70,
    0x94, 0xc4, 0xdd, 0xf9, 0x3e, 0x7e, 0x22, 0x5a, 0xdf, 0xba, 0x62, 0xbd, 0xe2, 0x93, 0x2d, 0xdf,
    0xe1, 0x1c, 0xc5, 0x79, 0x89, 0x7a, 0xa2, 0x5d, 0xb9, 0xcc, 0xaa, 0x18, 0x9f, 0xd2, 0x73, 0xbc,
    0xdd, 0xa0, 0x1f, 0x8a, 0x3b, 0x99, 0x12, 0x73, 0x43, 0x68, 0x14, 0xa0, 0x19, 0xab, 0x99, 0x8b,
    0x45, 0x17, 0x85, 0x8a, 0x49, 0xe7, 0xf9, 0x3f, 0xa0, 0x7e, 0x8a, 0xb9, 0x33, 0x1c, 0x42, 0xfe,
    0x39, 0x63, 0xaa, 0xcc, 0x01, 0x71, 0xc2, 0x45, 0x10, 0xdb, 0xa2, 0xc2, 0x65, 0xfc, 0x48, 0xe9,
    0xa4, 0x30, 0xca, 0xbc, 0xa9, 0x8d, 0xf1, 0xd9, 0x52, 0xc9, 0xf2, 0x36, 0xaf, 0x7e, 0x42, 0x0c,
    0xd9, 0x62, 0x28, 0x46, 0x69, 0x67, 0x1f, 0x24, 0x03, 0xe6, 0x3c, 0xf9, 0xa0, 0x9f, 0xbc, 0x92,
    0xc4, 0x0c, 0x02, 0x27, 0x72, 0x6d, 0x58, 0x34, 0x1a, 0x0a, 0xed, 0x09, 0x27, 0x3e, 0x4c, 0xba,
    0x4c, 0x86, 0xaa, 0xb4, 0x85, 0xf7, 0x27, 0x2b, 0xa2, 0xde, 0xb6, 0x28, 0x96, 0x01, 0xca, 0x0c,
    0x36, 0xc5, 0x27, 0x37, 0x68, 0xc4, 0x94, 0xac, 0xd0, 0x5c, 0x2b, 0x6b, 0x0e, 0xfd, 0x35, 0xfa,
    0xa8, 0x06, 0x4a, 0xcc, 0x02, 0x9b, 0x49, 0xd8, 0xee, 0x46, 0xd9, 0xa1, 0x3d, 0xc3, 0x8c, 0x20,
    0x98, 0x76, 0xb5, 0xf5, 0x49, 0x1c, 0xbb, 0x8d, 0xe8, 0x1c, 0x2f, 0x43, 0x19, 0x2c, 0x32, 0x7a,
    0xb8, 0x94, 0xef, 0x34, 0x84, 0x7f, 0x6b, 0x4e, 0x77, 0x8c, 0xcc, 0xc7, 0x5d, 0xa7, 0x7f, 0xb1,
    0x91, 0x57, 0x30, 0x0d, 0xba, 0xec, 0xae, 0x3b, 0xfc, 0x57, 0xab, 0xa5, 0x57, 0x09, 0x31, 0x4a,
    0x39, 0xf8, 0x2a, 0x8d, 0x6c, 0x69, 0x2a, 0xd3, 0x55, 0x3e, 0x08, 0xdb, 0x5c, 0x07, 0x3a, 0xf8,
    0xb4, 0xbf, 0x7b, 0xc8, 0x1e, 0x52, 0xc3, 0xcc, 0x9c, 0x56, 0x1b, 0x94, 0x8f, 0x27, 0x8e, 0x56,
    0x2c, 0xe8, 0x01, 0xdc, 0x96, 0x12, 0xc0, 0x2e, 0x61, 0xa7, 0x30, 0xbd, 0xc5, 0x96, 0xa4, 0xc3,
    0x56, 0x6e, 0xa1, 0xf0, 0x34, 0x50, 0x2e, 0x67, 0x38, 0x94, 0xa6, 0x1e, 0x95, 0x3a, 0x45, 0x31,
    0x35, 0x9a, 0x41, 0x08, 0xdc, 0xe4, 0x36, 0xa0, 0x8b, 0xe6, 0x56, 0x53, 0xc1, 0x99, 0x79, 0xc6,
    0x01, 0xfc, 0x17, 0x53, 0xdb, 0x6b, 0xad, 0xfa, 0x85, 0xa4, 0xfb, 0x68, 0x27, 0x09, 0x7c, 0x0d,
    0x21, 0x47, 0x8d, 0x43, 0xaa, 0x19, 0xe1, 0xcd, 0xd1, 0xc7, 0xb0, 0xc0, 0x5f, 0x7f, 0x46, 0xa8,
    0x76, 0x1c, 0x02, 0x5c, 0x05, 0x99, 0x4c, 0x80, 0xac, 0x45, 0xd8, 0x2a, 0xdb, 0x2f, 0xd7, 0xb2,
    0x36, 0x94, 0x10, 0x72, 0x76, 0x85, 0x6c, 0xf1, 0x10, 0xc9, 0x26, 0x93, 0x41, 0xaf, 0x35, 0x77,
    0x37, 0x57, 0x1b, 0x3f, 0x70, 0xb6, 0x06, 0xa1, 0xe5, 0xc7, 0x5a, 0xe9, 0xd2, 0x39, 0xc2, 0x8f,
    0xed, 0x0a, 0xdb, 0x76, 0x15, 0xaa, 0x2c, 0x8d, 0xc4, 0x54, 0x87, 0xba, 0xc3, 0x91, 0x21, 0x67,
    0xae, 0xd6, 0x09, 0xf5, 0xbe, 0x2a, 0xb9, 0x3a, 0x99, 0x77, 0x2c, 0xdd, 0x02, 0x39, 0x7a, 0x1d,
    0x7e, 0x9a, 0xaa, 0x33, 0x76, 0xd4, 0x93, 0x89, 0x2c, 0xe5, 0xeb, 0x2d, 0x6e, 0x2d, 0xb2, 0x32,
    0x54, 0x96, 0xad, 0x21, 0x7f, 0xc5, 0x2c, 0x94, 0x59, 0x50, 0x01, 0xf5, 0xc0, 0x63, 0xd6, 0xa5,
    0xab, 0xee, 0xbe, 0x99, 0x97, 0xa7, 0xb2, 0x29, 0xf7, 0xa4, 0x11, 0xd4, 0xf0, 0x4a, 0xd7, 0x17,
    0x9b, 0x08, 0xf1, 0x3b, 0xae, 0x6b, 0xa9, 0xc1, 0x20, 0x83, 0xf1, 0xfc, 0xf3, 0xcc, 0xed, 0x43,
    0xe8, 0x3e, 0x20, 0xe7, 0xb9, 0x88, 0x08, 0xaa, 0x47, 0xc3, 0xdf, 0x19, 0xb5, 0xc7, 0x65, 0xf0,
    0x11, 0x34, 0xb3, 0xae, 0x41, 0x26, 0xb0, 0x86, 0x9e, 0x93, 0x2a, 0x42, 0x56, 0xad, 0x1a, 0xeb,
    0x7f, 0x54, 0x16, 0x24, 0x31, 0x99, 0xc6, 0x94, 0x3a, 0xb3, 0x56, 0xe3, 0x3c, 0xf5, 0x05, 0xb7,
    0xa0, 0x92, 0x4c, 0x81, 0x2d, 0xe0, 0x7a, 0x73, 0x4a, 0x60, 0x55, 0x61, 0xb5, 0xaa, 0x9f, 0x3d,
    0x11, 0xdf, 0x61, 0x48, 0x32, 0x82, 0x88, 0x79, 0x5b, 0x6f, 0x98, 0xb4, 0x94, 0x26, 0x52, 0x8b,
    0x06, 0x4a, 0x0e, 0x7d, 0x4a, 0xe4, 0x04, 0x13, 0xc1, 0x2b, 0xb0, 0x17, 0x6f, 0x9f, 0x4c, 0x08,
    0xd2, 0xe4, 0xd2, 0xfc, 0xb7, 0x4d, 0x34, 0xa3, 0xbf, 0x6c, 0x32, 0x61, 0xec, 0x05, 0x78, 0x33,
    0xd5, 0x85, 0x98, 0x3a, 0x5e, 0x44, 0x73, 0xcc, 0x9a, 0x29, 0x72, 0xf9, 0x84, 0x5b, 0x24, 0x6c,
    0xe8, 0x39, 0x1c, 0x40, 0x4f, 0xf1, 0x16, 0x40, 0x7b, 0xaf, 0x38, 0x33, 0xc5, 0x72, 0xc1, 0xb4,
    0xe1, 0x3c, 0x6b, 0x47, 0xec, 0x46, 0x49, 0x2b, 0x7a, 0x7a, 0x8f, 0xfb, 0xb2, 0xe9, 0x75, 0xb6,
    0xb1, 0x21, 0xe9, 0x12, 0x44, 0x5c, 0xa8, 0xf2, 0xa1, 0x2c, 0x70, 0xb1, 0xa4, 0x1c, 0xe5, 0x90,
    0x66, 0x9e, 0xe2, 0x9a, 0x59, 0x2c, 0xc9, 0x8e, 0xf5, 0x21, 0x23, 0x32, 0xe2, 0x1d, 0x6e, 0x06,
    0xb9, 0x10, 0x63, 0x7a, 0x08, 0x66, 0x06, 0x5e, 0x5f, 0xc0, 0xd0, 0x42, 0xa4, 0x1c, 0x49, 0xbf,
    0x40, 0x62, 0x2f, 0x97, 0x7f, 0x97, 0x45, 0xe2, 0xd2, 0x65, 0x64, 0x29, 0xdb, 0x0d, 0x93, 0x0a,
    0xaf, 0x70, 0x04, 0x2b, 0x19, 0xe1, 0x9a, 0xfa, 0x19, 0xa9, 0x38, 0xee, 0x33, 0x3d, 0x1e, 0xca,
    0x84, 0xbb, 0xa9, 0x3d, 0xff, 0xb6, 0x63, 0x16, 0x67, 0xa3, 0x72, 0xb8, 0xaa, 0xdf, 0xf6, 0x98,
    0x7b, 0x6b, 0xf1, 0xae, 0x73, 0x70, 0x02, 0xd4, 0xd0, 0xb6, 0x3a, 0xf6, 0x8f, 0x26, 0xe4, 0xb1,
    0xb8, 0x70, 0x0b, 0xef, 0xfa, 0x73, 0x14, 0x17, 0x80, 0x5e, 0xc3, 0x55, 0xab, 0xb7, 0xa4, 0xa7,
    0x71, 0x22, 0xed, 0x26, 0x89, 0x3d, 0x8a, 0xde, 0x06, 0x74, 0x99, 0xd4, 0x81, 0x16, 0xa9, 0x51,
    0xcb, 0x97, 0x36, 0x24, 0x92, 0xe5, 0x81, 0x0d, 0x6f, 0x96, 0xc6, 0x20, 0x9e, 0xf6, 0xa9, 0x7c,
    0x4e, 0xc4, 0x39, 0x3b, 0x9f, 0x42, 0xbb, 0x06, 0xa7, 0x75, 0xf1, 0x75, 0x95, 0x37, 0x55, 0x21,
    0x49, 0x1f, 0x0f, 0xcb, 0x2b, 0x1b, 0xdd, 0x91, 0x8f, 0xf9, 0x2e, 0xb4, 0x92, 0xeb, 0xac, 0xae,
    0x09, 0xfc, 0x8e, 0x30, 0x90, 0xa8, 0xf1, 0x65, 0x8f, 0x70, 0x4f, 0xfa, 0x43, 0xb6, 0xcb, 0x77,
    0xad, 0xd0, 0xf0, 0x84, 0x8e, 0x10, 0x3f, 0x6d, 0x51, 0x99, 0x74, 0xa2, 0xa3, 0x7a, 0x57, 0xf1,
    0xf8, 0x5e, 0xfc, 0x3b, 0xd4, 0x00, 0xb0, 0x30, 0xcf, 0x1c, 0x4c, 0xfc, 0x39, 0xdc, 0xef, 0x15,
    0xaa, 0xac, 0x72, 0xdf, 0xd1, 0x62, 0x2d, 0xbe, 0x1e, 0x72, 0x67, 0xc4, 0x3a, 0x5e, 0x69, 0x57,
    0xcc, 0x89, 0x21, 0x72, 0x87, 0xea, 0x7b, 0x83, 0x3f, 0xc4, 0x8b, 0x06, 0xe7, 0x98, 0x89, 0x89,
    0x34, 0x6d, 0xe6, 0x93, 0x44, 0x38, 0x8e, 0xdf, 0xd6, 0xf5, 0xfd, 0xc4, 0x45, 0x12, 0x0b, 0x06,
    0x10, 0x9e, 0x19, 0x27, 0x0e, 0x8c, 0x86, 0x71, 0xd6, 0xff, 0x0a, 0xe8, 0xa1, 0xa4, 0xcd, 0xc5,
    0x5f, 0xd4, 0xe1, 0x3a, 0x2c, 0x05, 0x61, 0xd7, 0xa3, 0x62, 0x1f, 0x87, 0x70, 0xe6, 0x42, 0xca,
};

static const uint8_t sMessageEncodingTest0571_ExpectedEncoding[] =
{
    0x00, 0x20, 0xc3, 0xba, 0xe0, 0xb0, 0x4b, 0xa9, 0xbf, 0xa5, 0xdb, 0x0d, 0x4c, 0x3f, 0x02, 0xfb,
    0x71, 0xc3, 0xa2, 0x19, 0xf3, 0xc9, 0xd4, 0xe2, 0x3b, 0x56, 0x6a, 0x65, 0x56, 0x8f, 0x4a, 0x43,
    0x9c, 0x72, 0xd2, 0x92, 0x37, 0xda, 0x64, 0x6d, 0x13, 0xb9, 0xc8, 0x8a, 0x4c, 0x55, 0x14, 0x77,
    0x8f, 0x2e, 0x7c, 0x59, 0x60, 0x8c, 0x50, 0xee, 0x91, 0x1d, 0xdd, 0x2f, 0xca, 0x2c, 0xfa, 0xfb,
    0x6b, 0xc9, 0xb1, 0xa2, 0xe2, 0x70, 0x94, 0xc4, 0xdd, 0xf9, 0x3e, 0x7e, 0x22, 0x5a, 0xdf, 0xba,
    0x62, 0xbd, 0xe2, 0x93, 0x2d, 0xdf, 0xe1, 0x1c, 0xc5, 0x79, 0x89, 0x7a, 0xa2, 0x5d, 0xb9, 0xcc,
    0xaa, 0x18, 0x9f, 0xd2, 0x73, 0xbc, 0xdd, 0xa0, 0x1f, 0x8a, 0x3b, 0x99, 0x12, 0x73, 0x43, 0x68,
    0x14, 0xa0, 0x19, 0xab, 0x99, 0x8b, 0x45, 0x17, 0x85, 0x8a, 0x49, 0xe7, 0xf9, 0x3f, 0xa0, 0x7e,
    0x8a, 0xb9, 0x33, 0x1c, 0x42, 0xfe, 0x39, 0x63, 0xaa, 0xcc, 0x01, 0x71, 0xc2, 0x45, 0x10, 0xdb,
    0xa2, 0xc2, 0x65, 0xfc, 0x48, 0xe9, 0xa4, 0x30, 0xca, 0xbc, 0xa9, 0x8d, 0xf1, 0xd9, 0x52, 0xc9,
    0xf2, 0x36, 0xaf, 0x7e, 0x42, 0x0c, 0xd9, 0x62, 0x28, 0x46, 0x69, 0x67, 0x1f, 0x24, 0x03, 0xe6,
    0x3c, 0xf9, 0xa0, 0x9f, 0xbc, 0x92, 0xc4, 0x0c, 0x02, 0x27, 0x72, 0x6d, 0x58, 0x34, 0x1a, 0x0a,
    0xed, 0x09, 0x27, 0x3e, 0x4c, 0xba, 0x4c, 0x86, 0xaa, 0xb4, 0x85, 0xf7, 0x27, 0x2b, 0xa2, 0xde,
    0xb6, 0x28, 0x96, 0x01, 0xca, 0x0c, 0x36, 0xc5, 0x27, 0x37, 0x68, 0xc4, 0x94, 0xac, 0xd0, 0x5c,
    0x2b, 0x6b, 0x0e, 0xfd, 0x35, 0xfa, 0xa8, 0x06, 0x4a, 0xcc, 0x02, 0x9b, 0x49, 0xd8, 0xee, 0x46,
    0xd9, 0xa1, 0x3d, 0xc3, 0x8c, 0x20, 0x98, 0x76, 0xb5, 0xf5, 0x49, 0x1c, 0xbb, 0x8d, 0xe8, 0x1c,
    0x2f, 0x43, 0x19, 0x2c, 0x32, 0x7a, 0xb8, 0x94, 0xef, 0x34, 0x84, 0x7f, 0x6b, 0x4e, 0x77, 0x8c,
    0xcc, 0xc7, 0x5d, 0xa7, 0x7f, 0xb1, 0x91, 0x57, 0x30, 0x0d, 0xba, 0xec, 0xae, 0x3b, 0xfc, 0x57,
    0xab, 0xa5, 0x57, 0x09, 0x31, 0x4a, 0x39, 0xf8, 0x2a, 0x8d, 0x6c, 0x69, 0x2a, 0xd3, 0x55, 0x3e,
    0x08, 0xdb, 0x5c, 0x07, 0x3a, 0xf8, 0xb4, 0xbf, 0x7b, 0xc8, 0x1e, 0x52, 0xc3, 0xcc, 0x9c, 0x56,
    0x1b, 0x94, 0x8f, 0x27, 0x8e, 0x56, 0x2c, 0xe8, 0x01, 0xdc, 0x96, 0x12, 0xc0, 0x2e, 0x61, 0xa7,
    0x30, 0xbd, 0xc5, 0x96, 0xa4, 0xc3, 0x56, 0x6e, 0xa1, 0xf0, 0x34, 0x50, 0x2e, 0x67, 0x38, 0x94,
    0xa6, 0x1e, 0x95, 0x3a, 0x45, 0x31, 0x35, 0x9a, 0x41, 0x08, 0xdc, 0xe4, 0x36, 0xa0, 0x8b, 0xe6,
    0x56, 0x53, 0xc1, 0x99, 0x79, 0xc6, 0x01, 0xfc, 0x17, 0x53, 0xdb, 0x6b, 0xad, 0xfa, 0x85, 0xa4,
    0xfb, 0x68, 0x27, 0x09, 0x7c, 0x0d, 0x21, 0x47, 0x8d, 0x43, 0xaa, 0x19, 0xe1, 0xcd, 0xd1, 0xc7,
    0xb0, 0xc0, 0x5f, 0x7f, 0x46, 0xa8, 0x76, 0x1c, 0x02, 0x5c, 0x05, 0x99, 0x4c, 0x80, 0xac, 0x45,
    0xd8, 0x2a, 0xdb, 0x2f, 0xd7, 0xb2, 0x36, 0x94, 0x10, 0x72, 0x76, 0x85, 0x6c, 0xf1, 0x10, 0xc9,
    0x26, 0x93, 0x41, 0xaf, 0x35, 0x77, 0x37, 0x57, 0x1b, 0x3f, 0x70, 0xb6, 0x06, 0xa1, 0xe5, 0xc7,
    0x5a, 0xe9, 0xd2, 0x39, 0xc2, 0x8f, 0xed, 0x0a, 0xdb, 0x76, 0x15, 0xaa, 0x2c, 0x8d, 0xc4, 0x54,
    0x87, 0xba, 0xc3, 0x91, 0x21, 0x67, 0xae, 0xd6, 0x09, 0xf5, 0xbe, 0x2a, 0xb9, 0x3a, 0x99, 0x77,
    0x2c, 0xdd, 0x02, 0x39, 0x7a, 0x1d, 0x7e, 0x9a, 0xaa, 0x33, 0x76, 0xd4, 0x93, 0x89, 0x2c, 0xe5,
    0xeb, 0x2d, 0x6e, 0x2d, 0xb2, 0x32, 0x54, 0x96, 0xad, 0x21, 0x7f, 0xc5, 0x2c, 0x94, 0x59, 0x50,
    0x01, 0xf5, 0xc0, 0x63, 0xd6, 0xa5, 0xab, 0xee, 0xbe, 0x99, 0x97, 0xa7, 0xb2, 0x29, 0xf7, 0xa4,
    0x11, 0xd4, 0xf0, 0x4a, 0xd7, 0x17, 0x9b, 0x08, 0xf1, 0x3b, 0xae, 0x6b, 0xa9, 0xc1, 0x20, 0x83,
    0xf1, 0xfc, 0xf3, 0xcc, 0xed, 0x43, 0xe8, 0x3e, 0x20, 0xe7, 0xb9, 0x88, 0x08, 0xaa, 0x47, 0xc3,
    0xdf, 0x19, 0xb5, 0xc7, 0x65, 0xf0, 0x11, 0x34, 0xb3, 0xae, 0x41, 0x26, 0xb0, 0x86, 0x9e, 0x93,
    0x2a, 0x42, 0x56, 0xad, 0x1a, 0xeb, 0x7f, 0x54, 0x16, 0x24, 0x31, 0x99, 0xc6, 0x94, 0x3a, 0xb3,
    0x56, 0xe3, 0x3c, 0xf5, 0x05, 0xb7, 0xa0, 0x92, 0x4c, 0x81, 0x2d, 0xe0, 0x7a, 0x73, 0x4a, 0x60,
    0x55, 0x61, 0xb5, 0xaa, 0x9f, 0x3d, 0x11, 0xdf, 0x61, 0x48, 0x32, 0x82, 0x88, 0x79, 0x5b, 0x6f,
    0x98, 0xb4, 0x94, 0x26, 0x52, 0x8b, 0x06, 0x4a, 0x0e, 0x7d, 0x4a, 0xe4, 0x04, 0x13, 0xc1, 0x2b,
    0xb0, 0x17, 0x6f, 0x9f, 0x4c, 0x08, 0xd2, 0xe4, 0xd2, 0xfc, 0xb7, 0x4d, 0x34, 0xa3, 0xbf, 0x6c,
    0x32, 0x61, 0xec, 0x05, 0x78, 0x33, 0xd5, 0x85, 0x98, 0x3a, 0x5e, 0x44, 0x73, 0xcc, 0x9a, 0x29,
    0x72, 0xf9, 0x84, 0x5b, 0x24, 0x6c, 0xe8, 0x39, 0x1c, 0x40, 0x4f, 0xf1, 0x16, 0x40, 0x7b, 0xaf,
    0x38, 0x33, 0xc5, 0x72, 0xc1, 0xb4, 0xe1, 0x3c, 0x6b, 0x47, 0xec, 0x46, 0x49, 0x2b, 0x7a, 0x7a,
    0x8f, 0xfb, 0xb2, 0xe9, 0x75, 0xb6, 0xb1, 0x21, 0xe9, 0x12, 0x44, 0x5c, 0xa8, 0xf2, 0xa1, 0x2c,
    0x70, 0xb1, 0xa4, 0x1c, 0xe5, 0x90, 0x66, 0x9e, 0xe2, 0x9a, 0x59, 0x2c, 0xc9, 0x8e, 0xf5, 0x21,
    0x23, 0x32, 0xe2, 0x1d, 0x6e, 0x06, 0xb9, 0x10, 0x63, 0x7a, 0x08, 0x66, 0x06, 0x5e, 0x5f, 0xc0,
    0xd0, 0x42, 0xa4, 0x1c, 0x49, 0xbf, 0x40, 0x62, 0x2f, 0x97, 0x7f, 0x97, 0x45, 0xe2, 0xd2, 0x65,
    0x64, 0x29, 0xdb, 0x0d, 0x93, 0x0a, 0xaf, 0x70, 0x04, 0x2b, 0x19, 0xe1, 0x9a, 0xfa, 0x19, 0xa9,
    0x38, 0xee, 0x33, 0x3d, 0x1e, 0xca, 0x84, 0xbb, 0xa9, 0x3d, 0xff, 0xb6, 0x63, 0x16, 0x67, 0xa3,
    0x72, 0xb8, 0xaa, 0xdf, 0xf6, 0x98, 0x7b, 0x6b, 0xf1, 0xae, 0x73, 0x70, 0x02, 0xd4, 0xd0, 0xb6,
    0x3a, 0xf6, 0x8f, 0x26, 0xe4, 0xb1, 0xb8, 0x70, 0x0b, 0xef, 0xfa, 0x73, 0x14, 0x17, 0x80, 0x5e,
    0xc3, 0x55, 0xab, 0xb7, 0xa4, 0xa7, 0x71, 0x22, 0xed, 0x26, 0x89, 0x3d, 0x8a, 0xde, 0x06, 0x74,
    0x99, 0xd4, 0x81, 0x16, 0xa9, 0x51, 0xcb, 0x97, 0x36, 0x24, 0x92, 0xe5, 0x81, 0x0d, 0x6f, 0x96,
    0xc6, 0x20, 0x9e, 0xf6, 0xa9, 0x7c, 0x4e, 0xc4, 0x39, 0x3b, 0x9f, 0x42, 0xbb, 0x06, 0xa7, 0x75,
    0xf1, 0x75, 0x95, 0x37, 0x55, 0x21, 0x49, 0x1f, 0x0f, 0xcb, 0x2b, 0x1b, 0xdd, 0x91, 0x8f, 0xf9,
    0x2e, 0xb4, 0x92, 0xeb, 0xac, 0xae, 0x09, 0xfc, 0x8e, 0x30, 0x90, 0xa8, 0xf1, 0x65, 0x8f, 0x70,
    0x4f, 0xfa, 0x43, 0xb6, 0xcb, 0x77, 0xad, 0xd0, 0xf0, 0x84, 0x8e, 0x10, 0x3f, 0x6d, 0x51, 0x99,
    0x74, 0xa2, 0xa3, 0x7a, 0x57, 0xf1, 0xf8, 0x5e, 0xfc, 0x3b, 0xd4, 0x00, 0xb0, 0x30, 0xcf, 0x1c,
    0x4c, 0xfc, 0x39, 0xdc, 0xef, 0x15, 0xaa, 0xac, 0x72, 0xdf, 0xd1, 0x62, 0x2d, 0xbe, 0x1e, 0x72,
    0x67, 0xc4, 0x3a, 0x5e, 0x69, 0x57, 0xcc, 0x89, 0x21, 0x72, 0x87, 0xea, 0x7b, 0x83, 0x3f, 0xc4,
    0x8b, 0x06, 0xe7, 0x98, 0x89, 0x89, 0x34, 0x6d, 0xe6, 0x93, 0x44, 0x38, 0x8e, 0xdf, 0xd6, 0xf5,
    0xfd, 0xc4, 0x45, 0x12, 0x0b, 0x06, 0x10, 0x9e, 0x19, 0x27, 0x0e, 0x8c, 0x86, 0x71, 0xd6, 0xff,
    0x0a, 0xe8, 0xa1, 0xa4, 0xcd, 0xc5, 0x5f, 0xd4, 0xe1, 0x3a, 0x2c, 0x05, 0x61, 0xd7, 0xa3, 0x62,
    0x1f, 0x87, 0x70, 0xe6, 0x42, 0xca,
};

static const MessageEncodingTestVector sMessageEncodingTest0571 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0xB0E0BAC3,
        0,
        0x0000,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_None,
        0,
        NULL,
        NULL
    },
    NULL,
    sMessageEncodingTest0571_Payload,
    sizeof(sMessageEncodingTest0571_Payload),
    sMessageEncodingTest0571_ExpectedEncoding,
    sizeof(sMessageEncodingTest0571_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128CTRSHA1 sMessageEncodingTest0572_EncryptionKey =
{
    {
        0xef, 0x7f, 0xc3, 0x72, 0x46, 0xe0, 0xcf, 0x5b, 0x86, 0x2f, 0xfc, 0x4f, 0x10, 0x72, 0x64, 0x66,
    },
    {
        0x6e, 0x09, 0x79, 0xd4, 0x55, 0x11, 0xa0, 0xf9, 0x0a, 0x15, 0xf3, 0x9d, 0x49, 0x39, 0x6f, 0xfe,
        0x4c, 0xbb, 0xa9, 0xab,
    }
};
static const uint8_t sMessageEncodingTest0572_Payload[] =
{
    0xfb, 0xa0, 0x84, 0x13, 0xd7, 0x85, 0x17, 0x24, 0x59, 0x51, 0xaf, 0x24, 0x2b, 0xad, 0x5b, 0xdc,
    0xe6, 0xfc, 0x24, 0x69, 0x77, 0x67, 0x04, 0x03, 0x35, 0xa7, 0x17, 0x37, 0x1d, 0xa7, 0x7e, 0xd7,
    0x7c, 0x7c, 0x43, 0x7b, 0xb7, 0xb5, 0xc0, 0x7f, 0xd2, 0x40, 0x43, 0x13, 0x5f, 0x67, 0x27, 0xd2,
    0x25, 0x40, 0x3d, 0xdf, 0x85, 0x0e, 0x77, 0xd2, 0x85, 0x23, 0xee, 0x41, 0x5d, 0xf4, 0x01, 0x01,
    0x6d, 0x2c, 0x39, 0xf5, 0x2f, 0x20, 0x13, 0x84, 0x0b, 0x8d, 0x41, 0x52, 0x3e, 0x95, 0x6b, 0x29,
    0xb1, 0xdf, 0x47, 0x3c, 0xb9, 0x86, 0x30, 0x8b, 0xaa, 0x73, 0x08, 0x0c, 0x21, 0x82, 0xfd, 0x99,
    0x80, 0xd0, 0x85, 0xf3, 0x3e, 0xa1, 0xe4, 0x73, 0x08, 0x33, 0x0e, 0x95, 0xf9, 0x3b, 0x9c, 0x4b,
    0xa6, 0x56, 0x80, 0xf3, 0x10, 0x5b, 0x9b, 0xfe, 0xfe, 0xd8, 0x12, 0xb4, 0xe4, 0x6c, 0x23, 0xdb,
    0xd0, 0x0d, 0x32, 0x18, 0x24, 0x46, 0xc3, 0x7f, 0xfc, 0x22, 0x57, 0x39, 0x28, 0x8f, 0xe5, 0xc6,
    0x89, 0x72, 0xda, 0x17, 0xbe, 0x45, 0x9c, 0x08, 0x57, 0xa8, 0x24, 0xaa, 0x06, 0x56, 0x8f, 0x46,
    0x21, 0x6d, 0xe6, 0x9b, 0xb7, 0x05, 0xd8, 0xe6, 0xf6, 0x85, 0xe4, 0x61, 0x5f, 0x44, 0xfa, 0x06,
    0x01, 0xbf, 0x24, 0x6f, 0xd9, 0x90, 0xba, 0x99, 0x7f, 0x67, 0x29, 0x0a, 0x6f, 0xa7, 0x6c, 0x26,
    0x7c, 0x6f, 0x60, 0x19, 0xcc, 0xb5, 0x89, 0x4c, 0x83, 0x07, 0x16, 0xa3, 0xdc, 0x8c, 0x2d, 0x09,
    0xea, 0xe6, 0x97, 0xce, 0x1f, 0x55, 0x14, 0x46, 0x2c, 0x29, 0x52, 0x14, 0xe5, 0xb0, 0xeb, 0xa4,
    0xb3, 0x99, 0x48, 0x40, 0x0a, 0xd9, 0x4a, 0x4c, 0xc7, 0x40, 0x3f, 0x63, 0x50, 0x13, 0x34, 0x7b,
    0xfc, 0x4e, 0x28, 0x00, 0xed, 0x6a, 0xeb, 0x6d, 0x93, 0xa3, 0x6c, 0xc6, 0x1b, 0x95, 0x5b, 0x2e,
    0x7e, 0x36, 0xa7, 0xda, 0x82, 0x44, 0x8d, 0xc1, 0xbf, 0x1b, 0x1b, 0x8a, 0x9a, 0x29, 0xca, 0xf3,
    0x6f, 0x05, 0x5c, 0xe4, 0x6e, 0xa0, 0x59, 0x85, 0x0b, 0xa7, 0x65, 0x35, 0x0f, 0x84, 0x89, 0x03,
    0xda, 0x85, 0xe9, 0x16, 0x6f, 0x0d, 0x3d, 0xeb, 0x20, 0x19, 0x1d, 0xa2, 0xc6, 0xf3, 0x27, 0x85,
    0x49, 0x57, 0xfc, 0x1a, 0xd2, 0xab, 0x66, 0x86, 0xc1, 0xd9, 0xc0, 0xde, 0x1d, 0x8e, 0x02, 0x44,
    0xa5, 0x3b, 0xcb, 0x5c, 0x6d, 0x06, 0x54, 0x05, 0xa3, 0x67, 0x37, 0xb4, 0x5f, 0x29, 0xa1, 0x33,
    0x41, 0xb4, 0x48, 0x68, 0xc2, 0xa8, 0x2b, 0x7a, 0x13, 0x75, 0x48, 0x5c, 0xcd, 0x07, 0xe5, 0xad,
    0x16, 0x02, 0xde, 0x45, 0x30, 0x11, 0x51, 0x0e, 0x4e, 0x69, 0xd5, 0xc5, 0xc9, 0x11, 0x7a, 0xc1,
    0xea, 0x21, 0x43, 0xd4, 0x3f, 0xa9, 0xf9, 0x57, 0x09, 0xbe, 0x86, 0x07, 0xab, 0xf4, 0x2a, 0xad,
    0x3d, 0xb8, 0x6c, 0x14, 0xb4, 0xa2, 0x39, 0xe0, 0xc1, 0x2d, 0x8c, 0xbb, 0x33, 0xad, 0xa1, 0xf0,
    0x3b, 0xb4, 0x86, 0xf0, 0x8e, 0x4c, 0x42, 0xb4, 0x8a, 0x0b, 0xf2, 0x0c, 0x8f, 0x6e, 0xb8, 0xb7,
    0x7b, 0xf1, 0xd1, 0x1f, 0x30, 0x88, 0xcf, 0x56, 0xe5, 0xd3, 0xc8, 0x30, 0xa7, 0xcf, 0x13, 0xc1,
    0x6d, 0x92, 0x14, 0xdf, 0x7c, 0x74, 0x8e, 0xc5, 0x29, 0x7b, 0xad, 0xab, 0x86, 0x42, 0x46, 0x82,
    0x11, 0xee, 0xaf, 0x14, 0xae, 0x15, 0x26, 0x3d, 0xc9, 0xcf, 0x06, 0xf7, 0x0f, 0xb3, 0xfa, 0x47,
    0x8b, 0x37, 0xcb, 0x39, 0x67, 0xa6, 0xd6, 0xff, 0xee, 0x4c, 0xaa, 0x27, 0xe3, 0x9e, 0x80, 0x59,
    0xbb, 0x1d, 0xfc, 0x02, 0x9e, 0x86, 0xdb, 0x8b, 0x65, 0xce, 0xa2, 0x56, 0x88, 0xc8, 0x78, 0x15,
    0xe4, 0xb9, 0x70, 0xa7, 0xc8, 0xb7, 0x23, 0x02, 0x2a, 0x88, 0x85, 0xd0, 0x1c, 0xaa, 0xd0, 0x1b,
    0xab, 0x68, 0x9b, 0x79, 0x39, 0xeb, 0x38, 0x0f, 0x02, 0x02, 0xb4, 0x41, 0x93, 0xe5, 0x2b, 0x93,
    0x42, 0x3a, 0xdc, 0x4b, 0x50, 0x1b, 0xad, 0x60, 0xbb, 0x19, 0x2d, 0x23, 0x5a, 0xca, 0x2b, 0x23,
    0x2a, 0x5c, 0xf1, 0xca, 0x62, 0x01, 0xa7, 0x36, 0x60, 0xd4, 0x4e, 0x30, 0xdd, 0xf1, 0x2d, 0xc2,
    0x31, 0x6c, 0x1a, 0x99, 0x47, 0x25, 0x34, 0x41, 0x26, 0x15, 0x8b, 0xd7, 0xae, 0x6f, 0x46, 0x87,
    0xc3, 0xb2, 0xd7, 0x3f, 0xf7, 0xc4, 0x56, 0xe9, 0x58, 0x40, 0x21, 0xb7, 0x62, 0x3c, 0x34, 0x43,
    0xaa, 0x6c, 0xb9, 0x4c, 0xf6, 0xe3, 0x14, 0xad, 0x70, 0x75, 0x12, 0x57, 0x91, 0xd7, 0x86, 0x9b,
    0xed, 0x13, 0x57, 0x32, 0x89, 0x72, 0xd7, 0x05, 0x11, 0xf1, 0xe8, 0x7f, 0xba, 0xc6, 0xc0, 0x38,
    0xf1, 0xca, 0x7c, 0x31, 0xfb, 0x98, 0x4d, 0x8d, 0xf1, 0x79, 0xba, 0x42, 0x3d, 0xd3, 0x9b, 0xd2,
    0x92, 0xe9, 0x02, 0x3d, 0xa4, 0xff, 0x1a, 0xfd, 0x9a, 0x50, 0xf1, 0xe5, 0xa3, 0xdb, 0x05, 0x5f,
    0x9a, 0x54, 0x2b, 0x9c, 0xbe, 0x29, 0xda, 0xbb, 0x98, 0x2f, 0x0b, 0x3d, 0x9b, 0x57, 0xed, 0xea,
    0x0b, 0x5a, 0xfb, 0x91, 0x7a, 0x4f, 0xd4, 0x91, 0xae, 0x56, 0x85, 0x7f, 0x3b, 0xd1, 0x91, 0x43,
    0x24, 0xf9, 0x65, 0x50, 0x8a, 0x37, 0x19, 0x9b, 0x92, 0xb1, 0x83, 0x35, 0x62, 0xef, 0xdd, 0x8c,
    0xe8, 0x6c, 0xb1, 0xfa, 0xf3, 0xdd, 0xa9, 0xb6, 0x25, 0x0d, 0x5c, 0x38, 0xaf, 0xa0, 0xe6, 0x6e,
    0x5c, 0xcd, 0x11, 0x94, 0x48, 0xa3, 0xfb, 0xd4, 0xa4, 0xd6, 0x70, 0xd3, 0x9f, 0x51, 0x49, 0x0d,
    0x19, 0x02, 0x4e, 0x60, 0xe6, 0x60, 0x48, 0x99, 0xa5, 0xb0, 0xc5, 0xc1, 0x6f, 0x1d, 0xcc, 0x11,
    0x06, 0xd9, 0x4d, 0x55, 0x69, 0xe5, 0xa4, 0x82, 0xc8, 0xa1, 0xe0, 0x44, 0x45, 0x6b, 0x2a, 0x4e,
    0x53, 0xf9, 0x8e, 0x0d, 0xac, 0xbb, 0xc4, 0x4d, 0x02, 0x30, 0x6a, 0x4d, 0xab, 0x52, 0x6b, 0xa7,
    0x54, 0x44, 0x7f, 0x4e, 0x12, 0x3e, 0x76, 0x22, 0xe9, 0xef, 0x4f, 0x95, 0xd7, 0xec, 0xf4, 0xb3,
    0x81, 0x07, 0xd3, 0xe6, 0x3c, 0xb7, 0x5f, 0xc4, 0x72, 0x03, 0x3d, 0x7c, 0x67, 0xd1, 0x51, 0xe5,
    0x8b, 0xba, 0x3d, 0xe1, 0x9d, 0x9d, 0x66, 0xd0, 0x46, 0xc0, 0xbe, 0xca, 0x3e, 0x1e, 0xc8, 0x23,
    0xfc, 0xca, 0xb6, 0x30, 0x4a, 0xb1, 0x35, 0x46, 0x1e, 0xeb, 0x3a, 0xc7, 0x91, 0x68, 0x41, 0xaa,
    0x1e, 0xf0, 0x26, 0xbb, 0xbe, 0xbb, 0xea, 0xc4, 0xc8, 0xc9, 0x01, 0x1f, 0xee, 0x04, 0x34, 0xdd,
    0xf2, 0xf2, 0x30, 0xa2, 0xcb, 0x3a, 0xfa, 0x30, 0x4a, 0xcd, 0x3c, 0xc7, 0xd9, 0xad, 0x7e, 0xd3,
    0x09, 0xbb, 0xbe, 0x2c, 0x56, 0xcb, 0xf5, 0x2d, 0x70, 0x12, 0x6e, 0x7a, 0x34, 0x26, 0x50, 0xa9,
    0x32, 0x33, 0x2b, 0x35, 0xf7, 0x3d, 0xed, 0x49, 0x26, 0x2b, 0xf4, 0x8f, 0xcf, 0x4b, 0x89, 0x07,
    0xe4, 0xed, 0x3b, 0x02, 0x8f, 0xfd, 0xa0, 0x97, 0x0b, 0xeb, 0xbf, 0x51, 0xb0, 0x74, 0xe0, 0x78,
    0x55, 0x6e, 0x7e, 0x0b, 0x5f, 0x7a, 0xe8, 0x41, 0xab, 0x63, 0xaa, 0x61, 0x23, 0xcf, 0x04, 0x70,
    0xbb, 0x05, 0x5e, 0x61, 0x47, 0xa4, 0x4c, 0x54, 0x03, 0x88, 0x4a, 0x0a, 0x21, 0xde, 0xaf, 0x87,
    0x94, 0x22, 0xf2, 0xa4, 0x05, 0xec, 0xb0, 0xdb, 0xb0, 0xc0, 0xcd, 0x38, 0x76, 0x34, 0xe0, 0x0a,
    0xdc, 0x9a, 0x97, 0x95, 0x64, 0x66, 0x4f, 0x9e, 0x5e, 0xd6, 0x2e, 0x26, 0xb8, 0xbd, 0x80, 0x4e,
    0x24, 0xef, 0x0e, 0x8b, 0xd0, 0xef, 0xf0, 0x55, 0xa1, 0x20, 0x4a, 0xe3, 0xe1, 0x11, 0x34, 0x8c,
    0x06, 0x46, 0xc5, 0x34, 0x93, 0xbe, 0x68, 0x72, 0xee, 0xf0, 0xa1, 0x14, 0xba, 0xb8, 0xf2, 0xc2,
};

static const uint8_t sMessageEncodingTest0572_ExpectedEncoding[] =
{
    0x10, 0x20, 0x1f, 0xe2, 0x80, 0x8f, 0x4f, 0x26, 0xf8, 0x74, 0x40, 0x8c, 0x96, 0xf3, 0x23, 0xf5,
    0x77, 0x3c, 0xc9, 0x66, 0x45, 0x9c, 0x0e, 0x52, 0x43, 0x42, 0x65, 0xe8, 0xd1, 0x85, 0x8e, 0x48,
    0xf6, 0x2c, 0xa0, 0x80, 0x58, 0xb2, 0x29, 0x4a, 0x44, 0xbb, 0x91, 0x9c, 0xfa, 0x43, 0xa3, 0x19,
    0x84, 0xee, 0xac, 0xa1, 0x20, 0x60, 0xae, 0x0d, 0xe9, 0x6c, 0x22, 0x3e, 0xfd, 0x3e, 0x9e, 0x17,
    0x1c, 0x17, 0x51, 0xe9, 0xf3, 0xc4, 0x9e, 0x1d, 0x34, 0x73, 0xa8, 0xd7, 0x28, 0x04, 0xb3, 0xe7,
    0x3f, 0x09, 0xb9, 0x9f, 0xf4, 0x48, 0xc4, 0xfe, 0x17, 0x4b, 0x17, 0x67, 0xac, 0xd2, 0xa3, 0xd2,
    0x84, 0x22, 0x61, 0xa8, 0xa8, 0xb1, 0x39, 0x8c, 0xfa, 0x70, 0xc0, 0x33, 0x9a, 0x0b, 0x72, 0x00,
    0x82, 0x34, 0xdd, 0x6e, 0xba, 0x09, 0xb5, 0x38, 0xb4, 0x06, 0x1d, 0x42, 0x4f, 0x52, 0x4d, 0x0b,
    0x1c, 0x6d, 0x64, 0x41, 0xcd, 0x3e, 0xe7, 0xf4, 0x1e, 0x92, 0x39, 0xe9, 0x77, 0x0a, 0x25, 0x8f,
    0xfa, 0x8a, 0x0d, 0x41, 0x5b, 0xc8, 0x49, 0x3e, 0x27, 0xdc, 0x19, 0xba, 0xa1, 0x8a, 0x34, 0x61,
    0xf2, 0x02, 0x72, 0x69, 0x12, 0x4f, 0x91, 0x5b, 0xb7, 0xa3, 0xcf, 0x0b, 0x45, 0x08, 0xac, 0xe4,
    0x86, 0x60, 0x66, 0x2b, 0x9f, 0xc9, 0x28, 0xa7, 0xd1, 0xda, 0x26, 0xbb, 0xce, 0x82, 0x37, 0x80,
    0xdb, 0xae, 0xec, 0x6f, 0x2b, 0xd3, 0xda, 0xc4, 0x48, 0x49, 0x42, 0x61, 0xce, 0xf1, 0x20, 0xd1,
    0x8d, 0xc8, 0xd3, 0x98, 0x84, 0x77, 0xe1, 0x2b, 0x3f, 0x15, 0xe0, 0x28, 0x1f, 0xa6, 0x89, 0xa8,
    0x33, 0x79, 0x2f, 0x50, 0xff, 0x16, 0xb5, 0xae, 0xb9, 0xbe, 0x9c, 0xa6, 0x45, 0x94, 0x2e, 0xaa,
    0x1f, 0xd9, 0xdd, 0xcd, 0x63, 0x3b, 0x9f, 0x89, 0xea, 0xfa, 0x30, 0xbe, 0x0d, 0x24, 0xcf, 0x31,
    0x06, 0xfe, 0x01, 0x5f, 0x42, 0x40, 0x51, 0x9d, 0xf0, 0xf4, 0xa2, 0x4e, 0xff, 0x9c, 0x51, 0x45,
    0x4d, 0xa1, 0xa9, 0xfa, 0x19, 0xdb, 0x2d, 0xbb, 0x8b, 0x1e, 0xb3, 0xec, 0x6b, 0x6b, 0x46, 0xc2,
    0x8e, 0x81, 0x6b, 0x1a, 0x51, 0x29, 0x21, 0x9a, 0x5a, 0xb7, 0x55, 0x43, 0xb3, 0x6b, 0x8d, 0x0d,
    0xb4, 0xf5, 0xdb, 0x9b, 0x68, 0x26, 0xce, 0xdc, 0x5c, 0x9b, 0xdd, 0xdf, 0x89, 0x34, 0xfa, 0xa0,
    0xa0, 0x87, 0x69, 0x64, 0x04, 0xf6, 0xcf, 0x9e, 0x41, 0x66, 0xc6, 0x4d, 0xdf, 0xab, 0x78, 0x17,
    0x4a, 0x5d, 0xf5, 0x66, 0xdc, 0x05, 0xaf, 0x56, 0x1b, 0x28, 0x72, 0xc0, 0x38, 0xf4, 0x61, 0x8b,
    0xa1, 0x03, 0xd2, 0xc1, 0x7f, 0x9f, 0x87, 0x18, 0x68, 0xf8, 0x89, 0x76, 0x4c, 0x59, 0x74, 0x53,
    0x5e, 0xa7, 0x58, 0xe9, 0xf9, 0x0f, 0x77, 0xf0, 0xcf, 0x81, 0x6a, 0x44, 0x16, 0x85, 0xa7, 0x0f,
    0xea, 0xeb, 0x03, 0x69, 0x3d, 0xed, 0x0e, 0x9b, 0xfb, 0x2a, 0x0b, 0xa6, 0x28, 0x90, 0xf0, 0x25,
    0xb5, 0x6a, 0xa1, 0x68, 0x09, 0xc8, 0xab, 0x58, 0xae, 0xf5, 0x67, 0x1b, 0x42, 0xcb, 0x7e, 0xff,
    0x5e, 0xf1, 0x24, 0x98, 0xc9, 0x93, 0xf3, 0x5f, 0xcf, 0xe6, 0xc0, 0xfc, 0x84, 0x8a, 0xd8, 0x8c,
    0x50, 0x86, 0xea, 0xe8, 0x0c, 0x34, 0xcf, 0x5a, 0xcf, 0xd6, 0x6e, 0x46, 0x8d, 0x09, 0xcc, 0x8e,
    0xad, 0x03, 0x19, 0x3a, 0xea, 0x66, 0x89, 0xc8, 0xeb, 0xb8, 0xfd, 0x8c, 0x38, 0xc0, 0x4f, 0x49,
    0xf2, 0x7e, 0x5a, 0x9c, 0xd5, 0xba, 0x52, 0xe5, 0x3c, 0xec, 0x68, 0xb7, 0xd1, 0xdc, 0x6f, 0x37,
    0xb6, 0x51, 0x5f, 0xcf, 0x9f, 0x4c, 0x83, 0x0d, 0xac, 0xc6, 0x3a, 0x2b, 0xe4, 0xad, 0xff, 0x58,
    0x5d, 0x39, 0x1d, 0x33, 0xfd, 0x59, 0xe7, 0x9d, 0x52, 0xec, 0x48, 0xe9, 0xc4, 0xbc, 0x3f, 0xa0,
    0xcd, 0x5f, 0x25, 0x9b, 0x49, 0x24, 0x3f, 0xa7, 0x50, 0x1e, 0x22, 0x8f, 0xda, 0x10, 0xed, 0x11,
    0x0c, 0x33, 0x12, 0xcc, 0xec, 0x1f, 0x94, 0x29, 0x67, 0xf4, 0x25, 0x82, 0xd6, 0x0f, 0x5e, 0xe1,
    0x5e, 0x26, 0x98, 0x8c, 0xfa, 0x17, 0x9e, 0x08, 0xe2, 0x01, 0x91, 0xb9, 0xe0, 0x63, 0x69, 0xf5,
    0xbd, 0x0a, 0x5a, 0x2e, 0xfe, 0x8a, 0xfb, 0x6a, 0xda, 0xdd, 0x24, 0xcb, 0xb3, 0xe4, 0xd5, 0xad,
    0x7a, 0x97, 0x5f, 0x92, 0x41, 0xbe, 0xf5, 0x42, 0x6c, 0x6e, 0x2d, 0xe1, 0xdb, 0xeb, 0x60, 0xba,
    0xdb, 0xeb, 0xf1, 0xa2, 0x71, 0xce, 0x0c, 0x79, 0xa0, 0x85, 0xc6, 0xaf, 0xfb, 0xe4, 0x71, 0x36,
    0x27, 0x2d, 0x69, 0x3a, 0x3e, 0x51, 0x12, 0xd7, 0xab, 0x8d, 0x85, 0x3a, 0x9f, 0x9b, 0x6b, 0xfa,
    0xd3, 0x92, 0x1e, 0x3b, 0x77, 0x01, 0xfa, 0x65, 0xb0, 0x95, 0xe8, 0x19, 0xfc, 0xd6, 0xef, 0x2d,
    0x04, 0x3a, 0x32, 0x75, 0x78, 0xe8, 0x07, 0x9f, 0x1b, 0xb5, 0x09, 0xfe, 0xa2, 0x22, 0xf8, 0x22,
    0x52, 0xb5, 0x38, 0xe1, 0x7f, 0x05, 0xfa, 0xe2, 0xd7, 0x06, 0xcb, 0xd5, 0xdb, 0x80, 0x6e, 0x00,
    0xef, 0xe1, 0x14, 0xe2, 0xe6, 0x45, 0x72, 0xca, 0x16, 0x1e, 0x3e, 0x63, 0x54, 0xa2, 0x42, 0x60,
    0x01, 0x9e, 0xff, 0xae, 0xed, 0x42, 0x6f, 0x71, 0xf2, 0x0b, 0x2f, 0x22, 0x0c, 0xc2, 0x1b, 0xc0,
    0x11, 0x12, 0x54, 0x62, 0x84, 0x45, 0xf4, 0xd5, 0x10, 0x04, 0xa9, 0xe4, 0xaa, 0xa1, 0xd6, 0xce,
    0xdd, 0x8a, 0xff, 0xd4, 0x71, 0x18, 0x33, 0x6a, 0x12, 0x87, 0x75, 0x5f, 0xfa, 0xf4, 0xee, 0xac,
    0x76, 0x35, 0xa0, 0xf2, 0x81, 0x63, 0xa9, 0xf1, 0x3b, 0xab, 0x5e, 0x00, 0xb7, 0xaa, 0xc9, 0x74,
    0xa6, 0x4f, 0x7b, 0x9d, 0x6b, 0xf7, 0xcb, 0x73, 0x27, 0x47, 0x51, 0x56, 0xc7, 0x32, 0x8b, 0x09,
    0x52, 0xca, 0x99, 0x9f, 0x25, 0x73, 0x7b, 0xa0, 0x35, 0x78, 0x6a, 0x48, 0x15, 0x9c, 0xc2, 0xe1,
    0x7a, 0x62, 0xad, 0xb1, 0x0a, 0x07, 0x47, 0xb4, 0x97, 0x87, 0x1e, 0xae, 0x4e, 0x52, 0x70, 0x03,
    0xa5, 0x1d, 0x53, 0x11, 0x2b, 0x28, 0xec, 0x2b, 0x3f, 0x66, 0x12, 0xe3, 0x12, 0x56, 0xb7, 0x59,
    0x10, 0xcc, 0xc3, 0xb8, 0x62, 0xe8, 0xa3, 0x41, 0x96, 0x66, 0x99, 0x20, 0x26, 0x0c, 0x5a, 0x55,
    0x21, 0xd1, 0x8b, 0x64, 0xb1, 0xdc, 0x99, 0x4a, 0x05, 0x52, 0x2a, 0x7c, 0x11, 0x94, 0x5d, 0xc9,
    0xba, 0x50, 0x3f, 0x65, 0xc0, 0x73, 0x89, 0x97, 0x08, 0x4b, 0xaa, 0x80, 0xf5, 0x04, 0x8a, 0xa6,
    0xf5, 0x04, 0xa1, 0x5d, 0xfc, 0x1d, 0x1d, 0xd7, 0x3f, 0x3c, 0xbe, 0x86, 0x4f, 0x9c, 0xa6, 0xef,
    0xb4, 0x1e, 0x64, 0x5a, 0x9c, 0xa3, 0xec, 0x25, 0x3d, 0x2b, 0x7f, 0x9b, 0x0d, 0x38, 0x99, 0xfc,
    0xae, 0xd4, 0x51, 0x1e, 0xd2, 0x5e, 0xb3, 0xcb, 0x1c, 0xa5, 0x7e, 0x48, 0x8a, 0x9c, 0xca, 0x8f,
    0xed, 0x1d, 0xfe, 0x3f, 0x8d, 0x22, 0x8a, 0x8b, 0xfc, 0x35, 0x40, 0xc8, 0x91, 0x7a, 0x5f, 0x36,
    0x39, 0x4d, 0x79, 0xfd, 0x4b, 0x5c, 0xb2, 0x39, 0x97, 0x6a, 0x01, 0x90, 0xd1, 0x2a, 0x98, 0x28,
    0xed, 0x75, 0x0a, 0x00, 0xe0, 0x18, 0xd6, 0xe4, 0x35, 0x1c, 0x43, 0xb1, 0x2d, 0xe5, 0x9a, 0xd1,
    0x24, 0xd0, 0xbe, 0x04, 0x14, 0xb4, 0x4c, 0x76, 0xad, 0xa3, 0x39, 0x06, 0xaf, 0xc2, 0x18, 0x25,
    0xde, 0xa2, 0xbe, 0xc7, 0xad, 0x78, 0xf9, 0x06, 0xe8, 0x08, 0x72, 0x59, 0xa1, 0x16, 0xde, 0x99,
    0xa8, 0xfc, 0x5a, 0xf4, 0xd2, 0x52, 0xd6, 0xd3, 0x65, 0xac, 0xf0, 0x58, 0x9a, 0x78, 0x9a, 0xd1,
    0x11, 0xe2, 0xe5, 0xa9, 0xbb, 0xd4, 0xe4, 0x6c, 0x38, 0xfc, 0x7a, 0xf4, 0xc7, 0xbe, 0xe3, 0xd6,
    0x6f, 0xb7, 0x47, 0x26, 0xce, 0x84, 0x7a, 0xd2, 0x54, 0x61, 0x31, 0x2a, 0x92, 0x76, 0x94, 0x59,
    0xa1, 0xa5, 0x2a, 0x1b, 0x6f, 0x74, 0x90, 0xec, 0x65, 0x42, 0x73, 0x12,
};

static const MessageEncodingTestVector sMessageEncodingTest0572 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x8F80E21F,
        0,
        0x264F,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128CTRSHA1,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0572_EncryptionKey,
    sMessageEncodingTest0572_Payload,
    sizeof(sMessageEncodingTest0572_Payload),
    sMessageEncodingTest0572_ExpectedEncoding,
    sizeof(sMessageEncodingTest0572_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0573_EncryptionKey =
{
    {
        0x4f, 0xea, 0xeb, 0xa0, 0xc0, 0x8c, 0xd0, 0xbe, 0x0b, 0xf1, 0x4e, 0x22, 0x69, 0xbe, 0x2b, 0x50,
    }
};
static const uint8_t sMessageEncodingTest0573_Payload[] =
{
    0xf5, 0xf8, 0x5a, 0x09, 0xc4, 0xe3, 0x90, 0x2a, 0x0f, 0x6e, 0xd2, 0x36, 0x81, 0x8a, 0x19, 0x7d,
    0x6a, 0x93, 0xa5, 0x4e, 0x59, 0x93, 0x25, 0x48, 0xa3, 0xb6, 0x46, 0xd1, 0x67, 0xd3, 0x5f, 0xeb,
    0x20, 0xda, 0x99, 0xff, 0x13, 0x6a, 0x5f, 0x0b, 0x68, 0xdf, 0xa2, 0x33, 0x4f, 0x03, 0x83, 0xcb,
    0xbd, 0x04, 0x32, 0x97, 0x59, 0x6c, 0xab, 0xea, 0x13, 0xe1, 0x40, 0x22, 0x89, 0x38, 0x5e, 0xf8,
    0x35, 0x1c, 0xe8, 0x02, 0x41, 0x53, 0xe1, 0x08, 0xd9, 0x29, 0xcd, 0x8a, 0x30, 0x0e, 0x6d, 0x57,
    0xb2, 0x30, 0x68, 0x31, 0xb9, 0xce, 0x31, 0x51, 0x5a, 0xac, 0x1e, 0x9c, 0x4c, 0xb5, 0x19, 0x99,
    0x40, 0xc7, 0xea, 0x53, 0xcc, 0x0c, 0xc4, 0x02, 0xab, 0xd2, 0x09, 0x4d, 0xdc, 0x1e, 0x6e, 0x36,
    0xf2, 0xf0, 0x67, 0x18, 0x57, 0xc4, 0x02, 0x3d, 0xae, 0x35, 0xa2, 0x76, 0x41, 0x47, 0x38, 0xc1,
    0x70, 0xba, 0x90, 0xe9, 0xc2, 0x50, 0x9d, 0x03, 0x56, 0x81, 0x24, 0xde, 0xf7, 0x29, 0xb4, 0x38,
    0xa4, 0xfd, 0xb9, 0x98, 0xa6, 0x64, 0xda, 0x95, 0xb2, 0x04, 0x1b, 0x99, 0x3a, 0x26, 0x1c, 0x2a,
    0xd8, 0x69, 0x58, 0x46, 0xbd, 0xdd, 0xb1, 0x87, 0x77, 0x67, 0x6f, 0x3d, 0xb0, 0x0b, 0xca, 0x45,
    0x09, 0x1c, 0x1f, 0xad, 0x91, 0xb9, 0x58, 0x5e, 0xcb, 0x09, 0x04, 0xaf, 0xad, 0x47, 0x32, 0x6a,
    0x02, 0x2e, 0x2e, 0x2c, 0xbe, 0x96, 0x0c, 0xee, 0xd7, 0xba, 0x0b, 0x39, 0x27, 0x25, 0x6b, 0xd6,
    0x6c, 0x47, 0x08, 0x03, 0xaa, 0xfb, 0x85, 0xc1, 0x73, 0xb5, 0x0e, 0x7c, 0x44, 0x4f, 0xa3, 0x2b,
    0x63, 0x3c, 0x9e, 0xc7, 0x7d, 0x0d, 0x88, 0x05, 0x00, 0xcb, 0x97, 0xac, 0x73, 0x14, 0xc4, 0x5a,
    0x88, 0x20, 0xf8, 0xa7, 0xa2, 0x05, 0x2c, 0x7b, 0x5a, 0x43, 0x6e, 0x03, 0x69, 0xdc, 0x86, 0xaf,
    0x3d, 0xbf, 0xc2, 0xef, 0x4a, 0x74, 0xcd, 0x18, 0xbb, 0xca, 0xc6, 0x30, 0x6f, 0xe2, 0x49, 0x71,
    0xfc, 0x6b, 0x50, 0x86, 0x01, 0x5a, 0x46, 0x24, 0x0c, 0xb5, 0x29, 0xb9, 0x92, 0x96, 0x7b, 0xb6,
    0xc0, 0x42, 0xdb, 0xba, 0x59, 0x4a, 0xc5, 0x32, 0xc2, 0x13, 0xf8, 0xb3, 0xf9, 0x8c, 0x1e, 0x3b,
    0xb9, 0x66, 0x05, 0xba, 0xba, 0x19, 0x95, 0x2f, 0x58, 0x01, 0x9c, 0xb0, 0x38, 0xfc, 0x43, 0xf0,
    0x1a, 0x96, 0x2c, 0x1a, 0xf1, 0xfe, 0xde, 0x89, 0xb3, 0xd4, 0xf3, 0x37, 0x33, 0x98, 0xad, 0xd9,
    0x7e, 0x14, 0xec, 0xa8, 0x61, 0x55, 0x75, 0x00, 0x3c, 0xed, 0x2b, 0xbc, 0xcc, 0x91, 0x13, 0x61,
    0xd1, 0xcc, 0x58, 0x67, 0x9e, 0xcf, 0xf4, 0xe2, 0xf1, 0xc2, 0xaf, 0x76, 0x5e, 0x26, 0xe6, 0xb2,
    0xfc, 0x81, 0x6d, 0x7b, 0x61, 0xaa, 0x43, 0x16, 0xb6, 0x5d, 0x3f, 0x1f, 0x8b, 0xbc, 0x62, 0x11,
    0xd4, 0xaf, 0x25, 0x7c, 0x91, 0x7d, 0x04, 0x6e, 0x9b, 0x80, 0x76, 0x4d, 0x7a, 0xd5, 0xbe, 0x4b,
    0x9b, 0x0b, 0xec, 0x71, 0x2b, 0xd9, 0x6b, 0x17, 0x8d, 0xd8, 0x76, 0xce, 0x4f, 0xaf, 0xe9, 0xca,
    0xea, 0xf9, 0x76, 0x90, 0x46, 0x6a, 0xdc, 0x1c, 0x71, 0x16, 0x9f, 0x52, 0xca, 0xfc, 0x6d, 0xd5,
    0x25, 0xa0, 0x0d, 0x44, 0xfd, 0x08, 0x8e, 0xc6, 0xd6, 0x5a, 0x5d, 0xd5, 0x00, 0x1f, 0xd9, 0x28,
    0x13, 0x6b, 0xdf, 0x36, 0x4f, 0x35, 0xd9, 0x83, 0xdf, 0xc7, 0x2e, 0xe5, 0x70, 0x08, 0x13, 0x77,
    0x83, 0xde, 0x84, 0x81, 0xa9, 0x6e, 0x67, 0x45, 0xf0, 0x15, 0x85, 0x0f, 0x54, 0x44, 0x48, 0x87,
    0x0c, 0x03, 0x21, 0xb3, 0x29, 0x6f, 0xa8, 0x2f, 0xc1, 0x75, 0xe8, 0x08, 0x36, 0x3e, 0x5e, 0xaa,
    0xb6, 0xca, 0x78, 0x84, 0xb7, 0x85, 0x26, 0x5f, 0x8a, 0x53, 0x31, 0x31, 0xb9, 0xaa, 0xbc, 0xdf,
    0x86, 0x84, 0xad, 0x0e, 0x8e, 0x87, 0x05, 0x07, 0xdb, 0x99, 0xcf, 0xe7, 0xb8, 0x51, 0x50, 0x45,
    0x1f, 0x60, 0xb9, 0x92, 0xa7, 0x59, 0x29, 0x15, 0x4b, 0xfe, 0xea, 0x54, 0x69, 0x27, 0xde, 0x41,
    0xc0, 0xe2, 0x63, 0xa1, 0xd9, 0xfc, 0xe4, 0x5b, 0xc1, 0xe8, 0xa4, 0x64, 0x2e, 0x6d, 0x42, 0x70,
    0xdd, 0xf1, 0xd9, 0xa0, 0x4b, 0x7a, 0xdb, 0xd2, 0x02, 0x25, 0x5f, 0xec, 0x9f, 0x14, 0xde, 0x56,
    0xf2, 0x77, 0xc0, 0xba, 0x17, 0x2b, 0x26, 0xa4, 0xd1, 0xce, 0x06, 0x18, 0x59, 0xc3, 0x6b, 0x51,
    0x94, 0x07, 0x60, 0x25, 0xf8, 0x79, 0xa2, 0xf7, 0xe4, 0x88, 0x3e, 0x56, 0x19, 0x02, 0xe7, 0x01,
    0xbe, 0x62, 0x8d, 0x2f, 0x12, 0x0b, 0x58, 0xdd, 0x12, 0x50, 0x20, 0x6f, 0x4f, 0x43, 0x1f, 0x73,
    0xe4, 0xf4, 0x5f, 0x95, 0x39, 0x17, 0xfb, 0x7c, 0xba, 0x6c, 0x5e, 0xd0, 0x15, 0x7a, 0xc9, 0x80,
    0x09, 0x38, 0xc7, 0xa3, 0xbc, 0x4c, 0x9a, 0xa5, 0x11, 0x79, 0x6f, 0xa2, 0xde, 0x24, 0x66, 0x6a,
    0x7b, 0x8e, 0xa5, 0x35, 0xa1, 0x02, 0x42, 0x6e, 0x04, 0xcd, 0xfd, 0xe7, 0x6b, 0xb3, 0x93, 0x09,
    0x22, 0x00, 0xd6, 0x7a, 0xbd, 0x9f, 0x26, 0xad, 0xb6, 0x4e, 0x14, 0x3b, 0x92, 0x98, 0x1e, 0xe1,
    0xbd, 0x9c, 0xfa, 0xee, 0xc7, 0x01, 0xaf, 0xde, 0x47, 0x95, 0xd3, 0x2a, 0x91, 0x41, 0xa1, 0x33,
    0x0d, 0xd3, 0xea, 0x8c, 0x99, 0xc1, 0xc0, 0x68, 0x80, 0x33, 0xfd, 0x18, 0x25, 0xb2, 0x00, 0x5b,
    0x1c, 0x79, 0xea, 0x41, 0x01, 0x58, 0x48, 0x5c, 0xe0, 0x23, 0xa6, 0x0d, 0x24, 0x50, 0xfb, 0xb0,
    0xbd, 0x90, 0xcf, 0x23, 0x89, 0x99, 0xe3, 0x82, 0xbe, 0xfd, 0x16, 0x90, 0xb8, 0x5d, 0x49, 0xe7,
    0xc7, 0xcd, 0xc9, 0x46, 0x4b, 0x1b, 0x5f, 0x41, 0xb9, 0x9a, 0x1a, 0xf2, 0xc4, 0x38, 0x4f, 0xde,
    0xbd, 0xc6, 0x7b, 0x61, 0xb6, 0x8f, 0x8b, 0x79, 0x87, 0x9e, 0x21, 0xf5, 0xc5, 0x8a, 0xaf, 0x2e,
    0x10, 0x4a, 0x4d, 0x3e, 0x18, 0x29, 0xc2, 0xec, 0xe1, 0x62, 0x64, 0x45, 0x1b, 0x47, 0xbb, 0x37,
    0x21, 0x23, 0x6a, 0x41, 0xf4, 0xda, 0x52, 0x92, 0x57, 0x7d, 0x49, 0xb5, 0xa4, 0x0d, 0x69, 0xdd,
    0xe8, 0x20, 0xaf, 0x2f, 0x64, 0xda, 0x46, 0x24, 0x4e, 0x8e, 0x93, 0xd8, 0x6d, 0xe1, 0x10, 0xb5,
    0x24, 0x28, 0xc5, 0x52, 0xbe, 0x48, 0xe8, 0x46, 0xbf, 0xd2, 0xfe, 0x31, 0xf8, 0xe6, 0x48, 0x8d,
    0x1e, 0x37, 0x51, 0x9a, 0x01, 0xe8, 0xee, 0x98, 0x6d, 0x2c, 0x9d, 0x68, 0x5f, 0xbb, 0x2d, 0xa8,
    0x65, 0xc1, 0xf0, 0xb9, 0x80, 0x9e, 0x03, 0xbb, 0xd9, 0x82, 0xc8, 0x12, 0x11, 0x9f, 0x29, 0x92,
    0x71, 0x93, 0x86, 0xf9, 0xeb, 0x58, 0xfa, 0xf1, 0x67, 0x06, 0x16, 0x86, 0x4e, 0xe7, 0x4f, 0xd0,
    0xab, 0x88, 0x13, 0x26, 0xa6, 0x54, 0x91, 0x3f, 0x21, 0x6f, 0x67, 0xae, 0xa4, 0xe2, 0x15, 0x64,
    0x76, 0x60, 0x6f, 0xc5, 0x96, 0x25, 0x81, 0xa2, 0xd1, 0x5d, 0x5d, 0x33, 0x2a, 0x9c, 0xb4, 0xaa,
    0x42, 0x30, 0x77, 0xc9, 0xe2, 0x4d, 0xd6, 0xb1, 0xfe, 0xa0, 0x00, 0xaf, 0x09, 0xdf, 0x54, 0x0d,
    0x27, 0xa3, 0x19, 0x13, 0xdb, 0xc2, 0x40, 0x41, 0x6c, 0x9e, 0x95, 0xda, 0xe9, 0x1f, 0x19, 0x10,
    0x35, 0x56, 0x64, 0xa6, 0x5c, 0x70, 0xd0, 0x09, 0x4b, 0x3d, 0xaf, 0x12, 0x89, 0x7e, 0x13, 0x9c,
    0x6a, 0x5e, 0x55, 0x66, 0x0e, 0xac, 0x5c, 0x6c, 0xb5, 0x2c, 0x76, 0xde, 0x18, 0x8c, 0xa2, 0x2f,
    0x1e, 0xc1, 0xb2, 0x94, 0xc3, 0x28, 0x38, 0xbd, 0x7f, 0xb8, 0xc1, 0xdf, 0x28, 0x73, 0x6d, 0x91,
    0x64, 0x40, 0x22, 0x2b, 0x28, 0xca, 0xe0, 0x6d, 0x1f, 0xfb, 0xcf, 0x7b, 0xe4, 0x3a, 0x26, 0xe7,
};

static const uint8_t sMessageEncodingTest0573_ExpectedEncoding[] =
{
    0x20, 0x20, 0x4a, 0x74, 0x74, 0x7e, 0x16, 0x2f, 0xa2, 0xad, 0x2c, 0xf5, 0x68, 0x7a, 0xd9, 0xf9,
    0xc2, 0x0d, 0x69, 0xe5, 0x1a, 0x51, 0x40, 0xbd, 0x12, 0x51, 0xc8, 0xca, 0x9d, 0x6f, 0x54, 0xee,
    0x26, 0x10, 0x39, 0xc5, 0x0c, 0x5b, 0x9a, 0xb1, 0xb6, 0x79, 0xd8, 0x8f, 0xb9, 0xcc, 0x24, 0x62,
    0x60, 0x0c, 0x7e, 0x70, 0xd4, 0xb2, 0x21, 0x55, 0xee, 0xc4, 0x9a, 0xea, 0xd1, 0xc6, 0x32, 0xb8,
    0x10, 0xe5, 0xdd, 0xba, 0xde, 0xc8, 0x97, 0xb4, 0xb0, 0xee, 0x54, 0xe3, 0x20, 0x08, 0x58, 0x5e,
    0x4e, 0x12, 0x73, 0x98, 0x5a, 0x51, 0x0a, 0xc9, 0xe3, 0x16, 0x90, 0x06, 0xfc, 0x54, 0x4c, 0x48,
    0x5a, 0x5a, 0x21, 0x29, 0xeb, 0x70, 0xb6, 0xb0, 0xdc, 0xeb, 0x78, 0x48, 0x8a, 0x65, 0xfa, 0x05,
    0x56, 0x0a, 0xe6, 0xa1, 0xde, 0x47, 0x63, 0xa3, 0x06, 0xe7, 0x53, 0xf5, 0x2d, 0xb0, 0xd7, 0xca,
    0x10, 0xb2, 0xf1, 0x81, 0x4f, 0x85, 0x0f, 0x96, 0x00, 0xce, 0x7c, 0x18, 0x56, 0x65, 0x42, 0x4f,
    0xb1, 0x11, 0xcd, 0x1d, 0x5c, 0x3f, 0x19, 0xc8, 0xcf, 0x9f, 0xc4, 0x5e, 0x78, 0x79, 0x1f, 0x22,
    0x98, 0xb8, 0xcb, 0xe0, 0x84, 0xdf, 0x53, 0x22, 0x00, 0x3d, 0x5e, 0x41, 0xc3, 0xc8, 0xc0, 0x3b,
    0x40, 0x3c, 0x07, 0xb8, 0x52, 0x00, 0xc2, 0xd0, 0x6e, 0xc4, 0x1c, 0xa1, 0x87, 0xad, 0x9f, 0x6c,
    0xdc, 0xcd, 0xf6, 0x2f, 0x95, 0x82, 0x19, 0x60, 0xd4, 0x63, 0x7e, 0xf1, 0x36, 0x1e, 0xe7, 0x81,
    0xb3, 0xa6, 0x7e, 0x09, 0xf7, 0xa2, 0x02, 0xe6, 0x6e, 0x8b, 0x9d, 0xde, 0x55, 0xa5, 0xe6, 0x83,
    0xad, 0xee, 0xa0, 0x8e, 0x1b, 0x22, 0xf3, 0x81, 0x49, 0x89, 0x31, 0xfa, 0xde, 0x51, 0x05, 0x4e,
    0x39, 0x92, 0x8f, 0x25, 0x56, 0x77, 0xe1, 0xc7, 0xb7, 0x6b, 0xa6, 0x8e, 0x78, 0x42, 0x73, 0x63,
    0x70, 0x4d, 0xc7, 0xeb, 0x5d, 0x8f, 0x9a, 0xb3, 0x10, 0xb4, 0x20, 0xe6, 0x96, 0x6c, 0x95, 0x78,
    0x01, 0x46, 0x3e, 0xc4, 0x85, 0xe7, 0x54, 0xbb, 0xe8, 0x03, 0x5e, 0xb6, 0xae, 0x64, 0x6c, 0x5e,
    0x43, 0xfb, 0xa2, 0x24, 0x6a, 0xfd, 0xc0, 0x3f, 0x49, 0xc0, 0xe1, 0x74, 0x06, 0x41, 0x56, 0xc4,
    0x26, 0x0e, 0xd2, 0x7d, 0xd5, 0x41, 0x54, 0x0b, 0xeb, 0xe8, 0x69, 0x63, 0x34, 0x08, 0x19, 0xf2,
    0x1c, 0xc0, 0x95, 0x60, 0xaa, 0xd7, 0xc9, 0xc0, 0x8e, 0x0f, 0x73, 0xd3, 0x47, 0x4d, 0x46, 0x8f,
    0xde, 0x1e, 0x86, 0x97, 0x9f, 0x60, 0x36, 0x57, 0x66, 0xc5, 0x0d, 0x61, 0x44, 0xcf, 0xbd, 0x2f,
    0x3a, 0xc6, 0x1d, 0x1c, 0x86, 0x72, 0xb1, 0x96, 0x80, 0x32, 0x45, 0x06, 0x38, 0x41, 0x11, 0x3a,
    0x39, 0x9d, 0x10, 0xb7, 0x9f, 0xb8, 0x1b, 0xf5, 0xa9, 0xe8, 0x3f, 0x77, 0xb2, 0x62, 0x2e, 0xae,
    0x8e, 0x0a, 0xb6, 0xc3, 0x47, 0x14, 0x93, 0xbe, 0x65, 0x8a, 0x14, 0xe6, 0x3b, 0x60, 0x3c, 0xa7,
    0xcf, 0x3d, 0xaf, 0x32, 0x2f, 0xc3, 0x5c, 0x7c, 0x7b, 0x19, 0xcd, 0xf3, 0x21, 0xc7, 0x8b, 0xc6,
    0xc8, 0x75, 0x3f, 0xdf, 0xdb, 0x0b, 0x44, 0x16, 0x9c, 0xfd, 0x4c, 0xff, 0x38, 0x37, 0x64, 0x59,
    0x58, 0x3f, 0xfa, 0xe6, 0xff, 0xfd, 0x69, 0x8c, 0x0e, 0x0f, 0xb1, 0xc0, 0x08, 0x94, 0xdc, 0xae,
    0x9c, 0xd0, 0xe6, 0xf8, 0x1f, 0x9c, 0x0d, 0x3c, 0x61, 0x28, 0xeb, 0x84, 0xdd, 0xa0, 0x1c, 0x52,
    0xcc, 0x5e, 0xeb, 0xb0, 0x18, 0x01, 0xe2, 0x3a, 0xa7, 0xce, 0xd1, 0xa9, 0x05, 0xaf, 0x7f, 0xf9,
    0xdc, 0xd5, 0xcd, 0xc7, 0xbc, 0x05, 0xfc, 0x75, 0x07, 0x25, 0x85, 0x0c, 0x41, 0x83, 0x5c, 0xa0,
    0x08, 0x3a, 0x06, 0x55, 0xeb, 0x07, 0x40, 0x6d, 0x00, 0x76, 0xb2, 0x6a, 0x86, 0x25, 0xdc, 0xae,
    0xe2, 0x69, 0xa4, 0x7a, 0x66, 0x74, 0x85, 0xd4, 0xa9, 0x26, 0x72, 0x6b, 0xd7, 0x90, 0x78, 0x04,
    0xb4, 0xa7, 0x7f, 0x93, 0xa3, 0x44, 0xcc, 0xd0, 0x00, 0x95, 0xb6, 0x00, 0xa6, 0xb6, 0x16, 0x73,
    0xcf, 0x30, 0x69, 0x5d, 0x5e, 0x8f, 0xe2, 0xac, 0xc0, 0x50, 0x2f, 0xb0, 0xf0, 0x9f, 0x7b, 0xcb,
    0xc1, 0x23, 0x31, 0xe1, 0x7b, 0x8c, 0x92, 0x82, 0xd4, 0xdd, 0x6e, 0xf8, 0x3b, 0x71, 0xc8, 0x85,
    0x17, 0x0c, 0x6d, 0xec, 0xba, 0xf4, 0x3b, 0x29, 0xef, 0xe8, 0x37, 0x70, 0xcf, 0xc1, 0xc0, 0x94,
    0xdd, 0xb8, 0xc3, 0x89, 0xc4, 0x39, 0xfb, 0x26, 0xd2, 0x17, 0x4b, 0x40, 0x3d, 0x1a, 0xc7, 0xa3,
    0x66, 0x81, 0x3a, 0x6c, 0x29, 0xe9, 0x96, 0xbf, 0xa8, 0x2a, 0xd7, 0xba, 0x85, 0xdb, 0x6d, 0x3d,
    0x2b, 0x04, 0xa6, 0x79, 0x6e, 0x6b, 0xda, 0xd3, 0xfb, 0x5b, 0x78, 0x80, 0xdc, 0xf3, 0x2f, 0x90,
    0xdb, 0xdd, 0xcb, 0x95, 0x1e, 0x85, 0x56, 0xac, 0xa0, 0xef, 0xca, 0x01, 0xaf, 0x2a, 0xc9, 0x2f,
    0x39, 0xa8, 0x05, 0xb2, 0x59, 0xfd, 0xa2, 0x33, 0xbe, 0x52, 0xdd, 0x82, 0x10, 0x32, 0xe7, 0x7b,
    0xdd, 0xc8, 0xf6, 0x27, 0x93, 0xeb, 0x1f, 0x6f, 0xdb, 0xd6, 0xfc, 0x1c, 0x89, 0xc6, 0x7f, 0x60,
    0x1c, 0x4d, 0xa4, 0xb1, 0x1b, 0xfd, 0x2c, 0x48, 0x48, 0xdf, 0x8f, 0xd3, 0xc9, 0x6e, 0xd6, 0x58,
    0x85, 0x3e, 0x6b, 0x69, 0xe0, 0x2f, 0x1f, 0x47, 0xf9, 0x70, 0x6c, 0xfe, 0xee, 0x41, 0xbb, 0x21,
    0x2b, 0x63, 0x0d, 0x1d, 0xd0, 0xe7, 0x49, 0xdd, 0x2f, 0x0b, 0x95, 0xbf, 0xcd, 0xc1, 0xae, 0xa2,
    0xd1, 0xe3, 0xb7, 0xbb, 0xaa, 0xe5, 0xd3, 0x7a, 0x8f, 0xd0, 0x33, 0x5e, 0x00, 0xc7, 0x32, 0xd0,
    0xed, 0x4e, 0x83, 0xdd, 0xe6, 0x2a, 0x7c, 0xe5, 0xbf, 0x77, 0x14, 0x73, 0x50, 0x9c, 0x0b, 0xfc,
    0xae, 0x42, 0xbf, 0x5c, 0xb0, 0x03, 0x02, 0xad, 0xe5, 0x41, 0x79, 0x5d, 0x80, 0x0d, 0xd6, 0xc3,
    0x09, 0x1e, 0xed, 0x51, 0x20, 0x21, 0x6c, 0xe1, 0x1b, 0x23, 0xf4, 0x11, 0x11, 0x46, 0x73, 0x21,
    0x1a, 0xdd, 0xd8, 0xb8, 0x26, 0x61, 0xa7, 0x8e, 0x49, 0x75, 0x87, 0x03, 0x15, 0x1d, 0x40, 0xcd,
    0x21, 0x64, 0xd6, 0xff, 0xca, 0xd9, 0xb1, 0xca, 0x8c, 0xcb, 0x38, 0xb6, 0x08, 0x52, 0x61, 0x85,
    0x06, 0x4f, 0x70, 0xcc, 0xed, 0xce, 0x83, 0xda, 0x5d, 0x51, 0x46, 0x27, 0x0c, 0x95, 0x3f, 0x90,
    0xa9, 0x33, 0xc0, 0xee, 0x78, 0x87, 0x2d, 0xa1, 0x1e, 0xe1, 0x18, 0x82, 0xe3, 0x2e, 0xd3, 0x5e,
    0x73, 0x02, 0x6e, 0x1f, 0x68, 0x7f, 0x85, 0x6c, 0x1f, 0x34, 0x61, 0x17, 0xfb, 0xcd, 0xf7, 0x6b,
    0xe0, 0x22, 0x69, 0xd0, 0x50, 0x8c, 0x1e, 0x21, 0xeb, 0x85, 0x25, 0xfd, 0x77, 0xb7, 0x74, 0x54,
    0x34, 0x8f, 0x8f, 0xb6, 0x43, 0xe5, 0xfc, 0x8d, 0x03, 0x39, 0x96, 0xea, 0xbb, 0xa2, 0x71, 0xe0,
    0xd6, 0xf3, 0xbe, 0xe8, 0x49, 0xe4, 0x7f, 0x33, 0xbe, 0x32, 0x8d, 0xe7, 0x87, 0x0b, 0xc2, 0x27,
    0xcc, 0xed, 0x40, 0xfc, 0xee, 0xd9, 0x91, 0x39, 0x4f, 0xac, 0xc1, 0xa6, 0x66, 0x79, 0xd8, 0xb8,
    0x4d, 0x0c, 0x4e, 0x89, 0x19, 0xa4, 0x8d, 0xaa, 0x6f, 0x36, 0x9c, 0x3f, 0x61, 0x56, 0x52, 0x97,
    0x0b, 0x26, 0x35, 0x34, 0xbc, 0xbf, 0xfe, 0x22, 0x80, 0x37, 0x4c, 0xb9, 0x33, 0x39, 0x0e, 0xf4,
    0xf6, 0xc2, 0xdf, 0x3d, 0x48, 0xba, 0x43, 0x19, 0xa9, 0x70, 0x0b, 0x91, 0xb8, 0x2e, 0x16, 0xad,
    0xd4, 0x04, 0x22, 0x4b, 0xcf, 0x41, 0xc7, 0x03, 0xda, 0xaf, 0xbb, 0xfd, 0x61, 0xc1, 0xb3, 0x7c,
    0x2e, 0x72, 0x86, 0xf8, 0x86, 0x46, 0x63, 0x61, 0xb9, 0x53, 0x7d, 0x3b, 0x3f, 0x7f, 0xe4, 0xc4,
    0x5f, 0x4d, 0x75, 0x34, 0x91, 0xea, 0xd1, 0xcd, 0x2e, 0x2b, 0x32, 0xe2, 0x4e, 0x4a, 0xc9, 0x03,
};

static const MessageEncodingTestVector sMessageEncodingTest0573 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x7E74744A,
        0,
        0x2F16,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX64,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0573_EncryptionKey,
    sMessageEncodingTest0573_Payload,
    sizeof(sMessageEncodingTest0573_Payload),
    sMessageEncodingTest0573_ExpectedEncoding,
    sizeof(sMessageEncodingTest0573_ExpectedEncoding)
};


static const WeaveEncryptionKey_AES128EAX sMessageEncodingTest0574_EncryptionKey =
{
    {
        0x07, 0x8a, 0xcf, 0x66, 0xdb, 0x1e, 0x0f, 0xfe, 0x2c, 0x39, 0xc4, 0x33, 0x73, 0x1e, 0x2f, 0x36,
    }
};
static const uint8_t sMessageEncodingTest0574_Payload[] =
{
    0x4e, 0x4b, 0x38, 0x27, 0xb4, 0x8e, 0x1f, 0x19, 0x38, 0x84, 0xcb, 0x84, 0xec, 0xdb, 0x9e, 0x71,
    0x8c, 0x34, 0x2f, 0x22, 0xa3, 0x47, 0x11, 0x18, 0x11, 0xe7, 0x4a, 0x3f, 0x6e, 0xd9, 0x03, 0xe9,
    0x9d, 0x66, 0xed, 0xd4, 0x70, 0x5d, 0x6c, 0xb5, 0x13, 0x2a, 0x1e, 0xb8, 0xbd, 0x13, 0x33, 0xef,
    0x4c, 0x9e, 0x61, 0x96, 0x54, 0x85, 0x23, 0xcf, 0xc2, 0x4a, 0x09, 0x1d, 0x58, 0xa5, 0x2c, 0xce,
    0xf3, 0xf4, 0x0d, 0x92, 0x37, 0x49, 0xb3, 0x13, 0xb4, 0x7a, 0x18, 0x67, 0xcc, 0xcf, 0xaf, 0x8e,
    0x25, 0xae, 0x5d, 0xb0, 0x2f, 0x94, 0xcb, 0x2a, 0x78, 0x43, 0xa0, 0x3b, 0x32, 0x32, 0x8d, 0x93,
    0x91, 0xa6, 0xfb, 0x83, 0x02, 0xd9, 0xd1, 0x42, 0xff, 0xc3, 0xdc, 0x1a, 0x99, 0xfb, 0x65, 0x06,
    0x35, 0x96, 0x77, 0xff, 0x1f, 0x03, 0x74, 0xbf, 0xc6, 0xea, 0x83, 0x6c, 0xd8, 0x66, 0x2d, 0x96,
    0x41, 0xa6, 0x0e, 0x45, 0x06, 0xe1, 0x46, 0xc8, 0xae, 0xb2, 0xfe, 0xfc, 0x13, 0x04, 0x1b, 0x44,
    0x87, 0xdd, 0x76, 0x70, 0x92, 0x69, 0xd2, 0xa8, 0xea, 0x47, 0xbd, 0x8c, 0x74, 0xde, 0x23, 0x00,
    0x55, 0x10, 0x04, 0xb2, 0x26, 0x29, 0xe7, 0x7e, 0x77, 0x9d, 0xec, 0x89, 0xec, 0x1f, 0xc2, 0xdd,
    0xb0, 0x45, 0x01, 0x8e, 0x38, 0x7b, 0x9b, 0x87, 0x32, 0x44, 0x0b, 0x55, 0x0b, 0x0d, 0x75, 0x0c,
    0x33, 0xd9, 0xf3, 0x3b, 0xa0, 0x5b, 0xde, 0x43, 0x7d, 0xa7, 0x56, 0x80, 0xbb, 0x52, 0x46, 0xd9,
    0xe4, 0xb1, 0xe4, 0x7e, 0xa7, 0xaf, 0x5e, 0x83, 0x11, 0xd5, 0x65, 0x2b, 0x0f, 0x3f, 0x9b, 0xa5,
    0x23, 0x3a, 0xc7, 0xc9, 0xe9, 0x1c, 0xc6, 0x10, 0xf6, 0x6e, 0x3c, 0xbd, 0x0a, 0x09, 0x3f, 0x45,
    0x2a, 0x3b, 0xce, 0x88, 0xdc, 0xec, 0x3a, 0x43, 0xb8, 0x1e, 0x23, 0x68, 0x40, 0x6b, 0x4c, 0x92,
    0x8c, 0x6a, 0xd2, 0xab, 0x85, 0xde, 0x23, 0x47, 0x3d, 0x11, 0xf2, 0xa8, 0xcd, 0xb0, 0x6f, 0x2e,
    0xdc, 0xd3, 0x45, 0x67, 0x80, 0x9b, 0x45, 0x83, 0x0a, 0xaf, 0x79, 0x34, 0x8f, 0x41, 0x75, 0x9f,
    0xbe, 0x20, 0xc7, 0xbb, 0x2f, 0x8b, 0xcc, 0x9d, 0x56, 0x68, 0x52, 0xa5, 0xbe, 0x4f, 0x47, 0xe4,
    0x00, 0xc3, 0xd3, 0x7c, 0x44, 0x92, 0x06, 0x28, 0x15, 0xe3, 0xfe, 0x35, 0x55, 0x86, 0x99, 0x83,
    0xf3, 0xc0, 0x3a, 0x41, 0x1a, 0xb8, 0x0e, 0x31, 0x42, 0x09, 0xfc, 0x79, 0x68, 0xef, 0xdf, 0xa4,
    0x5f, 0x70, 0xa5, 0x75, 0xf1, 0x8d, 0xf4, 0x78, 0xa5, 0xe8, 0x0a, 0xa9, 0x98, 0x2f, 0x91, 0xef,
    0x67, 0xc4, 0x67, 0x08, 0x26, 0x50, 0xb3, 0x56, 0x77, 0xde, 0x34, 0x4f, 0x6a, 0xba, 0xc0, 0x1b,
    0x2a, 0xc2, 0x89, 0x00, 0x04, 0x56, 0x54, 0x29, 0x6b, 0xff, 0xbf, 0x3a, 0x20, 0x50, 0xed, 0x20,
    0xd8, 0x26, 0xde, 0x7d, 0x50, 0xb9, 0x7d, 0x5f, 0xce, 0x4a, 0xfc, 0xbf, 0xc4, 0xf8, 0x10, 0xac,
    0x8f, 0xd6, 0xee, 0x22, 0x5f, 0x67, 0x57, 0x5a, 0x37, 0x00, 0xde, 0xf2, 0x43, 0xde, 0x0b, 0x21,
    0xf7, 0xd6, 0x11, 0xdb, 0xae, 0x0a, 0xb8, 0x66, 0x5f, 0xad, 0xbb, 0x57, 0x89, 0xb9, 0x98, 0x44,
    0xb1, 0xc3, 0xc2, 0xb3, 0xbf, 0xd0, 0x4f, 0x59, 0xc7, 0x4a, 0xf1, 0xd9, 0x4b, 0xc5, 0x7d, 0x24,
    0x03, 0xa2, 0x77, 0xbf, 0xc9, 0x06, 0xa1, 0x88, 0x57, 0x38, 0x2b, 0xdc, 0x61, 0xb4, 0xc9, 0x7a,
    0x76, 0x64, 0xcc, 0x93, 0x11, 0xd9, 0xef, 0x94, 0x30, 0xc5, 0x1b, 0xe8, 0xa5, 0x0a, 0x6b, 0x0b,
    0x30, 0xb1, 0x58, 0x8c, 0x9d, 0x67, 0x04, 0x85, 0x14, 0x63, 0x40, 0xb1, 0xd4, 0x5e, 0xac, 0xd6,
    0x63, 0xd8, 0xc2, 0x90, 0x74, 0x7e, 0xa6, 0xca, 0xa6, 0xa1, 0xec, 0x40, 0x28, 0x2e, 0x84, 0x46,
    0xdf, 0x59, 0xee, 0x3b, 0x8a, 0x08, 0x69, 0xa1, 0x5c, 0x1b, 0x07, 0x65, 0x1d, 0x82, 0xcc, 0x3c,
    0xa8, 0xac, 0x87, 0x5e, 0x6c, 0x1d, 0x2b, 0x58, 0x4a, 0xb8, 0x32, 0xfe, 0xc6, 0xfe, 0xef, 0xac,
    0x67, 0x9c, 0x05, 0x26, 0x8b, 0x45, 0xcc, 0x0b, 0x12, 0xc5, 0x19, 0x58, 0xe8, 0x20, 0x5f, 0x79,
    0x86, 0x9b, 0x2f, 0x13, 0x1e, 0x2b, 0xf3, 0x7b, 0x44, 0x97, 0x2d, 0x1d, 0x33, 0x7a, 0x86, 0xe7,
    0x76, 0x18, 0xbe, 0x04, 0xe2, 0x1f, 0x45, 0x6e, 0xee, 0xa9, 0xff, 0xe0, 0x31, 0x16, 0x61, 0xe1,
    0xbe, 0x62, 0x0c, 0x31, 0xe7, 0xd5, 0x1a, 0x6d, 0x75, 0x23, 0xe5, 0x55, 0x4b, 0xe5, 0x4d, 0x86,
    0x11, 0x1e, 0x94, 0xeb, 0x75, 0xc3, 0x41, 0x22, 0x7a, 0xf7, 0x24, 0xcd, 0x15, 0x4f, 0x80, 0x69,
    0x2c, 0x60, 0xd5, 0x7f, 0xe4, 0x94, 0x7b, 0x5c, 0x8b, 0x5a, 0x30, 0xd1, 0xc3, 0xd7, 0xbe, 0x08,
    0x25, 0x2a, 0x05, 0xbb, 0x6a, 0x35, 0x50, 0xcd, 0x02, 0xe0, 0x7d, 0x4f, 0x3c, 0xe0, 0x61, 0x49,
    0x78, 0x42, 0x21, 0x9f, 0x2a, 0xf1, 0x7b, 0x08, 0x6c, 0xf4, 0x78, 0xa0, 0x0f, 0x2c, 0xd4, 0x6c,
    0x3f, 0x1a, 0x6b, 0xa2, 0x7d, 0x64, 0xe2, 0x65, 0xf6, 0x39, 0x24, 0xcc, 0xf1, 0x12, 0x67, 0xd4,
    0xea, 0xd2, 0x83, 0xd0, 0xd7, 0x6e, 0x5b, 0x34, 0x99, 0x66, 0xa6, 0x0e, 0xdd, 0x6f, 0x1e, 0xcc,
    0x0e, 0x3c, 0x5f, 0x6f, 0xff, 0xe1, 0x14, 0xf2, 0x60, 0xa0, 0x28, 0xcb, 0x10, 0x6b, 0x0a, 0xd7,
    0xdf, 0xad, 0xc3, 0x6e, 0xd0, 0xe8, 0x9a, 0xe7, 0x81, 0x1e, 0x3e, 0xe5, 0x78, 0xd6, 0x49, 0x5b,
    0x00, 0x19, 0x0f, 0x13, 0x7d, 0xd8, 0xb3, 0xe8, 0xdd, 0x19, 0xee, 0xea, 0xca, 0x13, 0xaa, 0xa0,
    0x0f, 0x56, 0xd9, 0x46, 0x76, 0x15, 0x6e, 0x9e, 0x11, 0x9e, 0x1c, 0x2a, 0x8c, 0xfc, 0xe3, 0xec,
    0xdf, 0x8e, 0xb3, 0x96, 0x3c, 0x90, 0xf1, 0x25, 0xe1, 0x18, 0x5f, 0x93, 0x62, 0xe0, 0xef, 0xfe,
    0xf1, 0x20, 0x1f, 0x39, 0xd5, 0x1f, 0x27, 0xe4, 0xa0, 0xe1, 0x85, 0x96, 0xad, 0x39, 0x42, 0x7e,
    0x2f, 0x44, 0x92, 0xd1, 0x6f, 0x4c, 0xd8, 0xcf, 0x9a, 0xc9, 0x1f, 0x17, 0x9d, 0x03, 0x8e, 0x25,
    0xc8, 0x79, 0xc8, 0x49, 0x67, 0x54, 0x59, 0x67, 0xdd, 0x38, 0x1f, 0x3d, 0x89, 0xb7, 0x0f, 0x91,
    0x3c, 0xcf, 0x37, 0x25, 0xd6, 0x8c, 0x9f, 0x9f, 0x7b, 0xe4, 0xab, 0x94, 0x03, 0x95, 0xcc, 0x05,
    0x0a, 0xd1, 0x43, 0x53, 0x29, 0xef, 0x1b, 0x8b, 0xf2, 0xb0, 0xd1, 0x40, 0xcb, 0x6e, 0x4b, 0x4a,
    0xfd, 0xda, 0xee, 0x3f, 0xb3, 0x84, 0xe7, 0x70, 0x51, 0x59, 0x41, 0xe4, 0x75, 0xac, 0x56, 0x33,
    0x91, 0xf6, 0x34, 0x5f, 0x40, 0x84, 0x6f, 0xed, 0x32, 0x48, 0x7f, 0xa9, 0xcf, 0x32, 0x8a, 0x4e,
    0xde, 0xda, 0x8a, 0x10, 0x28, 0xaa, 0xe6, 0x2b, 0xa2, 0x0e, 0xc7, 0xb3, 0xcf, 0x51, 0x40, 0x24,
    0xc9, 0x76, 0xdd, 0x1e, 0x81, 0x1a, 0x06, 0x95, 0xef, 0x08, 0x02, 0xec, 0x07, 0x4a, 0x1e, 0xc4,
    0xd0, 0x19, 0x4e, 0x6f, 0x68, 0x27, 0x63, 0x8d, 0x2d, 0xff, 0x22, 0x00, 0xfc, 0xd0, 0x32, 0x1f,
    0xa5, 0x3c, 0x38, 0xa6, 0x5e, 0x88, 0x4f, 0xa9, 0x8a, 0x30, 0x8b, 0x07, 0x25, 0x3b, 0x1f, 0xb6,
    0x01, 0x0c, 0x81, 0x6c, 0x2b, 0x63, 0xd1, 0xcf, 0xd7, 0xde, 0x1e, 0xb7, 0x6f, 0x15, 0xef, 0xbb,
    0xf2, 0x05, 0xe3, 0xdb, 0xde, 0x11, 0x6a, 0x6d, 0x70, 0xd6, 0x8f, 0x56, 0x54, 0xa3, 0xff, 0x34,
    0x2c, 0x2d, 0x6f, 0xbf, 0xa0, 0xfb, 0xa7, 0x21, 0x81, 0x67, 0x38, 0xfa, 0x62, 0xf7, 0xe3, 0x33,
    0x6e, 0xe0, 0x4c, 0x7f, 0xe4, 0x8e, 0xc7, 0xab, 0xee, 0xc9, 0x4f, 0xe3, 0xeb, 0xa4, 0xec, 0x50,
};

static const uint8_t sMessageEncodingTest0574_ExpectedEncoding[] =
{
    0x30, 0x20, 0x7e, 0xf3, 0x06, 0x0c, 0x79, 0x23, 0xe3, 0x9d, 0xdd, 0x55, 0x74, 0x70, 0x6c, 0x22,
    0x6b, 0xbf, 0xd7, 0x99, 0x38, 0x91, 0x03, 0x63, 0x17, 0x77, 0xf9, 0x41, 0x8c, 0xb3, 0x1c, 0xe0,
    0x1b, 0xa7, 0xc4, 0x76, 0xa7, 0xc7, 0x3d, 0x54, 0x55, 0x81, 0xa9, 0xaf, 0xee, 0x7e, 0xd1, 0xfc,
    0x92, 0x7a, 0x07, 0xb2, 0xaa, 0x2d, 0x8b, 0x04, 0x4d, 0xf1, 0x81, 0x64, 0x38, 0x9f, 0x04, 0x18,
    0x4d, 0xf4, 0xf2, 0xa1, 0x7f, 0x2c, 0x1e, 0x80, 0x06, 0xdc, 0x94, 0xef, 0x43, 0x4a, 0x47, 0x45,
    0xd0, 0x0c, 0x5a, 0x3a, 0x09, 0x8b, 0xc5, 0x36, 0x5c, 0xd4, 0x70, 0x48, 0x2a, 0x4c, 0x42, 0x73,
    0x60, 0x3c, 0xf3, 0x7b, 0x46, 0x4b, 0xa6, 0x22, 0xb0, 0x32, 0x64, 0xf9, 0x26, 0x45, 0xb6, 0xc1,
    0xf4, 0x88, 0x3c, 0x89, 0x42, 0xed, 0x3e, 0xd0, 0x8e, 0x8b, 0x62, 0x64, 0x16, 0x51, 0x55, 0x7f,
    0x0d, 0xf9, 0x87, 0x74, 0x39, 0xaf, 0x14, 0xb4, 0xba, 0x17, 0xc2, 0x51, 0x4e, 0x77, 0x6a, 0x3c,
    0x6c, 0x1c, 0xc2, 0xad, 0xd4, 0x81, 0x8f, 0xcc, 0x40, 0xf6, 0x70, 0x6f, 0x90, 0xf2, 0xfa, 0x3b,
    0x1d, 0x8b, 0xa0, 0xd2, 0x72, 0x3b, 0x4b, 0x98, 0x01, 0x76, 0xac, 0xad, 0x09, 0xb6, 0x5d, 0x15,
    0x1f, 0x83, 0x68, 0xe1, 0x22, 0xee, 0x92, 0x6c, 0xba, 0xec, 0x54, 0xf1, 0x3d, 0xf5, 0x4f, 0xe8,
    0xbf, 0x6f, 0x08, 0x0f, 0x26, 0x5e, 0xdd, 0xfd, 0x84, 0xfa, 0x30, 0x83, 0x77, 0x42, 0xd8, 0x73,
    0xd4, 0x04, 0xbc, 0xab, 0x38, 0x70, 0xb2, 0xaa, 0xb9, 0xf1, 0x66, 0x2d, 0x70, 0xbc, 0x53, 0x75,
    0x34, 0xa7, 0x69, 0x2f, 0x07, 0x16, 0x14, 0xd5, 0x89, 0x2b, 0x3b, 0x51, 0x32, 0x9e, 0x6e, 0xb3,
    0xa7, 0xd8, 0xed, 0x0c, 0xf9, 0x68, 0x3b, 0x86, 0x03, 0x9e, 0x4d, 0xef, 0x80, 0xff, 0x33, 0xfc,
    0x1f, 0x18, 0x5c, 0x58, 0xb4, 0x76, 0xb7, 0xdd, 0xe4, 0x3d, 0x2a, 0x82, 0x08, 0x60, 0xe0, 0x59,
    0xae, 0x2f, 0xcd, 0x46, 0x06, 0x60, 0x41, 0xf7, 0x49, 0x8f, 0x63, 0xbe, 0x77, 0xe9, 0x2c, 0x18,
    0x12, 0xc8, 0x96, 0x14, 0xf0, 0x78, 0x98, 0x93, 0xfa, 0xd1, 0xbd, 0x66, 0x83, 0xf7, 0xaf, 0xd7,
    0x1d, 0x75, 0xf3, 0x41, 0xf0, 0x35, 0x15, 0xf7, 0x50, 0x13, 0xf1, 0x47, 0x65, 0x8b, 0x40, 0xdb,
    0xef, 0x03, 0x04, 0x81, 0xe9, 0xb9, 0x7c, 0x75, 0x74, 0x54, 0x4c, 0x07, 0x0d, 0x2a, 0xaf, 0x7b,
    0x02, 0x58, 0x76, 0x92, 0x49, 0x1a, 0x9a, 0x8a, 0x10, 0x2f, 0xf3, 0x70, 0xc2, 0x95, 0x3f, 0x34,
    0xc7, 0xc2, 0xe0, 0x57, 0x70, 0xbe, 0x47, 0xaa, 0x4b, 0xcf, 0x56, 0x1f, 0xa2, 0x27, 0xc1, 0xdb,
    0x8c, 0xf7, 0xbe, 0xdb, 0xbb, 0x5b, 0x14, 0xba, 0x20, 0x25, 0xde, 0x20, 0xa1, 0xb6, 0xee, 0x31,
    0x8d, 0x61, 0xcb, 0x78, 0x52, 0xc1, 0x97, 0x4e, 0x15, 0x41, 0x45, 0xfa, 0xf2, 0x4b, 0x4a, 0x05,
    0xcd, 0x8b, 0x0f, 0x18, 0x87, 0x4a, 0xf0, 0xbc, 0xa7, 0xdc, 0xbf, 0x75, 0x0d, 0xf7, 0x61, 0xd0,
    0x60, 0x87, 0x2a, 0xaa, 0x34, 0x8f, 0x42, 0xd3, 0xf8, 0xc5, 0x5f, 0x8a, 0x39, 0x8b, 0x4b, 0x98,
    0xef, 0xbb, 0x07, 0x04, 0xb4, 0x3c, 0x66, 0x68, 0x4c, 0x0c, 0x54, 0x7c, 0xc4, 0xdd, 0x70, 0x5e,
    0x81, 0x55, 0xac, 0x9c, 0xea, 0x74, 0x0b, 0x30, 0x02, 0xd0, 0xfb, 0xec, 0xe6, 0x3a, 0x5f, 0x67,
    0x8a, 0x5a, 0x90, 0x26, 0xdc, 0xa1, 0x9b, 0x7b, 0xba, 0xde, 0xdb, 0xee, 0x92, 0x62, 0x9a, 0x09,
    0x6b, 0x9b, 0xb7, 0xda, 0xe9, 0xd7, 0xe0, 0x37, 0xa0, 0xd8, 0x48, 0x7d, 0x23, 0xd4, 0xd7, 0x04,
    0x57, 0xd0, 0x72, 0xda, 0xdb, 0xef, 0x90, 0x2f, 0xa4, 0x7a, 0xda, 0xe8, 0x83, 0x91, 0x19, 0xc4,
    0x27, 0x2f, 0x84, 0x35, 0x21, 0xa8, 0x67, 0x82, 0x67, 0xbe, 0x65, 0xd6, 0x30, 0xad, 0x71, 0x24,
    0x28, 0x73, 0x5f, 0x7d, 0xe3, 0x59, 0xb8, 0x76, 0x76, 0xec, 0xda, 0x87, 0x7c, 0x1e, 0xa7, 0x31,
    0xf0, 0xb1, 0x51, 0x51, 0x1d, 0x81, 0x66, 0x51, 0xef, 0x8a, 0x5a, 0xdd, 0x9e, 0xe2, 0xcf, 0x23,
    0x82, 0x83, 0xd2, 0xd1, 0x18, 0xc3, 0xb4, 0xb7, 0xa2, 0x4e, 0x31, 0x75, 0x3e, 0xd8, 0xf1, 0x0c,
    0xe9, 0xf5, 0x31, 0x8d, 0xb5, 0x91, 0xfb, 0x28, 0xa2, 0xfe, 0x7e, 0x23, 0xe8, 0x83, 0xb0, 0x11,
    0xbe, 0x3d, 0xeb, 0x87, 0xd5, 0xf2, 0xf2, 0x9f, 0x8b, 0xf6, 0xa0, 0xea, 0x46, 0x8a, 0x41, 0x2f,
    0x8a, 0x6a, 0xa4, 0x4a, 0x47, 0x63, 0x92, 0x7b, 0xa8, 0x9f, 0xf8, 0x73, 0x4f, 0x98, 0x51, 0x8a,
    0xe7, 0x1c, 0x3d, 0xa2, 0x86, 0x6a, 0x85, 0x02, 0xc9, 0x92, 0x4e, 0xae, 0x60, 0xc0, 0x2e, 0xf0,
    0x8b, 0x54, 0x89, 0x62, 0x31, 0x85, 0x89, 0x3a, 0x97, 0x9f, 0x60, 0x18, 0x7a, 0xe8, 0xc8, 0x87,
    0xeb, 0x5e, 0xae, 0xc3, 0xa5, 0x46, 0x6a, 0xc1, 0x0c, 0xa7, 0x6d, 0xd4, 0xa4, 0x0c, 0x97, 0x77,
    0x8d, 0xcc, 0x66, 0xcf, 0x39, 0x2b, 0x29, 0xf6, 0xa4, 0xd3, 0xf0, 0xc3, 0x04, 0x79, 0x4f, 0x03,
    0x2b, 0x89, 0x9e, 0x71, 0x6d, 0x6e, 0xf6, 0x9e, 0x16, 0x8a, 0xc1, 0xf6, 0x13, 0xfa, 0xf4, 0x90,
    0x59, 0x1a, 0x26, 0xd8, 0x3d, 0x48, 0xd0, 0x4e, 0x9b, 0x8e, 0x2f, 0x21, 0xf3, 0xa3, 0x77, 0xf2,
    0x4a, 0xd6, 0xb4, 0x57, 0xc3, 0xb1, 0xe1, 0xd0, 0x8a, 0xe7, 0x31, 0xec, 0x12, 0xa5, 0x55, 0x37,
    0x52, 0x4c, 0x8c, 0x2a, 0x53, 0xa3, 0xb1, 0x96, 0x8c, 0x51, 0x66, 0x4f, 0x99, 0xb9, 0x44, 0x35,
    0xc8, 0xae, 0x59, 0x02, 0x51, 0x84, 0x53, 0x63, 0x9f, 0x7e, 0xcc, 0xba, 0x4d, 0x65, 0xe9, 0x30,
    0xb9, 0x81, 0x50, 0x87, 0x15, 0x7e, 0x07, 0xcb, 0xf1, 0x46, 0x5b, 0x8d, 0xd6, 0x91, 0xb6, 0x47,
    0x54, 0x76, 0xe4, 0x02, 0xe0, 0xbd, 0xe7, 0xa7, 0x4e, 0xfc, 0xea, 0x87, 0x22, 0xd7, 0xd5, 0x99,
    0x3b, 0xd5, 0x5e, 0x07, 0x5d, 0x9d, 0x93, 0x3d, 0xc9, 0x48, 0x38, 0xfc, 0x63, 0xbe, 0x5f, 0xa1,
    0x4a, 0x73, 0x67, 0xfd, 0x5b, 0xdb, 0x81, 0x01, 0xd0, 0x12, 0xc0, 0x55, 0x12, 0x06, 0xa6, 0x9e,
    0x55, 0x52, 0x73, 0x00, 0x9b, 0xd4, 0xa5, 0x9b, 0x07, 0x62, 0x7d, 0x89, 0xc0, 0x95, 0x71, 0x22,
    0xe6, 0x18, 0x1d, 0x8a, 0x0f, 0xe2, 0x0d, 0x92, 0xec, 0x5b, 0x2c, 0x94, 0xf7, 0x49, 0x07, 0x32,
    0x0a, 0xfd, 0x1c, 0x21, 0x5d, 0xb6, 0xf0, 0x39, 0xa6, 0xe5, 0xba, 0x0e, 0xd1, 0x42, 0xae, 0xaf,
    0xfc, 0xcf, 0x81, 0xd6, 0x7f, 0xb9, 0x19, 0x9b, 0x42, 0xdc, 0x35, 0x33, 0x0e, 0xc0, 0xa3, 0x72,
    0x2b, 0x9d, 0x3f, 0xe9, 0x87, 0x89, 0x95, 0xca, 0xb1, 0x2a, 0x18, 0x8c, 0x86, 0xfa, 0x9f, 0x5b,
    0x77, 0xad, 0x86, 0x9d, 0x49, 0x34, 0x20, 0xdc, 0x5a, 0xfe, 0xaf, 0xfa, 0x21, 0x77, 0xf7, 0x42,
    0xa9, 0x77, 0xd0, 0x57, 0x53, 0xc6, 0x4d, 0x17, 0x36, 0xb3, 0xb3, 0x53, 0x91, 0x60, 0x33, 0x06,
    0x13, 0x8f, 0x0a, 0xaf, 0xc5, 0x6e, 0x25, 0x99, 0xb0, 0x98, 0xa2, 0x47, 0xd8, 0x39, 0x96, 0xe7,
    0x1a, 0xf7, 0x55, 0x67, 0x88, 0xc7, 0x85, 0x40, 0xc5, 0x1a, 0x83, 0x3b, 0xc5, 0x1f, 0xcc, 0xfb,
    0x29, 0x71, 0x7c, 0xf4, 0x1b, 0x56, 0x40, 0x92, 0x52, 0x89, 0xa8, 0xd5, 0xde, 0xf9, 0xc8, 0x9a,
    0x4f, 0x45, 0xb4, 0x6b, 0xa8, 0xa7, 0x2c, 0xf0, 0x5e, 0x08, 0xcd, 0x68, 0x3f, 0xff, 0x7a, 0xcc,
    0xa3, 0xcb, 0xa9, 0x9e, 0xbc, 0x10, 0xf0, 0x71, 0xa7, 0x16, 0xc8, 0x5d, 0xcb, 0xa2, 0x86, 0xf7,
    0x79, 0xfa, 0xf5, 0x2c, 0xe7, 0xec, 0x45, 0x5c, 0x60, 0x99, 0xe2, 0x5b, 0x46, 0x61, 0x3a, 0x6a,
    0x44, 0x7d, 0x79, 0xac, 0xa4, 0xa4, 0x19, 0xb4,
};

static const MessageEncodingTestVector sMessageEncodingTest0574 =
{
    {
        0x18B4300000000001,
        0x18B4300000000002,
        0x0C06F37E,
        0,
        0x2379,
        kWeaveMessageVersion_V2,
        kWeaveEncryptionType_AES128EAX128,
        0,
        NULL,
        NULL
    },
    (const WeaveEncryptionKey *)&sMessageEncodingTest0574_EncryptionKey,
    sMessageEncodingTest0574_Payload,
    sizeof(sMessageEncodingTest0574_Payload),
    sMessageEncodingTest0574_ExpectedEncoding,
    sizeof(sMessageEncodingTest0574_ExpectedEncoding)
};


static const size_t sNumMessageEncodingTestVectors = 575;

static const MessageEncodingTestVector * sMessageEncodingTestVectors[] =
{
    &sMessageEncodingTest0000,
    &sMessageEncodingTest0001,
    &sMessageEncodingTest0002,
    &sMessageEncodingTest0003,
    &sMessageEncodingTest0004,
    &sMessageEncodingTest0005,
    &sMessageEncodingTest0006,
    &sMessageEncodingTest0007,
    &sMessageEncodingTest0008,
    &sMessageEncodingTest0009,
    &sMessageEncodingTest0010,
    &sMessageEncodingTest0011,
    &sMessageEncodingTest0012,
    &sMessageEncodingTest0013,
    &sMessageEncodingTest0014,
    &sMessageEncodingTest0015,
    &sMessageEncodingTest0016,
    &sMessageEncodingTest0017,
    &sMessageEncodingTest0018,
    &sMessageEncodingTest0019,
    &sMessageEncodingTest0020,
    &sMessageEncodingTest0021,
    &sMessageEncodingTest0022,
    &sMessageEncodingTest0023,
    &sMessageEncodingTest0024,
    &sMessageEncodingTest0025,
    &sMessageEncodingTest0026,
    &sMessageEncodingTest0027,
    &sMessageEncodingTest0028,
    &sMessageEncodingTest0029,
    &sMessageEncodingTest0030,
    &sMessageEncodingTest0031,
    &sMessageEncodingTest0032,
    &sMessageEncodingTest0033,
    &sMessageEncodingTest0034,
    &sMessageEncodingTest0035,
    &sMessageEncodingTest0036,
    &sMessageEncodingTest0037,
    &sMessageEncodingTest0038,
    &sMessageEncodingTest0039,
    &sMessageEncodingTest0040,
    &sMessageEncodingTest0041,
    &sMessageEncodingTest0042,
    &sMessageEncodingTest0043,
    &sMessageEncodingTest0044,
    &sMessageEncodingTest0045,
    &sMessageEncodingTest0046,
    &sMessageEncodingTest0047,
    &sMessageEncodingTest0048,
    &sMessageEncodingTest0049,
    &sMessageEncodingTest0050,
    &sMessageEncodingTest0051,
    &sMessageEncodingTest0052,
    &sMessageEncodingTest0053,
    &sMessageEncodingTest0054,
    &sMessageEncodingTest0055,
    &sMessageEncodingTest0056,
    &sMessageEncodingTest0057,
    &sMessageEncodingTest0058,
    &sMessageEncodingTest0059,
    &sMessageEncodingTest0060,
    &sMessageEncodingTest0061,
    &sMessageEncodingTest0062,
    &sMessageEncodingTest0063,
    &sMessageEncodingTest0064,
    &sMessageEncodingTest0065,
    &sMessageEncodingTest0066,
    &sMessageEncodingTest0067,
    &sMessageEncodingTest0068,
    &sMessageEncodingTest0069,
    &sMessageEncodingTest0070,
    &sMessageEncodingTest0071,
    &sMessageEncodingTest0072,
    &sMessageEncodingTest0073,
    &sMessageEncodingTest0074,
    &sMessageEncodingTest0075,
    &sMessageEncodingTest0076,
    &sMessageEncodingTest0077,
    &sMessageEncodingTest0078,
    &sMessageEncodingTest0079,
    &sMessageEncodingTest0080,
    &sMessageEncodingTest0081,
    &sMessageEncodingTest0082,
    &sMessageEncodingTest0083,
    &sMessageEncodingTest0084,
    &sMessageEncodingTest0085,
    &sMessageEncodingTest0086,
    &sMessageEncodingTest0087,
    &sMessageEncodingTest0088,
    &sMessageEncodingTest0089,
    &sMessageEncodingTest0090,
    &sMessageEncodingTest0091,
    &sMessageEncodingTest0092,
    &sMessageEncodingTest0093,
    &sMessageEncodingTest0094,
    &sMessageEncodingTest0095,
    &sMessageEncodingTest0096,
    &sMessageEncodingTest0097,
    &sMessageEncodingTest0098,
    &sMessageEncodingTest0099,
    &sMessageEncodingTest0100,
    &sMessageEncodingTest0101,
    &sMessageEncodingTest0102,
    &sMessageEncodingTest0103,
    &sMessageEncodingTest0104,
    &sMessageEncodingTest0105,
    &sMessageEncodingTest0106,
    &sMessageEncodingTest0107,
    &sMessageEncodingTest0108,
    &sMessageEncodingTest0109,
    &sMessageEncodingTest0110,
    &sMessageEncodingTest0111,
    &sMessageEncodingTest0112,
    &sMessageEncodingTest0113,
    &sMessageEncodingTest0114,
    &sMessageEncodingTest0115,
    &sMessageEncodingTest0116,
    &sMessageEncodingTest0117,
    &sMessageEncodingTest0118,
    &sMessageEncodingTest0119,
    &sMessageEncodingTest0120,
    &sMessageEncodingTest0121,
    &sMessageEncodingTest0122,
    &sMessageEncodingTest0123,
    &sMessageEncodingTest0124,
    &sMessageEncodingTest0125,
    &sMessageEncodingTest0126,
    &sMessageEncodingTest0127,
    &sMessageEncodingTest0128,
    &sMessageEncodingTest0129,
    &sMessageEncodingTest0130,
    &sMessageEncodingTest0131,
    &sMessageEncodingTest0132,
    &sMessageEncodingTest0133,
    &sMessageEncodingTest0134,
    &sMessageEncodingTest0135,
    &sMessageEncodingTest0136,
    &sMessageEncodingTest0137,
    &sMessageEncodingTest0138,
    &sMessageEncodingTest0139,
    &sMessageEncodingTest0140,
    &sMessageEncodingTest0141,
    &sMessageEncodingTest0142,
    &sMessageEncodingTest0143,
    &sMessageEncodingTest0144,
    &sMessageEncodingTest0145,
    &sMessageEncodingTest0146,
    &sMessageEncodingTest0147,
    &sMessageEncodingTest0148,
    &sMessageEncodingTest0149,
    &sMessageEncodingTest0150,
    &sMessageEncodingTest0151,
    &sMessageEncodingTest0152,
    &sMessageEncodingTest0153,
    &sMessageEncodingTest0154,
    &sMessageEncodingTest0155,
    &sMessageEncodingTest0156,
    &sMessageEncodingTest0157,
    &sMessageEncodingTest0158,
    &sMessageEncodingTest0159,
    &sMessageEncodingTest0160,
    &sMessageEncodingTest0161,
    &sMessageEncodingTest0162,
    &sMessageEncodingTest0163,
    &sMessageEncodingTest0164,
    &sMessageEncodingTest0165,
    &sMessageEncodingTest0166,
    &sMessageEncodingTest0167,
    &sMessageEncodingTest0168,
    &sMessageEncodingTest0169,
    &sMessageEncodingTest0170,
    &sMessageEncodingTest0171,
    &sMessageEncodingTest0172,
    &sMessageEncodingTest0173,
    &sMessageEncodingTest0174,
    &sMessageEncodingTest0175,
    &sMessageEncodingTest0176,
    &sMessageEncodingTest0177,
    &sMessageEncodingTest0178,
    &sMessageEncodingTest0179,
    &sMessageEncodingTest0180,
    &sMessageEncodingTest0181,
    &sMessageEncodingTest0182,
    &sMessageEncodingTest0183,
    &sMessageEncodingTest0184,
    &sMessageEncodingTest0185,
    &sMessageEncodingTest0186,
    &sMessageEncodingTest0187,
    &sMessageEncodingTest0188,
    &sMessageEncodingTest0189,
    &sMessageEncodingTest0190,
    &sMessageEncodingTest0191,
    &sMessageEncodingTest0192,
    &sMessageEncodingTest0193,
    &sMessageEncodingTest0194,
    &sMessageEncodingTest0195,
    &sMessageEncodingTest0196,
    &sMessageEncodingTest0197,
    &sMessageEncodingTest0198,
    &sMessageEncodingTest0199,
    &sMessageEncodingTest0200,
    &sMessageEncodingTest0201,
    &sMessageEncodingTest0202,
    &sMessageEncodingTest0203,
    &sMessageEncodingTest0204,
    &sMessageEncodingTest0205,
    &sMessageEncodingTest0206,
    &sMessageEncodingTest0207,
    &sMessageEncodingTest0208,
    &sMessageEncodingTest0209,
    &sMessageEncodingTest0210,
    &sMessageEncodingTest0211,
    &sMessageEncodingTest0212,
    &sMessageEncodingTest0213,
    &sMessageEncodingTest0214,
    &sMessageEncodingTest0215,
    &sMessageEncodingTest0216,
    &sMessageEncodingTest0217,
    &sMessageEncodingTest0218,
    &sMessageEncodingTest0219,
    &sMessageEncodingTest0220,
    &sMessageEncodingTest0221,
    &sMessageEncodingTest0222,
    &sMessageEncodingTest0223,
    &sMessageEncodingTest0224,
    &sMessageEncodingTest0225,
    &sMessageEncodingTest0226,
    &sMessageEncodingTest0227,
    &sMessageEncodingTest0228,
    &sMessageEncodingTest0229,
    &sMessageEncodingTest0230,
    &sMessageEncodingTest0231,
    &sMessageEncodingTest0232,
    &sMessageEncodingTest0233,
    &sMessageEncodingTest0234,
    &sMessageEncodingTest0235,
    &sMessageEncodingTest0236,
    &sMessageEncodingTest0237,
    &sMessageEncodingTest0238,
    &sMessageEncodingTest0239,
    &sMessageEncodingTest0240,
    &sMessageEncodingTest0241,
    &sMessageEncodingTest0242,
    &sMessageEncodingTest0243,
    &sMessageEncodingTest0244,
    &sMessageEncodingTest0245,
    &sMessageEncodingTest0246,
    &sMessageEncodingTest0247,
    &sMessageEncodingTest0248,
    &sMessageEncodingTest0249,
    &sMessageEncodingTest0250,
    &sMessageEncodingTest0251,
    &sMessageEncodingTest0252,
    &sMessageEncodingTest0253,
    &sMessageEncodingTest0254,
    &sMessageEncodingTest0255,
    &sMessageEncodingTest0256,
    &sMessageEncodingTest0257,
    &sMessageEncodingTest0258,
    &sMessageEncodingTest0259,
    &sMessageEncodingTest0260,
    &sMessageEncodingTest0261,
    &sMessageEncodingTest0262,
    &sMessageEncodingTest0263,
    &sMessageEncodingTest0264,
    &sMessageEncodingTest0265,
    &sMessageEncodingTest0266,
    &sMessageEncodingTest0267,
    &sMessageEncodingTest0268,
    &sMessageEncodingTest0269,
    &sMessageEncodingTest0270,
    &sMessageEncodingTest0271,
    &sMessageEncodingTest0272,
    &sMessageEncodingTest0273,
    &sMessageEncodingTest0274,
    &sMessageEncodingTest0275,
    &sMessageEncodingTest0276,
    &sMessageEncodingTest0277,
    &sMessageEncodingTest0278,
    &sMessageEncodingTest0279,
    &sMessageEncodingTest0280,
    &sMessageEncodingTest0281,
    &sMessageEncodingTest0282,
    &sMessageEncodingTest0283,
    &sMessageEncodingTest0284,
    &sMessageEncodingTest0285,
    &sMessageEncodingTest0286,
    &sMessageEncodingTest0287,
    &sMessageEncodingTest0288,
    &sMessageEncodingTest0289,
    &sMessageEncodingTest0290,
    &sMessageEncodingTest0291,
    &sMessageEncodingTest0292,
    &sMessageEncodingTest0293,
    &sMessageEncodingTest0294,
    &sMessageEncodingTest0295,
    &sMessageEncodingTest0296,
    &sMessageEncodingTest0297,
    &sMessageEncodingTest0298,
    &sMessageEncodingTest0299,
    &sMessageEncodingTest0300,
    &sMessageEncodingTest0301,
    &sMessageEncodingTest0302,
    &sMessageEncodingTest0303,
    &sMessageEncodingTest0304,
    &sMessageEncodingTest0305,
    &sMessageEncodingTest0306,
    &sMessageEncodingTest0307,
    &sMessageEncodingTest0308,
    &sMessageEncodingTest0309,
    &sMessageEncodingTest0310,
    &sMessageEncodingTest0311,
    &sMessageEncodingTest0312,
    &sMessageEncodingTest0313,
    &sMessageEncodingTest0314,
    &sMessageEncodingTest0315,
    &sMessageEncodingTest0316,
    &sMessageEncodingTest0317,
    &sMessageEncodingTest0318,
    &sMessageEncodingTest0319,
    &sMessageEncodingTest0320,
    &sMessageEncodingTest0321,
    &sMessageEncodingTest0322,
    &sMessageEncodingTest0323,
    &sMessageEncodingTest0324,
    &sMessageEncodingTest0325,
    &sMessageEncodingTest0326,
    &sMessageEncodingTest0327,
    &sMessageEncodingTest0328,
    &sMessageEncodingTest0329,
    &sMessageEncodingTest0330,
    &sMessageEncodingTest0331,
    &sMessageEncodingTest0332,
    &sMessageEncodingTest0333,
    &sMessageEncodingTest0334,
    &sMessageEncodingTest0335,
    &sMessageEncodingTest0336,
    &sMessageEncodingTest0337,
    &sMessageEncodingTest0338,
    &sMessageEncodingTest0339,
    &sMessageEncodingTest0340,
    &sMessageEncodingTest0341,
    &sMessageEncodingTest0342,
    &sMessageEncodingTest0343,
    &sMessageEncodingTest0344,
    &sMessageEncodingTest0345,
    &sMessageEncodingTest0346,
    &sMessageEncodingTest0347,
    &sMessageEncodingTest0348,
    &sMessageEncodingTest0349,
    &sMessageEncodingTest0350,
    &sMessageEncodingTest0351,
    &sMessageEncodingTest0352,
    &sMessageEncodingTest0353,
    &sMessageEncodingTest0354,
    &sMessageEncodingTest0355,
    &sMessageEncodingTest0356,
    &sMessageEncodingTest0357,
    &sMessageEncodingTest0358,
    &sMessageEncodingTest0359,
    &sMessageEncodingTest0360,
    &sMessageEncodingTest0361,
    &sMessageEncodingTest0362,
    &sMessageEncodingTest0363,
    &sMessageEncodingTest0364,
    &sMessageEncodingTest0365,
    &sMessageEncodingTest0366,
    &sMessageEncodingTest0367,
    &sMessageEncodingTest0368,
    &sMessageEncodingTest0369,
    &sMessageEncodingTest0370,
    &sMessageEncodingTest0371,
    &sMessageEncodingTest0372,
    &sMessageEncodingTest0373,
    &sMessageEncodingTest0374,
    &sMessageEncodingTest0375,
    &sMessageEncodingTest0376,
    &sMessageEncodingTest0377,
    &sMessageEncodingTest0378,
    &sMessageEncodingTest0379,
    &sMessageEncodingTest0380,
    &sMessageEncodingTest0381,
    &sMessageEncodingTest0382,
    &sMessageEncodingTest0383,
    &sMessageEncodingTest0384,
    &sMessageEncodingTest0385,
    &sMessageEncodingTest0386,
    &sMessageEncodingTest0387,
    &sMessageEncodingTest0388,
    &sMessageEncodingTest0389,
    &sMessageEncodingTest0390,
    &sMessageEncodingTest0391,
    &sMessageEncodingTest0392,
    &sMessageEncodingTest0393,
    &sMessageEncodingTest0394,
    &sMessageEncodingTest0395,
    &sMessageEncodingTest0396,
    &sMessageEncodingTest0397,
    &sMessageEncodingTest0398,
    &sMessageEncodingTest0399,
    &sMessageEncodingTest0400,
    &sMessageEncodingTest0401,
    &sMessageEncodingTest0402,
    &sMessageEncodingTest0403,
    &sMessageEncodingTest0404,
    &sMessageEncodingTest0405,
    &sMessageEncodingTest0406,
    &sMessageEncodingTest0407,
    &sMessageEncodingTest0408,
    &sMessageEncodingTest0409,
    &sMessageEncodingTest0410,
    &sMessageEncodingTest0411,
    &sMessageEncodingTest0412,
    &sMessageEncodingTest0413,
    &sMessageEncodingTest0414,
    &sMessageEncodingTest0415,
    &sMessageEncodingTest0416,
    &sMessageEncodingTest0417,
    &sMessageEncodingTest0418,
    &sMessageEncodingTest0419,
    &sMessageEncodingTest0420,
    &sMessageEncodingTest0421,
    &sMessageEncodingTest0422,
    &sMessageEncodingTest0423,
    &sMessageEncodingTest0424,
    &sMessageEncodingTest0425,
    &sMessageEncodingTest0426,
    &sMessageEncodingTest0427,
    &sMessageEncodingTest0428,
    &sMessageEncodingTest0429,
    &sMessageEncodingTest0430,
    &sMessageEncodingTest0431,
    &sMessageEncodingTest0432,
    &sMessageEncodingTest0433,
    &sMessageEncodingTest0434,
    &sMessageEncodingTest0435,
    &sMessageEncodingTest0436,
    &sMessageEncodingTest0437,
    &sMessageEncodingTest0438,
    &sMessageEncodingTest0439,
    &sMessageEncodingTest0440,
    &sMessageEncodingTest0441,
    &sMessageEncodingTest0442,
    &sMessageEncodingTest0443,
    &sMessageEncodingTest0444,
    &sMessageEncodingTest0445,
    &sMessageEncodingTest0446,
    &sMessageEncodingTest0447,
    &sMessageEncodingTest0448,
    &sMessageEncodingTest0449,
    &sMessageEncodingTest0450,
    &sMessageEncodingTest0451,
    &sMessageEncodingTest0452,
    &sMessageEncodingTest0453,
    &sMessageEncodingTest0454,
    &sMessageEncodingTest0455,
    &sMessageEncodingTest0456,
    &sMessageEncodingTest0457,
    &sMessageEncodingTest0458,
    &sMessageEncodingTest0459,
    &sMessageEncodingTest0460,
    &sMessageEncodingTest0461,
    &sMessageEncodingTest0462,
    &sMessageEncodingTest0463,
    &sMessageEncodingTest0464,
    &sMessageEncodingTest0465,
    &sMessageEncodingTest0466,
    &sMessageEncodingTest0467,
    &sMessageEncodingTest0468,
    &sMessageEncodingTest0469,
    &sMessageEncodingTest0470,
    &sMessageEncodingTest0471,
    &sMessageEncodingTest0472,
    &sMessageEncodingTest0473,
    &sMessageEncodingTest0474,
    &sMessageEncodingTest0475,
    &sMessageEncodingTest0476,
    &sMessageEncodingTest0477,
    &sMessageEncodingTest0478,
    &sMessageEncodingTest0479,
    &sMessageEncodingTest0480,
    &sMessageEncodingTest0481,
    &sMessageEncodingTest0482,
    &sMessageEncodingTest0483,
    &sMessageEncodingTest0484,
    &sMessageEncodingTest0485,
    &sMessageEncodingTest0486,
    &sMessageEncodingTest0487,
    &sMessageEncodingTest0488,
    &sMessageEncodingTest0489,
    &sMessageEncodingTest0490,
    &sMessageEncodingTest0491,
    &sMessageEncodingTest0492,
    &sMessageEncodingTest0493,
    &sMessageEncodingTest0494,
    &sMessageEncodingTest0495,
    &sMessageEncodingTest0496,
    &sMessageEncodingTest0497,
    &sMessageEncodingTest0498,
    &sMessageEncodingTest0499,
    &sMessageEncodingTest0500,
    &sMessageEncodingTest0501,
    &sMessageEncodingTest0502,
    &sMessageEncodingTest0503,
    &sMessageEncodingTest0504,
    &sMessageEncodingTest0505,
    &sMessageEncodingTest0506,
    &sMessageEncodingTest0507,
    &sMessageEncodingTest0508,
    &sMessageEncodingTest0509,
    &sMessageEncodingTest0510,
    &sMessageEncodingTest0511,
    &sMessageEncodingTest0512,
    &sMessageEncodingTest0513,
    &sMessageEncodingTest0514,
    &sMessageEncodingTest0515,
    &sMessageEncodingTest0516,
    &sMessageEncodingTest0517,
    &sMessageEncodingTest0518,
    &sMessageEncodingTest0519,
    &sMessageEncodingTest0520,
    &sMessageEncodingTest0521,
    &sMessageEncodingTest0522,
    &sMessageEncodingTest0523,
    &sMessageEncodingTest0524,
    &sMessageEncodingTest0525,
    &sMessageEncodingTest0526,
    &sMessageEncodingTest0527,
    &sMessageEncodingTest0528,
    &sMessageEncodingTest0529,
    &sMessageEncodingTest0530,
    &sMessageEncodingTest0531,
    &sMessageEncodingTest0532,
    &sMessageEncodingTest0533,
    &sMessageEncodingTest0534,
    &sMessageEncodingTest0535,
    &sMessageEncodingTest0536,
    &sMessageEncodingTest0537,
    &sMessageEncodingTest0538,
    &sMessageEncodingTest0539,
    &sMessageEncodingTest0540,
    &sMessageEncodingTest0541,
    &sMessageEncodingTest0542,
    &sMessageEncodingTest0543,
    &sMessageEncodingTest0544,
    &sMessageEncodingTest0545,
    &sMessageEncodingTest0546,
    &sMessageEncodingTest0547,
    &sMessageEncodingTest0548,
    &sMessageEncodingTest0549,
    &sMessageEncodingTest0550,
    &sMessageEncodingTest0551,
    &sMessageEncodingTest0552,
    &sMessageEncodingTest0553,
    &sMessageEncodingTest0554,
    &sMessageEncodingTest0555,
    &sMessageEncodingTest0556,
    &sMessageEncodingTest0557,
    &sMessageEncodingTest0558,
    &sMessageEncodingTest0559,
    &sMessageEncodingTest0560,
    &sMessageEncodingTest0561,
    &sMessageEncodingTest0562,
    &sMessageEncodingTest0563,
    &sMessageEncodingTest0564,
    &sMessageEncodingTest0565,
    &sMessageEncodingTest0566,
    &sMessageEncodingTest0567,
    &sMessageEncodingTest0568,
    &sMessageEncodingTest0569,
    &sMessageEncodingTest0570,
    &sMessageEncodingTest0571,
    &sMessageEncodingTest0572,
    &sMessageEncodingTest0573,
    &sMessageEncodingTest0574,
};
